
003_LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000650c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080066ac  080066ac  000076ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006838  08006838  00008018  2**0
                  CONTENTS
  4 .ARM          00000008  08006838  08006838  00007838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006840  08006840  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006840  08006840  00007840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006844  08006844  00007844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08006848  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014480  20000018  08006860  00008018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014498  08006860  00008498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ec0  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312b  00000000  00000000  0001bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  0001f038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f2f  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d24  00000000  00000000  0002132f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015db7  00000000  00000000  0003a053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a56c  00000000  00000000  0004fe0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea376  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005298  00000000  00000000  000ea3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b2  00000000  00000000  000ef654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006694 	.word	0x08006694

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	08006694 	.word	0x08006694

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ec4 	.word	0x20012ec4

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fac3 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f86f 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8d9 	bl	8000728 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000576:	4b2f      	ldr	r3, [pc, #188]	@ (8000634 <main+0xd0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a2e      	ldr	r2, [pc, #184]	@ (8000634 <main+0xd0>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000582:	f003 fff3 	bl	800456c <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000586:	f005 fabb 	bl	8005b00 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler,"LED_green_task",200,NULL,2,&task1_handle);
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2302      	movs	r3, #2
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	22c8      	movs	r2, #200	@ 0xc8
 8000598:	4927      	ldr	r1, [pc, #156]	@ (8000638 <main+0xd4>)
 800059a:	4828      	ldr	r0, [pc, #160]	@ (800063c <main+0xd8>)
 800059c:	f002 f898 	bl	80026d0 <xTaskCreate>
 80005a0:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d00b      	beq.n	80005c0 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005ac:	f383 8811 	msr	BASEPRI, r3
 80005b0:	f3bf 8f6f 	isb	sy
 80005b4:	f3bf 8f4f 	dsb	sy
 80005b8:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x58>

  status = xTaskCreate(led_red_handler,"LED_red_task",200,NULL,2,&task2_handle);
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22c8      	movs	r2, #200	@ 0xc8
 80005ce:	491c      	ldr	r1, [pc, #112]	@ (8000640 <main+0xdc>)
 80005d0:	481c      	ldr	r0, [pc, #112]	@ (8000644 <main+0xe0>)
 80005d2:	f002 f87d 	bl	80026d0 <xTaskCreate>
 80005d6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00b      	beq.n	80005f6 <main+0x92>
        __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	617b      	str	r3, [r7, #20]
    }
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	e7fd      	b.n	80005f2 <main+0x8e>

  status = xTaskCreate(led_orange_handler,"LED_orange_task",200,NULL,2,&task3_handle);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2302      	movs	r3, #2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	22c8      	movs	r2, #200	@ 0xc8
 8000602:	4911      	ldr	r1, [pc, #68]	@ (8000648 <main+0xe4>)
 8000604:	4811      	ldr	r0, [pc, #68]	@ (800064c <main+0xe8>)
 8000606:	f002 f863 	bl	80026d0 <xTaskCreate>
 800060a:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d00b      	beq.n	800062a <main+0xc6>
        __asm volatile
 8000612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000616:	f383 8811 	msr	BASEPRI, r3
 800061a:	f3bf 8f6f 	isb	sy
 800061e:	f3bf 8f4f 	dsb	sy
 8000622:	613b      	str	r3, [r7, #16]
    }
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	e7fd      	b.n	8000626 <main+0xc2>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800062a:	f002 fa15 	bl	8002a58 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <main+0xca>
 8000632:	bf00      	nop
 8000634:	e0001000 	.word	0xe0001000
 8000638:	080066ac 	.word	0x080066ac
 800063c:	08000825 	.word	0x08000825
 8000640:	080066bc 	.word	0x080066bc
 8000644:	0800087d 	.word	0x0800087d
 8000648:	080066cc 	.word	0x080066cc
 800064c:	08000851 	.word	0x08000851

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 ffde 	bl	8006620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a28      	ldr	r2, [pc, #160]	@ (8000720 <SystemClock_Config+0xd0>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <SystemClock_Config+0xd4>)
 800069e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <SystemClock_Config+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c4:	2310      	movs	r3, #16
 80006c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d2:	2307      	movs	r3, #7
 80006d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fd06 	bl	80010ec <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006e6:	f000 f8f9 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f000 ff68 	bl	80015dc <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000712:	f000 f8e3 	bl	80008dc <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	@ 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	@ 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b35      	ldr	r3, [pc, #212]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a34      	ldr	r2, [pc, #208]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a2d      	ldr	r2, [pc, #180]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b2b      	ldr	r3, [pc, #172]	@ (8000818 <MX_GPIO_Init+0xf0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <MX_GPIO_Init+0xf0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a26      	ldr	r2, [pc, #152]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a1f      	ldr	r2, [pc, #124]	@ (8000818 <MX_GPIO_Init+0xf0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <MX_GPIO_Init+0xf0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	21e0      	movs	r1, #224	@ 0xe0
 80007b2:	481a      	ldr	r0, [pc, #104]	@ (800081c <MX_GPIO_Init+0xf4>)
 80007b4:	f000 fc46 	bl	8001044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4814      	ldr	r0, [pc, #80]	@ (8000820 <MX_GPIO_Init+0xf8>)
 80007d0:	f000 fab4 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d4:	230c      	movs	r3, #12
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e4:	2307      	movs	r3, #7
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	480b      	ldr	r0, [pc, #44]	@ (800081c <MX_GPIO_Init+0xf4>)
 80007f0:	f000 faa4 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 80007f4:	23e0      	movs	r3, #224	@ 0xe0
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4804      	ldr	r0, [pc, #16]	@ (800081c <MX_GPIO_Init+0xf4>)
 800080c:	f000 fa96 	bl	8000d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	@ 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000
 8000820:	40020800 	.word	0x40020800

08000824 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 800082c:	4806      	ldr	r0, [pc, #24]	@ (8000848 <led_green_handler+0x24>)
 800082e:	f005 fe77 	bl	8006520 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 8000832:	2120      	movs	r1, #32
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <led_green_handler+0x28>)
 8000836:	f000 fc1e 	bl	8001076 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800083a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800083e:	f002 f8d1 	bl	80029e4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000842:	bf00      	nop
 8000844:	e7f2      	b.n	800082c <led_green_handler+0x8>
 8000846:	bf00      	nop
 8000848:	080066dc 	.word	0x080066dc
 800084c:	40020000 	.word	0x40020000

08000850 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000858:	4806      	ldr	r0, [pc, #24]	@ (8000874 <led_orange_handler+0x24>)
 800085a:	f005 fe61 	bl	8006520 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_ORANGE_PIN);
 800085e:	2180      	movs	r1, #128	@ 0x80
 8000860:	4805      	ldr	r0, [pc, #20]	@ (8000878 <led_orange_handler+0x28>)
 8000862:	f000 fc08 	bl	8001076 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(800));
 8000866:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800086a:	f002 f8bb 	bl	80029e4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800086e:	bf00      	nop
 8000870:	e7f2      	b.n	8000858 <led_orange_handler+0x8>
 8000872:	bf00      	nop
 8000874:	080066f0 	.word	0x080066f0
 8000878:	40020000 	.word	0x40020000

0800087c <led_red_handler>:
	}
}

static void led_red_handler(void* parameters)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000884:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <led_red_handler+0x24>)
 8000886:	f005 fe4b 	bl	8006520 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_RED_PIN);
 800088a:	2140      	movs	r1, #64	@ 0x40
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <led_red_handler+0x28>)
 800088e:	f000 fbf2 	bl	8001076 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(400));
 8000892:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000896:	f002 f8a5 	bl	80029e4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 800089a:	bf00      	nop
 800089c:	e7f2      	b.n	8000884 <led_red_handler+0x8>
 800089e:	bf00      	nop
 80008a0:	08006704 	.word	0x08006704
 80008a4:	40020000 	.word	0x40020000

080008a8 <vApplicationIdleHook>:
	}
}

void vApplicationIdleHook( void )
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80008ac:	2101      	movs	r1, #1
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 fbfc 	bl	80010ac <HAL_PWR_EnterSLEEPMode>

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d101      	bne.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ca:	f000 f935 	bl	8000b38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40000c00 	.word	0x40000c00

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <Error_Handler+0x8>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000934 <HAL_MspInit+0x4c>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	4a08      	ldr	r2, [pc, #32]	@ (8000934 <HAL_MspInit+0x4c>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	@ 0x40
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 8000926:	f003 fa91 	bl	8003e4c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	@ 0x38
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	4b33      	ldr	r3, [pc, #204]	@ (8000a1c <HAL_InitTick+0xe4>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	4a32      	ldr	r2, [pc, #200]	@ (8000a1c <HAL_InitTick+0xe4>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	6413      	str	r3, [r2, #64]	@ 0x40
 8000958:	4b30      	ldr	r3, [pc, #192]	@ (8000a1c <HAL_InitTick+0xe4>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	f003 0308 	and.w	r3, r3, #8
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000964:	f107 0210 	add.w	r2, r7, #16
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f840 	bl	80019f4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800097a:	2b00      	cmp	r3, #0
 800097c:	d103      	bne.n	8000986 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800097e:	f001 f825 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
 8000982:	6378      	str	r0, [r7, #52]	@ 0x34
 8000984:	e004      	b.n	8000990 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000986:	f001 f821 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
 800098a:	4603      	mov	r3, r0
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000992:	4a23      	ldr	r2, [pc, #140]	@ (8000a20 <HAL_InitTick+0xe8>)
 8000994:	fba2 2303 	umull	r2, r3, r2, r3
 8000998:	0c9b      	lsrs	r3, r3, #18
 800099a:	3b01      	subs	r3, #1
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800099e:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <HAL_InitTick+0xec>)
 80009a0:	4a21      	ldr	r2, [pc, #132]	@ (8000a28 <HAL_InitTick+0xf0>)
 80009a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <HAL_InitTick+0xec>)
 80009a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009aa:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80009ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000a24 <HAL_InitTick+0xec>)
 80009ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <HAL_InitTick+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <HAL_InitTick+0xec>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009be:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <HAL_InitTick+0xec>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80009c4:	4817      	ldr	r0, [pc, #92]	@ (8000a24 <HAL_InitTick+0xec>)
 80009c6:	f001 f847 	bl	8001a58 <HAL_TIM_Base_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d11b      	bne.n	8000a10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80009d8:	4812      	ldr	r0, [pc, #72]	@ (8000a24 <HAL_InitTick+0xec>)
 80009da:	f001 f897 	bl	8001b0c <HAL_TIM_Base_Start_IT>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d111      	bne.n	8000a10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80009ec:	2032      	movs	r0, #50	@ 0x32
 80009ee:	f000 f997 	bl	8000d20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d808      	bhi.n	8000a0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	2032      	movs	r0, #50	@ 0x32
 80009fe:	f000 f973 	bl	8000ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <HAL_InitTick+0xf4>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	e002      	b.n	8000a10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3738      	adds	r7, #56	@ 0x38
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	431bde83 	.word	0x431bde83
 8000a24:	20000034 	.word	0x20000034
 8000a28:	40000c00 	.word	0x40000c00
 8000a2c:	20000004 	.word	0x20000004

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <MemManage_Handler+0x4>

08000a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <TIM5_IRQHandler+0x10>)
 8000a6e:	f001 f8af 	bl	8001bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000034 	.word	0x20000034

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000aa4:	f7ff ffea 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	@ (8000ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8000aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ace:	f005 fdaf 	bl	8006630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fd47 	bl	8000564 <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ad8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ae4:	08006848 	.word	0x08006848
  ldr r2, =_sbss
 8000ae8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000aec:	20014498 	.word	0x20014498

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <HAL_Init+0x40>)
 8000afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b04:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <HAL_Init+0x40>)
 8000b0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_Init+0x40>)
 8000b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f8d8 	bl	8000cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ff08 	bl	8000938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fede 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023c00 	.word	0x40023c00

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	2000007c 	.word	0x2000007c

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	@ (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	2000007c 	.word	0x2000007c

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	@ (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	@ (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	@ (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	@ 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	@ 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ff4c 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfa:	f7ff ff61 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000cfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f7ff ffb1 	bl	8000c6c <NVIC_EncodePriority>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff80 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff54 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e159      	b.n	800100c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 8148 	bne.w	8001006 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d005      	beq.n	8000d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d130      	bne.n	8000df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	091b      	lsrs	r3, r3, #4
 8000dda:	f003 0201 	and.w	r2, r3, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d017      	beq.n	8000e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	69b9      	ldr	r1, [r7, #24]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80a2 	beq.w	8001006 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b57      	ldr	r3, [pc, #348]	@ (8001024 <HAL_GPIO_Init+0x2e8>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	4a56      	ldr	r2, [pc, #344]	@ (8001024 <HAL_GPIO_Init+0x2e8>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed2:	4b54      	ldr	r3, [pc, #336]	@ (8001024 <HAL_GPIO_Init+0x2e8>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ede:	4a52      	ldr	r2, [pc, #328]	@ (8001028 <HAL_GPIO_Init+0x2ec>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a49      	ldr	r2, [pc, #292]	@ (800102c <HAL_GPIO_Init+0x2f0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x202>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a48      	ldr	r2, [pc, #288]	@ (8001030 <HAL_GPIO_Init+0x2f4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x1fe>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a47      	ldr	r2, [pc, #284]	@ (8001034 <HAL_GPIO_Init+0x2f8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x1fa>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a46      	ldr	r2, [pc, #280]	@ (8001038 <HAL_GPIO_Init+0x2fc>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x1f6>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a45      	ldr	r2, [pc, #276]	@ (800103c <HAL_GPIO_Init+0x300>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x1f2>
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	e008      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f2e:	2307      	movs	r3, #7
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e004      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	69fa      	ldr	r2, [r7, #28]
 8000f42:	f002 0203 	and.w	r2, r2, #3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f50:	4935      	ldr	r1, [pc, #212]	@ (8001028 <HAL_GPIO_Init+0x2ec>)
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5e:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f82:	4a2f      	ldr	r2, [pc, #188]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f88:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fac:	4a24      	ldr	r2, [pc, #144]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb2:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001000:	4a0f      	ldr	r2, [pc, #60]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3301      	adds	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b0f      	cmp	r3, #15
 8001010:	f67f aea2 	bls.w	8000d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3724      	adds	r7, #36	@ 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40013800 	.word	0x40013800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40021000 	.word	0x40021000
 8001040:	40013c00 	.word	0x40013c00

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001060:	e003      	b.n	800106a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	041a      	lsls	r2, r3, #16
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001088:	887a      	ldrh	r2, [r7, #2]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4013      	ands	r3, r2
 800108e:	041a      	lsls	r2, r3, #16
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43d9      	mvns	r1, r3
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	400b      	ands	r3, r1
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	619a      	str	r2, [r3, #24]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <HAL_PWR_EnterSLEEPMode+0x3c>)
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <HAL_PWR_EnterSLEEPMode+0x3c>)
 80010be:	f023 0304 	bic.w	r3, r3, #4
 80010c2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80010ca:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 80010cc:	e005      	b.n	80010da <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d001      	beq.n	80010d8 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 80010d4:	bf40      	sev
      __WFE();
 80010d6:	bf20      	wfe
    __WFE();
 80010d8:	bf20      	wfe
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e267      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d075      	beq.n	80011f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800110a:	4b88      	ldr	r3, [pc, #544]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b04      	cmp	r3, #4
 8001114:	d00c      	beq.n	8001130 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001116:	4b85      	ldr	r3, [pc, #532]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800111e:	2b08      	cmp	r3, #8
 8001120:	d112      	bne.n	8001148 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001122:	4b82      	ldr	r3, [pc, #520]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800112a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800112e:	d10b      	bne.n	8001148 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	4b7e      	ldr	r3, [pc, #504]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d05b      	beq.n	80011f4 <HAL_RCC_OscConfig+0x108>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d157      	bne.n	80011f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e242      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001150:	d106      	bne.n	8001160 <HAL_RCC_OscConfig+0x74>
 8001152:	4b76      	ldr	r3, [pc, #472]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a75      	ldr	r2, [pc, #468]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e01d      	b.n	800119c <HAL_RCC_OscConfig+0xb0>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x98>
 800116a:	4b70      	ldr	r3, [pc, #448]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a6f      	ldr	r2, [pc, #444]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b6d      	ldr	r3, [pc, #436]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6c      	ldr	r2, [pc, #432]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0xb0>
 8001184:	4b69      	ldr	r3, [pc, #420]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a68      	ldr	r2, [pc, #416]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800118a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b66      	ldr	r3, [pc, #408]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a65      	ldr	r2, [pc, #404]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800119a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fcdc 	bl	8000b60 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fcd8 	bl	8000b60 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	@ 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e207      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	4b5b      	ldr	r3, [pc, #364]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0xc0>
 80011ca:	e014      	b.n	80011f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fcc8 	bl	8000b60 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fcc4 	bl	8000b60 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	@ 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e1f3      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	4b51      	ldr	r3, [pc, #324]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0xe8>
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d063      	beq.n	80012ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001202:	4b4a      	ldr	r3, [pc, #296]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00b      	beq.n	8001226 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120e:	4b47      	ldr	r3, [pc, #284]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001216:	2b08      	cmp	r3, #8
 8001218:	d11c      	bne.n	8001254 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121a:	4b44      	ldr	r3, [pc, #272]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d116      	bne.n	8001254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	4b41      	ldr	r3, [pc, #260]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <HAL_RCC_OscConfig+0x152>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d001      	beq.n	800123e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e1c7      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123e:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4937      	ldr	r1, [pc, #220]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001252:	e03a      	b.n	80012ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125c:	4b34      	ldr	r3, [pc, #208]	@ (8001330 <HAL_RCC_OscConfig+0x244>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001262:	f7ff fc7d 	bl	8000b60 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fc79 	bl	8000b60 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e1a8      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b28      	ldr	r3, [pc, #160]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4925      	ldr	r1, [pc, #148]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001298:	4313      	orrs	r3, r2
 800129a:	600b      	str	r3, [r1, #0]
 800129c:	e015      	b.n	80012ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129e:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <HAL_RCC_OscConfig+0x244>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fc5c 	bl	8000b60 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc58 	bl	8000b60 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e187      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d036      	beq.n	8001344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d016      	beq.n	800130c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_RCC_OscConfig+0x248>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e4:	f7ff fc3c 	bl	8000b60 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff fc38 	bl	8000b60 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e167      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x200>
 800130a:	e01b      	b.n	8001344 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130c:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <HAL_RCC_OscConfig+0x248>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fc25 	bl	8000b60 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	e00e      	b.n	8001338 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff fc21 	bl	8000b60 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d907      	bls.n	8001338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e150      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
 800132c:	40023800 	.word	0x40023800
 8001330:	42470000 	.word	0x42470000
 8001334:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001338:	4b88      	ldr	r3, [pc, #544]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800133a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1ea      	bne.n	800131a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8097 	beq.w	8001480 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001356:	4b81      	ldr	r3, [pc, #516]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b7d      	ldr	r3, [pc, #500]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	4a7c      	ldr	r2, [pc, #496]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	@ 0x40
 8001372:	4b7a      	ldr	r3, [pc, #488]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800137e:	2301      	movs	r3, #1
 8001380:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001382:	4b77      	ldr	r3, [pc, #476]	@ (8001560 <HAL_RCC_OscConfig+0x474>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138a:	2b00      	cmp	r3, #0
 800138c:	d118      	bne.n	80013c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138e:	4b74      	ldr	r3, [pc, #464]	@ (8001560 <HAL_RCC_OscConfig+0x474>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a73      	ldr	r2, [pc, #460]	@ (8001560 <HAL_RCC_OscConfig+0x474>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139a:	f7ff fbe1 	bl	8000b60 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a2:	f7ff fbdd 	bl	8000b60 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e10c      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001560 <HAL_RCC_OscConfig+0x474>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2ea>
 80013c8:	4b64      	ldr	r3, [pc, #400]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013cc:	4a63      	ldr	r2, [pc, #396]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d4:	e01c      	b.n	8001410 <HAL_RCC_OscConfig+0x324>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b05      	cmp	r3, #5
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x30c>
 80013de:	4b5f      	ldr	r3, [pc, #380]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e2:	4a5e      	ldr	r2, [pc, #376]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ea:	4b5c      	ldr	r3, [pc, #368]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ee:	4a5b      	ldr	r2, [pc, #364]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013f6:	e00b      	b.n	8001410 <HAL_RCC_OscConfig+0x324>
 80013f8:	4b58      	ldr	r3, [pc, #352]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fc:	4a57      	ldr	r2, [pc, #348]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013fe:	f023 0301 	bic.w	r3, r3, #1
 8001402:	6713      	str	r3, [r2, #112]	@ 0x70
 8001404:	4b55      	ldr	r3, [pc, #340]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001408:	4a54      	ldr	r2, [pc, #336]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800140a:	f023 0304 	bic.w	r3, r3, #4
 800140e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d015      	beq.n	8001444 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff fba2 	bl	8000b60 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141e:	e00a      	b.n	8001436 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fb9e 	bl	8000b60 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0cb      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001436:	4b49      	ldr	r3, [pc, #292]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0ee      	beq.n	8001420 <HAL_RCC_OscConfig+0x334>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff fb8c 	bl	8000b60 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff fb88 	bl	8000b60 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0b5      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001462:	4b3e      	ldr	r3, [pc, #248]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1ee      	bne.n	800144c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001474:	4b39      	ldr	r3, [pc, #228]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a38      	ldr	r2, [pc, #224]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800147a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80a1 	beq.w	80015cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800148a:	4b34      	ldr	r3, [pc, #208]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d05c      	beq.n	8001550 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d141      	bne.n	8001522 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b31      	ldr	r3, [pc, #196]	@ (8001564 <HAL_RCC_OscConfig+0x478>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb5c 	bl	8000b60 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fb58 	bl	8000b60 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e087      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	4b27      	ldr	r3, [pc, #156]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69da      	ldr	r2, [r3, #28]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	3b01      	subs	r3, #1
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ec:	061b      	lsls	r3, r3, #24
 80014ee:	491b      	ldr	r1, [pc, #108]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_RCC_OscConfig+0x478>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fb31 	bl	8000b60 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff fb2d 	bl	8000b60 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e05c      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x416>
 8001520:	e054      	b.n	80015cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_RCC_OscConfig+0x478>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fb1a 	bl	8000b60 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fb16 	bl	8000b60 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e045      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x444>
 800154e:	e03d      	b.n	80015cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d107      	bne.n	8001568 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e038      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000
 8001564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_RCC_OscConfig+0x4ec>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d028      	beq.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001580:	429a      	cmp	r2, r3
 8001582:	d121      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d11a      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001598:	4013      	ands	r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800159e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d111      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	3b01      	subs	r3, #1
 80015b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d107      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0cc      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f0:	4b68      	ldr	r3, [pc, #416]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d90c      	bls.n	8001618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b65      	ldr	r3, [pc, #404]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b63      	ldr	r3, [pc, #396]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0b8      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001630:	4b59      	ldr	r3, [pc, #356]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800163a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001648:	4b53      	ldr	r3, [pc, #332]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	4a52      	ldr	r2, [pc, #328]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001654:	4b50      	ldr	r3, [pc, #320]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	494d      	ldr	r1, [pc, #308]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d044      	beq.n	80016fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b47      	ldr	r3, [pc, #284]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d119      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e07f      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d003      	beq.n	800169a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001696:	2b03      	cmp	r3, #3
 8001698:	d107      	bne.n	80016aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169a:	4b3f      	ldr	r3, [pc, #252]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e06f      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e067      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ba:	4b37      	ldr	r3, [pc, #220]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f023 0203 	bic.w	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4934      	ldr	r1, [pc, #208]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016cc:	f7ff fa48 	bl	8000b60 <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d4:	f7ff fa44 	bl	8000b60 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e04f      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 020c 	and.w	r2, r3, #12
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d1eb      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016fc:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d20c      	bcs.n	8001724 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e032      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4916      	ldr	r1, [pc, #88]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	490e      	ldr	r1, [pc, #56]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001762:	f000 f821 	bl	80017a8 <HAL_RCC_GetSysClockFreq>
 8001766:	4602      	mov	r2, r0
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	490a      	ldr	r1, [pc, #40]	@ (800179c <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	5ccb      	ldrb	r3, [r1, r3]
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	4a09      	ldr	r2, [pc, #36]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff f8d8 	bl	8000938 <HAL_InitTick>

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023c00 	.word	0x40023c00
 8001798:	40023800 	.word	0x40023800
 800179c:	080067fc 	.word	0x080067fc
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017ac:	b094      	sub	sp, #80	@ 0x50
 80017ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c0:	4b79      	ldr	r3, [pc, #484]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d00d      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x40>
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	f200 80e1 	bhi.w	8001994 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x34>
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017da:	e0db      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4b73      	ldr	r3, [pc, #460]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x204>)
 80017de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017e0:	e0db      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e2:	4b73      	ldr	r3, [pc, #460]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80017e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017e6:	e0d8      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e8:	4b6f      	ldr	r3, [pc, #444]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f2:	4b6d      	ldr	r3, [pc, #436]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d063      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fe:	4b6a      	ldr	r3, [pc, #424]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	099b      	lsrs	r3, r3, #6
 8001804:	2200      	movs	r2, #0
 8001806:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001808:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800180a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800180c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
 8001816:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800181a:	4622      	mov	r2, r4
 800181c:	462b      	mov	r3, r5
 800181e:	f04f 0000 	mov.w	r0, #0
 8001822:	f04f 0100 	mov.w	r1, #0
 8001826:	0159      	lsls	r1, r3, #5
 8001828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800182c:	0150      	lsls	r0, r2, #5
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4621      	mov	r1, r4
 8001834:	1a51      	subs	r1, r2, r1
 8001836:	6139      	str	r1, [r7, #16]
 8001838:	4629      	mov	r1, r5
 800183a:	eb63 0301 	sbc.w	r3, r3, r1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800184c:	4659      	mov	r1, fp
 800184e:	018b      	lsls	r3, r1, #6
 8001850:	4651      	mov	r1, sl
 8001852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001856:	4651      	mov	r1, sl
 8001858:	018a      	lsls	r2, r1, #6
 800185a:	4651      	mov	r1, sl
 800185c:	ebb2 0801 	subs.w	r8, r2, r1
 8001860:	4659      	mov	r1, fp
 8001862:	eb63 0901 	sbc.w	r9, r3, r1
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800187a:	4690      	mov	r8, r2
 800187c:	4699      	mov	r9, r3
 800187e:	4623      	mov	r3, r4
 8001880:	eb18 0303 	adds.w	r3, r8, r3
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	462b      	mov	r3, r5
 8001888:	eb49 0303 	adc.w	r3, r9, r3
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800189a:	4629      	mov	r1, r5
 800189c:	024b      	lsls	r3, r1, #9
 800189e:	4621      	mov	r1, r4
 80018a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018a4:	4621      	mov	r1, r4
 80018a6:	024a      	lsls	r2, r1, #9
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ae:	2200      	movs	r2, #0
 80018b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018b8:	f7fe fcdc 	bl	8000274 <__aeabi_uldivmod>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4613      	mov	r3, r2
 80018c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018c4:	e058      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c6:	4b38      	ldr	r3, [pc, #224]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	099b      	lsrs	r3, r3, #6
 80018cc:	2200      	movs	r2, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	4611      	mov	r1, r2
 80018d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018d6:	623b      	str	r3, [r7, #32]
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
 80018dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018e0:	4642      	mov	r2, r8
 80018e2:	464b      	mov	r3, r9
 80018e4:	f04f 0000 	mov.w	r0, #0
 80018e8:	f04f 0100 	mov.w	r1, #0
 80018ec:	0159      	lsls	r1, r3, #5
 80018ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f2:	0150      	lsls	r0, r2, #5
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4641      	mov	r1, r8
 80018fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80018fe:	4649      	mov	r1, r9
 8001900:	eb63 0b01 	sbc.w	fp, r3, r1
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001910:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001914:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001918:	ebb2 040a 	subs.w	r4, r2, sl
 800191c:	eb63 050b 	sbc.w	r5, r3, fp
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	00eb      	lsls	r3, r5, #3
 800192a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800192e:	00e2      	lsls	r2, r4, #3
 8001930:	4614      	mov	r4, r2
 8001932:	461d      	mov	r5, r3
 8001934:	4643      	mov	r3, r8
 8001936:	18e3      	adds	r3, r4, r3
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	464b      	mov	r3, r9
 800193c:	eb45 0303 	adc.w	r3, r5, r3
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800194e:	4629      	mov	r1, r5
 8001950:	028b      	lsls	r3, r1, #10
 8001952:	4621      	mov	r1, r4
 8001954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001958:	4621      	mov	r1, r4
 800195a:	028a      	lsls	r2, r1, #10
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001962:	2200      	movs	r2, #0
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	61fa      	str	r2, [r7, #28]
 8001968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800196c:	f7fe fc82 	bl	8000274 <__aeabi_uldivmod>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4613      	mov	r3, r2
 8001976:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	0c1b      	lsrs	r3, r3, #16
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	3301      	adds	r3, #1
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001988:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800198a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001992:	e002      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x204>)
 8001996:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800199c:	4618      	mov	r0, r3
 800199e:	3750      	adds	r7, #80	@ 0x50
 80019a0:	46bd      	mov	sp, r7
 80019a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	00f42400 	.word	0x00f42400
 80019b0:	007a1200 	.word	0x007a1200

080019b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000000 	.word	0x20000000

080019cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019d0:	f7ff fff0 	bl	80019b4 <HAL_RCC_GetHCLKFreq>
 80019d4:	4602      	mov	r2, r0
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	0a9b      	lsrs	r3, r3, #10
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	4903      	ldr	r1, [pc, #12]	@ (80019f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019e2:	5ccb      	ldrb	r3, [r1, r3]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40023800 	.word	0x40023800
 80019f0:	0800680c 	.word	0x0800680c

080019f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	220f      	movs	r2, #15
 8001a02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_RCC_GetClockConfig+0x5c>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0203 	and.w	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <HAL_RCC_GetClockConfig+0x5c>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <HAL_RCC_GetClockConfig+0x5c>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	08db      	lsrs	r3, r3, #3
 8001a2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a36:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <HAL_RCC_GetClockConfig+0x60>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0207 	and.w	r2, r3, #7
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40023c00 	.word	0x40023c00

08001a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e041      	b.n	8001aee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d106      	bne.n	8001a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f839 	bl	8001af6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3304      	adds	r3, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	4610      	mov	r0, r2
 8001a98:	f000 f9b2 	bl	8001e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d001      	beq.n	8001b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e044      	b.n	8001bae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1e      	ldr	r2, [pc, #120]	@ (8001bbc <HAL_TIM_Base_Start_IT+0xb0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d018      	beq.n	8001b78 <HAL_TIM_Base_Start_IT+0x6c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b4e:	d013      	beq.n	8001b78 <HAL_TIM_Base_Start_IT+0x6c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00e      	beq.n	8001b78 <HAL_TIM_Base_Start_IT+0x6c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a19      	ldr	r2, [pc, #100]	@ (8001bc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d009      	beq.n	8001b78 <HAL_TIM_Base_Start_IT+0x6c>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a17      	ldr	r2, [pc, #92]	@ (8001bc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d004      	beq.n	8001b78 <HAL_TIM_Base_Start_IT+0x6c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a16      	ldr	r2, [pc, #88]	@ (8001bcc <HAL_TIM_Base_Start_IT+0xc0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d111      	bne.n	8001b9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d010      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0201 	orr.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b9a:	e007      	b.n	8001bac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40000800 	.word	0x40000800
 8001bc8:	40000c00 	.word	0x40000c00
 8001bcc:	40014000 	.word	0x40014000

08001bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d020      	beq.n	8001c34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0202 	mvn.w	r2, #2
 8001c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f8d2 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8c4 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f8d5 	bl	8001dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d020      	beq.n	8001c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d01b      	beq.n	8001c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0204 	mvn.w	r2, #4
 8001c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2202      	movs	r2, #2
 8001c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8ac 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8001c6c:	e005      	b.n	8001c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f89e 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f8af 	bl	8001dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d020      	beq.n	8001ccc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01b      	beq.n	8001ccc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0208 	mvn.w	r2, #8
 8001c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f886 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8001cb8:	e005      	b.n	8001cc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f878 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f889 	bl	8001dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d020      	beq.n	8001d18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01b      	beq.n	8001d18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0210 	mvn.w	r2, #16
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2208      	movs	r2, #8
 8001cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f860 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f852 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f863 	bl	8001dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00c      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0201 	mvn.w	r2, #1
 8001d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe fdbe 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00c      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8e6 	bl	8001f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00c      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f834 	bl	8001dec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00c      	beq.n	8001da8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0220 	mvn.w	r2, #32
 8001da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8b8 	bl	8001f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3a      	ldr	r2, [pc, #232]	@ (8001efc <TIM_Base_SetConfig+0xfc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00f      	beq.n	8001e38 <TIM_Base_SetConfig+0x38>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1e:	d00b      	beq.n	8001e38 <TIM_Base_SetConfig+0x38>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a37      	ldr	r2, [pc, #220]	@ (8001f00 <TIM_Base_SetConfig+0x100>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <TIM_Base_SetConfig+0x38>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a36      	ldr	r2, [pc, #216]	@ (8001f04 <TIM_Base_SetConfig+0x104>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d003      	beq.n	8001e38 <TIM_Base_SetConfig+0x38>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a35      	ldr	r2, [pc, #212]	@ (8001f08 <TIM_Base_SetConfig+0x108>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d108      	bne.n	8001e4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001efc <TIM_Base_SetConfig+0xfc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01b      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e58:	d017      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a28      	ldr	r2, [pc, #160]	@ (8001f00 <TIM_Base_SetConfig+0x100>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a27      	ldr	r2, [pc, #156]	@ (8001f04 <TIM_Base_SetConfig+0x104>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00f      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a26      	ldr	r2, [pc, #152]	@ (8001f08 <TIM_Base_SetConfig+0x108>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00b      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a25      	ldr	r2, [pc, #148]	@ (8001f0c <TIM_Base_SetConfig+0x10c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a24      	ldr	r2, [pc, #144]	@ (8001f10 <TIM_Base_SetConfig+0x110>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d003      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a23      	ldr	r2, [pc, #140]	@ (8001f14 <TIM_Base_SetConfig+0x114>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d108      	bne.n	8001e9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8001efc <TIM_Base_SetConfig+0xfc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d103      	bne.n	8001ed0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d105      	bne.n	8001eee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f023 0201 	bic.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	611a      	str	r2, [r3, #16]
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40000c00 	.word	0x40000c00
 8001f0c:	40014000 	.word	0x40014000
 8001f10:	40014400 	.word	0x40014400
 8001f14:	40014800 	.word	0x40014800

08001f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f103 0208 	add.w	r2, r3, #8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f103 0208 	add.w	r2, r3, #8
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f103 0208 	add.w	r2, r3, #8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb0:	d103      	bne.n	8001fba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e00c      	b.n	8001fd4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3308      	adds	r3, #8
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e002      	b.n	8001fc8 <vListInsert+0x2e>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d2f6      	bcs.n	8001fc2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	601a      	str	r2, [r3, #0]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6892      	ldr	r2, [r2, #8]
 8002022:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6852      	ldr	r2, [r2, #4]
 800202c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	d103      	bne.n	8002040 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800206a:	2301      	movs	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <xQueueGenericReset+0x30>
        __asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	60fb      	str	r3, [r7, #12]
    }
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d05d      	beq.n	8002152 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d059      	beq.n	8002152 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a6:	2100      	movs	r1, #0
 80020a8:	fba3 2302 	umull	r2, r3, r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d000      	beq.n	80020b2 <xQueueGenericReset+0x52>
 80020b0:	2101      	movs	r1, #1
 80020b2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d14c      	bne.n	8002152 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80020b8:	f001 ff48 	bl	8003f4c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c4:	6939      	ldr	r1, [r7, #16]
 80020c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	441a      	add	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2200      	movs	r2, #0
 80020d6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e8:	3b01      	subs	r3, #1
 80020ea:	6939      	ldr	r1, [r7, #16]
 80020ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	441a      	add	r2, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	22ff      	movs	r2, #255	@ 0xff
 80020fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	22ff      	movs	r2, #255	@ 0xff
 8002104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d114      	bne.n	8002138 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01a      	beq.n	800214c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	3310      	adds	r3, #16
 800211a:	4618      	mov	r0, r3
 800211c:	f001 f824 	bl	8003168 <xTaskRemoveFromEventList>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d012      	beq.n	800214c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002126:	4b16      	ldr	r3, [pc, #88]	@ (8002180 <xQueueGenericReset+0x120>)
 8002128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	e009      	b.n	800214c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	3310      	adds	r3, #16
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff feff 	bl	8001f40 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	3324      	adds	r3, #36	@ 0x24
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fefa 	bl	8001f40 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800214c:	f001 ff30 	bl	8003fb0 <vPortExitCritical>
 8002150:	e001      	b.n	8002156 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10b      	bne.n	8002174 <xQueueGenericReset+0x114>
        __asm volatile
 800215c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002160:	f383 8811 	msr	BASEPRI, r3
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	f3bf 8f4f 	dsb	sy
 800216c:	60bb      	str	r3, [r7, #8]
    }
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002174:	697b      	ldr	r3, [r7, #20]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000ed04 	.word	0xe000ed04

08002184 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	@ 0x28
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d02e      	beq.n	80021fa <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800219c:	2100      	movs	r1, #0
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	fba3 2302 	umull	r2, r3, r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d000      	beq.n	80021ac <xQueueGenericCreate+0x28>
 80021aa:	2101      	movs	r1, #1
 80021ac:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d123      	bne.n	80021fa <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80021ba:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80021be:	d81c      	bhi.n	80021fa <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	3350      	adds	r3, #80	@ 0x50
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 ffee 	bl	80041b0 <pvPortMalloc>
 80021d4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01d      	beq.n	8002218 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3350      	adds	r3, #80	@ 0x50
 80021e4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021e6:	79fa      	ldrb	r2, [r7, #7]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f815 	bl	8002222 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80021f8:	e00e      	b.n	8002218 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10b      	bne.n	8002218 <xQueueGenericCreate+0x94>
        __asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	613b      	str	r3, [r7, #16]
    }
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002218:	69fb      	ldr	r3, [r7, #28]
    }
 800221a:	4618      	mov	r0, r3
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e002      	b.n	8002244 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002250:	2101      	movs	r1, #1
 8002252:	69b8      	ldr	r0, [r7, #24]
 8002254:	f7ff ff04 	bl	8002060 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	68f9      	ldr	r1, [r7, #12]
 8002266:	2073      	movs	r0, #115	@ 0x73
 8002268:	f003 fb42 	bl	80058f0 <SEGGER_SYSVIEW_RecordU32x3>
}
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b08f      	sub	sp, #60	@ 0x3c
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10b      	bne.n	80022a6 <xQueueReceive+0x32>
        __asm volatile
 800228e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	623b      	str	r3, [r7, #32]
    }
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	e7fd      	b.n	80022a2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d103      	bne.n	80022b4 <xQueueReceive+0x40>
 80022ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <xQueueReceive+0x44>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <xQueueReceive+0x46>
 80022b8:	2300      	movs	r3, #0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10b      	bne.n	80022d6 <xQueueReceive+0x62>
        __asm volatile
 80022be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c2:	f383 8811 	msr	BASEPRI, r3
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	61fb      	str	r3, [r7, #28]
    }
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	e7fd      	b.n	80022d2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022d6:	f001 f95f 	bl	8003598 <xTaskGetSchedulerState>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <xQueueReceive+0x72>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <xQueueReceive+0x76>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <xQueueReceive+0x78>
 80022ea:	2300      	movs	r3, #0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <xQueueReceive+0x94>
        __asm volatile
 80022f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	61bb      	str	r3, [r7, #24]
    }
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002308:	f001 fe20 	bl	8003f4c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800230c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	2b00      	cmp	r3, #0
 8002316:	d02f      	beq.n	8002378 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800231c:	f000 f8be 	bl	800249c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002322:	4618      	mov	r0, r3
 8002324:	f004 f810 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 8002328:	4604      	mov	r4, r0
 800232a:	2000      	movs	r0, #0
 800232c:	f004 f80c 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 8002330:	4602      	mov	r2, r0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2101      	movs	r1, #1
 8002336:	9100      	str	r1, [sp, #0]
 8002338:	4621      	mov	r1, r4
 800233a:	205c      	movs	r0, #92	@ 0x5c
 800233c:	f003 fb4e 	bl	80059dc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	1e5a      	subs	r2, r3, #1
 8002344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002346:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00f      	beq.n	8002370 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002352:	3310      	adds	r3, #16
 8002354:	4618      	mov	r0, r3
 8002356:	f000 ff07 	bl	8003168 <xTaskRemoveFromEventList>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002360:	4b4d      	ldr	r3, [pc, #308]	@ (8002498 <xQueueReceive+0x224>)
 8002362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002370:	f001 fe1e 	bl	8003fb0 <vPortExitCritical>
                return pdPASS;
 8002374:	2301      	movs	r3, #1
 8002376:	e08a      	b.n	800248e <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d113      	bne.n	80023a6 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800237e:	f001 fe17 	bl	8003fb0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002384:	4618      	mov	r0, r3
 8002386:	f003 ffdf 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 800238a:	4604      	mov	r4, r0
 800238c:	2000      	movs	r0, #0
 800238e:	f003 ffdb 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 8002392:	4602      	mov	r2, r0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2101      	movs	r1, #1
 8002398:	9100      	str	r1, [sp, #0]
 800239a:	4621      	mov	r1, r4
 800239c:	205c      	movs	r0, #92	@ 0x5c
 800239e:	f003 fb1d 	bl	80059dc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e073      	b.n	800248e <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80023a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d106      	bne.n	80023ba <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 ffb3 	bl	800331c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80023ba:	f001 fdf9 	bl	8003fb0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80023be:	f000 fbad 	bl	8002b1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80023c2:	f001 fdc3 	bl	8003f4c <vPortEnterCritical>
 80023c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023cc:	b25b      	sxtb	r3, r3
 80023ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d2:	d103      	bne.n	80023dc <xQueueReceive+0x168>
 80023d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023e2:	b25b      	sxtb	r3, r3
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d103      	bne.n	80023f2 <xQueueReceive+0x17e>
 80023ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023f2:	f001 fddd 	bl	8003fb0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023f6:	1d3a      	adds	r2, r7, #4
 80023f8:	f107 0310 	add.w	r3, r7, #16
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 ffa2 	bl	8003348 <xTaskCheckForTimeOut>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d124      	bne.n	8002454 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800240a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800240c:	f000 f8be 	bl	800258c <prvIsQueueEmpty>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d018      	beq.n	8002448 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002418:	3324      	adds	r3, #36	@ 0x24
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fe32 	bl	8003088 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002424:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002426:	f000 f85f 	bl	80024e8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800242a:	f000 fb85 	bl	8002b38 <xTaskResumeAll>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	f47f af69 	bne.w	8002308 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002436:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <xQueueReceive+0x224>)
 8002438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	e75f      	b.n	8002308 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002448:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800244a:	f000 f84d 	bl	80024e8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800244e:	f000 fb73 	bl	8002b38 <xTaskResumeAll>
 8002452:	e759      	b.n	8002308 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002456:	f000 f847 	bl	80024e8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800245a:	f000 fb6d 	bl	8002b38 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800245e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002460:	f000 f894 	bl	800258c <prvIsQueueEmpty>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	f43f af4e 	beq.w	8002308 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800246c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246e:	4618      	mov	r0, r3
 8002470:	f003 ff6a 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 8002474:	4604      	mov	r4, r0
 8002476:	2000      	movs	r0, #0
 8002478:	f003 ff66 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 800247c:	4602      	mov	r2, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2101      	movs	r1, #1
 8002482:	9100      	str	r1, [sp, #0]
 8002484:	4621      	mov	r1, r4
 8002486:	205c      	movs	r0, #92	@ 0x5c
 8002488:	f003 faa8 	bl	80059dc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800248c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800248e:	4618      	mov	r0, r3
 8002490:	3734      	adds	r7, #52	@ 0x34
 8002492:	46bd      	mov	sp, r7
 8002494:	bd90      	pop	{r4, r7, pc}
 8002496:	bf00      	nop
 8002498:	e000ed04 	.word	0xe000ed04

0800249c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d018      	beq.n	80024e0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	441a      	add	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d303      	bcc.n	80024d0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68d9      	ldr	r1, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	461a      	mov	r2, r3
 80024da:	6838      	ldr	r0, [r7, #0]
 80024dc:	f004 f8cc 	bl	8006678 <memcpy>
    }
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80024f0:	f001 fd2c 	bl	8003f4c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024fa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024fc:	e011      	b.n	8002522 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	2b00      	cmp	r3, #0
 8002504:	d012      	beq.n	800252c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3324      	adds	r3, #36	@ 0x24
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fe2c 	bl	8003168 <xTaskRemoveFromEventList>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002516:	f000 ff7f 	bl	8003418 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	3b01      	subs	r3, #1
 800251e:	b2db      	uxtb	r3, r3
 8002520:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	dce9      	bgt.n	80024fe <prvUnlockQueue+0x16>
 800252a:	e000      	b.n	800252e <prvUnlockQueue+0x46>
                    break;
 800252c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	22ff      	movs	r2, #255	@ 0xff
 8002532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002536:	f001 fd3b 	bl	8003fb0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800253a:	f001 fd07 	bl	8003f4c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002544:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002546:	e011      	b.n	800256c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d012      	beq.n	8002576 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3310      	adds	r3, #16
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fe07 	bl	8003168 <xTaskRemoveFromEventList>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002560:	f000 ff5a 	bl	8003418 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002564:	7bbb      	ldrb	r3, [r7, #14]
 8002566:	3b01      	subs	r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800256c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002570:	2b00      	cmp	r3, #0
 8002572:	dce9      	bgt.n	8002548 <prvUnlockQueue+0x60>
 8002574:	e000      	b.n	8002578 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002576:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	22ff      	movs	r2, #255	@ 0xff
 800257c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002580:	f001 fd16 	bl	8003fb0 <vPortExitCritical>
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002594:	f001 fcda 	bl	8003f4c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80025a0:	2301      	movs	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e001      	b.n	80025aa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80025aa:	f001 fd01 	bl	8003fb0 <vPortExitCritical>

    return xReturn;
 80025ae:	68fb      	ldr	r3, [r7, #12]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10b      	bne.n	80025e4 <vQueueAddToRegistry+0x2c>
        __asm volatile
 80025cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d0:	f383 8811 	msr	BASEPRI, r3
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	60fb      	str	r3, [r7, #12]
    }
 80025de:	bf00      	nop
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d024      	beq.n	8002634 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	e01e      	b.n	800262e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80025f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002664 <vQueueAddToRegistry+0xac>)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d105      	bne.n	800260c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4a17      	ldr	r2, [pc, #92]	@ (8002664 <vQueueAddToRegistry+0xac>)
 8002606:	4413      	add	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
                    break;
 800260a:	e013      	b.n	8002634 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <vQueueAddToRegistry+0x70>
 8002612:	4a14      	ldr	r2, [pc, #80]	@ (8002664 <vQueueAddToRegistry+0xac>)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d104      	bne.n	8002628 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4a10      	ldr	r2, [pc, #64]	@ (8002664 <vQueueAddToRegistry+0xac>)
 8002624:	4413      	add	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b07      	cmp	r3, #7
 8002632:	d9dd      	bls.n	80025f0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00f      	beq.n	800265a <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4618      	mov	r0, r3
 800264a:	f003 fe7d 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 800264e:	4601      	mov	r1, r0
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	2071      	movs	r0, #113	@ 0x71
 8002656:	f003 f8f1 	bl	800583c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000080 	.word	0x20000080

08002668 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002678:	f001 fc68 	bl	8003f4c <vPortEnterCritical>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002682:	b25b      	sxtb	r3, r3
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d103      	bne.n	8002692 <vQueueWaitForMessageRestricted+0x2a>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002698:	b25b      	sxtb	r3, r3
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d103      	bne.n	80026a8 <vQueueWaitForMessageRestricted+0x40>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026a8:	f001 fc82 	bl	8003fb0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3324      	adds	r3, #36	@ 0x24
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fd09 	bl	80030d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f7ff ff10 	bl	80024e8 <prvUnlockQueue>
    }
 80026c8:	bf00      	nop
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	@ 0x30
 80026d4:	af04      	add	r7, sp, #16
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 fd63 	bl	80041b0 <pvPortMalloc>
 80026ea:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d013      	beq.n	800271a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026f2:	2058      	movs	r0, #88	@ 0x58
 80026f4:	f001 fd5c 	bl	80041b0 <pvPortMalloc>
 80026f8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002700:	2258      	movs	r2, #88	@ 0x58
 8002702:	2100      	movs	r1, #0
 8002704:	69f8      	ldr	r0, [r7, #28]
 8002706:	f003 ff8b 	bl	8006620 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002710:	e005      	b.n	800271e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002712:	6978      	ldr	r0, [r7, #20]
 8002714:	f001 fe08 	bl	8004328 <vPortFree>
 8002718:	e001      	b.n	800271e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d013      	beq.n	800274c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002724:	88fa      	ldrh	r2, [r7, #6]
 8002726:	2300      	movs	r3, #0
 8002728:	9303      	str	r3, [sp, #12]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	9302      	str	r3, [sp, #8]
 800272e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f80e 	bl	800275c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002740:	69f8      	ldr	r0, [r7, #28]
 8002742:	f000 f89b 	bl	800287c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002746:	2301      	movs	r3, #1
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	e002      	b.n	8002752 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800274c:	f04f 33ff 	mov.w	r3, #4294967295
 8002750:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002752:	69bb      	ldr	r3, [r7, #24]
    }
 8002754:	4618      	mov	r0, r3
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800276a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	461a      	mov	r2, r3
 8002774:	21a5      	movs	r1, #165	@ 0xa5
 8002776:	f003 ff53 	bl	8006620 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800277a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002784:	3b01      	subs	r3, #1
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f023 0307 	bic.w	r3, r3, #7
 8002792:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	617b      	str	r3, [r7, #20]
    }
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	e7fd      	b.n	80027b2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01e      	beq.n	80027fa <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	e012      	b.n	80027e8 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	7819      	ldrb	r1, [r3, #0]
 80027ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	3334      	adds	r3, #52	@ 0x34
 80027d2:	460a      	mov	r2, r1
 80027d4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	4413      	add	r3, r2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3301      	adds	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b09      	cmp	r3, #9
 80027ec:	d9e9      	bls.n	80027c2 <prvInitialiseNewTask+0x66>
 80027ee:	e000      	b.n	80027f2 <prvInitialiseNewTask+0x96>
            {
                break;
 80027f0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80027fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d90b      	bls.n	8002818 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	613b      	str	r3, [r7, #16]
    }
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281a:	2b04      	cmp	r3, #4
 800281c:	d901      	bls.n	8002822 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800281e:	2304      	movs	r3, #4
 8002820:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002824:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002826:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800282c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002830:	3304      	adds	r3, #4
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fba4 	bl	8001f80 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283a:	3318      	adds	r3, #24
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fb9f 	bl	8001f80 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002846:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284a:	f1c3 0205 	rsb	r2, r3, #5
 800284e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002850:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	69b8      	ldr	r0, [r7, #24]
 800285e:	f001 f9c5 	bl	8003bec <pxPortInitialiseStack>
 8002862:	4602      	mov	r2, r0
 8002864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002866:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800286e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002872:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002874:	bf00      	nop
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800287c:	b5b0      	push	{r4, r5, r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af02      	add	r7, sp, #8
 8002882:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002884:	f001 fb62 	bl	8003f4c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002888:	4b4f      	ldr	r3, [pc, #316]	@ (80029c8 <prvAddNewTaskToReadyList+0x14c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	4a4e      	ldr	r2, [pc, #312]	@ (80029c8 <prvAddNewTaskToReadyList+0x14c>)
 8002890:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002892:	4b4e      	ldr	r3, [pc, #312]	@ (80029cc <prvAddNewTaskToReadyList+0x150>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800289a:	4a4c      	ldr	r2, [pc, #304]	@ (80029cc <prvAddNewTaskToReadyList+0x150>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028a0:	4b49      	ldr	r3, [pc, #292]	@ (80029c8 <prvAddNewTaskToReadyList+0x14c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d110      	bne.n	80028ca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80028a8:	f000 fddc 	bl	8003464 <prvInitialiseTaskLists>
 80028ac:	e00d      	b.n	80028ca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80028ae:	4b48      	ldr	r3, [pc, #288]	@ (80029d0 <prvAddNewTaskToReadyList+0x154>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028b6:	4b45      	ldr	r3, [pc, #276]	@ (80029cc <prvAddNewTaskToReadyList+0x150>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d802      	bhi.n	80028ca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80028c4:	4a41      	ldr	r2, [pc, #260]	@ (80029cc <prvAddNewTaskToReadyList+0x150>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80028ca:	4b42      	ldr	r3, [pc, #264]	@ (80029d4 <prvAddNewTaskToReadyList+0x158>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	4a40      	ldr	r2, [pc, #256]	@ (80029d4 <prvAddNewTaskToReadyList+0x158>)
 80028d2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028d4:	4b3f      	ldr	r3, [pc, #252]	@ (80029d4 <prvAddNewTaskToReadyList+0x158>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <prvAddNewTaskToReadyList+0x94>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 fc69 	bl	80061bc <SEGGER_SYSVIEW_OnTaskCreate>
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	461d      	mov	r5, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461c      	mov	r4, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	1ae3      	subs	r3, r4, r3
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	462b      	mov	r3, r5
 800290c:	f001 fed0 	bl	80046b0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4618      	mov	r0, r3
 8002914:	f003 fcd6 	bl	80062c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	2201      	movs	r2, #1
 800291e:	409a      	lsls	r2, r3
 8002920:	4b2d      	ldr	r3, [pc, #180]	@ (80029d8 <prvAddNewTaskToReadyList+0x15c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4313      	orrs	r3, r2
 8002926:	4a2c      	ldr	r2, [pc, #176]	@ (80029d8 <prvAddNewTaskToReadyList+0x15c>)
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800292e:	492b      	ldr	r1, [pc, #172]	@ (80029dc <prvAddNewTaskToReadyList+0x160>)
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3304      	adds	r3, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	3204      	adds	r2, #4
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	1d1a      	adds	r2, r3, #4
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4a1b      	ldr	r2, [pc, #108]	@ (80029dc <prvAddNewTaskToReadyList+0x160>)
 800296e:	441a      	add	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	615a      	str	r2, [r3, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002978:	4918      	ldr	r1, [pc, #96]	@ (80029dc <prvAddNewTaskToReadyList+0x160>)
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	1c59      	adds	r1, r3, #1
 8002988:	4814      	ldr	r0, [pc, #80]	@ (80029dc <prvAddNewTaskToReadyList+0x160>)
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4403      	add	r3, r0
 8002994:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002996:	f001 fb0b 	bl	8003fb0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800299a:	4b0d      	ldr	r3, [pc, #52]	@ (80029d0 <prvAddNewTaskToReadyList+0x154>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00e      	beq.n	80029c0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029a2:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <prvAddNewTaskToReadyList+0x150>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d207      	bcs.n	80029c0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80029b0:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <prvAddNewTaskToReadyList+0x164>)
 80029b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bdb0      	pop	{r4, r5, r7, pc}
 80029c8:	20000198 	.word	0x20000198
 80029cc:	200000c0 	.word	0x200000c0
 80029d0:	200001a4 	.word	0x200001a4
 80029d4:	200001b4 	.word	0x200001b4
 80029d8:	200001a0 	.word	0x200001a0
 80029dc:	200000c4 	.word	0x200000c4
 80029e0:	e000ed04 	.word	0xe000ed04

080029e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01c      	beq.n	8002a30 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80029f6:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <vTaskDelay+0x6c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <vTaskDelay+0x32>
        __asm volatile
 80029fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a02:	f383 8811 	msr	BASEPRI, r3
 8002a06:	f3bf 8f6f 	isb	sy
 8002a0a:	f3bf 8f4f 	dsb	sy
 8002a0e:	60bb      	str	r3, [r7, #8]
    }
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	e7fd      	b.n	8002a12 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002a16:	f000 f881 	bl	8002b1c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	2023      	movs	r0, #35	@ 0x23
 8002a1e:	f002 fed1 	bl	80057c4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a22:	2100      	movs	r1, #0
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fdd5 	bl	80035d4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002a2a:	f000 f885 	bl	8002b38 <xTaskResumeAll>
 8002a2e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d107      	bne.n	8002a46 <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 8002a36:	4b07      	ldr	r3, [pc, #28]	@ (8002a54 <vTaskDelay+0x70>)
 8002a38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200001c0 	.word	0x200001c0
 8002a54:	e000ed04 	.word	0xe000ed04

08002a58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002a5e:	4b27      	ldr	r3, [pc, #156]	@ (8002afc <vTaskStartScheduler+0xa4>)
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	2300      	movs	r3, #0
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2300      	movs	r3, #0
 8002a68:	2282      	movs	r2, #130	@ 0x82
 8002a6a:	4925      	ldr	r1, [pc, #148]	@ (8002b00 <vTaskStartScheduler+0xa8>)
 8002a6c:	4825      	ldr	r0, [pc, #148]	@ (8002b04 <vTaskStartScheduler+0xac>)
 8002a6e:	f7ff fe2f 	bl	80026d0 <xTaskCreate>
 8002a72:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d102      	bne.n	8002a80 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002a7a:	f000 fe2b 	bl	80036d4 <xTimerCreateTimerTask>
 8002a7e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d124      	bne.n	8002ad0 <vTaskStartScheduler+0x78>
        __asm volatile
 8002a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8a:	f383 8811 	msr	BASEPRI, r3
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	60bb      	str	r3, [r7, #8]
    }
 8002a98:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <vTaskStartScheduler+0xb0>)
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <vTaskStartScheduler+0xb4>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <vTaskStartScheduler+0xb8>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002aae:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <vTaskStartScheduler+0xbc>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <vTaskStartScheduler+0xa4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d102      	bne.n	8002ac0 <vTaskStartScheduler+0x68>
 8002aba:	f003 fb63 	bl	8006184 <SEGGER_SYSVIEW_OnIdle>
 8002abe:	e004      	b.n	8002aca <vTaskStartScheduler+0x72>
 8002ac0:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <vTaskStartScheduler+0xbc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fbbb 	bl	8006240 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002aca:	f001 f91b 	bl	8003d04 <xPortStartScheduler>
 8002ace:	e00f      	b.n	8002af0 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d10b      	bne.n	8002af0 <vTaskStartScheduler+0x98>
        __asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	607b      	str	r3, [r7, #4]
    }
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002af0:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <vTaskStartScheduler+0xc0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200001bc 	.word	0x200001bc
 8002b00:	08006718 	.word	0x08006718
 8002b04:	08003431 	.word	0x08003431
 8002b08:	200001b8 	.word	0x200001b8
 8002b0c:	200001a4 	.word	0x200001a4
 8002b10:	2000019c 	.word	0x2000019c
 8002b14:	200000c0 	.word	0x200000c0
 8002b18:	2000000c 	.word	0x2000000c

08002b1c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b20:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <vTaskSuspendAll+0x18>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	4a03      	ldr	r2, [pc, #12]	@ (8002b34 <vTaskSuspendAll+0x18>)
 8002b28:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	200001c0 	.word	0x200001c0

08002b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b46:	4b73      	ldr	r3, [pc, #460]	@ (8002d14 <xTaskResumeAll+0x1dc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10b      	bne.n	8002b66 <xTaskResumeAll+0x2e>
        __asm volatile
 8002b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	607b      	str	r3, [r7, #4]
    }
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	e7fd      	b.n	8002b62 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b66:	f001 f9f1 	bl	8003f4c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d14 <xTaskResumeAll+0x1dc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	4a68      	ldr	r2, [pc, #416]	@ (8002d14 <xTaskResumeAll+0x1dc>)
 8002b72:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b74:	4b67      	ldr	r3, [pc, #412]	@ (8002d14 <xTaskResumeAll+0x1dc>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 80c4 	bne.w	8002d06 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b7e:	4b66      	ldr	r3, [pc, #408]	@ (8002d18 <xTaskResumeAll+0x1e0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80bf 	beq.w	8002d06 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b88:	e08e      	b.n	8002ca8 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b8a:	4b64      	ldr	r3, [pc, #400]	@ (8002d1c <xTaskResumeAll+0x1e4>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	6a12      	ldr	r2, [r2, #32]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	69d2      	ldr	r2, [r2, #28]
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	3318      	adds	r3, #24
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d103      	bne.n	8002bc0 <xTaskResumeAll+0x88>
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1e5a      	subs	r2, r3, #1
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	6892      	ldr	r2, [r2, #8]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d103      	bne.n	8002bfe <xTaskResumeAll+0xc6>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2200      	movs	r2, #0
 8002c02:	615a      	str	r2, [r3, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	1e5a      	subs	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f003 fb57 	bl	80062c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	4b40      	ldr	r3, [pc, #256]	@ (8002d20 <xTaskResumeAll+0x1e8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	4a3e      	ldr	r2, [pc, #248]	@ (8002d20 <xTaskResumeAll+0x1e8>)
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c2c:	493d      	ldr	r1, [pc, #244]	@ (8002d24 <xTaskResumeAll+0x1ec>)
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3304      	adds	r3, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	60da      	str	r2, [r3, #12]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	3204      	adds	r2, #4
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	1d1a      	adds	r2, r3, #4
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8002d24 <xTaskResumeAll+0x1ec>)
 8002c6c:	441a      	add	r2, r3
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	615a      	str	r2, [r3, #20]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c76:	492b      	ldr	r1, [pc, #172]	@ (8002d24 <xTaskResumeAll+0x1ec>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	1c59      	adds	r1, r3, #1
 8002c86:	4827      	ldr	r0, [pc, #156]	@ (8002d24 <xTaskResumeAll+0x1ec>)
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4403      	add	r3, r0
 8002c92:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c98:	4b23      	ldr	r3, [pc, #140]	@ (8002d28 <xTaskResumeAll+0x1f0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002ca2:	4b22      	ldr	r3, [pc, #136]	@ (8002d2c <xTaskResumeAll+0x1f4>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d1c <xTaskResumeAll+0x1e4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f47f af6c 	bne.w	8002b8a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002cb8:	f000 fc52 	bl	8003560 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <xTaskResumeAll+0x1f8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002cc8:	f000 f858 	bl	8002d7c <xTaskIncrementTick>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002cd2:	4b16      	ldr	r3, [pc, #88]	@ (8002d2c <xTaskResumeAll+0x1f4>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f1      	bne.n	8002cc8 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <xTaskResumeAll+0x1f8>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <xTaskResumeAll+0x1f4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <xTaskResumeAll+0x1fc>)
 8002cf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d06:	f001 f953 	bl	8003fb0 <vPortExitCritical>

    return xAlreadyYielded;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200001c0 	.word	0x200001c0
 8002d18:	20000198 	.word	0x20000198
 8002d1c:	20000158 	.word	0x20000158
 8002d20:	200001a0 	.word	0x200001a0
 8002d24:	200000c4 	.word	0x200000c4
 8002d28:	200000c0 	.word	0x200000c0
 8002d2c:	200001ac 	.word	0x200001ac
 8002d30:	200001a8 	.word	0x200001a8
 8002d34:	e000ed04 	.word	0xe000ed04

08002d38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d3e:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <xTaskGetTickCount+0x1c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d44:	687b      	ldr	r3, [r7, #4]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	2000019c 	.word	0x2000019c

08002d58 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d5e:	f001 f9e5 	bl	800412c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002d62:	2300      	movs	r3, #0
 8002d64:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002d66:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <xTaskGetTickCountFromISR+0x20>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002d6c:	683b      	ldr	r3, [r7, #0]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	2000019c 	.word	0x2000019c

08002d7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d86:	4b80      	ldr	r3, [pc, #512]	@ (8002f88 <xTaskIncrementTick+0x20c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f040 80f1 	bne.w	8002f72 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d90:	4b7e      	ldr	r3, [pc, #504]	@ (8002f8c <xTaskIncrementTick+0x210>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d98:	4a7c      	ldr	r2, [pc, #496]	@ (8002f8c <xTaskIncrementTick+0x210>)
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d121      	bne.n	8002de8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002da4:	4b7a      	ldr	r3, [pc, #488]	@ (8002f90 <xTaskIncrementTick+0x214>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <xTaskIncrementTick+0x4a>
        __asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	607b      	str	r3, [r7, #4]
    }
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	e7fd      	b.n	8002dc2 <xTaskIncrementTick+0x46>
 8002dc6:	4b72      	ldr	r3, [pc, #456]	@ (8002f90 <xTaskIncrementTick+0x214>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	4b71      	ldr	r3, [pc, #452]	@ (8002f94 <xTaskIncrementTick+0x218>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a6f      	ldr	r2, [pc, #444]	@ (8002f90 <xTaskIncrementTick+0x214>)
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	4a6f      	ldr	r2, [pc, #444]	@ (8002f94 <xTaskIncrementTick+0x218>)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b6f      	ldr	r3, [pc, #444]	@ (8002f98 <xTaskIncrementTick+0x21c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	4a6d      	ldr	r2, [pc, #436]	@ (8002f98 <xTaskIncrementTick+0x21c>)
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	f000 fbbc 	bl	8003560 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002de8:	4b6c      	ldr	r3, [pc, #432]	@ (8002f9c <xTaskIncrementTick+0x220>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6a3a      	ldr	r2, [r7, #32]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	f0c0 80aa 	bcc.w	8002f48 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002df4:	4b66      	ldr	r3, [pc, #408]	@ (8002f90 <xTaskIncrementTick+0x214>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d104      	bne.n	8002e08 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dfe:	4b67      	ldr	r3, [pc, #412]	@ (8002f9c <xTaskIncrementTick+0x220>)
 8002e00:	f04f 32ff 	mov.w	r2, #4294967295
 8002e04:	601a      	str	r2, [r3, #0]
                    break;
 8002e06:	e09f      	b.n	8002f48 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e08:	4b61      	ldr	r3, [pc, #388]	@ (8002f90 <xTaskIncrementTick+0x214>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002e18:	6a3a      	ldr	r2, [r7, #32]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d203      	bcs.n	8002e28 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e20:	4a5e      	ldr	r2, [pc, #376]	@ (8002f9c <xTaskIncrementTick+0x220>)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002e26:	e08f      	b.n	8002f48 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	68d2      	ldr	r2, [r2, #12]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	6892      	ldr	r2, [r2, #8]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d103      	bne.n	8002e56 <xTaskIncrementTick+0xda>
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	615a      	str	r2, [r3, #20]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	1e5a      	subs	r2, r3, #1
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01e      	beq.n	8002eac <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	6a12      	ldr	r2, [r2, #32]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	69d2      	ldr	r2, [r2, #28]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	3318      	adds	r3, #24
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d103      	bne.n	8002e9c <xTaskIncrementTick+0x120>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	6a1a      	ldr	r2, [r3, #32]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	1e5a      	subs	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 fa08 	bl	80062c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	2201      	movs	r2, #1
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	4b38      	ldr	r3, [pc, #224]	@ (8002fa0 <xTaskIncrementTick+0x224>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	4a37      	ldr	r2, [pc, #220]	@ (8002fa0 <xTaskIncrementTick+0x224>)
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eca:	4936      	ldr	r1, [pc, #216]	@ (8002fa4 <xTaskIncrementTick+0x228>)
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	3204      	adds	r2, #4
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1d1a      	adds	r2, r3, #4
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4a26      	ldr	r2, [pc, #152]	@ (8002fa4 <xTaskIncrementTick+0x228>)
 8002f0a:	441a      	add	r2, r3
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	615a      	str	r2, [r3, #20]
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f14:	4923      	ldr	r1, [pc, #140]	@ (8002fa4 <xTaskIncrementTick+0x228>)
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	1c59      	adds	r1, r3, #1
 8002f24:	481f      	ldr	r0, [pc, #124]	@ (8002fa4 <xTaskIncrementTick+0x228>)
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4403      	add	r3, r0
 8002f30:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f36:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa8 <xTaskIncrementTick+0x22c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	f67f af59 	bls.w	8002df4 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8002f42:	2301      	movs	r3, #1
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f46:	e755      	b.n	8002df4 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f48:	4b17      	ldr	r3, [pc, #92]	@ (8002fa8 <xTaskIncrementTick+0x22c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f4e:	4915      	ldr	r1, [pc, #84]	@ (8002fa4 <xTaskIncrementTick+0x228>)
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d901      	bls.n	8002f64 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8002f60:	2301      	movs	r3, #1
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002f64:	4b11      	ldr	r3, [pc, #68]	@ (8002fac <xTaskIncrementTick+0x230>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f70:	e004      	b.n	8002f7c <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f72:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb0 <xTaskIncrementTick+0x234>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb0 <xTaskIncrementTick+0x234>)
 8002f7a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3728      	adds	r7, #40	@ 0x28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200001c0 	.word	0x200001c0
 8002f8c:	2000019c 	.word	0x2000019c
 8002f90:	20000150 	.word	0x20000150
 8002f94:	20000154 	.word	0x20000154
 8002f98:	200001b0 	.word	0x200001b0
 8002f9c:	200001b8 	.word	0x200001b8
 8002fa0:	200001a0 	.word	0x200001a0
 8002fa4:	200000c4 	.word	0x200000c4
 8002fa8:	200000c0 	.word	0x200000c0
 8002fac:	200001ac 	.word	0x200001ac
 8002fb0:	200001a8 	.word	0x200001a8

08002fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fba:	4b2d      	ldr	r3, [pc, #180]	@ (8003070 <vTaskSwitchContext+0xbc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003074 <vTaskSwitchContext+0xc0>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002fc8:	e04e      	b.n	8003068 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8002fca:	4b2a      	ldr	r3, [pc, #168]	@ (8003074 <vTaskSwitchContext+0xc0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd0:	4b29      	ldr	r3, [pc, #164]	@ (8003078 <vTaskSwitchContext+0xc4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	f1c3 031f 	rsb	r3, r3, #31
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	4925      	ldr	r1, [pc, #148]	@ (800307c <vTaskSwitchContext+0xc8>)
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10b      	bne.n	8003012 <vTaskSwitchContext+0x5e>
        __asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	607b      	str	r3, [r7, #4]
    }
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	e7fd      	b.n	800300e <vTaskSwitchContext+0x5a>
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4a17      	ldr	r2, [pc, #92]	@ (800307c <vTaskSwitchContext+0xc8>)
 800301e:	4413      	add	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	3308      	adds	r3, #8
 8003034:	429a      	cmp	r2, r3
 8003036:	d104      	bne.n	8003042 <vTaskSwitchContext+0x8e>
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a0d      	ldr	r2, [pc, #52]	@ (8003080 <vTaskSwitchContext+0xcc>)
 800304a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800304c:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <vTaskSwitchContext+0xcc>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b0c      	ldr	r3, [pc, #48]	@ (8003084 <vTaskSwitchContext+0xd0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d102      	bne.n	800305e <vTaskSwitchContext+0xaa>
 8003058:	f003 f894 	bl	8006184 <SEGGER_SYSVIEW_OnIdle>
}
 800305c:	e004      	b.n	8003068 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800305e:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <vTaskSwitchContext+0xcc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f003 f8ec 	bl	8006240 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003068:	bf00      	nop
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	200001c0 	.word	0x200001c0
 8003074:	200001ac 	.word	0x200001ac
 8003078:	200001a0 	.word	0x200001a0
 800307c:	200000c4 	.word	0x200000c4
 8003080:	200000c0 	.word	0x200000c0
 8003084:	200001bc 	.word	0x200001bc

08003088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10b      	bne.n	80030b0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	60fb      	str	r3, [r7, #12]
    }
 80030aa:	bf00      	nop
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030b0:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <vTaskPlaceOnEventList+0x48>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3318      	adds	r3, #24
 80030b6:	4619      	mov	r1, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7fe ff6e 	bl	8001f9a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030be:	2101      	movs	r1, #1
 80030c0:	6838      	ldr	r0, [r7, #0]
 80030c2:	f000 fa87 	bl	80035d4 <prvAddCurrentTaskToDelayedList>
}
 80030c6:	bf00      	nop
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200000c0 	.word	0x200000c0

080030d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10b      	bne.n	80030fe <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	613b      	str	r3, [r7, #16]
    }
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	e7fd      	b.n	80030fa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	4b17      	ldr	r3, [pc, #92]	@ (8003164 <vTaskPlaceOnEventListRestricted+0x90>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	61da      	str	r2, [r3, #28]
 800310c:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <vTaskPlaceOnEventListRestricted+0x90>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	6892      	ldr	r2, [r2, #8]
 8003114:	621a      	str	r2, [r3, #32]
 8003116:	4b13      	ldr	r3, [pc, #76]	@ (8003164 <vTaskPlaceOnEventListRestricted+0x90>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	3218      	adds	r2, #24
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <vTaskPlaceOnEventListRestricted+0x90>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f103 0218 	add.w	r2, r3, #24
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <vTaskPlaceOnEventListRestricted+0x90>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	629a      	str	r2, [r3, #40]	@ 0x28
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800314c:	2024      	movs	r0, #36	@ 0x24
 800314e:	f002 fb1b 	bl	8005788 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	68b8      	ldr	r0, [r7, #8]
 8003156:	f000 fa3d 	bl	80035d4 <prvAddCurrentTaskToDelayedList>
    }
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200000c0 	.word	0x200000c0

08003168 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	@ 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10b      	bne.n	8003196 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	60fb      	str	r3, [r7, #12]
    }
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	e7fd      	b.n	8003192 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	6a12      	ldr	r2, [r2, #32]
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	6a3a      	ldr	r2, [r7, #32]
 80031ac:	69d2      	ldr	r2, [r2, #28]
 80031ae:	605a      	str	r2, [r3, #4]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	3318      	adds	r3, #24
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d103      	bne.n	80031c4 <xTaskRemoveFromEventList+0x5c>
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	6a1a      	ldr	r2, [r3, #32]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	2200      	movs	r2, #0
 80031c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	1e5a      	subs	r2, r3, #1
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003304 <xTaskRemoveFromEventList+0x19c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d162      	bne.n	80032a2 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	6a3a      	ldr	r2, [r7, #32]
 80031e8:	68d2      	ldr	r2, [r2, #12]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	6892      	ldr	r2, [r2, #8]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	3304      	adds	r3, #4
 80031fe:	429a      	cmp	r2, r3
 8003200:	d103      	bne.n	800320a <xTaskRemoveFromEventList+0xa2>
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	2200      	movs	r2, #0
 800320e:	615a      	str	r2, [r3, #20]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	1e5a      	subs	r2, r3, #1
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	4618      	mov	r0, r3
 800321e:	f003 f851 	bl	80062c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003226:	2201      	movs	r2, #1
 8003228:	409a      	lsls	r2, r3
 800322a:	4b37      	ldr	r3, [pc, #220]	@ (8003308 <xTaskRemoveFromEventList+0x1a0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	4a35      	ldr	r2, [pc, #212]	@ (8003308 <xTaskRemoveFromEventList+0x1a0>)
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003238:	4934      	ldr	r1, [pc, #208]	@ (800330c <xTaskRemoveFromEventList+0x1a4>)
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	3304      	adds	r3, #4
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	60da      	str	r2, [r3, #12]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	6a3a      	ldr	r2, [r7, #32]
 800325e:	3204      	adds	r2, #4
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	1d1a      	adds	r2, r3, #4
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4a25      	ldr	r2, [pc, #148]	@ (800330c <xTaskRemoveFromEventList+0x1a4>)
 8003278:	441a      	add	r2, r3
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	615a      	str	r2, [r3, #20]
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003282:	4922      	ldr	r1, [pc, #136]	@ (800330c <xTaskRemoveFromEventList+0x1a4>)
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	1c59      	adds	r1, r3, #1
 8003292:	481e      	ldr	r0, [pc, #120]	@ (800330c <xTaskRemoveFromEventList+0x1a4>)
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4403      	add	r3, r0
 800329e:	6019      	str	r1, [r3, #0]
 80032a0:	e01b      	b.n	80032da <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <xTaskRemoveFromEventList+0x1a8>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	61da      	str	r2, [r3, #28]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	621a      	str	r2, [r3, #32]
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	6a3a      	ldr	r2, [r7, #32]
 80032bc:	3218      	adds	r2, #24
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	f103 0218 	add.w	r2, r3, #24
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	4a10      	ldr	r2, [pc, #64]	@ (8003310 <xTaskRemoveFromEventList+0x1a8>)
 80032ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80032d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003310 <xTaskRemoveFromEventList+0x1a8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003310 <xTaskRemoveFromEventList+0x1a8>)
 80032d8:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032de:	4b0d      	ldr	r3, [pc, #52]	@ (8003314 <xTaskRemoveFromEventList+0x1ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d905      	bls.n	80032f4 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80032e8:	2301      	movs	r3, #1
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80032ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <xTaskRemoveFromEventList+0x1b0>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e001      	b.n	80032f8 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3728      	adds	r7, #40	@ 0x28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200001c0 	.word	0x200001c0
 8003308:	200001a0 	.word	0x200001a0
 800330c:	200000c4 	.word	0x200000c4
 8003310:	20000158 	.word	0x20000158
 8003314:	200000c0 	.word	0x200000c0
 8003318:	200001ac 	.word	0x200001ac

0800331c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003324:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <vTaskInternalSetTimeOutState+0x24>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800332c:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <vTaskInternalSetTimeOutState+0x28>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	605a      	str	r2, [r3, #4]
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	200001b0 	.word	0x200001b0
 8003344:	2000019c 	.word	0x2000019c

08003348 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10b      	bne.n	8003370 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	613b      	str	r3, [r7, #16]
    }
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10b      	bne.n	800338e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	60fb      	str	r3, [r7, #12]
    }
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	e7fd      	b.n	800338a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800338e:	f000 fddd 	bl	8003f4c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003392:	4b1f      	ldr	r3, [pc, #124]	@ (8003410 <xTaskCheckForTimeOut+0xc8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d102      	bne.n	80033b2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	e026      	b.n	8003400 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b17      	ldr	r3, [pc, #92]	@ (8003414 <xTaskCheckForTimeOut+0xcc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d00a      	beq.n	80033d4 <xTaskCheckForTimeOut+0x8c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d305      	bcc.n	80033d4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80033c8:	2301      	movs	r3, #1
 80033ca:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e015      	b.n	8003400 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d20b      	bcs.n	80033f6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	1ad2      	subs	r2, r2, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ff96 	bl	800331c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	e004      	b.n	8003400 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003400:	f000 fdd6 	bl	8003fb0 <vPortExitCritical>

    return xReturn;
 8003404:	69fb      	ldr	r3, [r7, #28]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	2000019c 	.word	0x2000019c
 8003414:	200001b0 	.word	0x200001b0

08003418 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800341c:	4b03      	ldr	r3, [pc, #12]	@ (800342c <vTaskMissedYield+0x14>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	200001ac 	.word	0x200001ac

08003430 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003438:	f000 f854 	bl	80034e4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800343c:	4b07      	ldr	r3, [pc, #28]	@ (800345c <prvIdleTask+0x2c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d907      	bls.n	8003454 <prvIdleTask+0x24>
            {
                taskYIELD();
 8003444:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <prvIdleTask+0x30>)
 8003446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8003454:	f7fd fa28 	bl	80008a8 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003458:	e7ee      	b.n	8003438 <prvIdleTask+0x8>
 800345a:	bf00      	nop
 800345c:	200000c4 	.word	0x200000c4
 8003460:	e000ed04 	.word	0xe000ed04

08003464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	e00c      	b.n	800348a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4a12      	ldr	r2, [pc, #72]	@ (80034c4 <prvInitialiseTaskLists+0x60>)
 800347c:	4413      	add	r3, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe fd5e 	bl	8001f40 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3301      	adds	r3, #1
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d9ef      	bls.n	8003470 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003490:	480d      	ldr	r0, [pc, #52]	@ (80034c8 <prvInitialiseTaskLists+0x64>)
 8003492:	f7fe fd55 	bl	8001f40 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003496:	480d      	ldr	r0, [pc, #52]	@ (80034cc <prvInitialiseTaskLists+0x68>)
 8003498:	f7fe fd52 	bl	8001f40 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800349c:	480c      	ldr	r0, [pc, #48]	@ (80034d0 <prvInitialiseTaskLists+0x6c>)
 800349e:	f7fe fd4f 	bl	8001f40 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80034a2:	480c      	ldr	r0, [pc, #48]	@ (80034d4 <prvInitialiseTaskLists+0x70>)
 80034a4:	f7fe fd4c 	bl	8001f40 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80034a8:	480b      	ldr	r0, [pc, #44]	@ (80034d8 <prvInitialiseTaskLists+0x74>)
 80034aa:	f7fe fd49 	bl	8001f40 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80034ae:	4b0b      	ldr	r3, [pc, #44]	@ (80034dc <prvInitialiseTaskLists+0x78>)
 80034b0:	4a05      	ldr	r2, [pc, #20]	@ (80034c8 <prvInitialiseTaskLists+0x64>)
 80034b2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034b4:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <prvInitialiseTaskLists+0x7c>)
 80034b6:	4a05      	ldr	r2, [pc, #20]	@ (80034cc <prvInitialiseTaskLists+0x68>)
 80034b8:	601a      	str	r2, [r3, #0]
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	200000c4 	.word	0x200000c4
 80034c8:	20000128 	.word	0x20000128
 80034cc:	2000013c 	.word	0x2000013c
 80034d0:	20000158 	.word	0x20000158
 80034d4:	2000016c 	.word	0x2000016c
 80034d8:	20000184 	.word	0x20000184
 80034dc:	20000150 	.word	0x20000150
 80034e0:	20000154 	.word	0x20000154

080034e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034ea:	e019      	b.n	8003520 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80034ec:	f000 fd2e 	bl	8003f4c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f0:	4b10      	ldr	r3, [pc, #64]	@ (8003534 <prvCheckTasksWaitingTermination+0x50>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe fd85 	bl	800200c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003502:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <prvCheckTasksWaitingTermination+0x54>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3b01      	subs	r3, #1
 8003508:	4a0b      	ldr	r2, [pc, #44]	@ (8003538 <prvCheckTasksWaitingTermination+0x54>)
 800350a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800350c:	4b0b      	ldr	r3, [pc, #44]	@ (800353c <prvCheckTasksWaitingTermination+0x58>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3b01      	subs	r3, #1
 8003512:	4a0a      	ldr	r2, [pc, #40]	@ (800353c <prvCheckTasksWaitingTermination+0x58>)
 8003514:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003516:	f000 fd4b 	bl	8003fb0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f810 	bl	8003540 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003520:	4b06      	ldr	r3, [pc, #24]	@ (800353c <prvCheckTasksWaitingTermination+0x58>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e1      	bne.n	80034ec <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	2000016c 	.word	0x2000016c
 8003538:	20000198 	.word	0x20000198
 800353c:	20000180 	.word	0x20000180

08003540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	4618      	mov	r0, r3
 800354e:	f000 feeb 	bl	8004328 <vPortFree>
            vPortFree( pxTCB );
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fee8 	bl	8004328 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003564:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <prvResetNextTaskUnblockTime+0x30>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800356e:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <prvResetNextTaskUnblockTime+0x34>)
 8003570:	f04f 32ff 	mov.w	r2, #4294967295
 8003574:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003576:	e005      	b.n	8003584 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <prvResetNextTaskUnblockTime+0x30>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a04      	ldr	r2, [pc, #16]	@ (8003594 <prvResetNextTaskUnblockTime+0x34>)
 8003582:	6013      	str	r3, [r2, #0]
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000150 	.word	0x20000150
 8003594:	200001b8 	.word	0x200001b8

08003598 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800359e:	4b0b      	ldr	r3, [pc, #44]	@ (80035cc <xTaskGetSchedulerState+0x34>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80035a6:	2301      	movs	r3, #1
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	e008      	b.n	80035be <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ac:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <xTaskGetSchedulerState+0x38>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80035b4:	2302      	movs	r3, #2
 80035b6:	607b      	str	r3, [r7, #4]
 80035b8:	e001      	b.n	80035be <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80035be:	687b      	ldr	r3, [r7, #4]
    }
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	200001a4 	.word	0x200001a4
 80035d0:	200001c0 	.word	0x200001c0

080035d4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80035de:	4b36      	ldr	r3, [pc, #216]	@ (80036b8 <prvAddCurrentTaskToDelayedList+0xe4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035e4:	4b35      	ldr	r3, [pc, #212]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xe8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3304      	adds	r3, #4
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fd0e 	bl	800200c <uxListRemove>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80035f6:	4b31      	ldr	r3, [pc, #196]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xe8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	2201      	movs	r2, #1
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43da      	mvns	r2, r3
 8003604:	4b2e      	ldr	r3, [pc, #184]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4013      	ands	r3, r2
 800360a:	4a2d      	ldr	r2, [pc, #180]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xec>)
 800360c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d124      	bne.n	8003660 <prvAddCurrentTaskToDelayedList+0x8c>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d021      	beq.n	8003660 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800361c:	4b29      	ldr	r3, [pc, #164]	@ (80036c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	4b26      	ldr	r3, [pc, #152]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	609a      	str	r2, [r3, #8]
 800362a:	4b24      	ldr	r3, [pc, #144]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	6892      	ldr	r2, [r2, #8]
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	4b21      	ldr	r3, [pc, #132]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	3204      	adds	r2, #4
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	4b1e      	ldr	r3, [pc, #120]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	1d1a      	adds	r2, r3, #4
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	4b1c      	ldr	r3, [pc, #112]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1d      	ldr	r2, [pc, #116]	@ (80036c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003650:	615a      	str	r2, [r3, #20]
 8003652:	4b1c      	ldr	r3, [pc, #112]	@ (80036c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3301      	adds	r3, #1
 8003658:	4a1a      	ldr	r2, [pc, #104]	@ (80036c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800365e:	e026      	b.n	80036ae <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003668:	4b14      	ldr	r3, [pc, #80]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	d209      	bcs.n	800368c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003678:	4b13      	ldr	r3, [pc, #76]	@ (80036c8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b0f      	ldr	r3, [pc, #60]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3304      	adds	r3, #4
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7fe fc88 	bl	8001f9a <vListInsert>
}
 800368a:	e010      	b.n	80036ae <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800368c:	4b0f      	ldr	r3, [pc, #60]	@ (80036cc <prvAddCurrentTaskToDelayedList+0xf8>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3304      	adds	r3, #4
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f7fe fc7e 	bl	8001f9a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800369e:	4b0c      	ldr	r3, [pc, #48]	@ (80036d0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d202      	bcs.n	80036ae <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80036a8:	4a09      	ldr	r2, [pc, #36]	@ (80036d0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6013      	str	r3, [r2, #0]
}
 80036ae:	bf00      	nop
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	2000019c 	.word	0x2000019c
 80036bc:	200000c0 	.word	0x200000c0
 80036c0:	200001a0 	.word	0x200001a0
 80036c4:	20000184 	.word	0x20000184
 80036c8:	20000154 	.word	0x20000154
 80036cc:	20000150 	.word	0x20000150
 80036d0:	200001b8 	.word	0x200001b8

080036d4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80036de:	f000 fa4f 	bl	8003b80 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80036e2:	4b12      	ldr	r3, [pc, #72]	@ (800372c <xTimerCreateTimerTask+0x58>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80036ea:	4b11      	ldr	r3, [pc, #68]	@ (8003730 <xTimerCreateTimerTask+0x5c>)
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	2302      	movs	r3, #2
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2300      	movs	r3, #0
 80036f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80036f8:	490e      	ldr	r1, [pc, #56]	@ (8003734 <xTimerCreateTimerTask+0x60>)
 80036fa:	480f      	ldr	r0, [pc, #60]	@ (8003738 <xTimerCreateTimerTask+0x64>)
 80036fc:	f7fe ffe8 	bl	80026d0 <xTaskCreate>
 8003700:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	603b      	str	r3, [r7, #0]
    }
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003720:	687b      	ldr	r3, [r7, #4]
    }
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	200001f4 	.word	0x200001f4
 8003730:	200001f8 	.word	0x200001f8
 8003734:	08006720 	.word	0x08006720
 8003738:	080037e1 	.word	0x080037e1

0800373c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003748:	e008      	b.n	800375c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	4413      	add	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	18d1      	adds	r1, r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f8df 	bl	800392c <prvInsertTimerInActiveList>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1ea      	bne.n	800374a <prvReloadTimer+0xe>
        }
    }
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800378a:	4b14      	ldr	r3, [pc, #80]	@ (80037dc <prvProcessExpiredTimer+0x5c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3304      	adds	r3, #4
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe fc37 	bl	800200c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7ff ffc3 	bl	800373c <prvReloadTimer>
 80037b6:	e008      	b.n	80037ca <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	4798      	blx	r3
    }
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200001ec 	.word	0x200001ec

080037e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037e8:	f107 0308 	add.w	r3, r7, #8
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f859 	bl	80038a4 <prvGetNextExpireTime>
 80037f2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4619      	mov	r1, r3
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f805 	bl	8003808 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80037fe:	f000 f8d7 	bl	80039b0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003802:	bf00      	nop
 8003804:	e7f0      	b.n	80037e8 <prvTimerTask+0x8>
	...

08003808 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003812:	f7ff f983 	bl	8002b1c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003816:	f107 0308 	add.w	r3, r7, #8
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f866 	bl	80038ec <prvSampleTimeNow>
 8003820:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d130      	bne.n	800388a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <prvProcessTimerOrBlockTask+0x3c>
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	429a      	cmp	r2, r3
 8003834:	d806      	bhi.n	8003844 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003836:	f7ff f97f 	bl	8002b38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800383a:	68f9      	ldr	r1, [r7, #12]
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ff9f 	bl	8003780 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003842:	e024      	b.n	800388e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800384a:	4b13      	ldr	r3, [pc, #76]	@ (8003898 <prvProcessTimerOrBlockTask+0x90>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <prvProcessTimerOrBlockTask+0x50>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <prvProcessTimerOrBlockTask+0x52>
 8003858:	2300      	movs	r3, #0
 800385a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800385c:	4b0f      	ldr	r3, [pc, #60]	@ (800389c <prvProcessTimerOrBlockTask+0x94>)
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	4619      	mov	r1, r3
 800386a:	f7fe fefd 	bl	8002668 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800386e:	f7ff f963 	bl	8002b38 <xTaskResumeAll>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003878:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <prvProcessTimerOrBlockTask+0x98>)
 800387a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	f3bf 8f6f 	isb	sy
    }
 8003888:	e001      	b.n	800388e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800388a:	f7ff f955 	bl	8002b38 <xTaskResumeAll>
    }
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200001f0 	.word	0x200001f0
 800389c:	200001f4 	.word	0x200001f4
 80038a0:	e000ed04 	.word	0xe000ed04

080038a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80038ac:	4b0e      	ldr	r3, [pc, #56]	@ (80038e8 <prvGetNextExpireTime+0x44>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <prvGetNextExpireTime+0x16>
 80038b6:	2201      	movs	r2, #1
 80038b8:	e000      	b.n	80038bc <prvGetNextExpireTime+0x18>
 80038ba:	2200      	movs	r2, #0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d105      	bne.n	80038d4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038c8:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <prvGetNextExpireTime+0x44>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	e001      	b.n	80038d8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80038d8:	68fb      	ldr	r3, [r7, #12]
    }
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	200001ec 	.word	0x200001ec

080038ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80038f4:	f7ff fa20 	bl	8002d38 <xTaskGetTickCount>
 80038f8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80038fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <prvSampleTimeNow+0x3c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	429a      	cmp	r2, r3
 8003902:	d205      	bcs.n	8003910 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003904:	f000 f916 	bl	8003b34 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e002      	b.n	8003916 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003916:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <prvSampleTimeNow+0x3c>)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800391c:	68fb      	ldr	r3, [r7, #12]
    }
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	200001fc 	.word	0x200001fc

0800392c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	429a      	cmp	r2, r3
 8003950:	d812      	bhi.n	8003978 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	1ad2      	subs	r2, r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	429a      	cmp	r2, r3
 800395e:	d302      	bcc.n	8003966 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003960:	2301      	movs	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e01b      	b.n	800399e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003966:	4b10      	ldr	r3, [pc, #64]	@ (80039a8 <prvInsertTimerInActiveList+0x7c>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3304      	adds	r3, #4
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f7fe fb12 	bl	8001f9a <vListInsert>
 8003976:	e012      	b.n	800399e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d206      	bcs.n	800398e <prvInsertTimerInActiveList+0x62>
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d302      	bcc.n	800398e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003988:	2301      	movs	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	e007      	b.n	800399e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800398e:	4b07      	ldr	r3, [pc, #28]	@ (80039ac <prvInsertTimerInActiveList+0x80>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3304      	adds	r3, #4
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f7fe fafe 	bl	8001f9a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800399e:	697b      	ldr	r3, [r7, #20]
    }
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200001f0 	.word	0x200001f0
 80039ac:	200001ec 	.word	0x200001ec

080039b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039b6:	e0a9      	b.n	8003b0c <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f2c0 80a6 	blt.w	8003b0c <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	3304      	adds	r3, #4
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe fb1b 	bl	800200c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039d6:	1d3b      	adds	r3, r7, #4
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff87 	bl	80038ec <prvSampleTimeNow>
 80039de:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	f200 808e 	bhi.w	8003b06 <prvProcessReceivedCommands+0x156>
 80039ea:	a201      	add	r2, pc, #4	@ (adr r2, 80039f0 <prvProcessReceivedCommands+0x40>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003a15 	.word	0x08003a15
 80039f4:	08003a15 	.word	0x08003a15
 80039f8:	08003a7d 	.word	0x08003a7d
 80039fc:	08003a91 	.word	0x08003a91
 8003a00:	08003add 	.word	0x08003add
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a15 	.word	0x08003a15
 8003a0c:	08003a7d 	.word	0x08003a7d
 8003a10:	08003a91 	.word	0x08003a91
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	18d1      	adds	r1, r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	69f8      	ldr	r0, [r7, #28]
 8003a34:	f7ff ff7a 	bl	800392c <prvInsertTimerInActiveList>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d065      	beq.n	8003b0a <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	4413      	add	r3, r2
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4619      	mov	r1, r3
 8003a58:	69f8      	ldr	r0, [r7, #28]
 8003a5a:	f7ff fe6f 	bl	800373c <prvReloadTimer>
 8003a5e:	e008      	b.n	8003a72 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	69f8      	ldr	r0, [r7, #28]
 8003a78:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003a7a:	e046      	b.n	8003b0a <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003a8e:	e03d      	b.n	8003b0c <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	617b      	str	r3, [r7, #20]
    }
 8003ac2:	bf00      	nop
 8003ac4:	bf00      	nop
 8003ac6:	e7fd      	b.n	8003ac4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	18d1      	adds	r1, r2, r3
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	69f8      	ldr	r0, [r7, #28]
 8003ad6:	f7ff ff29 	bl	800392c <prvInsertTimerInActiveList>
                        break;
 8003ada:	e017      	b.n	8003b0c <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003aea:	69f8      	ldr	r0, [r7, #28]
 8003aec:	f000 fc1c 	bl	8004328 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003af0:	e00c      	b.n	8003b0c <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003b04:	e002      	b.n	8003b0c <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003b06:	bf00      	nop
 8003b08:	e000      	b.n	8003b0c <prvProcessReceivedCommands+0x15c>
                        break;
 8003b0a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b0c:	4b08      	ldr	r3, [pc, #32]	@ (8003b30 <prvProcessReceivedCommands+0x180>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f107 0108 	add.w	r1, r7, #8
 8003b14:	2200      	movs	r2, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fbac 	bl	8002274 <xQueueReceive>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f47f af4a 	bne.w	80039b8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200001f4 	.word	0x200001f4

08003b34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b3a:	e009      	b.n	8003b50 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b78 <prvSwitchTimerLists+0x44>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003b46:	f04f 31ff 	mov.w	r1, #4294967295
 8003b4a:	6838      	ldr	r0, [r7, #0]
 8003b4c:	f7ff fe18 	bl	8003780 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b50:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <prvSwitchTimerLists+0x44>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003b5a:	4b07      	ldr	r3, [pc, #28]	@ (8003b78 <prvSwitchTimerLists+0x44>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003b60:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <prvSwitchTimerLists+0x48>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a04      	ldr	r2, [pc, #16]	@ (8003b78 <prvSwitchTimerLists+0x44>)
 8003b66:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003b68:	4a04      	ldr	r2, [pc, #16]	@ (8003b7c <prvSwitchTimerLists+0x48>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6013      	str	r3, [r2, #0]
    }
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	200001ec 	.word	0x200001ec
 8003b7c:	200001f0 	.word	0x200001f0

08003b80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003b84:	f000 f9e2 	bl	8003f4c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003b88:	4b12      	ldr	r3, [pc, #72]	@ (8003bd4 <prvCheckForValidListAndQueue+0x54>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d11d      	bne.n	8003bcc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003b90:	4811      	ldr	r0, [pc, #68]	@ (8003bd8 <prvCheckForValidListAndQueue+0x58>)
 8003b92:	f7fe f9d5 	bl	8001f40 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003b96:	4811      	ldr	r0, [pc, #68]	@ (8003bdc <prvCheckForValidListAndQueue+0x5c>)
 8003b98:	f7fe f9d2 	bl	8001f40 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003b9c:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <prvCheckForValidListAndQueue+0x60>)
 8003b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003bd8 <prvCheckForValidListAndQueue+0x58>)
 8003ba0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <prvCheckForValidListAndQueue+0x64>)
 8003ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8003bdc <prvCheckForValidListAndQueue+0x5c>)
 8003ba6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003ba8:	2200      	movs	r2, #0
 8003baa:	210c      	movs	r1, #12
 8003bac:	200a      	movs	r0, #10
 8003bae:	f7fe fae9 	bl	8002184 <xQueueGenericCreate>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4a07      	ldr	r2, [pc, #28]	@ (8003bd4 <prvCheckForValidListAndQueue+0x54>)
 8003bb6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003bb8:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <prvCheckForValidListAndQueue+0x54>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <prvCheckForValidListAndQueue+0x54>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4908      	ldr	r1, [pc, #32]	@ (8003be8 <prvCheckForValidListAndQueue+0x68>)
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fcf6 	bl	80025b8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003bcc:	f000 f9f0 	bl	8003fb0 <vPortExitCritical>
    }
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	200001f4 	.word	0x200001f4
 8003bd8:	200001c4 	.word	0x200001c4
 8003bdc:	200001d8 	.word	0x200001d8
 8003be0:	200001ec 	.word	0x200001ec
 8003be4:	200001f0 	.word	0x200001f0
 8003be8:	08006728 	.word	0x08006728

08003bec <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3b04      	subs	r3, #4
 8003bfc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3b04      	subs	r3, #4
 8003c0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f023 0201 	bic.w	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3b04      	subs	r3, #4
 8003c1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003c50 <pxPortInitialiseStack+0x64>)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3b14      	subs	r3, #20
 8003c26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3b04      	subs	r3, #4
 8003c32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f06f 0202 	mvn.w	r2, #2
 8003c3a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3b20      	subs	r3, #32
 8003c40:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003c42:	68fb      	ldr	r3, [r7, #12]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	08003c55 	.word	0x08003c55

08003c54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003c5e:	4b13      	ldr	r3, [pc, #76]	@ (8003cac <prvTaskExitError+0x58>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d00b      	beq.n	8003c80 <prvTaskExitError+0x2c>
        __asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	60fb      	str	r3, [r7, #12]
    }
 8003c7a:	bf00      	nop
 8003c7c:	bf00      	nop
 8003c7e:	e7fd      	b.n	8003c7c <prvTaskExitError+0x28>
        __asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60bb      	str	r3, [r7, #8]
    }
 8003c92:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003c94:	bf00      	nop
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0fc      	beq.n	8003c96 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000010 	.word	0x20000010

08003cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003cb0:	4b07      	ldr	r3, [pc, #28]	@ (8003cd0 <pxCurrentTCBConst2>)
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	6808      	ldr	r0, [r1, #0]
 8003cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cba:	f380 8809 	msr	PSP, r0
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f380 8811 	msr	BASEPRI, r0
 8003cca:	4770      	bx	lr
 8003ccc:	f3af 8000 	nop.w

08003cd0 <pxCurrentTCBConst2>:
 8003cd0:	200000c0 	.word	0x200000c0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop

08003cd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003cd8:	4808      	ldr	r0, [pc, #32]	@ (8003cfc <prvPortStartFirstTask+0x24>)
 8003cda:	6800      	ldr	r0, [r0, #0]
 8003cdc:	6800      	ldr	r0, [r0, #0]
 8003cde:	f380 8808 	msr	MSP, r0
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f380 8814 	msr	CONTROL, r0
 8003cea:	b662      	cpsie	i
 8003cec:	b661      	cpsie	f
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	df00      	svc	0
 8003cf8:	bf00      	nop
 8003cfa:	0000      	.short	0x0000
 8003cfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop

08003d04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d0a:	4b47      	ldr	r3, [pc, #284]	@ (8003e28 <xPortStartScheduler+0x124>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a47      	ldr	r2, [pc, #284]	@ (8003e2c <xPortStartScheduler+0x128>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d10b      	bne.n	8003d2c <xPortStartScheduler+0x28>
        __asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	613b      	str	r3, [r7, #16]
    }
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	e7fd      	b.n	8003d28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e28 <xPortStartScheduler+0x124>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a3f      	ldr	r2, [pc, #252]	@ (8003e30 <xPortStartScheduler+0x12c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10b      	bne.n	8003d4e <xPortStartScheduler+0x4a>
        __asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	60fb      	str	r3, [r7, #12]
    }
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	e7fd      	b.n	8003d4a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d4e:	4b39      	ldr	r3, [pc, #228]	@ (8003e34 <xPortStartScheduler+0x130>)
 8003d50:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	22ff      	movs	r2, #255	@ 0xff
 8003d5e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4b31      	ldr	r3, [pc, #196]	@ (8003e38 <xPortStartScheduler+0x134>)
 8003d74:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d76:	4b31      	ldr	r3, [pc, #196]	@ (8003e3c <xPortStartScheduler+0x138>)
 8003d78:	2207      	movs	r2, #7
 8003d7a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d7c:	e009      	b.n	8003d92 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e3c <xPortStartScheduler+0x138>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	4a2d      	ldr	r2, [pc, #180]	@ (8003e3c <xPortStartScheduler+0x138>)
 8003d86:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9a:	2b80      	cmp	r3, #128	@ 0x80
 8003d9c:	d0ef      	beq.n	8003d7e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d9e:	4b27      	ldr	r3, [pc, #156]	@ (8003e3c <xPortStartScheduler+0x138>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1c3 0307 	rsb	r3, r3, #7
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d00b      	beq.n	8003dc2 <xPortStartScheduler+0xbe>
        __asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60bb      	str	r3, [r7, #8]
    }
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	e7fd      	b.n	8003dbe <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e3c <xPortStartScheduler+0x138>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e3c <xPortStartScheduler+0x138>)
 8003dca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e3c <xPortStartScheduler+0x138>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003dd4:	4a19      	ldr	r2, [pc, #100]	@ (8003e3c <xPortStartScheduler+0x138>)
 8003dd6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003de0:	4b17      	ldr	r3, [pc, #92]	@ (8003e40 <xPortStartScheduler+0x13c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a16      	ldr	r2, [pc, #88]	@ (8003e40 <xPortStartScheduler+0x13c>)
 8003de6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003dea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003dec:	4b14      	ldr	r3, [pc, #80]	@ (8003e40 <xPortStartScheduler+0x13c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a13      	ldr	r2, [pc, #76]	@ (8003e40 <xPortStartScheduler+0x13c>)
 8003df2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003df6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003df8:	f000 f968 	bl	80040cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003dfc:	4b11      	ldr	r3, [pc, #68]	@ (8003e44 <xPortStartScheduler+0x140>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003e02:	f000 f987 	bl	8004114 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e06:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <xPortStartScheduler+0x144>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8003e48 <xPortStartScheduler+0x144>)
 8003e0c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003e10:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003e12:	f7ff ff61 	bl	8003cd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003e16:	f7ff f8cd 	bl	8002fb4 <vTaskSwitchContext>
    prvTaskExitError();
 8003e1a:	f7ff ff1b 	bl	8003c54 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	e000ed00 	.word	0xe000ed00
 8003e2c:	410fc271 	.word	0x410fc271
 8003e30:	410fc270 	.word	0x410fc270
 8003e34:	e000e400 	.word	0xe000e400
 8003e38:	20000200 	.word	0x20000200
 8003e3c:	20000014 	.word	0x20000014
 8003e40:	e000ed20 	.word	0xe000ed20
 8003e44:	20000010 	.word	0x20000010
 8003e48:	e000ef34 	.word	0xe000ef34

08003e4c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e52:	4b38      	ldr	r3, [pc, #224]	@ (8003f34 <vInitPrioGroupValue+0xe8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a38      	ldr	r2, [pc, #224]	@ (8003f38 <vInitPrioGroupValue+0xec>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10b      	bne.n	8003e74 <vInitPrioGroupValue+0x28>
        __asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	613b      	str	r3, [r7, #16]
    }
 8003e6e:	bf00      	nop
 8003e70:	bf00      	nop
 8003e72:	e7fd      	b.n	8003e70 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e74:	4b2f      	ldr	r3, [pc, #188]	@ (8003f34 <vInitPrioGroupValue+0xe8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a30      	ldr	r2, [pc, #192]	@ (8003f3c <vInitPrioGroupValue+0xf0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d10b      	bne.n	8003e96 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	60fb      	str	r3, [r7, #12]
    }
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	e7fd      	b.n	8003e92 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e96:	4b2a      	ldr	r3, [pc, #168]	@ (8003f40 <vInitPrioGroupValue+0xf4>)
 8003e98:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	22ff      	movs	r2, #255	@ 0xff
 8003ea6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4b22      	ldr	r3, [pc, #136]	@ (8003f44 <vInitPrioGroupValue+0xf8>)
 8003ebc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ebe:	4b22      	ldr	r3, [pc, #136]	@ (8003f48 <vInitPrioGroupValue+0xfc>)
 8003ec0:	2207      	movs	r2, #7
 8003ec2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ec4:	e009      	b.n	8003eda <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003ec6:	4b20      	ldr	r3, [pc, #128]	@ (8003f48 <vInitPrioGroupValue+0xfc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8003f48 <vInitPrioGroupValue+0xfc>)
 8003ece:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee2:	2b80      	cmp	r3, #128	@ 0x80
 8003ee4:	d0ef      	beq.n	8003ec6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ee6:	4b18      	ldr	r3, [pc, #96]	@ (8003f48 <vInitPrioGroupValue+0xfc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f1c3 0307 	rsb	r3, r3, #7
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d00b      	beq.n	8003f0a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	60bb      	str	r3, [r7, #8]
    }
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	e7fd      	b.n	8003f06 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f48 <vInitPrioGroupValue+0xfc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	4a0d      	ldr	r2, [pc, #52]	@ (8003f48 <vInitPrioGroupValue+0xfc>)
 8003f12:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f14:	4b0c      	ldr	r3, [pc, #48]	@ (8003f48 <vInitPrioGroupValue+0xfc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f48 <vInitPrioGroupValue+0xfc>)
 8003f1e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003f28:	bf00      	nop
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	e000ed00 	.word	0xe000ed00
 8003f38:	410fc271 	.word	0x410fc271
 8003f3c:	410fc270 	.word	0x410fc270
 8003f40:	e000e400 	.word	0xe000e400
 8003f44:	20000200 	.word	0x20000200
 8003f48:	20000014 	.word	0x20000014

08003f4c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
        __asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	607b      	str	r3, [r7, #4]
    }
 8003f64:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003f66:	4b10      	ldr	r3, [pc, #64]	@ (8003fa8 <vPortEnterCritical+0x5c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	4a0e      	ldr	r2, [pc, #56]	@ (8003fa8 <vPortEnterCritical+0x5c>)
 8003f6e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003f70:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa8 <vPortEnterCritical+0x5c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d110      	bne.n	8003f9a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f78:	4b0c      	ldr	r3, [pc, #48]	@ (8003fac <vPortEnterCritical+0x60>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <vPortEnterCritical+0x4e>
        __asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	603b      	str	r3, [r7, #0]
    }
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	e7fd      	b.n	8003f96 <vPortEnterCritical+0x4a>
    }
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000010 	.word	0x20000010
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003fb6:	4b12      	ldr	r3, [pc, #72]	@ (8004000 <vPortExitCritical+0x50>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <vPortExitCritical+0x26>
        __asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	607b      	str	r3, [r7, #4]
    }
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	e7fd      	b.n	8003fd2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004000 <vPortExitCritical+0x50>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	4a08      	ldr	r2, [pc, #32]	@ (8004000 <vPortExitCritical+0x50>)
 8003fde:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003fe0:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <vPortExitCritical+0x50>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <vPortExitCritical+0x44>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003ff2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	20000010 	.word	0x20000010
	...

08004010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004010:	f3ef 8009 	mrs	r0, PSP
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	4b15      	ldr	r3, [pc, #84]	@ (8004070 <pxCurrentTCBConst>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	f01e 0f10 	tst.w	lr, #16
 8004020:	bf08      	it	eq
 8004022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402a:	6010      	str	r0, [r2, #0]
 800402c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004030:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004034:	f380 8811 	msr	BASEPRI, r0
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f7fe ffb8 	bl	8002fb4 <vTaskSwitchContext>
 8004044:	f04f 0000 	mov.w	r0, #0
 8004048:	f380 8811 	msr	BASEPRI, r0
 800404c:	bc09      	pop	{r0, r3}
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	6808      	ldr	r0, [r1, #0]
 8004052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004056:	f01e 0f10 	tst.w	lr, #16
 800405a:	bf08      	it	eq
 800405c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004060:	f380 8809 	msr	PSP, r0
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	f3af 8000 	nop.w

08004070 <pxCurrentTCBConst>:
 8004070:	200000c0 	.word	0x200000c0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
        __asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	607b      	str	r3, [r7, #4]
    }
 8004090:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004092:	f001 fffd 	bl	8006090 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004096:	f7fe fe71 	bl	8002d7c <xTaskIncrementTick>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d006      	beq.n	80040ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80040a0:	f002 f854 	bl	800614c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040a4:	4b08      	ldr	r3, [pc, #32]	@ (80040c8 <SysTick_Handler+0x50>)
 80040a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e001      	b.n	80040b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80040ae:	f002 f831 	bl	8006114 <SEGGER_SYSVIEW_RecordExitISR>
 80040b2:	2300      	movs	r3, #0
 80040b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f383 8811 	msr	BASEPRI, r3
    }
 80040bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	e000ed04 	.word	0xe000ed04

080040cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <vPortSetupTimerInterrupt+0x34>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <vPortSetupTimerInterrupt+0x38>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004108 <vPortSetupTimerInterrupt+0x3c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a0a      	ldr	r2, [pc, #40]	@ (800410c <vPortSetupTimerInterrupt+0x40>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	099b      	lsrs	r3, r3, #6
 80040e8:	4a09      	ldr	r2, [pc, #36]	@ (8004110 <vPortSetupTimerInterrupt+0x44>)
 80040ea:	3b01      	subs	r3, #1
 80040ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040ee:	4b04      	ldr	r3, [pc, #16]	@ (8004100 <vPortSetupTimerInterrupt+0x34>)
 80040f0:	2207      	movs	r2, #7
 80040f2:	601a      	str	r2, [r3, #0]
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	e000e010 	.word	0xe000e010
 8004104:	e000e018 	.word	0xe000e018
 8004108:	20000000 	.word	0x20000000
 800410c:	10624dd3 	.word	0x10624dd3
 8004110:	e000e014 	.word	0xe000e014

08004114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004114:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004124 <vPortEnableVFP+0x10>
 8004118:	6801      	ldr	r1, [r0, #0]
 800411a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800411e:	6001      	str	r1, [r0, #0]
 8004120:	4770      	bx	lr
 8004122:	0000      	.short	0x0000
 8004124:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop

0800412c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004132:	f3ef 8305 	mrs	r3, IPSR
 8004136:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b0f      	cmp	r3, #15
 800413c:	d915      	bls.n	800416a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800413e:	4a18      	ldr	r2, [pc, #96]	@ (80041a0 <vPortValidateInterruptPriority+0x74>)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004148:	4b16      	ldr	r3, [pc, #88]	@ (80041a4 <vPortValidateInterruptPriority+0x78>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	7afa      	ldrb	r2, [r7, #11]
 800414e:	429a      	cmp	r2, r3
 8004150:	d20b      	bcs.n	800416a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	607b      	str	r3, [r7, #4]
    }
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	e7fd      	b.n	8004166 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800416a:	4b0f      	ldr	r3, [pc, #60]	@ (80041a8 <vPortValidateInterruptPriority+0x7c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004172:	4b0e      	ldr	r3, [pc, #56]	@ (80041ac <vPortValidateInterruptPriority+0x80>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d90b      	bls.n	8004192 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	603b      	str	r3, [r7, #0]
    }
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	e7fd      	b.n	800418e <vPortValidateInterruptPriority+0x62>
    }
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	e000e3f0 	.word	0xe000e3f0
 80041a4:	20000200 	.word	0x20000200
 80041a8:	e000ed0c 	.word	0xe000ed0c
 80041ac:	20000014 	.word	0x20000014

080041b0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	@ 0x28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80041bc:	f7fe fcae 	bl	8002b1c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80041c0:	4b54      	ldr	r3, [pc, #336]	@ (8004314 <pvPortMalloc+0x164>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80041c8:	f000 f90c 	bl	80043e4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d012      	beq.n	80041f8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80041d2:	2208      	movs	r2, #8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	3308      	adds	r3, #8
 80041de:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d804      	bhi.n	80041f4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	4413      	add	r3, r2
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	e001      	b.n	80041f8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db71      	blt.n	80042e2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d06e      	beq.n	80042e2 <pvPortMalloc+0x132>
 8004204:	4b44      	ldr	r3, [pc, #272]	@ (8004318 <pvPortMalloc+0x168>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d869      	bhi.n	80042e2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800420e:	4b43      	ldr	r3, [pc, #268]	@ (800431c <pvPortMalloc+0x16c>)
 8004210:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004212:	4b42      	ldr	r3, [pc, #264]	@ (800431c <pvPortMalloc+0x16c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004218:	e004      	b.n	8004224 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	429a      	cmp	r2, r3
 800422c:	d903      	bls.n	8004236 <pvPortMalloc+0x86>
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f1      	bne.n	800421a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004236:	4b37      	ldr	r3, [pc, #220]	@ (8004314 <pvPortMalloc+0x164>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423c:	429a      	cmp	r2, r3
 800423e:	d050      	beq.n	80042e2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2208      	movs	r2, #8
 8004246:	4413      	add	r3, r2
 8004248:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	1ad2      	subs	r2, r2, r3
 800425a:	2308      	movs	r3, #8
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	429a      	cmp	r2, r3
 8004260:	d920      	bls.n	80042a4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4413      	add	r3, r2
 8004268:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <pvPortMalloc+0xdc>
        __asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	613b      	str	r3, [r7, #16]
    }
 8004286:	bf00      	nop
 8004288:	bf00      	nop
 800428a:	e7fd      	b.n	8004288 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	1ad2      	subs	r2, r2, r3
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800429e:	6978      	ldr	r0, [r7, #20]
 80042a0:	f000 f8fc 	bl	800449c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004318 <pvPortMalloc+0x168>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004318 <pvPortMalloc+0x168>)
 80042b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042b2:	4b19      	ldr	r3, [pc, #100]	@ (8004318 <pvPortMalloc+0x168>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004320 <pvPortMalloc+0x170>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d203      	bcs.n	80042c6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042be:	4b16      	ldr	r3, [pc, #88]	@ (8004318 <pvPortMalloc+0x168>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a17      	ldr	r2, [pc, #92]	@ (8004320 <pvPortMalloc+0x170>)
 80042c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80042d8:	4b12      	ldr	r3, [pc, #72]	@ (8004324 <pvPortMalloc+0x174>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <pvPortMalloc+0x174>)
 80042e0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80042e2:	f7fe fc29 	bl	8002b38 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00b      	beq.n	8004308 <pvPortMalloc+0x158>
        __asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	60fb      	str	r3, [r7, #12]
    }
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <pvPortMalloc+0x154>
    return pvReturn;
 8004308:	69fb      	ldr	r3, [r7, #28]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3728      	adds	r7, #40	@ 0x28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20012e0c 	.word	0x20012e0c
 8004318:	20012e10 	.word	0x20012e10
 800431c:	20012e04 	.word	0x20012e04
 8004320:	20012e14 	.word	0x20012e14
 8004324:	20012e18 	.word	0x20012e18

08004328 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d04b      	beq.n	80043d2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800433a:	2308      	movs	r3, #8
 800433c:	425b      	negs	r3, r3
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4413      	add	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	db0b      	blt.n	8004368 <vPortFree+0x40>
        __asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	60fb      	str	r3, [r7, #12]
    }
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	e7fd      	b.n	8004364 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00b      	beq.n	8004388 <vPortFree+0x60>
        __asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60bb      	str	r3, [r7, #8]
    }
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	0fdb      	lsrs	r3, r3, #31
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01c      	beq.n	80043d2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d118      	bne.n	80043d2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80043ac:	f7fe fbb6 	bl	8002b1c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <vPortFree+0xb4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4413      	add	r3, r2
 80043ba:	4a08      	ldr	r2, [pc, #32]	@ (80043dc <vPortFree+0xb4>)
 80043bc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043be:	6938      	ldr	r0, [r7, #16]
 80043c0:	f000 f86c 	bl	800449c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80043c4:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <vPortFree+0xb8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	4a05      	ldr	r2, [pc, #20]	@ (80043e0 <vPortFree+0xb8>)
 80043cc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80043ce:	f7fe fbb3 	bl	8002b38 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80043d2:	bf00      	nop
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20012e10 	.word	0x20012e10
 80043e0:	20012e1c 	.word	0x20012e1c

080043e4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043ea:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80043ee:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80043f0:	4b25      	ldr	r3, [pc, #148]	@ (8004488 <prvHeapInit+0xa4>)
 80043f2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3307      	adds	r3, #7
 8004402:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0307 	bic.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	4a1d      	ldr	r2, [pc, #116]	@ (8004488 <prvHeapInit+0xa4>)
 8004414:	4413      	add	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800441c:	4a1b      	ldr	r2, [pc, #108]	@ (800448c <prvHeapInit+0xa8>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004422:	4b1a      	ldr	r3, [pc, #104]	@ (800448c <prvHeapInit+0xa8>)
 8004424:	2200      	movs	r2, #0
 8004426:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4413      	add	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004430:	2208      	movs	r2, #8
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4a13      	ldr	r2, [pc, #76]	@ (8004490 <prvHeapInit+0xac>)
 8004444:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004446:	4b12      	ldr	r3, [pc, #72]	@ (8004490 <prvHeapInit+0xac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2200      	movs	r2, #0
 800444c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <prvHeapInit+0xac>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	1ad2      	subs	r2, r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004464:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <prvHeapInit+0xac>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4a08      	ldr	r2, [pc, #32]	@ (8004494 <prvHeapInit+0xb0>)
 8004472:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4a07      	ldr	r2, [pc, #28]	@ (8004498 <prvHeapInit+0xb4>)
 800447a:	6013      	str	r3, [r2, #0]
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	20000204 	.word	0x20000204
 800448c:	20012e04 	.word	0x20012e04
 8004490:	20012e0c 	.word	0x20012e0c
 8004494:	20012e14 	.word	0x20012e14
 8004498:	20012e10 	.word	0x20012e10

0800449c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044a4:	4b28      	ldr	r3, [pc, #160]	@ (8004548 <prvInsertBlockIntoFreeList+0xac>)
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e002      	b.n	80044b0 <prvInsertBlockIntoFreeList+0x14>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d8f7      	bhi.n	80044aa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4413      	add	r3, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d108      	bne.n	80044de <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	441a      	add	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	441a      	add	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d118      	bne.n	8004524 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b15      	ldr	r3, [pc, #84]	@ (800454c <prvInsertBlockIntoFreeList+0xb0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d00d      	beq.n	800451a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	441a      	add	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	e008      	b.n	800452c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800451a:	4b0c      	ldr	r3, [pc, #48]	@ (800454c <prvInsertBlockIntoFreeList+0xb0>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e003      	b.n	800452c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d002      	beq.n	800453a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20012e04 	.word	0x20012e04
 800454c:	20012e0c 	.word	0x20012e0c

08004550 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004554:	4803      	ldr	r0, [pc, #12]	@ (8004564 <_cbSendSystemDesc+0x14>)
 8004556:	f001 fd45 	bl	8005fe4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800455a:	4803      	ldr	r0, [pc, #12]	@ (8004568 <_cbSendSystemDesc+0x18>)
 800455c:	f001 fd42 	bl	8005fe4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004560:	bf00      	nop
 8004562:	bd80      	pop	{r7, pc}
 8004564:	08006730 	.word	0x08006730
 8004568:	08006774 	.word	0x08006774

0800456c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004570:	4b06      	ldr	r3, [pc, #24]	@ (800458c <SEGGER_SYSVIEW_Conf+0x20>)
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	4b05      	ldr	r3, [pc, #20]	@ (800458c <SEGGER_SYSVIEW_Conf+0x20>)
 8004576:	6819      	ldr	r1, [r3, #0]
 8004578:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <SEGGER_SYSVIEW_Conf+0x24>)
 800457a:	4a06      	ldr	r2, [pc, #24]	@ (8004594 <SEGGER_SYSVIEW_Conf+0x28>)
 800457c:	f001 f8b0 	bl	80056e0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004580:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004584:	f001 f8f0 	bl	8005768 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004588:	bf00      	nop
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20000000 	.word	0x20000000
 8004590:	08004551 	.word	0x08004551
 8004594:	08006814 	.word	0x08006814

08004598 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800459a:	b085      	sub	sp, #20
 800459c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	e033      	b.n	800460c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80045a4:	491e      	ldr	r1, [pc, #120]	@ (8004620 <_cbSendTaskList+0x88>)
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	491a      	ldr	r1, [pc, #104]	@ (8004620 <_cbSendTaskList+0x88>)
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	3304      	adds	r3, #4
 80045c4:	6819      	ldr	r1, [r3, #0]
 80045c6:	4c16      	ldr	r4, [pc, #88]	@ (8004620 <_cbSendTaskList+0x88>)
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4423      	add	r3, r4
 80045d4:	3308      	adds	r3, #8
 80045d6:	681c      	ldr	r4, [r3, #0]
 80045d8:	4d11      	ldr	r5, [pc, #68]	@ (8004620 <_cbSendTaskList+0x88>)
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	442b      	add	r3, r5
 80045e6:	330c      	adds	r3, #12
 80045e8:	681d      	ldr	r5, [r3, #0]
 80045ea:	4e0d      	ldr	r6, [pc, #52]	@ (8004620 <_cbSendTaskList+0x88>)
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4433      	add	r3, r6
 80045f8:	3310      	adds	r3, #16
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	462b      	mov	r3, r5
 8004600:	4622      	mov	r2, r4
 8004602:	f000 f8bd 	bl	8004780 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3301      	adds	r3, #1
 800460a:	607b      	str	r3, [r7, #4]
 800460c:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <_cbSendTaskList+0x8c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d3c6      	bcc.n	80045a4 <_cbSendTaskList+0xc>
  }
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004620:	20012e20 	.word	0x20012e20
 8004624:	20012ec0 	.word	0x20012ec0

08004628 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004630:	f7fe fb92 	bl	8002d58 <xTaskGetTickCountFromISR>
 8004634:	4603      	mov	r3, r0
 8004636:	2200      	movs	r2, #0
 8004638:	469a      	mov	sl, r3
 800463a:	4693      	mov	fp, r2
 800463c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	f04f 0a00 	mov.w	sl, #0
 800464c:	f04f 0b00 	mov.w	fp, #0
 8004650:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004654:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004658:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800465c:	4652      	mov	r2, sl
 800465e:	465b      	mov	r3, fp
 8004660:	1a14      	subs	r4, r2, r0
 8004662:	eb63 0501 	sbc.w	r5, r3, r1
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	00ab      	lsls	r3, r5, #2
 8004670:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004674:	00a2      	lsls	r2, r4, #2
 8004676:	4614      	mov	r4, r2
 8004678:	461d      	mov	r5, r3
 800467a:	eb14 0800 	adds.w	r8, r4, r0
 800467e:	eb45 0901 	adc.w	r9, r5, r1
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800468e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004696:	4690      	mov	r8, r2
 8004698:	4699      	mov	r9, r3
 800469a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800469e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080046b0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80046be:	2205      	movs	r2, #5
 80046c0:	492b      	ldr	r1, [pc, #172]	@ (8004770 <SYSVIEW_AddTask+0xc0>)
 80046c2:	68b8      	ldr	r0, [r7, #8]
 80046c4:	f001 ff9c 	bl	8006600 <memcmp>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d04b      	beq.n	8004766 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80046ce:	4b29      	ldr	r3, [pc, #164]	@ (8004774 <SYSVIEW_AddTask+0xc4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b07      	cmp	r3, #7
 80046d4:	d903      	bls.n	80046de <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80046d6:	4828      	ldr	r0, [pc, #160]	@ (8004778 <SYSVIEW_AddTask+0xc8>)
 80046d8:	f001 ff36 	bl	8006548 <SEGGER_SYSVIEW_Warn>
    return;
 80046dc:	e044      	b.n	8004768 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80046de:	4b25      	ldr	r3, [pc, #148]	@ (8004774 <SYSVIEW_AddTask+0xc4>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4926      	ldr	r1, [pc, #152]	@ (800477c <SYSVIEW_AddTask+0xcc>)
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80046f2:	4b20      	ldr	r3, [pc, #128]	@ (8004774 <SYSVIEW_AddTask+0xc4>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4921      	ldr	r1, [pc, #132]	@ (800477c <SYSVIEW_AddTask+0xcc>)
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	3304      	adds	r3, #4
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004708:	4b1a      	ldr	r3, [pc, #104]	@ (8004774 <SYSVIEW_AddTask+0xc4>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	491b      	ldr	r1, [pc, #108]	@ (800477c <SYSVIEW_AddTask+0xcc>)
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	3308      	adds	r3, #8
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800471e:	4b15      	ldr	r3, [pc, #84]	@ (8004774 <SYSVIEW_AddTask+0xc4>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4916      	ldr	r1, [pc, #88]	@ (800477c <SYSVIEW_AddTask+0xcc>)
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	330c      	adds	r3, #12
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004734:	4b0f      	ldr	r3, [pc, #60]	@ (8004774 <SYSVIEW_AddTask+0xc4>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4910      	ldr	r1, [pc, #64]	@ (800477c <SYSVIEW_AddTask+0xcc>)
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	3310      	adds	r3, #16
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800474a:	4b0a      	ldr	r3, [pc, #40]	@ (8004774 <SYSVIEW_AddTask+0xc4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3301      	adds	r3, #1
 8004750:	4a08      	ldr	r2, [pc, #32]	@ (8004774 <SYSVIEW_AddTask+0xc4>)
 8004752:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f80e 	bl	8004780 <SYSVIEW_SendTaskInfo>
 8004764:	e000      	b.n	8004768 <SYSVIEW_AddTask+0xb8>
    return;
 8004766:	bf00      	nop

}
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	08006784 	.word	0x08006784
 8004774:	20012ec0 	.word	0x20012ec0
 8004778:	0800678c 	.word	0x0800678c
 800477c:	20012e20 	.word	0x20012e20

08004780 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	@ 0x28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800478e:	f107 0314 	add.w	r3, r7, #20
 8004792:	2214      	movs	r2, #20
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f001 ff42 	bl	8006620 <memset>
  TaskInfo.TaskID     = TaskID;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80047ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 fb1d 	bl	8005df4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80047ba:	bf00      	nop
 80047bc:	3728      	adds	r7, #40	@ 0x28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80047ca:	4b24      	ldr	r3, [pc, #144]	@ (800485c <_DoInit+0x98>)
 80047cc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2203      	movs	r2, #3
 80047d2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2203      	movs	r2, #3
 80047d8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a20      	ldr	r2, [pc, #128]	@ (8004860 <_DoInit+0x9c>)
 80047de:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a20      	ldr	r2, [pc, #128]	@ (8004864 <_DoInit+0xa0>)
 80047e4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047ec:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a17      	ldr	r2, [pc, #92]	@ (8004860 <_DoInit+0x9c>)
 8004804:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a17      	ldr	r2, [pc, #92]	@ (8004868 <_DoInit+0xa4>)
 800480a:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2210      	movs	r2, #16
 8004810:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3307      	adds	r3, #7
 8004828:	4a10      	ldr	r2, [pc, #64]	@ (800486c <_DoInit+0xa8>)
 800482a:	6810      	ldr	r0, [r2, #0]
 800482c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800482e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a0e      	ldr	r2, [pc, #56]	@ (8004870 <_DoInit+0xac>)
 8004836:	6810      	ldr	r0, [r2, #0]
 8004838:	6018      	str	r0, [r3, #0]
 800483a:	8891      	ldrh	r1, [r2, #4]
 800483c:	7992      	ldrb	r2, [r2, #6]
 800483e:	8099      	strh	r1, [r3, #4]
 8004840:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004842:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800484c:	f3bf 8f5f 	dmb	sy
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	20012ec4 	.word	0x20012ec4
 8004860:	080067dc 	.word	0x080067dc
 8004864:	20012f6c 	.word	0x20012f6c
 8004868:	2001336c 	.word	0x2001336c
 800486c:	080067e8 	.word	0x080067e8
 8004870:	080067ec 	.word	0x080067ec

08004874 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b08c      	sub	sp, #48	@ 0x30
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004880:	4b3e      	ldr	r3, [pc, #248]	@ (800497c <SEGGER_RTT_ReadNoLock+0x108>)
 8004882:	623b      	str	r3, [r7, #32]
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <SEGGER_RTT_ReadNoLock+0x1e>
 800488e:	f7ff ff99 	bl	80047c4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4613      	mov	r3, r2
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	4413      	add	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	3360      	adds	r3, #96	@ 0x60
 800489e:	4a37      	ldr	r2, [pc, #220]	@ (800497c <SEGGER_RTT_ReadNoLock+0x108>)
 80048a0:	4413      	add	r3, r2
 80048a2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80048b4:	2300      	movs	r3, #0
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80048b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d92b      	bls.n	8004918 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4293      	cmp	r3, r2
 80048d0:	bf28      	it	cs
 80048d2:	4613      	movcs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048dc:	4413      	add	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	6939      	ldr	r1, [r7, #16]
 80048e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048e6:	f001 fec7 	bl	8006678 <memcpy>
    NumBytesRead += NumBytesRem;
 80048ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	4413      	add	r3, r2
 80048f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80048f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	4413      	add	r3, r2
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	4413      	add	r3, r2
 8004908:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004910:	429a      	cmp	r2, r3
 8004912:	d101      	bne.n	8004918 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004914:	2300      	movs	r3, #0
 8004916:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4293      	cmp	r3, r2
 8004926:	bf28      	it	cs
 8004928:	4613      	movcs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d019      	beq.n	8004966 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	4413      	add	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	6939      	ldr	r1, [r7, #16]
 8004940:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004942:	f001 fe99 	bl	8006678 <memcpy>
    NumBytesRead += NumBytesRem;
 8004946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	4413      	add	r3, r2
 800494c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800494e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	4413      	add	r3, r2
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800495e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	4413      	add	r3, r2
 8004964:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004970:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004974:	4618      	mov	r0, r3
 8004976:	3730      	adds	r7, #48	@ 0x30
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20012ec4 	.word	0x20012ec4

08004980 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800498e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a84 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <SEGGER_RTT_AllocUpBuffer+0x20>
 800499c:	f7ff ff12 	bl	80047c4 <_DoInit>
  SEGGER_RTT_LOCK();
 80049a0:	f3ef 8311 	mrs	r3, BASEPRI
 80049a4:	f04f 0120 	mov.w	r1, #32
 80049a8:	f381 8811 	msr	BASEPRI, r1
 80049ac:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80049ae:	4b35      	ldr	r3, [pc, #212]	@ (8004a84 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80049b0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80049b6:	6939      	ldr	r1, [r7, #16]
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	4613      	mov	r3, r2
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	4413      	add	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	440b      	add	r3, r1
 80049c6:	3304      	adds	r3, #4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	429a      	cmp	r2, r3
 80049dc:	dbeb      	blt.n	80049b6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80049de:	e000      	b.n	80049e2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80049e0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	da3f      	bge.n	8004a6c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80049ec:	6939      	ldr	r1, [r7, #16]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	4613      	mov	r3, r2
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4413      	add	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	440b      	add	r3, r1
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004a00:	6939      	ldr	r1, [r7, #16]
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	4613      	mov	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	440b      	add	r3, r1
 8004a10:	3304      	adds	r3, #4
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004a16:	6939      	ldr	r1, [r7, #16]
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	4413      	add	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	440b      	add	r3, r1
 8004a24:	3320      	adds	r3, #32
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004a2a:	6939      	ldr	r1, [r7, #16]
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	4413      	add	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	440b      	add	r3, r1
 8004a38:	3328      	adds	r3, #40	@ 0x28
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004a3e:	6939      	ldr	r1, [r7, #16]
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	4613      	mov	r3, r2
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	4413      	add	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3324      	adds	r3, #36	@ 0x24
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004a52:	6939      	ldr	r1, [r7, #16]
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	4613      	mov	r3, r2
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	4413      	add	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	440b      	add	r3, r1
 8004a60:	332c      	adds	r3, #44	@ 0x2c
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004a66:	f3bf 8f5f 	dmb	sy
 8004a6a:	e002      	b.n	8004a72 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a70:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004a78:	69fb      	ldr	r3, [r7, #28]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20012ec4 	.word	0x20012ec4

08004a88 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004a96:	4b33      	ldr	r3, [pc, #204]	@ (8004b64 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004aa4:	f7ff fe8e 	bl	80047c4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8004b64 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004aaa:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d24d      	bcs.n	8004b54 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004ab8:	f3ef 8311 	mrs	r3, BASEPRI
 8004abc:	f04f 0120 	mov.w	r1, #32
 8004ac0:	f381 8811 	msr	BASEPRI, r1
 8004ac4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d031      	beq.n	8004b30 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004acc:	6979      	ldr	r1, [r7, #20]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4413      	add	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	440b      	add	r3, r1
 8004ada:	3360      	adds	r3, #96	@ 0x60
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004ae0:	6979      	ldr	r1, [r7, #20]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4413      	add	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	440b      	add	r3, r1
 8004aee:	3364      	adds	r3, #100	@ 0x64
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004af4:	6979      	ldr	r1, [r7, #20]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4613      	mov	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	4413      	add	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	440b      	add	r3, r1
 8004b02:	3368      	adds	r3, #104	@ 0x68
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004b08:	6979      	ldr	r1, [r7, #20]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	4413      	add	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	440b      	add	r3, r1
 8004b16:	3370      	adds	r3, #112	@ 0x70
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4613      	mov	r3, r2
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	4413      	add	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	440b      	add	r3, r1
 8004b2a:	336c      	adds	r3, #108	@ 0x6c
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004b30:	6979      	ldr	r1, [r7, #20]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4613      	mov	r3, r2
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	4413      	add	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3374      	adds	r3, #116	@ 0x74
 8004b40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b42:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b44:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	e002      	b.n	8004b5a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
 8004b58:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20012ec4 	.word	0x20012ec4

08004b68 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004b78:	e002      	b.n	8004b80 <_EncodeStr+0x18>
    Len++;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4413      	add	r3, r2
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f6      	bne.n	8004b7a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d901      	bls.n	8004b98 <_EncodeStr+0x30>
    Len = Limit;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2bfe      	cmp	r3, #254	@ 0xfe
 8004b9c:	d806      	bhi.n	8004bac <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	60fa      	str	r2, [r7, #12]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e011      	b.n	8004bd0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	60fa      	str	r2, [r7, #12]
 8004bb2:	22ff      	movs	r2, #255	@ 0xff
 8004bb4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	60fa      	str	r2, [r7, #12]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	0a19      	lsrs	r1, r3, #8
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	60fa      	str	r2, [r7, #12]
 8004bcc:	b2ca      	uxtb	r2, r1
 8004bce:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004bd4:	e00a      	b.n	8004bec <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	1c53      	adds	r3, r2, #1
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	1c59      	adds	r1, r3, #1
 8004be0:	60f9      	str	r1, [r7, #12]
 8004be2:	7812      	ldrb	r2, [r2, #0]
 8004be4:	701a      	strb	r2, [r3, #0]
    n++;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	3301      	adds	r3, #1
 8004bea:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d3f0      	bcc.n	8004bd6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3304      	adds	r3, #4
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c22:	4b35      	ldr	r3, [pc, #212]	@ (8004cf8 <_HandleIncomingPacket+0xdc>)
 8004c24:	7e1b      	ldrb	r3, [r3, #24]
 8004c26:	4618      	mov	r0, r3
 8004c28:	1cfb      	adds	r3, r7, #3
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f7ff fe21 	bl	8004874 <SEGGER_RTT_ReadNoLock>
 8004c32:	4603      	mov	r3, r0
 8004c34:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	dd59      	ble.n	8004cf0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	2b80      	cmp	r3, #128	@ 0x80
 8004c40:	d032      	beq.n	8004ca8 <_HandleIncomingPacket+0x8c>
 8004c42:	2b80      	cmp	r3, #128	@ 0x80
 8004c44:	dc42      	bgt.n	8004ccc <_HandleIncomingPacket+0xb0>
 8004c46:	2b07      	cmp	r3, #7
 8004c48:	dc16      	bgt.n	8004c78 <_HandleIncomingPacket+0x5c>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dd3e      	ble.n	8004ccc <_HandleIncomingPacket+0xb0>
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	2b06      	cmp	r3, #6
 8004c52:	d83b      	bhi.n	8004ccc <_HandleIncomingPacket+0xb0>
 8004c54:	a201      	add	r2, pc, #4	@ (adr r2, 8004c5c <_HandleIncomingPacket+0x40>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c7f 	.word	0x08004c7f
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004c8b 	.word	0x08004c8b
 8004c68:	08004c91 	.word	0x08004c91
 8004c6c:	08004c97 	.word	0x08004c97
 8004c70:	08004c9d 	.word	0x08004c9d
 8004c74:	08004ca3 	.word	0x08004ca3
 8004c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c7a:	d034      	beq.n	8004ce6 <_HandleIncomingPacket+0xca>
 8004c7c:	e026      	b.n	8004ccc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004c7e:	f000 ff3f 	bl	8005b00 <SEGGER_SYSVIEW_Start>
      break;
 8004c82:	e035      	b.n	8004cf0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004c84:	f000 fff6 	bl	8005c74 <SEGGER_SYSVIEW_Stop>
      break;
 8004c88:	e032      	b.n	8004cf0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004c8a:	f001 f9cf 	bl	800602c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004c8e:	e02f      	b.n	8004cf0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004c90:	f001 f994 	bl	8005fbc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004c94:	e02c      	b.n	8004cf0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004c96:	f001 f813 	bl	8005cc0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004c9a:	e029      	b.n	8004cf0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004c9c:	f001 fc02 	bl	80064a4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004ca0:	e026      	b.n	8004cf0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004ca2:	f001 fbe1 	bl	8006468 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004ca6:	e023      	b.n	8004cf0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ca8:	4b13      	ldr	r3, [pc, #76]	@ (8004cf8 <_HandleIncomingPacket+0xdc>)
 8004caa:	7e1b      	ldrb	r3, [r3, #24]
 8004cac:	4618      	mov	r0, r3
 8004cae:	1cfb      	adds	r3, r7, #3
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f7ff fdde 	bl	8004874 <SEGGER_RTT_ReadNoLock>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dd13      	ble.n	8004cea <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 fb4f 	bl	8006368 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004cca:	e00e      	b.n	8004cea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	b25b      	sxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	da0c      	bge.n	8004cee <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004cd4:	4b08      	ldr	r3, [pc, #32]	@ (8004cf8 <_HandleIncomingPacket+0xdc>)
 8004cd6:	7e1b      	ldrb	r3, [r3, #24]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	1cfb      	adds	r3, r7, #3
 8004cdc:	2201      	movs	r2, #1
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f7ff fdc8 	bl	8004874 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004ce4:	e003      	b.n	8004cee <_HandleIncomingPacket+0xd2>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e002      	b.n	8004cf0 <_HandleIncomingPacket+0xd4>
      break;
 8004cea:	bf00      	nop
 8004cec:	e000      	b.n	8004cf0 <_HandleIncomingPacket+0xd4>
      break;
 8004cee:	bf00      	nop
    }
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20014384 	.word	0x20014384

08004cfc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08c      	sub	sp, #48	@ 0x30
 8004d00:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004d02:	2301      	movs	r3, #1
 8004d04:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004d06:	1d3b      	adds	r3, r7, #4
 8004d08:	3301      	adds	r3, #1
 8004d0a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d10:	4b31      	ldr	r3, [pc, #196]	@ (8004dd8 <_TrySendOverflowPacket+0xdc>)
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d16:	e00b      	b.n	8004d30 <_TrySendOverflowPacket+0x34>
 8004d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1e:	1c59      	adds	r1, r3, #1
 8004d20:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004d22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2c:	09db      	lsrs	r3, r3, #7
 8004d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d32:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d34:	d8f0      	bhi.n	8004d18 <_TrySendOverflowPacket+0x1c>
 8004d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d44:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d46:	4b25      	ldr	r3, [pc, #148]	@ (8004ddc <_TrySendOverflowPacket+0xe0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004d4c:	4b22      	ldr	r3, [pc, #136]	@ (8004dd8 <_TrySendOverflowPacket+0xdc>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	623b      	str	r3, [r7, #32]
 8004d5e:	e00b      	b.n	8004d78 <_TrySendOverflowPacket+0x7c>
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	1c59      	adds	r1, r3, #1
 8004d68:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	09db      	lsrs	r3, r3, #7
 8004d76:	623b      	str	r3, [r7, #32]
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d7c:	d8f0      	bhi.n	8004d60 <_TrySendOverflowPacket+0x64>
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d84:	6a3a      	ldr	r2, [r7, #32]
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004d8e:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <_TrySendOverflowPacket+0xdc>)
 8004d90:	785b      	ldrb	r3, [r3, #1]
 8004d92:	4618      	mov	r0, r3
 8004d94:	1d3b      	adds	r3, r7, #4
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	1d3b      	adds	r3, r7, #4
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f7fb fa1e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004da4:	4603      	mov	r3, r0
 8004da6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004dae:	4a0a      	ldr	r2, [pc, #40]	@ (8004dd8 <_TrySendOverflowPacket+0xdc>)
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004db4:	4b08      	ldr	r3, [pc, #32]	@ (8004dd8 <_TrySendOverflowPacket+0xdc>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	4b06      	ldr	r3, [pc, #24]	@ (8004dd8 <_TrySendOverflowPacket+0xdc>)
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e004      	b.n	8004dcc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004dc2:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <_TrySendOverflowPacket+0xdc>)
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	4a03      	ldr	r2, [pc, #12]	@ (8004dd8 <_TrySendOverflowPacket+0xdc>)
 8004dca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004dcc:	693b      	ldr	r3, [r7, #16]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3730      	adds	r7, #48	@ 0x30
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20014384 	.word	0x20014384
 8004ddc:	e0001004 	.word	0xe0001004

08004de0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	@ 0x28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004dec:	4b6c      	ldr	r3, [pc, #432]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d010      	beq.n	8004e16 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004df4:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80a3 	beq.w	8004f44 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004dfe:	4b68      	ldr	r3, [pc, #416]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d109      	bne.n	8004e1a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004e06:	f7ff ff79 	bl	8004cfc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004e0a:	4b65      	ldr	r3, [pc, #404]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	f040 809a 	bne.w	8004f48 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004e14:	e001      	b.n	8004e1a <_SendPacket+0x3a>
    goto Send;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <_SendPacket+0x3c>
Send:
 8004e1a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b1f      	cmp	r3, #31
 8004e20:	d809      	bhi.n	8004e36 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004e22:	4b5f      	ldr	r3, [pc, #380]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f040 808b 	bne.w	8004f4c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b17      	cmp	r3, #23
 8004e3a:	d807      	bhi.n	8004e4c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e03d      	b.n	8004ec8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e58:	d912      	bls.n	8004e80 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	09da      	lsrs	r2, r3, #7
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	3a01      	subs	r2, #1
 8004e72:	60fa      	str	r2, [r7, #12]
 8004e74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e006      	b.n	8004e8e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e92:	d912      	bls.n	8004eba <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	09da      	lsrs	r2, r3, #7
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	3a01      	subs	r2, #1
 8004eac:	60fa      	str	r2, [r7, #12]
 8004eae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	e006      	b.n	8004ec8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ec8:	4b36      	ldr	r3, [pc, #216]	@ (8004fa4 <_SendPacket+0x1c4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ece:	4b34      	ldr	r3, [pc, #208]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	e00b      	b.n	8004efa <_SendPacket+0x11a>
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	1c59      	adds	r1, r3, #1
 8004eea:	6279      	str	r1, [r7, #36]	@ 0x24
 8004eec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	09db      	lsrs	r3, r3, #7
 8004ef8:	623b      	str	r3, [r7, #32]
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004efe:	d8f0      	bhi.n	8004ee2 <_SendPacket+0x102>
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f06:	6a3a      	ldr	r2, [r7, #32]
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004f10:	4b23      	ldr	r3, [pc, #140]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004f12:	785b      	ldrb	r3, [r3, #1]
 8004f14:	4618      	mov	r0, r3
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	f7fb f95e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004f24:	4603      	mov	r3, r0
 8004f26:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	60d3      	str	r3, [r2, #12]
 8004f34:	e00b      	b.n	8004f4e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004f36:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	4b18      	ldr	r3, [pc, #96]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	e004      	b.n	8004f4e <_SendPacket+0x16e>
    goto SendDone;
 8004f44:	bf00      	nop
 8004f46:	e002      	b.n	8004f4e <_SendPacket+0x16e>
      goto SendDone;
 8004f48:	bf00      	nop
 8004f4a:	e000      	b.n	8004f4e <_SendPacket+0x16e>
      goto SendDone;
 8004f4c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004f4e:	4b14      	ldr	r3, [pc, #80]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004f50:	7e1b      	ldrb	r3, [r3, #24]
 8004f52:	4619      	mov	r1, r3
 8004f54:	4a14      	ldr	r2, [pc, #80]	@ (8004fa8 <_SendPacket+0x1c8>)
 8004f56:	460b      	mov	r3, r1
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	440b      	add	r3, r1
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	336c      	adds	r3, #108	@ 0x6c
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004f66:	7e1b      	ldrb	r3, [r3, #24]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	490f      	ldr	r1, [pc, #60]	@ (8004fa8 <_SendPacket+0x1c8>)
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	4403      	add	r3, r0
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	440b      	add	r3, r1
 8004f76:	3370      	adds	r3, #112	@ 0x70
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d00b      	beq.n	8004f96 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004f7e:	4b08      	ldr	r3, [pc, #32]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004f80:	789b      	ldrb	r3, [r3, #2]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d107      	bne.n	8004f96 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004f86:	4b06      	ldr	r3, [pc, #24]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004f8c:	f7ff fe46 	bl	8004c1c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004f90:	4b03      	ldr	r3, [pc, #12]	@ (8004fa0 <_SendPacket+0x1c0>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004f96:	bf00      	nop
 8004f98:	3728      	adds	r7, #40	@ 0x28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20014384 	.word	0x20014384
 8004fa4:	e0001004 	.word	0xe0001004
 8004fa8:	20012ec4 	.word	0x20012ec4

08004fac <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08a      	sub	sp, #40	@ 0x28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	2b80      	cmp	r3, #128	@ 0x80
 8004fc4:	d80a      	bhi.n	8004fdc <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	1c59      	adds	r1, r3, #1
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6051      	str	r1, [r2, #4]
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b80      	cmp	r3, #128	@ 0x80
 8004fe2:	d15a      	bne.n	800509a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	623b      	str	r3, [r7, #32]
 8005004:	e00b      	b.n	800501e <_StoreChar+0x72>
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	1c59      	adds	r1, r3, #1
 800500e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005010:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	09db      	lsrs	r3, r3, #7
 800501c:	623b      	str	r3, [r7, #32]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	2b7f      	cmp	r3, #127	@ 0x7f
 8005022:	d8f0      	bhi.n	8005006 <_StoreChar+0x5a>
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	627a      	str	r2, [r7, #36]	@ 0x24
 800502a:	6a3a      	ldr	r2, [r7, #32]
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	2300      	movs	r3, #0
 800503a:	61bb      	str	r3, [r7, #24]
 800503c:	e00b      	b.n	8005056 <_StoreChar+0xaa>
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	1c59      	adds	r1, r3, #1
 8005046:	61f9      	str	r1, [r7, #28]
 8005048:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	09db      	lsrs	r3, r3, #7
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b7f      	cmp	r3, #127	@ 0x7f
 800505a:	d8f0      	bhi.n	800503e <_StoreChar+0x92>
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	61fa      	str	r2, [r7, #28]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	221a      	movs	r2, #26
 8005072:	6939      	ldr	r1, [r7, #16]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff feb3 	bl	8004de0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fdbf 	bl	8004c02 <_PreparePacket>
 8005084:	4602      	mov	r2, r0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	611a      	str	r2, [r3, #16]
  }
}
 800509a:	bf00      	nop
 800509c:	3728      	adds	r7, #40	@ 0x28
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08a      	sub	sp, #40	@ 0x28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80050b6:	2301      	movs	r3, #1
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80050ba:	2301      	movs	r3, #1
 80050bc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80050be:	e007      	b.n	80050d0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80050c0:	6a3a      	ldr	r2, [r7, #32]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	623b      	str	r3, [r7, #32]
    Width++;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3301      	adds	r3, #1
 80050ce:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80050d0:	6a3a      	ldr	r2, [r7, #32]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d2f3      	bcs.n	80050c0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d901      	bls.n	80050e4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80050e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d000      	beq.n	80050f0 <_PrintUnsigned+0x4c>
 80050ee:	e01f      	b.n	8005130 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80050f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d01c      	beq.n	8005130 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80050f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <_PrintUnsigned+0x68>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d102      	bne.n	800510c <_PrintUnsigned+0x68>
        c = '0';
 8005106:	2330      	movs	r3, #48	@ 0x30
 8005108:	76fb      	strb	r3, [r7, #27]
 800510a:	e001      	b.n	8005110 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 800510c:	2320      	movs	r3, #32
 800510e:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005110:	e007      	b.n	8005122 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005114:	3b01      	subs	r3, #1
 8005116:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005118:	7efb      	ldrb	r3, [r7, #27]
 800511a:	4619      	mov	r1, r3
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f7ff ff45 	bl	8004fac <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <_PrintUnsigned+0x8c>
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	429a      	cmp	r2, r3
 800512e:	d3f0      	bcc.n	8005112 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d903      	bls.n	800513e <_PrintUnsigned+0x9a>
      NumDigits--;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	3b01      	subs	r3, #1
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	e009      	b.n	8005152 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	fbb2 f3f3 	udiv	r3, r2, r3
 8005146:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	d200      	bcs.n	8005152 <_PrintUnsigned+0xae>
        break;
 8005150:	e005      	b.n	800515e <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800515c:	e7e8      	b.n	8005130 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	fbb2 f3f3 	udiv	r3, r2, r3
 8005166:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516c:	fb02 f303 	mul.w	r3, r2, r3
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005176:	4a15      	ldr	r2, [pc, #84]	@ (80051cc <_PrintUnsigned+0x128>)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	4413      	add	r3, r2
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	4619      	mov	r1, r3
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff ff13 	bl	8004fac <_StoreChar>
    Digit /= Base;
 8005186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e3      	bne.n	800515e <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d011      	beq.n	80051c4 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80051a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00e      	beq.n	80051c4 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051a6:	e006      	b.n	80051b6 <_PrintUnsigned+0x112>
        FieldWidth--;
 80051a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051aa:	3b01      	subs	r3, #1
 80051ac:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80051ae:	2120      	movs	r1, #32
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff fefb 	bl	8004fac <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <_PrintUnsigned+0x120>
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d3f1      	bcc.n	80051a8 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80051c4:	bf00      	nop
 80051c6:	3728      	adds	r7, #40	@ 0x28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	08006828 	.word	0x08006828

080051d0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bfb8      	it	lt
 80051e4:	425b      	neglt	r3, r3
 80051e6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80051e8:	2301      	movs	r3, #1
 80051ea:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80051ec:	e007      	b.n	80051fe <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80051f6:	613b      	str	r3, [r7, #16]
    Width++;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	3301      	adds	r3, #1
 80051fc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	429a      	cmp	r2, r3
 8005204:	daf3      	bge.n	80051ee <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	429a      	cmp	r2, r3
 800520c:	d901      	bls.n	8005212 <_PrintInt+0x42>
    Width = NumDigits;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <_PrintInt+0x5e>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	db04      	blt.n	8005228 <_PrintInt+0x58>
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <_PrintInt+0x5e>
    FieldWidth--;
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	3b01      	subs	r3, #1
 800522c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <_PrintInt+0x6e>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d016      	beq.n	800526c <_PrintInt+0x9c>
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d111      	bne.n	800526c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00e      	beq.n	800526c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800524e:	e006      	b.n	800525e <_PrintInt+0x8e>
        FieldWidth--;
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	3b01      	subs	r3, #1
 8005254:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005256:	2120      	movs	r1, #32
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff fea7 	bl	8004fac <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <_PrintInt+0x9c>
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	429a      	cmp	r2, r3
 800526a:	d3f1      	bcc.n	8005250 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	da07      	bge.n	8005282 <_PrintInt+0xb2>
    v = -v;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	425b      	negs	r3, r3
 8005276:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005278:	212d      	movs	r1, #45	@ 0x2d
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7ff fe96 	bl	8004fac <_StoreChar>
 8005280:	e008      	b.n	8005294 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800528c:	212b      	movs	r1, #43	@ 0x2b
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f7ff fe8c 	bl	8004fac <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d019      	beq.n	80052d2 <_PrintInt+0x102>
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d114      	bne.n	80052d2 <_PrintInt+0x102>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d111      	bne.n	80052d2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00e      	beq.n	80052d2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052b4:	e006      	b.n	80052c4 <_PrintInt+0xf4>
        FieldWidth--;
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80052bc:	2130      	movs	r1, #48	@ 0x30
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff fe74 	bl	8004fac <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <_PrintInt+0x102>
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d3f1      	bcc.n	80052b6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f7ff fedf 	bl	80050a4 <_PrintUnsigned>
}
 80052e6:	bf00      	nop
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b098      	sub	sp, #96	@ 0x60
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80052fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005300:	f04f 0120 	mov.w	r1, #32
 8005304:	f381 8811 	msr	BASEPRI, r1
 8005308:	633b      	str	r3, [r7, #48]	@ 0x30
 800530a:	48b7      	ldr	r0, [pc, #732]	@ (80055e8 <_VPrintTarget+0x2f8>)
 800530c:	f7ff fc79 	bl	8004c02 <_PreparePacket>
 8005310:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005312:	4bb5      	ldr	r3, [pc, #724]	@ (80055e8 <_VPrintTarget+0x2f8>)
 8005314:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005316:	2300      	movs	r3, #0
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800531a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	3301      	adds	r3, #1
 8005322:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3301      	adds	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005336:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8183 	beq.w	8005646 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005340:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005344:	2b25      	cmp	r3, #37	@ 0x25
 8005346:	f040 8170 	bne.w	800562a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800534a:	2300      	movs	r3, #0
 800534c:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800534e:	2301      	movs	r3, #1
 8005350:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800535a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800535e:	3b23      	subs	r3, #35	@ 0x23
 8005360:	2b0d      	cmp	r3, #13
 8005362:	d83f      	bhi.n	80053e4 <_VPrintTarget+0xf4>
 8005364:	a201      	add	r2, pc, #4	@ (adr r2, 800536c <_VPrintTarget+0x7c>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080053d5 	.word	0x080053d5
 8005370:	080053e5 	.word	0x080053e5
 8005374:	080053e5 	.word	0x080053e5
 8005378:	080053e5 	.word	0x080053e5
 800537c:	080053e5 	.word	0x080053e5
 8005380:	080053e5 	.word	0x080053e5
 8005384:	080053e5 	.word	0x080053e5
 8005388:	080053e5 	.word	0x080053e5
 800538c:	080053c5 	.word	0x080053c5
 8005390:	080053e5 	.word	0x080053e5
 8005394:	080053a5 	.word	0x080053a5
 8005398:	080053e5 	.word	0x080053e5
 800539c:	080053e5 	.word	0x080053e5
 80053a0:	080053b5 	.word	0x080053b5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80053a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3301      	adds	r3, #1
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e01a      	b.n	80053ea <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80053b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053b6:	f043 0302 	orr.w	r3, r3, #2
 80053ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e012      	b.n	80053ea <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80053c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c6:	f043 0304 	orr.w	r3, r3, #4
 80053ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	e00a      	b.n	80053ea <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80053d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053d6:	f043 0308 	orr.w	r3, r3, #8
 80053da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3301      	adds	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	e002      	b.n	80053ea <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80053e4:	2300      	movs	r3, #0
 80053e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053e8:	bf00      	nop
        }
      } while (v);
 80053ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1b0      	bne.n	8005352 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80053f0:	2300      	movs	r3, #0
 80053f2:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80053fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005400:	2b2f      	cmp	r3, #47	@ 0x2f
 8005402:	d912      	bls.n	800542a <_VPrintTarget+0x13a>
 8005404:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005408:	2b39      	cmp	r3, #57	@ 0x39
 800540a:	d80e      	bhi.n	800542a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	461a      	mov	r2, r3
 800541e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005422:	4413      	add	r3, r2
 8005424:	3b30      	subs	r3, #48	@ 0x30
 8005426:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005428:	e7e4      	b.n	80053f4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800542a:	2300      	movs	r3, #0
 800542c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005436:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800543a:	2b2e      	cmp	r3, #46	@ 0x2e
 800543c:	d11d      	bne.n	800547a <_VPrintTarget+0x18a>
        sFormat++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3301      	adds	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 800544c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005450:	2b2f      	cmp	r3, #47	@ 0x2f
 8005452:	d912      	bls.n	800547a <_VPrintTarget+0x18a>
 8005454:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005458:	2b39      	cmp	r3, #57	@ 0x39
 800545a:	d80e      	bhi.n	800547a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3301      	adds	r3, #1
 8005460:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005462:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	461a      	mov	r2, r3
 800546e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005472:	4413      	add	r3, r2
 8005474:	3b30      	subs	r3, #48	@ 0x30
 8005476:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005478:	e7e4      	b.n	8005444 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005482:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005486:	2b6c      	cmp	r3, #108	@ 0x6c
 8005488:	d003      	beq.n	8005492 <_VPrintTarget+0x1a2>
 800548a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800548e:	2b68      	cmp	r3, #104	@ 0x68
 8005490:	d107      	bne.n	80054a2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80054a0:	e7ef      	b.n	8005482 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80054a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054a6:	2b25      	cmp	r3, #37	@ 0x25
 80054a8:	f000 80b3 	beq.w	8005612 <_VPrintTarget+0x322>
 80054ac:	2b25      	cmp	r3, #37	@ 0x25
 80054ae:	f2c0 80b7 	blt.w	8005620 <_VPrintTarget+0x330>
 80054b2:	2b78      	cmp	r3, #120	@ 0x78
 80054b4:	f300 80b4 	bgt.w	8005620 <_VPrintTarget+0x330>
 80054b8:	2b58      	cmp	r3, #88	@ 0x58
 80054ba:	f2c0 80b1 	blt.w	8005620 <_VPrintTarget+0x330>
 80054be:	3b58      	subs	r3, #88	@ 0x58
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	f200 80ad 	bhi.w	8005620 <_VPrintTarget+0x330>
 80054c6:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <_VPrintTarget+0x1dc>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	080055c3 	.word	0x080055c3
 80054d0:	08005621 	.word	0x08005621
 80054d4:	08005621 	.word	0x08005621
 80054d8:	08005621 	.word	0x08005621
 80054dc:	08005621 	.word	0x08005621
 80054e0:	08005621 	.word	0x08005621
 80054e4:	08005621 	.word	0x08005621
 80054e8:	08005621 	.word	0x08005621
 80054ec:	08005621 	.word	0x08005621
 80054f0:	08005621 	.word	0x08005621
 80054f4:	08005621 	.word	0x08005621
 80054f8:	08005551 	.word	0x08005551
 80054fc:	08005577 	.word	0x08005577
 8005500:	08005621 	.word	0x08005621
 8005504:	08005621 	.word	0x08005621
 8005508:	08005621 	.word	0x08005621
 800550c:	08005621 	.word	0x08005621
 8005510:	08005621 	.word	0x08005621
 8005514:	08005621 	.word	0x08005621
 8005518:	08005621 	.word	0x08005621
 800551c:	08005621 	.word	0x08005621
 8005520:	08005621 	.word	0x08005621
 8005524:	08005621 	.word	0x08005621
 8005528:	08005621 	.word	0x08005621
 800552c:	080055ed 	.word	0x080055ed
 8005530:	08005621 	.word	0x08005621
 8005534:	08005621 	.word	0x08005621
 8005538:	08005621 	.word	0x08005621
 800553c:	08005621 	.word	0x08005621
 8005540:	0800559d 	.word	0x0800559d
 8005544:	08005621 	.word	0x08005621
 8005548:	08005621 	.word	0x08005621
 800554c:	080055c3 	.word	0x080055c3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	1d19      	adds	r1, r3, #4
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6011      	str	r1, [r2, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800555e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005560:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8005564:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005568:	f107 0314 	add.w	r3, r7, #20
 800556c:	4611      	mov	r1, r2
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff fd1c 	bl	8004fac <_StoreChar>
        break;
 8005574:	e055      	b.n	8005622 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	1d19      	adds	r1, r3, #4
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6011      	str	r1, [r2, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005584:	f107 0014 	add.w	r0, r7, #20
 8005588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005592:	220a      	movs	r2, #10
 8005594:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005596:	f7ff fe1b 	bl	80051d0 <_PrintInt>
        break;
 800559a:	e042      	b.n	8005622 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	1d19      	adds	r1, r3, #4
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6011      	str	r1, [r2, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80055aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055ac:	f107 0014 	add.w	r0, r7, #20
 80055b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055b2:	9301      	str	r3, [sp, #4]
 80055b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ba:	220a      	movs	r2, #10
 80055bc:	f7ff fd72 	bl	80050a4 <_PrintUnsigned>
        break;
 80055c0:	e02f      	b.n	8005622 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	1d19      	adds	r1, r3, #4
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6011      	str	r1, [r2, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80055d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055d2:	f107 0014 	add.w	r0, r7, #20
 80055d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055e0:	2210      	movs	r2, #16
 80055e2:	f7ff fd5f 	bl	80050a4 <_PrintUnsigned>
        break;
 80055e6:	e01c      	b.n	8005622 <_VPrintTarget+0x332>
 80055e8:	200143b4 	.word	0x200143b4
      case 'p':
        v = va_arg(*pParamList, int);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	1d19      	adds	r1, r3, #4
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6011      	str	r1, [r2, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80055fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055fc:	f107 0014 	add.w	r0, r7, #20
 8005600:	2300      	movs	r3, #0
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	2308      	movs	r3, #8
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	2308      	movs	r3, #8
 800560a:	2210      	movs	r2, #16
 800560c:	f7ff fd4a 	bl	80050a4 <_PrintUnsigned>
        break;
 8005610:	e007      	b.n	8005622 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005612:	f107 0314 	add.w	r3, r7, #20
 8005616:	2125      	movs	r1, #37	@ 0x25
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fcc7 	bl	8004fac <_StoreChar>
        break;
 800561e:	e000      	b.n	8005622 <_VPrintTarget+0x332>
      default:
        break;
 8005620:	bf00      	nop
      }
      sFormat++;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3301      	adds	r3, #1
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e007      	b.n	800563a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800562a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800562e:	f107 0314 	add.w	r3, r7, #20
 8005632:	4611      	mov	r1, r2
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fcb9 	bl	8004fac <_StoreChar>
    }
  } while (*sFormat);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f47f ae72 	bne.w	8005328 <_VPrintTarget+0x38>
 8005644:	e000      	b.n	8005648 <_VPrintTarget+0x358>
      break;
 8005646:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564a:	2b00      	cmp	r3, #0
 800564c:	d041      	beq.n	80056d2 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800564e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	643b      	str	r3, [r7, #64]	@ 0x40
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800565e:	e00b      	b.n	8005678 <_VPrintTarget+0x388>
 8005660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005662:	b2da      	uxtb	r2, r3
 8005664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005666:	1c59      	adds	r1, r3, #1
 8005668:	6439      	str	r1, [r7, #64]	@ 0x40
 800566a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005674:	09db      	lsrs	r3, r3, #7
 8005676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567a:	2b7f      	cmp	r3, #127	@ 0x7f
 800567c:	d8f0      	bhi.n	8005660 <_VPrintTarget+0x370>
 800567e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	643a      	str	r2, [r7, #64]	@ 0x40
 8005684:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800568c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005692:	2300      	movs	r3, #0
 8005694:	637b      	str	r3, [r7, #52]	@ 0x34
 8005696:	e00b      	b.n	80056b0 <_VPrintTarget+0x3c0>
 8005698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569a:	b2da      	uxtb	r2, r3
 800569c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569e:	1c59      	adds	r1, r3, #1
 80056a0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ac:	09db      	lsrs	r3, r3, #7
 80056ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80056b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80056b4:	d8f0      	bhi.n	8005698 <_VPrintTarget+0x3a8>
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 80056bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c4:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	69b9      	ldr	r1, [r7, #24]
 80056ca:	221a      	movs	r2, #26
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fb87 	bl	8004de0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80056d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d4:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80056d8:	bf00      	nop
 80056da:	3758      	adds	r7, #88	@ 0x58
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80056ee:	2300      	movs	r3, #0
 80056f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80056f4:	4917      	ldr	r1, [pc, #92]	@ (8005754 <SEGGER_SYSVIEW_Init+0x74>)
 80056f6:	4818      	ldr	r0, [pc, #96]	@ (8005758 <SEGGER_SYSVIEW_Init+0x78>)
 80056f8:	f7ff f942 	bl	8004980 <SEGGER_RTT_AllocUpBuffer>
 80056fc:	4603      	mov	r3, r0
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	4b16      	ldr	r3, [pc, #88]	@ (800575c <SEGGER_SYSVIEW_Init+0x7c>)
 8005702:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005704:	4b15      	ldr	r3, [pc, #84]	@ (800575c <SEGGER_SYSVIEW_Init+0x7c>)
 8005706:	785a      	ldrb	r2, [r3, #1]
 8005708:	4b14      	ldr	r3, [pc, #80]	@ (800575c <SEGGER_SYSVIEW_Init+0x7c>)
 800570a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800570c:	4b13      	ldr	r3, [pc, #76]	@ (800575c <SEGGER_SYSVIEW_Init+0x7c>)
 800570e:	7e1b      	ldrb	r3, [r3, #24]
 8005710:	4618      	mov	r0, r3
 8005712:	2300      	movs	r3, #0
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	2308      	movs	r3, #8
 8005718:	4a11      	ldr	r2, [pc, #68]	@ (8005760 <SEGGER_SYSVIEW_Init+0x80>)
 800571a:	490f      	ldr	r1, [pc, #60]	@ (8005758 <SEGGER_SYSVIEW_Init+0x78>)
 800571c:	f7ff f9b4 	bl	8004a88 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005720:	4b0e      	ldr	r3, [pc, #56]	@ (800575c <SEGGER_SYSVIEW_Init+0x7c>)
 8005722:	2200      	movs	r2, #0
 8005724:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005726:	4b0f      	ldr	r3, [pc, #60]	@ (8005764 <SEGGER_SYSVIEW_Init+0x84>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a0c      	ldr	r2, [pc, #48]	@ (800575c <SEGGER_SYSVIEW_Init+0x7c>)
 800572c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800572e:	4a0b      	ldr	r2, [pc, #44]	@ (800575c <SEGGER_SYSVIEW_Init+0x7c>)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005734:	4a09      	ldr	r2, [pc, #36]	@ (800575c <SEGGER_SYSVIEW_Init+0x7c>)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800573a:	4a08      	ldr	r2, [pc, #32]	@ (800575c <SEGGER_SYSVIEW_Init+0x7c>)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005740:	4a06      	ldr	r2, [pc, #24]	@ (800575c <SEGGER_SYSVIEW_Init+0x7c>)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005746:	4b05      	ldr	r3, [pc, #20]	@ (800575c <SEGGER_SYSVIEW_Init+0x7c>)
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	2001337c 	.word	0x2001337c
 8005758:	080067f4 	.word	0x080067f4
 800575c:	20014384 	.word	0x20014384
 8005760:	2001437c 	.word	0x2001437c
 8005764:	e0001004 	.word	0xe0001004

08005768 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005770:	4a04      	ldr	r2, [pc, #16]	@ (8005784 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6113      	str	r3, [r2, #16]
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20014384 	.word	0x20014384

08005788 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005790:	f3ef 8311 	mrs	r3, BASEPRI
 8005794:	f04f 0120 	mov.w	r1, #32
 8005798:	f381 8811 	msr	BASEPRI, r1
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	4808      	ldr	r0, [pc, #32]	@ (80057c0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80057a0:	f7ff fa2f 	bl	8004c02 <_PreparePacket>
 80057a4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	68b8      	ldr	r0, [r7, #8]
 80057ac:	f7ff fb18 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f383 8811 	msr	BASEPRI, r3
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	200143b4 	.word	0x200143b4

080057c4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057ce:	f3ef 8311 	mrs	r3, BASEPRI
 80057d2:	f04f 0120 	mov.w	r1, #32
 80057d6:	f381 8811 	msr	BASEPRI, r1
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	4816      	ldr	r0, [pc, #88]	@ (8005838 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80057de:	f7ff fa10 	bl	8004c02 <_PreparePacket>
 80057e2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	61fb      	str	r3, [r7, #28]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	e00b      	b.n	800580a <SEGGER_SYSVIEW_RecordU32+0x46>
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	1c59      	adds	r1, r3, #1
 80057fa:	61f9      	str	r1, [r7, #28]
 80057fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	09db      	lsrs	r3, r3, #7
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2b7f      	cmp	r3, #127	@ 0x7f
 800580e:	d8f0      	bhi.n	80057f2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	61fa      	str	r2, [r7, #28]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	68f9      	ldr	r1, [r7, #12]
 8005824:	6938      	ldr	r0, [r7, #16]
 8005826:	f7ff fadb 	bl	8004de0 <_SendPacket>
  RECORD_END();
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f383 8811 	msr	BASEPRI, r3
}
 8005830:	bf00      	nop
 8005832:	3720      	adds	r7, #32
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	200143b4 	.word	0x200143b4

0800583c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b08c      	sub	sp, #48	@ 0x30
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005848:	f3ef 8311 	mrs	r3, BASEPRI
 800584c:	f04f 0120 	mov.w	r1, #32
 8005850:	f381 8811 	msr	BASEPRI, r1
 8005854:	61fb      	str	r3, [r7, #28]
 8005856:	4825      	ldr	r0, [pc, #148]	@ (80058ec <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005858:	f7ff f9d3 	bl	8004c02 <_PreparePacket>
 800585c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800586a:	e00b      	b.n	8005884 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800586c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586e:	b2da      	uxtb	r2, r3
 8005870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005872:	1c59      	adds	r1, r3, #1
 8005874:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005876:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005880:	09db      	lsrs	r3, r3, #7
 8005882:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	2b7f      	cmp	r3, #127	@ 0x7f
 8005888:	d8f0      	bhi.n	800586c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800588a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005898:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	e00b      	b.n	80058bc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	1c59      	adds	r1, r3, #1
 80058ac:	6279      	str	r1, [r7, #36]	@ 0x24
 80058ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	09db      	lsrs	r3, r3, #7
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	2b7f      	cmp	r3, #127	@ 0x7f
 80058c0:	d8f0      	bhi.n	80058a4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80058c8:	6a3a      	ldr	r2, [r7, #32]
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	6979      	ldr	r1, [r7, #20]
 80058d6:	69b8      	ldr	r0, [r7, #24]
 80058d8:	f7ff fa82 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f383 8811 	msr	BASEPRI, r3
}
 80058e2:	bf00      	nop
 80058e4:	3730      	adds	r7, #48	@ 0x30
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200143b4 	.word	0x200143b4

080058f0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08e      	sub	sp, #56	@ 0x38
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80058fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005902:	f04f 0120 	mov.w	r1, #32
 8005906:	f381 8811 	msr	BASEPRI, r1
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	4832      	ldr	r0, [pc, #200]	@ (80059d8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800590e:	f7ff f978 	bl	8004c02 <_PreparePacket>
 8005912:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	637b      	str	r3, [r7, #52]	@ 0x34
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005920:	e00b      	b.n	800593a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005924:	b2da      	uxtb	r2, r3
 8005926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005928:	1c59      	adds	r1, r3, #1
 800592a:	6379      	str	r1, [r7, #52]	@ 0x34
 800592c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005936:	09db      	lsrs	r3, r3, #7
 8005938:	633b      	str	r3, [r7, #48]	@ 0x30
 800593a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593c:	2b7f      	cmp	r3, #127	@ 0x7f
 800593e:	d8f0      	bhi.n	8005922 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	637a      	str	r2, [r7, #52]	@ 0x34
 8005946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]
 800594c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005958:	e00b      	b.n	8005972 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	b2da      	uxtb	r2, r3
 800595e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005960:	1c59      	adds	r1, r3, #1
 8005962:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005964:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	09db      	lsrs	r3, r3, #7
 8005970:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005974:	2b7f      	cmp	r3, #127	@ 0x7f
 8005976:	d8f0      	bhi.n	800595a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800597e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005986:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	627b      	str	r3, [r7, #36]	@ 0x24
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	623b      	str	r3, [r7, #32]
 8005990:	e00b      	b.n	80059aa <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	1c59      	adds	r1, r3, #1
 800599a:	6279      	str	r1, [r7, #36]	@ 0x24
 800599c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	09db      	lsrs	r3, r3, #7
 80059a8:	623b      	str	r3, [r7, #32]
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80059ae:	d8f0      	bhi.n	8005992 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80059b6:	6a3a      	ldr	r2, [r7, #32]
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	6979      	ldr	r1, [r7, #20]
 80059c4:	69b8      	ldr	r0, [r7, #24]
 80059c6:	f7ff fa0b 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	f383 8811 	msr	BASEPRI, r3
}
 80059d0:	bf00      	nop
 80059d2:	3738      	adds	r7, #56	@ 0x38
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	200143b4 	.word	0x200143b4

080059dc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b090      	sub	sp, #64	@ 0x40
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059ea:	f3ef 8311 	mrs	r3, BASEPRI
 80059ee:	f04f 0120 	mov.w	r1, #32
 80059f2:	f381 8811 	msr	BASEPRI, r1
 80059f6:	61fb      	str	r3, [r7, #28]
 80059f8:	4840      	ldr	r0, [pc, #256]	@ (8005afc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80059fa:	f7ff f902 	bl	8004c02 <_PreparePacket>
 80059fe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a0c:	e00b      	b.n	8005a26 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005a18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a22:	09db      	lsrs	r3, r3, #7
 8005a24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a28:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a2a:	d8f0      	bhi.n	8005a0e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a44:	e00b      	b.n	8005a5e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4c:	1c59      	adds	r1, r3, #1
 8005a4e:	6379      	str	r1, [r7, #52]	@ 0x34
 8005a50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5a:	09db      	lsrs	r3, r3, #7
 8005a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a62:	d8f0      	bhi.n	8005a46 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	637a      	str	r2, [r7, #52]	@ 0x34
 8005a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a7c:	e00b      	b.n	8005a96 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a84:	1c59      	adds	r1, r3, #1
 8005a86:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005a88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a92:	09db      	lsrs	r3, r3, #7
 8005a94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a9a:	d8f0      	bhi.n	8005a7e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ab2:	623b      	str	r3, [r7, #32]
 8005ab4:	e00b      	b.n	8005ace <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	1c59      	adds	r1, r3, #1
 8005abe:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ac0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	09db      	lsrs	r3, r3, #7
 8005acc:	623b      	str	r3, [r7, #32]
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ad2:	d8f0      	bhi.n	8005ab6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ada:	6a3a      	ldr	r2, [r7, #32]
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	6979      	ldr	r1, [r7, #20]
 8005ae8:	69b8      	ldr	r0, [r7, #24]
 8005aea:	f7ff f979 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f383 8811 	msr	BASEPRI, r3
}
 8005af4:	bf00      	nop
 8005af6:	3740      	adds	r7, #64	@ 0x40
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	200143b4 	.word	0x200143b4

08005b00 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08c      	sub	sp, #48	@ 0x30
 8005b04:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005b06:	4b58      	ldr	r3, [pc, #352]	@ (8005c68 <SEGGER_SYSVIEW_Start+0x168>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b10:	f04f 0120 	mov.w	r1, #32
 8005b14:	f381 8811 	msr	BASEPRI, r1
 8005b18:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005b1a:	4b53      	ldr	r3, [pc, #332]	@ (8005c68 <SEGGER_SYSVIEW_Start+0x168>)
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	220a      	movs	r2, #10
 8005b20:	4952      	ldr	r1, [pc, #328]	@ (8005c6c <SEGGER_SYSVIEW_Start+0x16c>)
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fa fb5c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005b2e:	200a      	movs	r0, #10
 8005b30:	f7ff fe2a 	bl	8005788 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b34:	f3ef 8311 	mrs	r3, BASEPRI
 8005b38:	f04f 0120 	mov.w	r1, #32
 8005b3c:	f381 8811 	msr	BASEPRI, r1
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	484b      	ldr	r0, [pc, #300]	@ (8005c70 <SEGGER_SYSVIEW_Start+0x170>)
 8005b44:	f7ff f85d 	bl	8004c02 <_PreparePacket>
 8005b48:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b52:	4b45      	ldr	r3, [pc, #276]	@ (8005c68 <SEGGER_SYSVIEW_Start+0x168>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b58:	e00b      	b.n	8005b72 <SEGGER_SYSVIEW_Start+0x72>
 8005b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b60:	1c59      	adds	r1, r3, #1
 8005b62:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6e:	09db      	lsrs	r3, r3, #7
 8005b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b74:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b76:	d8f0      	bhi.n	8005b5a <SEGGER_SYSVIEW_Start+0x5a>
 8005b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b86:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b8c:	4b36      	ldr	r3, [pc, #216]	@ (8005c68 <SEGGER_SYSVIEW_Start+0x168>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	e00b      	b.n	8005bac <SEGGER_SYSVIEW_Start+0xac>
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9a:	1c59      	adds	r1, r3, #1
 8005b9c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	09db      	lsrs	r3, r3, #7
 8005baa:	623b      	str	r3, [r7, #32]
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bb0:	d8f0      	bhi.n	8005b94 <SEGGER_SYSVIEW_Start+0x94>
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bb8:	6a3a      	ldr	r2, [r7, #32]
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	4b28      	ldr	r3, [pc, #160]	@ (8005c68 <SEGGER_SYSVIEW_Start+0x168>)
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	e00b      	b.n	8005be6 <SEGGER_SYSVIEW_Start+0xe6>
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	1c59      	adds	r1, r3, #1
 8005bd6:	61f9      	str	r1, [r7, #28]
 8005bd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	09db      	lsrs	r3, r3, #7
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bea:	d8f0      	bhi.n	8005bce <SEGGER_SYSVIEW_Start+0xce>
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	61fa      	str	r2, [r7, #28]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	2300      	movs	r3, #0
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	e00b      	b.n	8005c1e <SEGGER_SYSVIEW_Start+0x11e>
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	1c59      	adds	r1, r3, #1
 8005c0e:	6179      	str	r1, [r7, #20]
 8005c10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	09db      	lsrs	r3, r3, #7
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c22:	d8f0      	bhi.n	8005c06 <SEGGER_SYSVIEW_Start+0x106>
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	617a      	str	r2, [r7, #20]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c34:	2218      	movs	r2, #24
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff f8d1 	bl	8004de0 <_SendPacket>
      RECORD_END();
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c44:	4b08      	ldr	r3, [pc, #32]	@ (8005c68 <SEGGER_SYSVIEW_Start+0x168>)
 8005c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005c4c:	4b06      	ldr	r3, [pc, #24]	@ (8005c68 <SEGGER_SYSVIEW_Start+0x168>)
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c50:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005c52:	f000 f9eb 	bl	800602c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005c56:	f000 f9b1 	bl	8005fbc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005c5a:	f000 fc23 	bl	80064a4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005c5e:	bf00      	nop
 8005c60:	3730      	adds	r7, #48	@ 0x30
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20014384 	.word	0x20014384
 8005c6c:	0800681c 	.word	0x0800681c
 8005c70:	200143b4 	.word	0x200143b4

08005c74 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c7a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c7e:	f04f 0120 	mov.w	r1, #32
 8005c82:	f381 8811 	msr	BASEPRI, r1
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	480b      	ldr	r0, [pc, #44]	@ (8005cb8 <SEGGER_SYSVIEW_Stop+0x44>)
 8005c8a:	f7fe ffba 	bl	8004c02 <_PreparePacket>
 8005c8e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005c90:	4b0a      	ldr	r3, [pc, #40]	@ (8005cbc <SEGGER_SYSVIEW_Stop+0x48>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005c98:	220b      	movs	r2, #11
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	6838      	ldr	r0, [r7, #0]
 8005c9e:	f7ff f89f 	bl	8004de0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005ca2:	4b06      	ldr	r3, [pc, #24]	@ (8005cbc <SEGGER_SYSVIEW_Stop+0x48>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f383 8811 	msr	BASEPRI, r3
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	200143b4 	.word	0x200143b4
 8005cbc:	20014384 	.word	0x20014384

08005cc0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08c      	sub	sp, #48	@ 0x30
 8005cc4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8005cca:	f04f 0120 	mov.w	r1, #32
 8005cce:	f381 8811 	msr	BASEPRI, r1
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	4845      	ldr	r0, [pc, #276]	@ (8005dec <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005cd6:	f7fe ff94 	bl	8004c02 <_PreparePacket>
 8005cda:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ce4:	4b42      	ldr	r3, [pc, #264]	@ (8005df0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cea:	e00b      	b.n	8005d04 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf2:	1c59      	adds	r1, r3, #1
 8005cf4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005cf6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d00:	09db      	lsrs	r3, r3, #7
 8005d02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d06:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d08:	d8f0      	bhi.n	8005cec <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	701a      	strb	r2, [r3, #0]
 8005d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d18:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d1e:	4b34      	ldr	r3, [pc, #208]	@ (8005df0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	623b      	str	r3, [r7, #32]
 8005d24:	e00b      	b.n	8005d3e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	1c59      	adds	r1, r3, #1
 8005d2e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	09db      	lsrs	r3, r3, #7
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d42:	d8f0      	bhi.n	8005d26 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d4a:	6a3a      	ldr	r2, [r7, #32]
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	4b25      	ldr	r3, [pc, #148]	@ (8005df0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	e00b      	b.n	8005d78 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	1c59      	adds	r1, r3, #1
 8005d68:	61f9      	str	r1, [r7, #28]
 8005d6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	09db      	lsrs	r3, r3, #7
 8005d76:	61bb      	str	r3, [r7, #24]
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d7c:	d8f0      	bhi.n	8005d60 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	61fa      	str	r2, [r7, #28]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	2300      	movs	r3, #0
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	e00b      	b.n	8005db0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1c59      	adds	r1, r3, #1
 8005da0:	6179      	str	r1, [r7, #20]
 8005da2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	09db      	lsrs	r3, r3, #7
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005db4:	d8f0      	bhi.n	8005d98 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	617a      	str	r2, [r7, #20]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005dc6:	2218      	movs	r2, #24
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	68b8      	ldr	r0, [r7, #8]
 8005dcc:	f7ff f808 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005dd6:	4b06      	ldr	r3, [pc, #24]	@ (8005df0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005dde:	4b04      	ldr	r3, [pc, #16]	@ (8005df0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de2:	4798      	blx	r3
  }
}
 8005de4:	bf00      	nop
 8005de6:	3730      	adds	r7, #48	@ 0x30
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	200143b4 	.word	0x200143b4
 8005df0:	20014384 	.word	0x20014384

08005df4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b092      	sub	sp, #72	@ 0x48
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005dfc:	f3ef 8311 	mrs	r3, BASEPRI
 8005e00:	f04f 0120 	mov.w	r1, #32
 8005e04:	f381 8811 	msr	BASEPRI, r1
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	486a      	ldr	r0, [pc, #424]	@ (8005fb4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005e0c:	f7fe fef9 	bl	8004c02 <_PreparePacket>
 8005e10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b66      	ldr	r3, [pc, #408]	@ (8005fb8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e26:	e00b      	b.n	8005e40 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e2e:	1c59      	adds	r1, r3, #1
 8005e30:	6479      	str	r1, [r7, #68]	@ 0x44
 8005e32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e3c:	09db      	lsrs	r3, r3, #7
 8005e3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e44:	d8f0      	bhi.n	8005e28 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e60:	e00b      	b.n	8005e7a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e68:	1c59      	adds	r1, r3, #1
 8005e6a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005e6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e76:	09db      	lsrs	r3, r3, #7
 8005e78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e7e:	d8f0      	bhi.n	8005e62 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e8e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	4619      	mov	r1, r3
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7fe fe65 	bl	8004b68 <_EncodeStr>
 8005e9e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005ea0:	2209      	movs	r2, #9
 8005ea2:	68f9      	ldr	r1, [r7, #12]
 8005ea4:	6938      	ldr	r0, [r7, #16]
 8005ea6:	f7fe ff9b 	bl	8004de0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4b40      	ldr	r3, [pc, #256]	@ (8005fb8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ebe:	e00b      	b.n	8005ed8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec6:	1c59      	adds	r1, r3, #1
 8005ec8:	6379      	str	r1, [r7, #52]	@ 0x34
 8005eca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	09db      	lsrs	r3, r3, #7
 8005ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eda:	2b7f      	cmp	r3, #127	@ 0x7f
 8005edc:	d8f0      	bhi.n	8005ec0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	637a      	str	r2, [r7, #52]	@ 0x34
 8005ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ef8:	e00b      	b.n	8005f12 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f00:	1c59      	adds	r1, r3, #1
 8005f02:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005f04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0e:	09db      	lsrs	r3, r3, #7
 8005f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f14:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f16:	d8f0      	bhi.n	8005efa <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]
 8005f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f26:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	623b      	str	r3, [r7, #32]
 8005f32:	e00b      	b.n	8005f4c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	1c59      	adds	r1, r3, #1
 8005f3c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	09db      	lsrs	r3, r3, #7
 8005f4a:	623b      	str	r3, [r7, #32]
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f50:	d8f0      	bhi.n	8005f34 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f58:	6a3a      	ldr	r2, [r7, #32]
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	2300      	movs	r3, #0
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	e00b      	b.n	8005f84 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	1c59      	adds	r1, r3, #1
 8005f74:	61f9      	str	r1, [r7, #28]
 8005f76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	09db      	lsrs	r3, r3, #7
 8005f82:	61bb      	str	r3, [r7, #24]
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f88:	d8f0      	bhi.n	8005f6c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	61fa      	str	r2, [r7, #28]
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005f9a:	2215      	movs	r2, #21
 8005f9c:	68f9      	ldr	r1, [r7, #12]
 8005f9e:	6938      	ldr	r0, [r7, #16]
 8005fa0:	f7fe ff1e 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f383 8811 	msr	BASEPRI, r3
}
 8005faa:	bf00      	nop
 8005fac:	3748      	adds	r7, #72	@ 0x48
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	200143b4 	.word	0x200143b4
 8005fb8:	20014384 	.word	0x20014384

08005fbc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005fc0:	4b07      	ldr	r3, [pc, #28]	@ (8005fe0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d008      	beq.n	8005fda <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005fc8:	4b05      	ldr	r3, [pc, #20]	@ (8005fe0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005fd2:	4b03      	ldr	r3, [pc, #12]	@ (8005fe0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4798      	blx	r3
  }
}
 8005fda:	bf00      	nop
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20014384 	.word	0x20014384

08005fe4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fec:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff0:	f04f 0120 	mov.w	r1, #32
 8005ff4:	f381 8811 	msr	BASEPRI, r1
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	480b      	ldr	r0, [pc, #44]	@ (8006028 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005ffc:	f7fe fe01 	bl	8004c02 <_PreparePacket>
 8006000:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006002:	2280      	movs	r2, #128	@ 0x80
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	6938      	ldr	r0, [r7, #16]
 8006008:	f7fe fdae 	bl	8004b68 <_EncodeStr>
 800600c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800600e:	220e      	movs	r2, #14
 8006010:	68f9      	ldr	r1, [r7, #12]
 8006012:	6938      	ldr	r0, [r7, #16]
 8006014:	f7fe fee4 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f383 8811 	msr	BASEPRI, r3
}
 800601e:	bf00      	nop
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	200143b4 	.word	0x200143b4

0800602c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800602c:	b590      	push	{r4, r7, lr}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006032:	4b15      	ldr	r3, [pc, #84]	@ (8006088 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d01a      	beq.n	8006070 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800603a:	4b13      	ldr	r3, [pc, #76]	@ (8006088 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d015      	beq.n	8006070 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006044:	4b10      	ldr	r3, [pc, #64]	@ (8006088 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4798      	blx	r3
 800604c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006050:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006052:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	f04f 0300 	mov.w	r3, #0
 800605e:	000a      	movs	r2, r1
 8006060:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006062:	4613      	mov	r3, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4621      	mov	r1, r4
 8006068:	200d      	movs	r0, #13
 800606a:	f7ff fbe7 	bl	800583c <SEGGER_SYSVIEW_RecordU32x2>
 800606e:	e006      	b.n	800607e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006070:	4b06      	ldr	r3, [pc, #24]	@ (800608c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4619      	mov	r1, r3
 8006076:	200c      	movs	r0, #12
 8006078:	f7ff fba4 	bl	80057c4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	bd90      	pop	{r4, r7, pc}
 8006086:	bf00      	nop
 8006088:	20014384 	.word	0x20014384
 800608c:	e0001004 	.word	0xe0001004

08006090 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006096:	f3ef 8311 	mrs	r3, BASEPRI
 800609a:	f04f 0120 	mov.w	r1, #32
 800609e:	f381 8811 	msr	BASEPRI, r1
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	4819      	ldr	r0, [pc, #100]	@ (800610c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80060a6:	f7fe fdac 	bl	8004c02 <_PreparePacket>
 80060aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80060b0:	4b17      	ldr	r3, [pc, #92]	@ (8006110 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	e00b      	b.n	80060dc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	1c59      	adds	r1, r3, #1
 80060cc:	6179      	str	r1, [r7, #20]
 80060ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	09db      	lsrs	r3, r3, #7
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b7f      	cmp	r3, #127	@ 0x7f
 80060e0:	d8f0      	bhi.n	80060c4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	617a      	str	r2, [r7, #20]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80060f2:	2202      	movs	r2, #2
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	68b8      	ldr	r0, [r7, #8]
 80060f8:	f7fe fe72 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f383 8811 	msr	BASEPRI, r3
}
 8006102:	bf00      	nop
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	200143b4 	.word	0x200143b4
 8006110:	e000ed04 	.word	0xe000ed04

08006114 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800611a:	f3ef 8311 	mrs	r3, BASEPRI
 800611e:	f04f 0120 	mov.w	r1, #32
 8006122:	f381 8811 	msr	BASEPRI, r1
 8006126:	607b      	str	r3, [r7, #4]
 8006128:	4807      	ldr	r0, [pc, #28]	@ (8006148 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800612a:	f7fe fd6a 	bl	8004c02 <_PreparePacket>
 800612e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006130:	2203      	movs	r2, #3
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6838      	ldr	r0, [r7, #0]
 8006136:	f7fe fe53 	bl	8004de0 <_SendPacket>
  RECORD_END();
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f383 8811 	msr	BASEPRI, r3
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	200143b4 	.word	0x200143b4

0800614c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006152:	f3ef 8311 	mrs	r3, BASEPRI
 8006156:	f04f 0120 	mov.w	r1, #32
 800615a:	f381 8811 	msr	BASEPRI, r1
 800615e:	607b      	str	r3, [r7, #4]
 8006160:	4807      	ldr	r0, [pc, #28]	@ (8006180 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006162:	f7fe fd4e 	bl	8004c02 <_PreparePacket>
 8006166:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006168:	2212      	movs	r2, #18
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	6838      	ldr	r0, [r7, #0]
 800616e:	f7fe fe37 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f383 8811 	msr	BASEPRI, r3
}
 8006178:	bf00      	nop
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	200143b4 	.word	0x200143b4

08006184 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800618a:	f3ef 8311 	mrs	r3, BASEPRI
 800618e:	f04f 0120 	mov.w	r1, #32
 8006192:	f381 8811 	msr	BASEPRI, r1
 8006196:	607b      	str	r3, [r7, #4]
 8006198:	4807      	ldr	r0, [pc, #28]	@ (80061b8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800619a:	f7fe fd32 	bl	8004c02 <_PreparePacket>
 800619e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80061a0:	2211      	movs	r2, #17
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6838      	ldr	r0, [r7, #0]
 80061a6:	f7fe fe1b 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f383 8811 	msr	BASEPRI, r3
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	200143b4 	.word	0x200143b4

080061bc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061c4:	f3ef 8311 	mrs	r3, BASEPRI
 80061c8:	f04f 0120 	mov.w	r1, #32
 80061cc:	f381 8811 	msr	BASEPRI, r1
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	4819      	ldr	r0, [pc, #100]	@ (8006238 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80061d4:	f7fe fd15 	bl	8004c02 <_PreparePacket>
 80061d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061de:	4b17      	ldr	r3, [pc, #92]	@ (800623c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	e00b      	b.n	800620a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	1c59      	adds	r1, r3, #1
 80061fa:	61f9      	str	r1, [r7, #28]
 80061fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	09db      	lsrs	r3, r3, #7
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b7f      	cmp	r3, #127	@ 0x7f
 800620e:	d8f0      	bhi.n	80061f2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	61fa      	str	r2, [r7, #28]
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006220:	2208      	movs	r2, #8
 8006222:	68f9      	ldr	r1, [r7, #12]
 8006224:	6938      	ldr	r0, [r7, #16]
 8006226:	f7fe fddb 	bl	8004de0 <_SendPacket>
  RECORD_END();
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f383 8811 	msr	BASEPRI, r3
}
 8006230:	bf00      	nop
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	200143b4 	.word	0x200143b4
 800623c:	20014384 	.word	0x20014384

08006240 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b088      	sub	sp, #32
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006248:	f3ef 8311 	mrs	r3, BASEPRI
 800624c:	f04f 0120 	mov.w	r1, #32
 8006250:	f381 8811 	msr	BASEPRI, r1
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	4819      	ldr	r0, [pc, #100]	@ (80062bc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006258:	f7fe fcd3 	bl	8004c02 <_PreparePacket>
 800625c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006262:	4b17      	ldr	r3, [pc, #92]	@ (80062c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	61fb      	str	r3, [r7, #28]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	61bb      	str	r3, [r7, #24]
 8006274:	e00b      	b.n	800628e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	b2da      	uxtb	r2, r3
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	1c59      	adds	r1, r3, #1
 800627e:	61f9      	str	r1, [r7, #28]
 8006280:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	09db      	lsrs	r3, r3, #7
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	2b7f      	cmp	r3, #127	@ 0x7f
 8006292:	d8f0      	bhi.n	8006276 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	61fa      	str	r2, [r7, #28]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80062a4:	2204      	movs	r2, #4
 80062a6:	68f9      	ldr	r1, [r7, #12]
 80062a8:	6938      	ldr	r0, [r7, #16]
 80062aa:	f7fe fd99 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f383 8811 	msr	BASEPRI, r3
}
 80062b4:	bf00      	nop
 80062b6:	3720      	adds	r7, #32
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	200143b4 	.word	0x200143b4
 80062c0:	20014384 	.word	0x20014384

080062c4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062cc:	f3ef 8311 	mrs	r3, BASEPRI
 80062d0:	f04f 0120 	mov.w	r1, #32
 80062d4:	f381 8811 	msr	BASEPRI, r1
 80062d8:	617b      	str	r3, [r7, #20]
 80062da:	4819      	ldr	r0, [pc, #100]	@ (8006340 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80062dc:	f7fe fc91 	bl	8004c02 <_PreparePacket>
 80062e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062e6:	4b17      	ldr	r3, [pc, #92]	@ (8006344 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	61bb      	str	r3, [r7, #24]
 80062f8:	e00b      	b.n	8006312 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	1c59      	adds	r1, r3, #1
 8006302:	61f9      	str	r1, [r7, #28]
 8006304:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	09db      	lsrs	r3, r3, #7
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b7f      	cmp	r3, #127	@ 0x7f
 8006316:	d8f0      	bhi.n	80062fa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	61fa      	str	r2, [r7, #28]
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006328:	2206      	movs	r2, #6
 800632a:	68f9      	ldr	r1, [r7, #12]
 800632c:	6938      	ldr	r0, [r7, #16]
 800632e:	f7fe fd57 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f383 8811 	msr	BASEPRI, r3
}
 8006338:	bf00      	nop
 800633a:	3720      	adds	r7, #32
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	200143b4 	.word	0x200143b4
 8006344:	20014384 	.word	0x20014384

08006348 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006350:	4b04      	ldr	r3, [pc, #16]	@ (8006364 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	1ad3      	subs	r3, r2, r3
}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	20014384 	.word	0x20014384

08006368 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b08c      	sub	sp, #48	@ 0x30
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006372:	4b3b      	ldr	r3, [pc, #236]	@ (8006460 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d06d      	beq.n	8006456 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800637a:	4b39      	ldr	r3, [pc, #228]	@ (8006460 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006380:	2300      	movs	r3, #0
 8006382:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006384:	e008      	b.n	8006398 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800638c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006394:	3301      	adds	r3, #1
 8006396:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800639c:	429a      	cmp	r2, r3
 800639e:	d3f2      	bcc.n	8006386 <SEGGER_SYSVIEW_SendModule+0x1e>
 80063a0:	e000      	b.n	80063a4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80063a2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80063a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d055      	beq.n	8006456 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063aa:	f3ef 8311 	mrs	r3, BASEPRI
 80063ae:	f04f 0120 	mov.w	r1, #32
 80063b2:	f381 8811 	msr	BASEPRI, r1
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	482a      	ldr	r0, [pc, #168]	@ (8006464 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80063ba:	f7fe fc22 	bl	8004c02 <_PreparePacket>
 80063be:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	623b      	str	r3, [r7, #32]
 80063cc:	e00b      	b.n	80063e6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	1c59      	adds	r1, r3, #1
 80063d6:	6279      	str	r1, [r7, #36]	@ 0x24
 80063d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	09db      	lsrs	r3, r3, #7
 80063e4:	623b      	str	r3, [r7, #32]
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80063ea:	d8f0      	bhi.n	80063ce <SEGGER_SYSVIEW_SendModule+0x66>
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80063f2:	6a3a      	ldr	r2, [r7, #32]
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e00b      	b.n	8006420 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	b2da      	uxtb	r2, r3
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	1c59      	adds	r1, r3, #1
 8006410:	61f9      	str	r1, [r7, #28]
 8006412:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	09db      	lsrs	r3, r3, #7
 800641e:	61bb      	str	r3, [r7, #24]
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2b7f      	cmp	r3, #127	@ 0x7f
 8006424:	d8f0      	bhi.n	8006408 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	61fa      	str	r2, [r7, #28]
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2280      	movs	r2, #128	@ 0x80
 800643c:	4619      	mov	r1, r3
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7fe fb92 	bl	8004b68 <_EncodeStr>
 8006444:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006446:	2216      	movs	r2, #22
 8006448:	68f9      	ldr	r1, [r7, #12]
 800644a:	6938      	ldr	r0, [r7, #16]
 800644c:	f7fe fcc8 	bl	8004de0 <_SendPacket>
      RECORD_END();
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006456:	bf00      	nop
 8006458:	3730      	adds	r7, #48	@ 0x30
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	200143ac 	.word	0x200143ac
 8006464:	200143b4 	.word	0x200143b4

08006468 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800646e:	4b0c      	ldr	r3, [pc, #48]	@ (80064a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00f      	beq.n	8006496 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006476:	4b0a      	ldr	r3, [pc, #40]	@ (80064a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f2      	bne.n	800647c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	200143ac 	.word	0x200143ac

080064a4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80064aa:	f3ef 8311 	mrs	r3, BASEPRI
 80064ae:	f04f 0120 	mov.w	r1, #32
 80064b2:	f381 8811 	msr	BASEPRI, r1
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	4817      	ldr	r0, [pc, #92]	@ (8006518 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80064ba:	f7fe fba2 	bl	8004c02 <_PreparePacket>
 80064be:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	4b14      	ldr	r3, [pc, #80]	@ (800651c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	e00b      	b.n	80064e8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	1c59      	adds	r1, r3, #1
 80064d8:	6179      	str	r1, [r7, #20]
 80064da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	09db      	lsrs	r3, r3, #7
 80064e6:	613b      	str	r3, [r7, #16]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80064ec:	d8f0      	bhi.n	80064d0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	617a      	str	r2, [r7, #20]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80064fe:	221b      	movs	r2, #27
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	68b8      	ldr	r0, [r7, #8]
 8006504:	f7fe fc6c 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f383 8811 	msr	BASEPRI, r3
}
 800650e:	bf00      	nop
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	200143b4 	.word	0x200143b4
 800651c:	200143b0 	.word	0x200143b0

08006520 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006520:	b40f      	push	{r0, r1, r2, r3}
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006528:	f107 0314 	add.w	r3, r7, #20
 800652c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800652e:	1d3b      	adds	r3, r7, #4
 8006530:	461a      	mov	r2, r3
 8006532:	2100      	movs	r1, #0
 8006534:	6938      	ldr	r0, [r7, #16]
 8006536:	f7fe fedb 	bl	80052f0 <_VPrintTarget>
  va_end(ParamList);
}
 800653a:	bf00      	nop
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006544:	b004      	add	sp, #16
 8006546:	4770      	bx	lr

08006548 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006548:	b580      	push	{r7, lr}
 800654a:	b08a      	sub	sp, #40	@ 0x28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006550:	f3ef 8311 	mrs	r3, BASEPRI
 8006554:	f04f 0120 	mov.w	r1, #32
 8006558:	f381 8811 	msr	BASEPRI, r1
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	4827      	ldr	r0, [pc, #156]	@ (80065fc <SEGGER_SYSVIEW_Warn+0xb4>)
 8006560:	f7fe fb4f 	bl	8004c02 <_PreparePacket>
 8006564:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006566:	2280      	movs	r2, #128	@ 0x80
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	6938      	ldr	r0, [r7, #16]
 800656c:	f7fe fafc 	bl	8004b68 <_EncodeStr>
 8006570:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	627b      	str	r3, [r7, #36]	@ 0x24
 8006576:	2301      	movs	r3, #1
 8006578:	623b      	str	r3, [r7, #32]
 800657a:	e00b      	b.n	8006594 <SEGGER_SYSVIEW_Warn+0x4c>
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	1c59      	adds	r1, r3, #1
 8006584:	6279      	str	r1, [r7, #36]	@ 0x24
 8006586:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	09db      	lsrs	r3, r3, #7
 8006592:	623b      	str	r3, [r7, #32]
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	2b7f      	cmp	r3, #127	@ 0x7f
 8006598:	d8f0      	bhi.n	800657c <SEGGER_SYSVIEW_Warn+0x34>
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	627a      	str	r2, [r7, #36]	@ 0x24
 80065a0:	6a3a      	ldr	r2, [r7, #32]
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	e00b      	b.n	80065cc <SEGGER_SYSVIEW_Warn+0x84>
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	1c59      	adds	r1, r3, #1
 80065bc:	61f9      	str	r1, [r7, #28]
 80065be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	09db      	lsrs	r3, r3, #7
 80065ca:	61bb      	str	r3, [r7, #24]
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80065d0:	d8f0      	bhi.n	80065b4 <SEGGER_SYSVIEW_Warn+0x6c>
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	61fa      	str	r2, [r7, #28]
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80065e2:	221a      	movs	r2, #26
 80065e4:	68f9      	ldr	r1, [r7, #12]
 80065e6:	6938      	ldr	r0, [r7, #16]
 80065e8:	f7fe fbfa 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f383 8811 	msr	BASEPRI, r3
}
 80065f2:	bf00      	nop
 80065f4:	3728      	adds	r7, #40	@ 0x28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	200143b4 	.word	0x200143b4

08006600 <memcmp>:
 8006600:	b510      	push	{r4, lr}
 8006602:	3901      	subs	r1, #1
 8006604:	4402      	add	r2, r0
 8006606:	4290      	cmp	r0, r2
 8006608:	d101      	bne.n	800660e <memcmp+0xe>
 800660a:	2000      	movs	r0, #0
 800660c:	e005      	b.n	800661a <memcmp+0x1a>
 800660e:	7803      	ldrb	r3, [r0, #0]
 8006610:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006614:	42a3      	cmp	r3, r4
 8006616:	d001      	beq.n	800661c <memcmp+0x1c>
 8006618:	1b18      	subs	r0, r3, r4
 800661a:	bd10      	pop	{r4, pc}
 800661c:	3001      	adds	r0, #1
 800661e:	e7f2      	b.n	8006606 <memcmp+0x6>

08006620 <memset>:
 8006620:	4402      	add	r2, r0
 8006622:	4603      	mov	r3, r0
 8006624:	4293      	cmp	r3, r2
 8006626:	d100      	bne.n	800662a <memset+0xa>
 8006628:	4770      	bx	lr
 800662a:	f803 1b01 	strb.w	r1, [r3], #1
 800662e:	e7f9      	b.n	8006624 <memset+0x4>

08006630 <__libc_init_array>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	4d0d      	ldr	r5, [pc, #52]	@ (8006668 <__libc_init_array+0x38>)
 8006634:	4c0d      	ldr	r4, [pc, #52]	@ (800666c <__libc_init_array+0x3c>)
 8006636:	1b64      	subs	r4, r4, r5
 8006638:	10a4      	asrs	r4, r4, #2
 800663a:	2600      	movs	r6, #0
 800663c:	42a6      	cmp	r6, r4
 800663e:	d109      	bne.n	8006654 <__libc_init_array+0x24>
 8006640:	4d0b      	ldr	r5, [pc, #44]	@ (8006670 <__libc_init_array+0x40>)
 8006642:	4c0c      	ldr	r4, [pc, #48]	@ (8006674 <__libc_init_array+0x44>)
 8006644:	f000 f826 	bl	8006694 <_init>
 8006648:	1b64      	subs	r4, r4, r5
 800664a:	10a4      	asrs	r4, r4, #2
 800664c:	2600      	movs	r6, #0
 800664e:	42a6      	cmp	r6, r4
 8006650:	d105      	bne.n	800665e <__libc_init_array+0x2e>
 8006652:	bd70      	pop	{r4, r5, r6, pc}
 8006654:	f855 3b04 	ldr.w	r3, [r5], #4
 8006658:	4798      	blx	r3
 800665a:	3601      	adds	r6, #1
 800665c:	e7ee      	b.n	800663c <__libc_init_array+0xc>
 800665e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006662:	4798      	blx	r3
 8006664:	3601      	adds	r6, #1
 8006666:	e7f2      	b.n	800664e <__libc_init_array+0x1e>
 8006668:	08006840 	.word	0x08006840
 800666c:	08006840 	.word	0x08006840
 8006670:	08006840 	.word	0x08006840
 8006674:	08006844 	.word	0x08006844

08006678 <memcpy>:
 8006678:	440a      	add	r2, r1
 800667a:	4291      	cmp	r1, r2
 800667c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006680:	d100      	bne.n	8006684 <memcpy+0xc>
 8006682:	4770      	bx	lr
 8006684:	b510      	push	{r4, lr}
 8006686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800668a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800668e:	4291      	cmp	r1, r2
 8006690:	d1f9      	bne.n	8006686 <memcpy+0xe>
 8006692:	bd10      	pop	{r4, pc}

08006694 <_init>:
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006696:	bf00      	nop
 8006698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669a:	bc08      	pop	{r3}
 800669c:	469e      	mov	lr, r3
 800669e:	4770      	bx	lr

080066a0 <_fini>:
 80066a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a2:	bf00      	nop
 80066a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a6:	bc08      	pop	{r3}
 80066a8:	469e      	mov	lr, r3
 80066aa:	4770      	bx	lr
