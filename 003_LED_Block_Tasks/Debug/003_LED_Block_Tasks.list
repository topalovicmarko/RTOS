
003_LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800665c  0800665c  0000765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e8  080067e8  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  080067e8  080067e8  000077e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067f0  080067f0  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067f0  080067f0  000077f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067f4  080067f4  000077f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080067f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014484  20000014  0800680c  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014498  0800680c  00008498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001361d  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f64  00000000  00000000  0001b661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0001e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea7  00000000  00000000  0001f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b48  00000000  00000000  0002077f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015378  00000000  00000000  000392c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a293  00000000  00000000  0004e63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e88d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fcc  00000000  00000000  000e8918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b2  00000000  00000000  000ed8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006644 	.word	0x08006644

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08006644 	.word	0x08006644

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ec4 	.word	0x20012ec4

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fabb 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f86f 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8d9 	bl	8000728 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000576:	4b2f      	ldr	r3, [pc, #188]	@ (8000634 <main+0xd0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a2e      	ldr	r2, [pc, #184]	@ (8000634 <main+0xd0>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000582:	f003 ffcb 	bl	800451c <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000586:	f005 fa93 	bl	8005ab0 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler,"LED_green_task",200,NULL,2,&task1_handle);
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2302      	movs	r3, #2
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	22c8      	movs	r2, #200	@ 0xc8
 8000598:	4927      	ldr	r1, [pc, #156]	@ (8000638 <main+0xd4>)
 800059a:	4828      	ldr	r0, [pc, #160]	@ (800063c <main+0xd8>)
 800059c:	f002 f870 	bl	8002680 <xTaskCreate>
 80005a0:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d00b      	beq.n	80005c0 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005ac:	f383 8811 	msr	BASEPRI, r3
 80005b0:	f3bf 8f6f 	isb	sy
 80005b4:	f3bf 8f4f 	dsb	sy
 80005b8:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x58>

  status = xTaskCreate(led_red_handler,"LED_red_task",200,NULL,2,&task2_handle);
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22c8      	movs	r2, #200	@ 0xc8
 80005ce:	491c      	ldr	r1, [pc, #112]	@ (8000640 <main+0xdc>)
 80005d0:	481c      	ldr	r0, [pc, #112]	@ (8000644 <main+0xe0>)
 80005d2:	f002 f855 	bl	8002680 <xTaskCreate>
 80005d6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00b      	beq.n	80005f6 <main+0x92>
        __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	617b      	str	r3, [r7, #20]
    }
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	e7fd      	b.n	80005f2 <main+0x8e>

  status = xTaskCreate(led_orange_handler,"LED_orange_task",200,NULL,2,&task3_handle);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2302      	movs	r3, #2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	22c8      	movs	r2, #200	@ 0xc8
 8000602:	4911      	ldr	r1, [pc, #68]	@ (8000648 <main+0xe4>)
 8000604:	4811      	ldr	r0, [pc, #68]	@ (800064c <main+0xe8>)
 8000606:	f002 f83b 	bl	8002680 <xTaskCreate>
 800060a:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d00b      	beq.n	800062a <main+0xc6>
        __asm volatile
 8000612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000616:	f383 8811 	msr	BASEPRI, r3
 800061a:	f3bf 8f6f 	isb	sy
 800061e:	f3bf 8f4f 	dsb	sy
 8000622:	613b      	str	r3, [r7, #16]
    }
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	e7fd      	b.n	8000626 <main+0xc2>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800062a:	f002 f9ed 	bl	8002a08 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <main+0xca>
 8000632:	bf00      	nop
 8000634:	e0001000 	.word	0xe0001000
 8000638:	0800665c 	.word	0x0800665c
 800063c:	08000825 	.word	0x08000825
 8000640:	0800666c 	.word	0x0800666c
 8000644:	0800087d 	.word	0x0800087d
 8000648:	0800667c 	.word	0x0800667c
 800064c:	08000851 	.word	0x08000851

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 ffb6 	bl	80065d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a28      	ldr	r2, [pc, #160]	@ (8000720 <SystemClock_Config+0xd0>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <SystemClock_Config+0xd4>)
 800069e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <SystemClock_Config+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c4:	2310      	movs	r3, #16
 80006c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d2:	2307      	movs	r3, #7
 80006d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fcde 	bl	800109c <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006e6:	f000 f8f1 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f000 ff40 	bl	800158c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000712:	f000 f8db 	bl	80008cc <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	@ 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	@ 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b35      	ldr	r3, [pc, #212]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a34      	ldr	r2, [pc, #208]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a2d      	ldr	r2, [pc, #180]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b2b      	ldr	r3, [pc, #172]	@ (8000818 <MX_GPIO_Init+0xf0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <MX_GPIO_Init+0xf0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a26      	ldr	r2, [pc, #152]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a1f      	ldr	r2, [pc, #124]	@ (8000818 <MX_GPIO_Init+0xf0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <MX_GPIO_Init+0xf0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	21e0      	movs	r1, #224	@ 0xe0
 80007b2:	481a      	ldr	r0, [pc, #104]	@ (800081c <MX_GPIO_Init+0xf4>)
 80007b4:	f000 fc3e 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4814      	ldr	r0, [pc, #80]	@ (8000820 <MX_GPIO_Init+0xf8>)
 80007d0:	f000 faac 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d4:	230c      	movs	r3, #12
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e4:	2307      	movs	r3, #7
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	480b      	ldr	r0, [pc, #44]	@ (800081c <MX_GPIO_Init+0xf4>)
 80007f0:	f000 fa9c 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 80007f4:	23e0      	movs	r3, #224	@ 0xe0
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4804      	ldr	r0, [pc, #16]	@ (800081c <MX_GPIO_Init+0xf4>)
 800080c:	f000 fa8e 	bl	8000d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	@ 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000
 8000820:	40020800 	.word	0x40020800

08000824 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 800082c:	4806      	ldr	r0, [pc, #24]	@ (8000848 <led_green_handler+0x24>)
 800082e:	f005 fe4f 	bl	80064d0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 8000832:	2120      	movs	r1, #32
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <led_green_handler+0x28>)
 8000836:	f000 fc16 	bl	8001066 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800083a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800083e:	f002 f8a9 	bl	8002994 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000842:	bf00      	nop
 8000844:	e7f2      	b.n	800082c <led_green_handler+0x8>
 8000846:	bf00      	nop
 8000848:	0800668c 	.word	0x0800668c
 800084c:	40020000 	.word	0x40020000

08000850 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000858:	4806      	ldr	r0, [pc, #24]	@ (8000874 <led_orange_handler+0x24>)
 800085a:	f005 fe39 	bl	80064d0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_ORANGE_PIN);
 800085e:	2180      	movs	r1, #128	@ 0x80
 8000860:	4805      	ldr	r0, [pc, #20]	@ (8000878 <led_orange_handler+0x28>)
 8000862:	f000 fc00 	bl	8001066 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(800));
 8000866:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800086a:	f002 f893 	bl	8002994 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800086e:	bf00      	nop
 8000870:	e7f2      	b.n	8000858 <led_orange_handler+0x8>
 8000872:	bf00      	nop
 8000874:	080066a0 	.word	0x080066a0
 8000878:	40020000 	.word	0x40020000

0800087c <led_red_handler>:
	}
}

static void led_red_handler(void* parameters)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000884:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <led_red_handler+0x24>)
 8000886:	f005 fe23 	bl	80064d0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_RED_PIN);
 800088a:	2140      	movs	r1, #64	@ 0x40
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <led_red_handler+0x28>)
 800088e:	f000 fbea 	bl	8001066 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(400));
 8000892:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000896:	f002 f87d 	bl	8002994 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 800089a:	bf00      	nop
 800089c:	e7f2      	b.n	8000884 <led_red_handler+0x8>
 800089e:	bf00      	nop
 80008a0:	080066b4 	.word	0x080066b4
 80008a4:	40020000 	.word	0x40020000

080008a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a04      	ldr	r2, [pc, #16]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d101      	bne.n	80008be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ba:	f000 f935 	bl	8000b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40000c00 	.word	0x40000c00

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <Error_Handler+0x8>

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	@ 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 8000916:	f003 fa71 	bl	8003dfc <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	@ 0x38
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <HAL_InitTick+0xe4>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000940:	4a32      	ldr	r2, [pc, #200]	@ (8000a0c <HAL_InitTick+0xe4>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	6413      	str	r3, [r2, #64]	@ 0x40
 8000948:	4b30      	ldr	r3, [pc, #192]	@ (8000a0c <HAL_InitTick+0xe4>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000954:	f107 0210 	add.w	r2, r7, #16
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f001 f820 	bl	80019a4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096a:	2b00      	cmp	r3, #0
 800096c:	d103      	bne.n	8000976 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800096e:	f001 f805 	bl	800197c <HAL_RCC_GetPCLK1Freq>
 8000972:	6378      	str	r0, [r7, #52]	@ 0x34
 8000974:	e004      	b.n	8000980 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000976:	f001 f801 	bl	800197c <HAL_RCC_GetPCLK1Freq>
 800097a:	4603      	mov	r3, r0
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000982:	4a23      	ldr	r2, [pc, #140]	@ (8000a10 <HAL_InitTick+0xe8>)
 8000984:	fba2 2303 	umull	r2, r3, r2, r3
 8000988:	0c9b      	lsrs	r3, r3, #18
 800098a:	3b01      	subs	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800098e:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <HAL_InitTick+0xec>)
 8000990:	4a21      	ldr	r2, [pc, #132]	@ (8000a18 <HAL_InitTick+0xf0>)
 8000992:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000994:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <HAL_InitTick+0xec>)
 8000996:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800099a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800099c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a14 <HAL_InitTick+0xec>)
 800099e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <HAL_InitTick+0xec>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <HAL_InitTick+0xec>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <HAL_InitTick+0xec>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80009b4:	4817      	ldr	r0, [pc, #92]	@ (8000a14 <HAL_InitTick+0xec>)
 80009b6:	f001 f827 	bl	8001a08 <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d11b      	bne.n	8000a00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80009c8:	4812      	ldr	r0, [pc, #72]	@ (8000a14 <HAL_InitTick+0xec>)
 80009ca:	f001 f877 	bl	8001abc <HAL_TIM_Base_Start_IT>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d111      	bne.n	8000a00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80009dc:	2032      	movs	r0, #50	@ 0x32
 80009de:	f000 f997 	bl	8000d10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d808      	bhi.n	80009fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	2032      	movs	r0, #50	@ 0x32
 80009ee:	f000 f973 	bl	8000cd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <HAL_InitTick+0xf4>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	e002      	b.n	8000a00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3738      	adds	r7, #56	@ 0x38
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	20000030 	.word	0x20000030
 8000a18:	40000c00 	.word	0x40000c00
 8000a1c:	20000004 	.word	0x20000004

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <NMI_Handler+0x4>

08000a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <MemManage_Handler+0x4>

08000a38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <TIM5_IRQHandler+0x10>)
 8000a5e:	f001 f88f 	bl	8001b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000030 	.word	0x20000030

08000a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <SystemInit+0x20>)
 8000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a76:	4a05      	ldr	r2, [pc, #20]	@ (8000a8c <SystemInit+0x20>)
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ac8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a94:	f7ff ffea 	bl	8000a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9a:	490d      	ldr	r1, [pc, #52]	@ (8000ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8000adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f005 fd8f 	bl	80065e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fd4f 	bl	8000564 <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ac8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ad4:	080067f8 	.word	0x080067f8
  ldr r2, =_sbss
 8000ad8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000adc:	20014498 	.word	0x20014498

08000ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	@ (8000b24 <HAL_Init+0x40>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <HAL_Init+0x40>)
 8000afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	@ (8000b24 <HAL_Init+0x40>)
 8000b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f8d8 	bl	8000cc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff ff08 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fede 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023c00 	.word	0x40023c00

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000078 	.word	0x20000078

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000078 	.word	0x20000078

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4907      	ldr	r1, [pc, #28]	@ (8000c04 <__NVIC_EnableIRQ+0x38>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	@ (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	@ (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	@ 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	@ 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff4c 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cea:	f7ff ff61 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	68b9      	ldr	r1, [r7, #8]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff ffb1 	bl	8000c5c <NVIC_EncodePriority>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff80 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff54 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	@ 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e159      	b.n	8000ffc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 8148 	bne.w	8000ff6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d005      	beq.n	8000d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d130      	bne.n	8000de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	f003 0201 	and.w	r2, r3, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d017      	beq.n	8000e1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d123      	bne.n	8000e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	69b9      	ldr	r1, [r7, #24]
 8000e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0203 	and.w	r2, r3, #3
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80a2 	beq.w	8000ff6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b57      	ldr	r3, [pc, #348]	@ (8001014 <HAL_GPIO_Init+0x2e8>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	4a56      	ldr	r2, [pc, #344]	@ (8001014 <HAL_GPIO_Init+0x2e8>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec2:	4b54      	ldr	r3, [pc, #336]	@ (8001014 <HAL_GPIO_Init+0x2e8>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ece:	4a52      	ldr	r2, [pc, #328]	@ (8001018 <HAL_GPIO_Init+0x2ec>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a49      	ldr	r2, [pc, #292]	@ (800101c <HAL_GPIO_Init+0x2f0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0x202>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a48      	ldr	r2, [pc, #288]	@ (8001020 <HAL_GPIO_Init+0x2f4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d013      	beq.n	8000f2a <HAL_GPIO_Init+0x1fe>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a47      	ldr	r2, [pc, #284]	@ (8001024 <HAL_GPIO_Init+0x2f8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00d      	beq.n	8000f26 <HAL_GPIO_Init+0x1fa>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a46      	ldr	r2, [pc, #280]	@ (8001028 <HAL_GPIO_Init+0x2fc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x1f6>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a45      	ldr	r2, [pc, #276]	@ (800102c <HAL_GPIO_Init+0x300>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_GPIO_Init+0x1f2>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e008      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f1e:	2307      	movs	r3, #7
 8000f20:	e006      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f22:	2303      	movs	r3, #3
 8000f24:	e004      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f26:	2302      	movs	r3, #2
 8000f28:	e002      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	f002 0203 	and.w	r2, r2, #3
 8000f36:	0092      	lsls	r2, r2, #2
 8000f38:	4093      	lsls	r3, r2
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f40:	4935      	ldr	r1, [pc, #212]	@ (8001018 <HAL_GPIO_Init+0x2ec>)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3302      	adds	r3, #2
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4e:	4b38      	ldr	r3, [pc, #224]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f72:	4a2f      	ldr	r2, [pc, #188]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f78:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f9c:	4a24      	ldr	r2, [pc, #144]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc6:	4a1a      	ldr	r2, [pc, #104]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	f67f aea2 	bls.w	8000d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40013800 	.word	0x40013800
 800101c:	40020000 	.word	0x40020000
 8001020:	40020400 	.word	0x40020400
 8001024:	40020800 	.word	0x40020800
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40021000 	.word	0x40021000
 8001030:	40013c00 	.word	0x40013c00

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001050:	e003      	b.n	800105a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	041a      	lsls	r2, r3, #16
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	619a      	str	r2, [r3, #24]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001066:	b480      	push	{r7}
 8001068:	b085      	sub	sp, #20
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001078:	887a      	ldrh	r2, [r7, #2]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4013      	ands	r3, r2
 800107e:	041a      	lsls	r2, r3, #16
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43d9      	mvns	r1, r3
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	400b      	ands	r3, r1
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	619a      	str	r2, [r3, #24]
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e267      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d075      	beq.n	80011a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010ba:	4b88      	ldr	r3, [pc, #544]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d00c      	beq.n	80010e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c6:	4b85      	ldr	r3, [pc, #532]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d112      	bne.n	80010f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d2:	4b82      	ldr	r3, [pc, #520]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010de:	d10b      	bne.n	80010f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	4b7e      	ldr	r3, [pc, #504]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d05b      	beq.n	80011a4 <HAL_RCC_OscConfig+0x108>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d157      	bne.n	80011a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e242      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001100:	d106      	bne.n	8001110 <HAL_RCC_OscConfig+0x74>
 8001102:	4b76      	ldr	r3, [pc, #472]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a75      	ldr	r2, [pc, #468]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e01d      	b.n	800114c <HAL_RCC_OscConfig+0xb0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x98>
 800111a:	4b70      	ldr	r3, [pc, #448]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a6f      	ldr	r2, [pc, #444]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b6d      	ldr	r3, [pc, #436]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a6c      	ldr	r2, [pc, #432]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e00b      	b.n	800114c <HAL_RCC_OscConfig+0xb0>
 8001134:	4b69      	ldr	r3, [pc, #420]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a68      	ldr	r2, [pc, #416]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 800113a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b66      	ldr	r3, [pc, #408]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a65      	ldr	r2, [pc, #404]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800114a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d013      	beq.n	800117c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fcfc 	bl	8000b50 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fcf8 	bl	8000b50 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	@ 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e207      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	4b5b      	ldr	r3, [pc, #364]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0xc0>
 800117a:	e014      	b.n	80011a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fce8 	bl	8000b50 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fce4 	bl	8000b50 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e1f3      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	4b51      	ldr	r3, [pc, #324]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0xe8>
 80011a2:	e000      	b.n	80011a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d063      	beq.n	800127a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011b2:	4b4a      	ldr	r3, [pc, #296]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00b      	beq.n	80011d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011be:	4b47      	ldr	r3, [pc, #284]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d11c      	bne.n	8001204 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ca:	4b44      	ldr	r3, [pc, #272]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d116      	bne.n	8001204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	4b41      	ldr	r3, [pc, #260]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <HAL_RCC_OscConfig+0x152>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d001      	beq.n	80011ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e1c7      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4937      	ldr	r1, [pc, #220]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001202:	e03a      	b.n	800127a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800120c:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <HAL_RCC_OscConfig+0x244>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001212:	f7ff fc9d 	bl	8000b50 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fc99 	bl	8000b50 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e1a8      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	4b2b      	ldr	r3, [pc, #172]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b28      	ldr	r3, [pc, #160]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4925      	ldr	r1, [pc, #148]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
 800124c:	e015      	b.n	800127a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124e:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <HAL_RCC_OscConfig+0x244>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff fc7c 	bl	8000b50 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125c:	f7ff fc78 	bl	8000b50 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e187      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d036      	beq.n	80012f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d016      	beq.n	80012bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_RCC_OscConfig+0x248>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001294:	f7ff fc5c 	bl	8000b50 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff fc58 	bl	8000b50 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e167      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_RCC_OscConfig+0x240>)
 80012b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x200>
 80012ba:	e01b      	b.n	80012f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <HAL_RCC_OscConfig+0x248>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fc45 	bl	8000b50 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c8:	e00e      	b.n	80012e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ca:	f7ff fc41 	bl	8000b50 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d907      	bls.n	80012e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e150      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
 80012dc:	40023800 	.word	0x40023800
 80012e0:	42470000 	.word	0x42470000
 80012e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	4b88      	ldr	r3, [pc, #544]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80012ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1ea      	bne.n	80012ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8097 	beq.w	8001430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001306:	4b81      	ldr	r3, [pc, #516]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10f      	bne.n	8001332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b7d      	ldr	r3, [pc, #500]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	4a7c      	ldr	r2, [pc, #496]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	@ 0x40
 8001322:	4b7a      	ldr	r3, [pc, #488]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132e:	2301      	movs	r3, #1
 8001330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001332:	4b77      	ldr	r3, [pc, #476]	@ (8001510 <HAL_RCC_OscConfig+0x474>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d118      	bne.n	8001370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133e:	4b74      	ldr	r3, [pc, #464]	@ (8001510 <HAL_RCC_OscConfig+0x474>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a73      	ldr	r2, [pc, #460]	@ (8001510 <HAL_RCC_OscConfig+0x474>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134a:	f7ff fc01 	bl	8000b50 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001352:	f7ff fbfd 	bl	8000b50 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e10c      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	4b6a      	ldr	r3, [pc, #424]	@ (8001510 <HAL_RCC_OscConfig+0x474>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x2ea>
 8001378:	4b64      	ldr	r3, [pc, #400]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800137c:	4a63      	ldr	r2, [pc, #396]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6713      	str	r3, [r2, #112]	@ 0x70
 8001384:	e01c      	b.n	80013c0 <HAL_RCC_OscConfig+0x324>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b05      	cmp	r3, #5
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x30c>
 800138e:	4b5f      	ldr	r3, [pc, #380]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001392:	4a5e      	ldr	r2, [pc, #376]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6713      	str	r3, [r2, #112]	@ 0x70
 800139a:	4b5c      	ldr	r3, [pc, #368]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 800139c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139e:	4a5b      	ldr	r2, [pc, #364]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a6:	e00b      	b.n	80013c0 <HAL_RCC_OscConfig+0x324>
 80013a8:	4b58      	ldr	r3, [pc, #352]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ac:	4a57      	ldr	r2, [pc, #348]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013b4:	4b55      	ldr	r3, [pc, #340]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b8:	4a54      	ldr	r2, [pc, #336]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80013ba:	f023 0304 	bic.w	r3, r3, #4
 80013be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d015      	beq.n	80013f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fbc2 	bl	8000b50 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff fbbe 	bl	8000b50 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e0cb      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e6:	4b49      	ldr	r3, [pc, #292]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0ee      	beq.n	80013d0 <HAL_RCC_OscConfig+0x334>
 80013f2:	e014      	b.n	800141e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f4:	f7ff fbac 	bl	8000b50 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fc:	f7ff fba8 	bl	8000b50 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e0b5      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001412:	4b3e      	ldr	r3, [pc, #248]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1ee      	bne.n	80013fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d105      	bne.n	8001430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001424:	4b39      	ldr	r3, [pc, #228]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	4a38      	ldr	r2, [pc, #224]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 800142a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800142e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80a1 	beq.w	800157c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800143a:	4b34      	ldr	r3, [pc, #208]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b08      	cmp	r3, #8
 8001444:	d05c      	beq.n	8001500 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d141      	bne.n	80014d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144e:	4b31      	ldr	r3, [pc, #196]	@ (8001514 <HAL_RCC_OscConfig+0x478>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fb7c 	bl	8000b50 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff fb78 	bl	8000b50 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e087      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	4b27      	ldr	r3, [pc, #156]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69da      	ldr	r2, [r3, #28]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001488:	019b      	lsls	r3, r3, #6
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001490:	085b      	lsrs	r3, r3, #1
 8001492:	3b01      	subs	r3, #1
 8001494:	041b      	lsls	r3, r3, #16
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149c:	061b      	lsls	r3, r3, #24
 800149e:	491b      	ldr	r1, [pc, #108]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <HAL_RCC_OscConfig+0x478>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fb51 	bl	8000b50 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b2:	f7ff fb4d 	bl	8000b50 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e05c      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x416>
 80014d0:	e054      	b.n	800157c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <HAL_RCC_OscConfig+0x478>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fb3a 	bl	8000b50 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff fb36 	bl	8000b50 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e045      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_RCC_OscConfig+0x470>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x444>
 80014fe:	e03d      	b.n	800157c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d107      	bne.n	8001518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e038      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
 800150c:	40023800 	.word	0x40023800
 8001510:	40007000 	.word	0x40007000
 8001514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <HAL_RCC_OscConfig+0x4ec>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d028      	beq.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d121      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	d11a      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001548:	4013      	ands	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800154e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001550:	4293      	cmp	r3, r2
 8001552:	d111      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155e:	085b      	lsrs	r3, r3, #1
 8001560:	3b01      	subs	r3, #1
 8001562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0cc      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015a0:	4b68      	ldr	r3, [pc, #416]	@ (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d90c      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b65      	ldr	r3, [pc, #404]	@ (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b63      	ldr	r3, [pc, #396]	@ (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0b8      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e0:	4b59      	ldr	r3, [pc, #356]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a58      	ldr	r2, [pc, #352]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f8:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4a52      	ldr	r2, [pc, #328]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001604:	4b50      	ldr	r3, [pc, #320]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	494d      	ldr	r1, [pc, #308]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	4313      	orrs	r3, r2
 8001614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d044      	beq.n	80016ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d119      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e07f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d003      	beq.n	800164a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001646:	2b03      	cmp	r3, #3
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164a:	4b3f      	ldr	r3, [pc, #252]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d109      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e06f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165a:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e067      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166a:	4b37      	ldr	r3, [pc, #220]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f023 0203 	bic.w	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4934      	ldr	r1, [pc, #208]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800167c:	f7ff fa68 	bl	8000b50 <HAL_GetTick>
 8001680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	e00a      	b.n	800169a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001684:	f7ff fa64 	bl	8000b50 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e04f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	4b2b      	ldr	r3, [pc, #172]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 020c 	and.w	r2, r3, #12
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d1eb      	bne.n	8001684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ac:	4b25      	ldr	r3, [pc, #148]	@ (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d20c      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e032      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e0:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4916      	ldr	r1, [pc, #88]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fe:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	490e      	ldr	r1, [pc, #56]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	4313      	orrs	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001712:	f000 f821 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001716:	4602      	mov	r2, r0
 8001718:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	490a      	ldr	r1, [pc, #40]	@ (800174c <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	5ccb      	ldrb	r3, [r1, r3]
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	4a09      	ldr	r2, [pc, #36]	@ (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_RCC_ClockConfig+0x1c8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f8f8 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023c00 	.word	0x40023c00
 8001748:	40023800 	.word	0x40023800
 800174c:	080067ac 	.word	0x080067ac
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800175c:	b094      	sub	sp, #80	@ 0x50
 800175e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001770:	4b79      	ldr	r3, [pc, #484]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d00d      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x40>
 800177c:	2b08      	cmp	r3, #8
 800177e:	f200 80e1 	bhi.w	8001944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0x34>
 8001786:	2b04      	cmp	r3, #4
 8001788:	d003      	beq.n	8001792 <HAL_RCC_GetSysClockFreq+0x3a>
 800178a:	e0db      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b73      	ldr	r3, [pc, #460]	@ (800195c <HAL_RCC_GetSysClockFreq+0x204>)
 800178e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001790:	e0db      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001792:	4b73      	ldr	r3, [pc, #460]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x208>)
 8001794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001796:	e0d8      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001798:	4b6f      	ldr	r3, [pc, #444]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	099b      	lsrs	r3, r3, #6
 80017b4:	2200      	movs	r2, #0
 80017b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80017c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017ca:	4622      	mov	r2, r4
 80017cc:	462b      	mov	r3, r5
 80017ce:	f04f 0000 	mov.w	r0, #0
 80017d2:	f04f 0100 	mov.w	r1, #0
 80017d6:	0159      	lsls	r1, r3, #5
 80017d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017dc:	0150      	lsls	r0, r2, #5
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4621      	mov	r1, r4
 80017e4:	1a51      	subs	r1, r2, r1
 80017e6:	6139      	str	r1, [r7, #16]
 80017e8:	4629      	mov	r1, r5
 80017ea:	eb63 0301 	sbc.w	r3, r3, r1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017fc:	4659      	mov	r1, fp
 80017fe:	018b      	lsls	r3, r1, #6
 8001800:	4651      	mov	r1, sl
 8001802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001806:	4651      	mov	r1, sl
 8001808:	018a      	lsls	r2, r1, #6
 800180a:	4651      	mov	r1, sl
 800180c:	ebb2 0801 	subs.w	r8, r2, r1
 8001810:	4659      	mov	r1, fp
 8001812:	eb63 0901 	sbc.w	r9, r3, r1
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800182a:	4690      	mov	r8, r2
 800182c:	4699      	mov	r9, r3
 800182e:	4623      	mov	r3, r4
 8001830:	eb18 0303 	adds.w	r3, r8, r3
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	462b      	mov	r3, r5
 8001838:	eb49 0303 	adc.w	r3, r9, r3
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800184a:	4629      	mov	r1, r5
 800184c:	024b      	lsls	r3, r1, #9
 800184e:	4621      	mov	r1, r4
 8001850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001854:	4621      	mov	r1, r4
 8001856:	024a      	lsls	r2, r1, #9
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800185e:	2200      	movs	r2, #0
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001868:	f7fe fd04 	bl	8000274 <__aeabi_uldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4613      	mov	r3, r2
 8001872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001874:	e058      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001876:	4b38      	ldr	r3, [pc, #224]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	099b      	lsrs	r3, r3, #6
 800187c:	2200      	movs	r2, #0
 800187e:	4618      	mov	r0, r3
 8001880:	4611      	mov	r1, r2
 8001882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
 800188c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001890:	4642      	mov	r2, r8
 8001892:	464b      	mov	r3, r9
 8001894:	f04f 0000 	mov.w	r0, #0
 8001898:	f04f 0100 	mov.w	r1, #0
 800189c:	0159      	lsls	r1, r3, #5
 800189e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a2:	0150      	lsls	r0, r2, #5
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4641      	mov	r1, r8
 80018aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80018ae:	4649      	mov	r1, r9
 80018b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018c8:	ebb2 040a 	subs.w	r4, r2, sl
 80018cc:	eb63 050b 	sbc.w	r5, r3, fp
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	00eb      	lsls	r3, r5, #3
 80018da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018de:	00e2      	lsls	r2, r4, #3
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	4643      	mov	r3, r8
 80018e6:	18e3      	adds	r3, r4, r3
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	464b      	mov	r3, r9
 80018ec:	eb45 0303 	adc.w	r3, r5, r3
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018fe:	4629      	mov	r1, r5
 8001900:	028b      	lsls	r3, r1, #10
 8001902:	4621      	mov	r1, r4
 8001904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001908:	4621      	mov	r1, r4
 800190a:	028a      	lsls	r2, r1, #10
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001912:	2200      	movs	r2, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	61fa      	str	r2, [r7, #28]
 8001918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800191c:	f7fe fcaa 	bl	8000274 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001928:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	3301      	adds	r3, #1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001938:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800193a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001942:	e002      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_RCC_GetSysClockFreq+0x204>)
 8001946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800194a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800194c:	4618      	mov	r0, r3
 800194e:	3750      	adds	r7, #80	@ 0x50
 8001950:	46bd      	mov	sp, r7
 8001952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	00f42400 	.word	0x00f42400
 8001960:	007a1200 	.word	0x007a1200

08001964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <HAL_RCC_GetHCLKFreq+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000000 	.word	0x20000000

0800197c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001980:	f7ff fff0 	bl	8001964 <HAL_RCC_GetHCLKFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	0a9b      	lsrs	r3, r3, #10
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	4903      	ldr	r1, [pc, #12]	@ (80019a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	080067bc 	.word	0x080067bc

080019a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	220f      	movs	r2, #15
 80019b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <HAL_RCC_GetClockConfig+0x60>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0207 	and.w	r2, r3, #7
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40023c00 	.word	0x40023c00

08001a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e041      	b.n	8001a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d106      	bne.n	8001a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f839 	bl	8001aa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f000 f9b2 	bl	8001db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d001      	beq.n	8001ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e044      	b.n	8001b5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b6c <HAL_TIM_Base_Start_IT+0xb0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d018      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001afe:	d013      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1a      	ldr	r2, [pc, #104]	@ (8001b70 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00e      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a19      	ldr	r2, [pc, #100]	@ (8001b74 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d009      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a17      	ldr	r2, [pc, #92]	@ (8001b78 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d004      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <HAL_TIM_Base_Start_IT+0xc0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d111      	bne.n	8001b4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d010      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4a:	e007      	b.n	8001b5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40000800 	.word	0x40000800
 8001b78:	40000c00 	.word	0x40000c00
 8001b7c:	40014000 	.word	0x40014000

08001b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d01b      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0202 	mvn.w	r2, #2
 8001bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8d2 	bl	8001d74 <HAL_TIM_IC_CaptureCallback>
 8001bd0:	e005      	b.n	8001bde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8c4 	bl	8001d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f8d5 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d020      	beq.n	8001c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01b      	beq.n	8001c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0204 	mvn.w	r2, #4
 8001c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2202      	movs	r2, #2
 8001c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8ac 	bl	8001d74 <HAL_TIM_IC_CaptureCallback>
 8001c1c:	e005      	b.n	8001c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f89e 	bl	8001d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f8af 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d020      	beq.n	8001c7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01b      	beq.n	8001c7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0208 	mvn.w	r2, #8
 8001c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2204      	movs	r2, #4
 8001c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f886 	bl	8001d74 <HAL_TIM_IC_CaptureCallback>
 8001c68:	e005      	b.n	8001c76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f878 	bl	8001d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f889 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d020      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0210 	mvn.w	r2, #16
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f860 	bl	8001d74 <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f852 	bl	8001d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f863 	bl	8001d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0201 	mvn.w	r2, #1
 8001ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fdde 	bl	80008a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8e6 	bl	8001edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00c      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f834 	bl	8001d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00c      	beq.n	8001d58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0220 	mvn.w	r2, #32
 8001d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8b8 	bl	8001ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3a      	ldr	r2, [pc, #232]	@ (8001eac <TIM_Base_SetConfig+0xfc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00f      	beq.n	8001de8 <TIM_Base_SetConfig+0x38>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dce:	d00b      	beq.n	8001de8 <TIM_Base_SetConfig+0x38>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a37      	ldr	r2, [pc, #220]	@ (8001eb0 <TIM_Base_SetConfig+0x100>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d007      	beq.n	8001de8 <TIM_Base_SetConfig+0x38>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a36      	ldr	r2, [pc, #216]	@ (8001eb4 <TIM_Base_SetConfig+0x104>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d003      	beq.n	8001de8 <TIM_Base_SetConfig+0x38>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a35      	ldr	r2, [pc, #212]	@ (8001eb8 <TIM_Base_SetConfig+0x108>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d108      	bne.n	8001dfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8001eac <TIM_Base_SetConfig+0xfc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01b      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e08:	d017      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a28      	ldr	r2, [pc, #160]	@ (8001eb0 <TIM_Base_SetConfig+0x100>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a27      	ldr	r2, [pc, #156]	@ (8001eb4 <TIM_Base_SetConfig+0x104>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00f      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a26      	ldr	r2, [pc, #152]	@ (8001eb8 <TIM_Base_SetConfig+0x108>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00b      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a25      	ldr	r2, [pc, #148]	@ (8001ebc <TIM_Base_SetConfig+0x10c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ec0 <TIM_Base_SetConfig+0x110>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d003      	beq.n	8001e3a <TIM_Base_SetConfig+0x8a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a23      	ldr	r2, [pc, #140]	@ (8001ec4 <TIM_Base_SetConfig+0x114>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d108      	bne.n	8001e4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a0e      	ldr	r2, [pc, #56]	@ (8001eac <TIM_Base_SetConfig+0xfc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d103      	bne.n	8001e80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f023 0201 	bic.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40000800 	.word	0x40000800
 8001eb8:	40000c00 	.word	0x40000c00
 8001ebc:	40014000 	.word	0x40014000
 8001ec0:	40014400 	.word	0x40014400
 8001ec4:	40014800 	.word	0x40014800

08001ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f103 0208 	add.w	r2, r3, #8
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f103 0208 	add.w	r2, r3, #8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f103 0208 	add.w	r2, r3, #8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d103      	bne.n	8001f6a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	e00c      	b.n	8001f84 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	e002      	b.n	8001f78 <vListInsert+0x2e>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d2f6      	bcs.n	8001f72 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	601a      	str	r2, [r3, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6892      	ldr	r2, [r2, #8]
 8001fd2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6852      	ldr	r2, [r2, #4]
 8001fdc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d103      	bne.n	8001ff0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	1e5a      	subs	r2, r3, #1
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800201a:	2301      	movs	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <xQueueGenericReset+0x30>
        __asm volatile
 8002028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800202c:	f383 8811 	msr	BASEPRI, r3
 8002030:	f3bf 8f6f 	isb	sy
 8002034:	f3bf 8f4f 	dsb	sy
 8002038:	60fb      	str	r3, [r7, #12]
    }
 800203a:	bf00      	nop
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d05d      	beq.n	8002102 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	d059      	beq.n	8002102 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002056:	2100      	movs	r1, #0
 8002058:	fba3 2302 	umull	r2, r3, r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d000      	beq.n	8002062 <xQueueGenericReset+0x52>
 8002060:	2101      	movs	r1, #1
 8002062:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002064:	2b00      	cmp	r3, #0
 8002066:	d14c      	bne.n	8002102 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002068:	f001 ff48 	bl	8003efc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002074:	6939      	ldr	r1, [r7, #16]
 8002076:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	441a      	add	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2200      	movs	r2, #0
 8002086:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002098:	3b01      	subs	r3, #1
 800209a:	6939      	ldr	r1, [r7, #16]
 800209c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	441a      	add	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	22ff      	movs	r2, #255	@ 0xff
 80020ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	22ff      	movs	r2, #255	@ 0xff
 80020b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d114      	bne.n	80020e8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d01a      	beq.n	80020fc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	3310      	adds	r3, #16
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 f824 	bl	8003118 <xTaskRemoveFromEventList>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d012      	beq.n	80020fc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80020d6:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <xQueueGenericReset+0x120>)
 80020d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	f3bf 8f4f 	dsb	sy
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	e009      	b.n	80020fc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	3310      	adds	r3, #16
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff feff 	bl	8001ef0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	3324      	adds	r3, #36	@ 0x24
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fefa 	bl	8001ef0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80020fc:	f001 ff30 	bl	8003f60 <vPortExitCritical>
 8002100:	e001      	b.n	8002106 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10b      	bne.n	8002124 <xQueueGenericReset+0x114>
        __asm volatile
 800210c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002110:	f383 8811 	msr	BASEPRI, r3
 8002114:	f3bf 8f6f 	isb	sy
 8002118:	f3bf 8f4f 	dsb	sy
 800211c:	60bb      	str	r3, [r7, #8]
    }
 800211e:	bf00      	nop
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002124:	697b      	ldr	r3, [r7, #20]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000ed04 	.word	0xe000ed04

08002134 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	4613      	mov	r3, r2
 8002140:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d02e      	beq.n	80021aa <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800214c:	2100      	movs	r1, #0
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	fba3 2302 	umull	r2, r3, r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d000      	beq.n	800215c <xQueueGenericCreate+0x28>
 800215a:	2101      	movs	r1, #1
 800215c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d123      	bne.n	80021aa <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800216a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800216e:	d81c      	bhi.n	80021aa <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	fb02 f303 	mul.w	r3, r2, r3
 8002178:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	3350      	adds	r3, #80	@ 0x50
 800217e:	4618      	mov	r0, r3
 8002180:	f001 ffee 	bl	8004160 <pvPortMalloc>
 8002184:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01d      	beq.n	80021c8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3350      	adds	r3, #80	@ 0x50
 8002194:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002196:	79fa      	ldrb	r2, [r7, #7]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f815 	bl	80021d2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80021a8:	e00e      	b.n	80021c8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <xQueueGenericCreate+0x94>
        __asm volatile
 80021b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	613b      	str	r3, [r7, #16]
    }
 80021c2:	bf00      	nop
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80021c8:	69fb      	ldr	r3, [r7, #28]
    }
 80021ca:	4618      	mov	r0, r3
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e002      	b.n	80021f4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002200:	2101      	movs	r1, #1
 8002202:	69b8      	ldr	r0, [r7, #24]
 8002204:	f7ff ff04 	bl	8002010 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	68f9      	ldr	r1, [r7, #12]
 8002216:	2073      	movs	r0, #115	@ 0x73
 8002218:	f003 fb42 	bl	80058a0 <SEGGER_SYSVIEW_RecordU32x3>
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b08f      	sub	sp, #60	@ 0x3c
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10b      	bne.n	8002256 <xQueueReceive+0x32>
        __asm volatile
 800223e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	623b      	str	r3, [r7, #32]
    }
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	e7fd      	b.n	8002252 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d103      	bne.n	8002264 <xQueueReceive+0x40>
 800225c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <xQueueReceive+0x44>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <xQueueReceive+0x46>
 8002268:	2300      	movs	r3, #0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10b      	bne.n	8002286 <xQueueReceive+0x62>
        __asm volatile
 800226e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	61fb      	str	r3, [r7, #28]
    }
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	e7fd      	b.n	8002282 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002286:	f001 f95d 	bl	8003544 <xTaskGetSchedulerState>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <xQueueReceive+0x72>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <xQueueReceive+0x76>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <xQueueReceive+0x78>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10b      	bne.n	80022b8 <xQueueReceive+0x94>
        __asm volatile
 80022a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	61bb      	str	r3, [r7, #24]
    }
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80022b8:	f001 fe20 	bl	8003efc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d02f      	beq.n	8002328 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022cc:	f000 f8be 	bl	800244c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80022d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d2:	4618      	mov	r0, r3
 80022d4:	f004 f810 	bl	80062f8 <SEGGER_SYSVIEW_ShrinkId>
 80022d8:	4604      	mov	r4, r0
 80022da:	2000      	movs	r0, #0
 80022dc:	f004 f80c 	bl	80062f8 <SEGGER_SYSVIEW_ShrinkId>
 80022e0:	4602      	mov	r2, r0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2101      	movs	r1, #1
 80022e6:	9100      	str	r1, [sp, #0]
 80022e8:	4621      	mov	r1, r4
 80022ea:	205c      	movs	r0, #92	@ 0x5c
 80022ec:	f003 fb4e 	bl	800598c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f2:	1e5a      	subs	r2, r3, #1
 80022f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00f      	beq.n	8002320 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002302:	3310      	adds	r3, #16
 8002304:	4618      	mov	r0, r3
 8002306:	f000 ff07 	bl	8003118 <xTaskRemoveFromEventList>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002310:	4b4d      	ldr	r3, [pc, #308]	@ (8002448 <xQueueReceive+0x224>)
 8002312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002320:	f001 fe1e 	bl	8003f60 <vPortExitCritical>
                return pdPASS;
 8002324:	2301      	movs	r3, #1
 8002326:	e08a      	b.n	800243e <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d113      	bne.n	8002356 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800232e:	f001 fe17 	bl	8003f60 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002334:	4618      	mov	r0, r3
 8002336:	f003 ffdf 	bl	80062f8 <SEGGER_SYSVIEW_ShrinkId>
 800233a:	4604      	mov	r4, r0
 800233c:	2000      	movs	r0, #0
 800233e:	f003 ffdb 	bl	80062f8 <SEGGER_SYSVIEW_ShrinkId>
 8002342:	4602      	mov	r2, r0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2101      	movs	r1, #1
 8002348:	9100      	str	r1, [sp, #0]
 800234a:	4621      	mov	r1, r4
 800234c:	205c      	movs	r0, #92	@ 0x5c
 800234e:	f003 fb1d 	bl	800598c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002352:	2300      	movs	r3, #0
 8002354:	e073      	b.n	800243e <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002358:	2b00      	cmp	r3, #0
 800235a:	d106      	bne.n	800236a <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800235c:	f107 0310 	add.w	r3, r7, #16
 8002360:	4618      	mov	r0, r3
 8002362:	f000 ffb3 	bl	80032cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002366:	2301      	movs	r3, #1
 8002368:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800236a:	f001 fdf9 	bl	8003f60 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800236e:	f000 fbad 	bl	8002acc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002372:	f001 fdc3 	bl	8003efc <vPortEnterCritical>
 8002376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002378:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800237c:	b25b      	sxtb	r3, r3
 800237e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002382:	d103      	bne.n	800238c <xQueueReceive+0x168>
 8002384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800238c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002392:	b25b      	sxtb	r3, r3
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d103      	bne.n	80023a2 <xQueueReceive+0x17e>
 800239a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023a2:	f001 fddd 	bl	8003f60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023a6:	1d3a      	adds	r2, r7, #4
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 ffa2 	bl	80032f8 <xTaskCheckForTimeOut>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d124      	bne.n	8002404 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023bc:	f000 f8be 	bl	800253c <prvIsQueueEmpty>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d018      	beq.n	80023f8 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c8:	3324      	adds	r3, #36	@ 0x24
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fe32 	bl	8003038 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80023d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023d6:	f000 f85f 	bl	8002498 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80023da:	f000 fb85 	bl	8002ae8 <xTaskResumeAll>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f47f af69 	bne.w	80022b8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80023e6:	4b18      	ldr	r3, [pc, #96]	@ (8002448 <xQueueReceive+0x224>)
 80023e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	e75f      	b.n	80022b8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80023f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023fa:	f000 f84d 	bl	8002498 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80023fe:	f000 fb73 	bl	8002ae8 <xTaskResumeAll>
 8002402:	e759      	b.n	80022b8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002406:	f000 f847 	bl	8002498 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800240a:	f000 fb6d 	bl	8002ae8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800240e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002410:	f000 f894 	bl	800253c <prvIsQueueEmpty>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	f43f af4e 	beq.w	80022b8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	4618      	mov	r0, r3
 8002420:	f003 ff6a 	bl	80062f8 <SEGGER_SYSVIEW_ShrinkId>
 8002424:	4604      	mov	r4, r0
 8002426:	2000      	movs	r0, #0
 8002428:	f003 ff66 	bl	80062f8 <SEGGER_SYSVIEW_ShrinkId>
 800242c:	4602      	mov	r2, r0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2101      	movs	r1, #1
 8002432:	9100      	str	r1, [sp, #0]
 8002434:	4621      	mov	r1, r4
 8002436:	205c      	movs	r0, #92	@ 0x5c
 8002438:	f003 faa8 	bl	800598c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800243c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800243e:	4618      	mov	r0, r3
 8002440:	3734      	adds	r7, #52	@ 0x34
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}
 8002446:	bf00      	nop
 8002448:	e000ed04 	.word	0xe000ed04

0800244c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d018      	beq.n	8002490 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	441a      	add	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	429a      	cmp	r2, r3
 8002476:	d303      	bcc.n	8002480 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68d9      	ldr	r1, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	461a      	mov	r2, r3
 800248a:	6838      	ldr	r0, [r7, #0]
 800248c:	f004 f8cc 	bl	8006628 <memcpy>
    }
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80024a0:	f001 fd2c 	bl	8003efc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024aa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024ac:	e011      	b.n	80024d2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d012      	beq.n	80024dc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3324      	adds	r3, #36	@ 0x24
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fe2c 	bl	8003118 <xTaskRemoveFromEventList>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80024c6:	f000 ff7f 	bl	80033c8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	dce9      	bgt.n	80024ae <prvUnlockQueue+0x16>
 80024da:	e000      	b.n	80024de <prvUnlockQueue+0x46>
                    break;
 80024dc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	22ff      	movs	r2, #255	@ 0xff
 80024e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80024e6:	f001 fd3b 	bl	8003f60 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80024ea:	f001 fd07 	bl	8003efc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024f4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024f6:	e011      	b.n	800251c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3310      	adds	r3, #16
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fe07 	bl	8003118 <xTaskRemoveFromEventList>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002510:	f000 ff5a 	bl	80033c8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002514:	7bbb      	ldrb	r3, [r7, #14]
 8002516:	3b01      	subs	r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800251c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002520:	2b00      	cmp	r3, #0
 8002522:	dce9      	bgt.n	80024f8 <prvUnlockQueue+0x60>
 8002524:	e000      	b.n	8002528 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002526:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	22ff      	movs	r2, #255	@ 0xff
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002530:	f001 fd16 	bl	8003f60 <vPortExitCritical>
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002544:	f001 fcda 	bl	8003efc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002550:	2301      	movs	r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e001      	b.n	800255a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800255a:	f001 fd01 	bl	8003f60 <vPortExitCritical>

    return xReturn;
 800255e:	68fb      	ldr	r3, [r7, #12]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10b      	bne.n	8002594 <vQueueAddToRegistry+0x2c>
        __asm volatile
 800257c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	60fb      	str	r3, [r7, #12]
    }
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d024      	beq.n	80025e4 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e01e      	b.n	80025de <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80025a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002614 <vQueueAddToRegistry+0xac>)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d105      	bne.n	80025bc <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4a17      	ldr	r2, [pc, #92]	@ (8002614 <vQueueAddToRegistry+0xac>)
 80025b6:	4413      	add	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
                    break;
 80025ba:	e013      	b.n	80025e4 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <vQueueAddToRegistry+0x70>
 80025c2:	4a14      	ldr	r2, [pc, #80]	@ (8002614 <vQueueAddToRegistry+0xac>)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d104      	bne.n	80025d8 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4a10      	ldr	r2, [pc, #64]	@ (8002614 <vQueueAddToRegistry+0xac>)
 80025d4:	4413      	add	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3301      	adds	r3, #1
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b07      	cmp	r3, #7
 80025e2:	d9dd      	bls.n	80025a0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00f      	beq.n	800260a <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fe7d 	bl	80062f8 <SEGGER_SYSVIEW_ShrinkId>
 80025fe:	4601      	mov	r1, r0
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	2071      	movs	r0, #113	@ 0x71
 8002606:	f003 f8f1 	bl	80057ec <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000007c 	.word	0x2000007c

08002618 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002628:	f001 fc68 	bl	8003efc <vPortEnterCritical>
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002632:	b25b      	sxtb	r3, r3
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d103      	bne.n	8002642 <vQueueWaitForMessageRestricted+0x2a>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002648:	b25b      	sxtb	r3, r3
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264e:	d103      	bne.n	8002658 <vQueueWaitForMessageRestricted+0x40>
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002658:	f001 fc82 	bl	8003f60 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002660:	2b00      	cmp	r3, #0
 8002662:	d106      	bne.n	8002672 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3324      	adds	r3, #36	@ 0x24
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fd09 	bl	8003084 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002672:	6978      	ldr	r0, [r7, #20]
 8002674:	f7ff ff10 	bl	8002498 <prvUnlockQueue>
    }
 8002678:	bf00      	nop
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	@ 0x30
 8002684:	af04      	add	r7, sp, #16
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4618      	mov	r0, r3
 8002696:	f001 fd63 	bl	8004160 <pvPortMalloc>
 800269a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d013      	beq.n	80026ca <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026a2:	2058      	movs	r0, #88	@ 0x58
 80026a4:	f001 fd5c 	bl	8004160 <pvPortMalloc>
 80026a8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80026b0:	2258      	movs	r2, #88	@ 0x58
 80026b2:	2100      	movs	r1, #0
 80026b4:	69f8      	ldr	r0, [r7, #28]
 80026b6:	f003 ff8b 	bl	80065d0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	631a      	str	r2, [r3, #48]	@ 0x30
 80026c0:	e005      	b.n	80026ce <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f001 fe08 	bl	80042d8 <vPortFree>
 80026c8:	e001      	b.n	80026ce <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026d4:	88fa      	ldrh	r2, [r7, #6]
 80026d6:	2300      	movs	r3, #0
 80026d8:	9303      	str	r3, [sp, #12]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	9302      	str	r3, [sp, #8]
 80026de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f80e 	bl	800270c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80026f0:	69f8      	ldr	r0, [r7, #28]
 80026f2:	f000 f89b 	bl	800282c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e002      	b.n	8002702 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002702:	69bb      	ldr	r3, [r7, #24]
    }
 8002704:	4618      	mov	r0, r3
 8002706:	3720      	adds	r7, #32
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800271a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	461a      	mov	r2, r3
 8002724:	21a5      	movs	r1, #165	@ 0xa5
 8002726:	f003 ff53 	bl	80065d0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002734:	3b01      	subs	r3, #1
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f023 0307 	bic.w	r3, r3, #7
 8002742:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	617b      	str	r3, [r7, #20]
    }
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	e7fd      	b.n	8002762 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01e      	beq.n	80027aa <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	e012      	b.n	8002798 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	4413      	add	r3, r2
 8002778:	7819      	ldrb	r1, [r3, #0]
 800277a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	3334      	adds	r3, #52	@ 0x34
 8002782:	460a      	mov	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4413      	add	r3, r2
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b09      	cmp	r3, #9
 800279c:	d9e9      	bls.n	8002772 <prvInitialiseNewTask+0x66>
 800279e:	e000      	b.n	80027a2 <prvInitialiseNewTask+0x96>
            {
                break;
 80027a0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80027aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d90b      	bls.n	80027c8 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80027b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	613b      	str	r3, [r7, #16]
    }
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d901      	bls.n	80027d2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027ce:	2304      	movs	r3, #4
 80027d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80027d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80027d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027dc:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e0:	3304      	adds	r3, #4
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fba4 	bl	8001f30 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ea:	3318      	adds	r3, #24
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fb9f 	bl	8001f30 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027f6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fa:	f1c3 0205 	rsb	r2, r3, #5
 80027fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002800:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002806:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	68f9      	ldr	r1, [r7, #12]
 800280c:	69b8      	ldr	r0, [r7, #24]
 800280e:	f001 f9c3 	bl	8003b98 <pxPortInitialiseStack>
 8002812:	4602      	mov	r2, r0
 8002814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002816:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002822:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002824:	bf00      	nop
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800282c:	b5b0      	push	{r4, r5, r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002834:	f001 fb62 	bl	8003efc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002838:	4b4f      	ldr	r3, [pc, #316]	@ (8002978 <prvAddNewTaskToReadyList+0x14c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	4a4e      	ldr	r2, [pc, #312]	@ (8002978 <prvAddNewTaskToReadyList+0x14c>)
 8002840:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002842:	4b4e      	ldr	r3, [pc, #312]	@ (800297c <prvAddNewTaskToReadyList+0x150>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800284a:	4a4c      	ldr	r2, [pc, #304]	@ (800297c <prvAddNewTaskToReadyList+0x150>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002850:	4b49      	ldr	r3, [pc, #292]	@ (8002978 <prvAddNewTaskToReadyList+0x14c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d110      	bne.n	800287a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002858:	f000 fdda 	bl	8003410 <prvInitialiseTaskLists>
 800285c:	e00d      	b.n	800287a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800285e:	4b48      	ldr	r3, [pc, #288]	@ (8002980 <prvAddNewTaskToReadyList+0x154>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002866:	4b45      	ldr	r3, [pc, #276]	@ (800297c <prvAddNewTaskToReadyList+0x150>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002870:	429a      	cmp	r2, r3
 8002872:	d802      	bhi.n	800287a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002874:	4a41      	ldr	r2, [pc, #260]	@ (800297c <prvAddNewTaskToReadyList+0x150>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800287a:	4b42      	ldr	r3, [pc, #264]	@ (8002984 <prvAddNewTaskToReadyList+0x158>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	3301      	adds	r3, #1
 8002880:	4a40      	ldr	r2, [pc, #256]	@ (8002984 <prvAddNewTaskToReadyList+0x158>)
 8002882:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002884:	4b3f      	ldr	r3, [pc, #252]	@ (8002984 <prvAddNewTaskToReadyList+0x158>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <prvAddNewTaskToReadyList+0x94>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4618      	mov	r0, r3
 8002896:	f003 fc69 	bl	800616c <SEGGER_SYSVIEW_OnTaskCreate>
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	461d      	mov	r5, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	461c      	mov	r4, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	1ae3      	subs	r3, r4, r3
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	462b      	mov	r3, r5
 80028bc:	f001 fed0 	bl	8004660 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f003 fcd6 	bl	8006274 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028cc:	2201      	movs	r2, #1
 80028ce:	409a      	lsls	r2, r3
 80028d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002988 <prvAddNewTaskToReadyList+0x15c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002988 <prvAddNewTaskToReadyList+0x15c>)
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028de:	492b      	ldr	r1, [pc, #172]	@ (800298c <prvAddNewTaskToReadyList+0x160>)
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3304      	adds	r3, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	3204      	adds	r2, #4
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4a1b      	ldr	r2, [pc, #108]	@ (800298c <prvAddNewTaskToReadyList+0x160>)
 800291e:	441a      	add	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	615a      	str	r2, [r3, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002928:	4918      	ldr	r1, [pc, #96]	@ (800298c <prvAddNewTaskToReadyList+0x160>)
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	1c59      	adds	r1, r3, #1
 8002938:	4814      	ldr	r0, [pc, #80]	@ (800298c <prvAddNewTaskToReadyList+0x160>)
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4403      	add	r3, r0
 8002944:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002946:	f001 fb0b 	bl	8003f60 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800294a:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <prvAddNewTaskToReadyList+0x154>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00e      	beq.n	8002970 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002952:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <prvAddNewTaskToReadyList+0x150>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	429a      	cmp	r2, r3
 800295e:	d207      	bcs.n	8002970 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002960:	4b0b      	ldr	r3, [pc, #44]	@ (8002990 <prvAddNewTaskToReadyList+0x164>)
 8002962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bdb0      	pop	{r4, r5, r7, pc}
 8002978:	20000194 	.word	0x20000194
 800297c:	200000bc 	.word	0x200000bc
 8002980:	200001a0 	.word	0x200001a0
 8002984:	200001b0 	.word	0x200001b0
 8002988:	2000019c 	.word	0x2000019c
 800298c:	200000c0 	.word	0x200000c0
 8002990:	e000ed04 	.word	0xe000ed04

08002994 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d01c      	beq.n	80029e0 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80029a6:	4b16      	ldr	r3, [pc, #88]	@ (8002a00 <vTaskDelay+0x6c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <vTaskDelay+0x32>
        __asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	60bb      	str	r3, [r7, #8]
    }
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	e7fd      	b.n	80029c2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80029c6:	f000 f881 	bl	8002acc <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	2023      	movs	r0, #35	@ 0x23
 80029ce:	f002 fed1 	bl	8005774 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029d2:	2100      	movs	r1, #0
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fdd3 	bl	8003580 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80029da:	f000 f885 	bl	8002ae8 <xTaskResumeAll>
 80029de:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d107      	bne.n	80029f6 <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 80029e6:	4b07      	ldr	r3, [pc, #28]	@ (8002a04 <vTaskDelay+0x70>)
 80029e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200001bc 	.word	0x200001bc
 8002a04:	e000ed04 	.word	0xe000ed04

08002a08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002a0e:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <vTaskStartScheduler+0xa4>)
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	2300      	movs	r3, #0
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2300      	movs	r3, #0
 8002a18:	2282      	movs	r2, #130	@ 0x82
 8002a1a:	4925      	ldr	r1, [pc, #148]	@ (8002ab0 <vTaskStartScheduler+0xa8>)
 8002a1c:	4825      	ldr	r0, [pc, #148]	@ (8002ab4 <vTaskStartScheduler+0xac>)
 8002a1e:	f7ff fe2f 	bl	8002680 <xTaskCreate>
 8002a22:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d102      	bne.n	8002a30 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002a2a:	f000 fe29 	bl	8003680 <xTimerCreateTimerTask>
 8002a2e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d124      	bne.n	8002a80 <vTaskStartScheduler+0x78>
        __asm volatile
 8002a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	60bb      	str	r3, [r7, #8]
    }
 8002a48:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab8 <vTaskStartScheduler+0xb0>)
 8002a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a50:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a52:	4b1a      	ldr	r3, [pc, #104]	@ (8002abc <vTaskStartScheduler+0xb4>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a58:	4b19      	ldr	r3, [pc, #100]	@ (8002ac0 <vTaskStartScheduler+0xb8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002a5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <vTaskStartScheduler+0xbc>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <vTaskStartScheduler+0xa4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d102      	bne.n	8002a70 <vTaskStartScheduler+0x68>
 8002a6a:	f003 fb63 	bl	8006134 <SEGGER_SYSVIEW_OnIdle>
 8002a6e:	e004      	b.n	8002a7a <vTaskStartScheduler+0x72>
 8002a70:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <vTaskStartScheduler+0xbc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f003 fbbb 	bl	80061f0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002a7a:	f001 f91b 	bl	8003cb4 <xPortStartScheduler>
 8002a7e:	e00f      	b.n	8002aa0 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d10b      	bne.n	8002aa0 <vTaskStartScheduler+0x98>
        __asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	607b      	str	r3, [r7, #4]
    }
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002aa0:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <vTaskStartScheduler+0xc0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200001b8 	.word	0x200001b8
 8002ab0:	080066c8 	.word	0x080066c8
 8002ab4:	080033e1 	.word	0x080033e1
 8002ab8:	200001b4 	.word	0x200001b4
 8002abc:	200001a0 	.word	0x200001a0
 8002ac0:	20000198 	.word	0x20000198
 8002ac4:	200000bc 	.word	0x200000bc
 8002ac8:	2000000c 	.word	0x2000000c

08002acc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ad0:	4b04      	ldr	r3, [pc, #16]	@ (8002ae4 <vTaskSuspendAll+0x18>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a03      	ldr	r2, [pc, #12]	@ (8002ae4 <vTaskSuspendAll+0x18>)
 8002ad8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	200001bc 	.word	0x200001bc

08002ae8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002af6:	4b73      	ldr	r3, [pc, #460]	@ (8002cc4 <xTaskResumeAll+0x1dc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10b      	bne.n	8002b16 <xTaskResumeAll+0x2e>
        __asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	607b      	str	r3, [r7, #4]
    }
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	e7fd      	b.n	8002b12 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b16:	f001 f9f1 	bl	8003efc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc4 <xTaskResumeAll+0x1dc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	4a68      	ldr	r2, [pc, #416]	@ (8002cc4 <xTaskResumeAll+0x1dc>)
 8002b22:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b24:	4b67      	ldr	r3, [pc, #412]	@ (8002cc4 <xTaskResumeAll+0x1dc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f040 80c4 	bne.w	8002cb6 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b2e:	4b66      	ldr	r3, [pc, #408]	@ (8002cc8 <xTaskResumeAll+0x1e0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80bf 	beq.w	8002cb6 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b38:	e08e      	b.n	8002c58 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b3a:	4b64      	ldr	r3, [pc, #400]	@ (8002ccc <xTaskResumeAll+0x1e4>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	6a12      	ldr	r2, [r2, #32]
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	69d2      	ldr	r2, [r2, #28]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	3318      	adds	r3, #24
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d103      	bne.n	8002b70 <xTaskResumeAll+0x88>
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	6a1a      	ldr	r2, [r3, #32]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	2200      	movs	r2, #0
 8002b74:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1e5a      	subs	r2, r3, #1
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	68d2      	ldr	r2, [r2, #12]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	6892      	ldr	r2, [r2, #8]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d103      	bne.n	8002bae <xTaskResumeAll+0xc6>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	615a      	str	r2, [r3, #20]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	1e5a      	subs	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fb57 	bl	8006274 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bca:	2201      	movs	r2, #1
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	4b40      	ldr	r3, [pc, #256]	@ (8002cd0 <xTaskResumeAll+0x1e8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	4a3e      	ldr	r2, [pc, #248]	@ (8002cd0 <xTaskResumeAll+0x1e8>)
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bdc:	493d      	ldr	r1, [pc, #244]	@ (8002cd4 <xTaskResumeAll+0x1ec>)
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	3304      	adds	r3, #4
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	60da      	str	r2, [r3, #12]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	3204      	adds	r2, #4
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	1d1a      	adds	r2, r3, #4
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8002cd4 <xTaskResumeAll+0x1ec>)
 8002c1c:	441a      	add	r2, r3
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	615a      	str	r2, [r3, #20]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c26:	492b      	ldr	r1, [pc, #172]	@ (8002cd4 <xTaskResumeAll+0x1ec>)
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	1c59      	adds	r1, r3, #1
 8002c36:	4827      	ldr	r0, [pc, #156]	@ (8002cd4 <xTaskResumeAll+0x1ec>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4403      	add	r3, r0
 8002c42:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c48:	4b23      	ldr	r3, [pc, #140]	@ (8002cd8 <xTaskResumeAll+0x1f0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002c52:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <xTaskResumeAll+0x1f4>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c58:	4b1c      	ldr	r3, [pc, #112]	@ (8002ccc <xTaskResumeAll+0x1e4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f47f af6c 	bne.w	8002b3a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002c68:	f000 fc50 	bl	800350c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce0 <xTaskResumeAll+0x1f8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d010      	beq.n	8002c9a <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c78:	f000 f858 	bl	8002d2c <xTaskIncrementTick>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002c82:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <xTaskResumeAll+0x1f4>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f1      	bne.n	8002c78 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002c94:	4b12      	ldr	r3, [pc, #72]	@ (8002ce0 <xTaskResumeAll+0x1f8>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c9a:	4b10      	ldr	r3, [pc, #64]	@ (8002cdc <xTaskResumeAll+0x1f4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce4 <xTaskResumeAll+0x1fc>)
 8002ca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002cb6:	f001 f953 	bl	8003f60 <vPortExitCritical>

    return xAlreadyYielded;
 8002cba:	69bb      	ldr	r3, [r7, #24]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	200001bc 	.word	0x200001bc
 8002cc8:	20000194 	.word	0x20000194
 8002ccc:	20000154 	.word	0x20000154
 8002cd0:	2000019c 	.word	0x2000019c
 8002cd4:	200000c0 	.word	0x200000c0
 8002cd8:	200000bc 	.word	0x200000bc
 8002cdc:	200001a8 	.word	0x200001a8
 8002ce0:	200001a4 	.word	0x200001a4
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002cee:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <xTaskGetTickCount+0x1c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002cf4:	687b      	ldr	r3, [r7, #4]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000198 	.word	0x20000198

08002d08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d0e:	f001 f9e5 	bl	80040dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002d16:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <xTaskGetTickCountFromISR+0x20>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002d1c:	683b      	ldr	r3, [r7, #0]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000198 	.word	0x20000198

08002d2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	@ 0x28
 8002d30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d36:	4b80      	ldr	r3, [pc, #512]	@ (8002f38 <xTaskIncrementTick+0x20c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 80f1 	bne.w	8002f22 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d40:	4b7e      	ldr	r3, [pc, #504]	@ (8002f3c <xTaskIncrementTick+0x210>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3301      	adds	r3, #1
 8002d46:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d48:	4a7c      	ldr	r2, [pc, #496]	@ (8002f3c <xTaskIncrementTick+0x210>)
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d121      	bne.n	8002d98 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d54:	4b7a      	ldr	r3, [pc, #488]	@ (8002f40 <xTaskIncrementTick+0x214>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <xTaskIncrementTick+0x4a>
        __asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	607b      	str	r3, [r7, #4]
    }
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	e7fd      	b.n	8002d72 <xTaskIncrementTick+0x46>
 8002d76:	4b72      	ldr	r3, [pc, #456]	@ (8002f40 <xTaskIncrementTick+0x214>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	4b71      	ldr	r3, [pc, #452]	@ (8002f44 <xTaskIncrementTick+0x218>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a6f      	ldr	r2, [pc, #444]	@ (8002f40 <xTaskIncrementTick+0x214>)
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4a6f      	ldr	r2, [pc, #444]	@ (8002f44 <xTaskIncrementTick+0x218>)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002f48 <xTaskIncrementTick+0x21c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a6d      	ldr	r2, [pc, #436]	@ (8002f48 <xTaskIncrementTick+0x21c>)
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	f000 fbba 	bl	800350c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d98:	4b6c      	ldr	r3, [pc, #432]	@ (8002f4c <xTaskIncrementTick+0x220>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a3a      	ldr	r2, [r7, #32]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	f0c0 80aa 	bcc.w	8002ef8 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002da4:	4b66      	ldr	r3, [pc, #408]	@ (8002f40 <xTaskIncrementTick+0x214>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d104      	bne.n	8002db8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dae:	4b67      	ldr	r3, [pc, #412]	@ (8002f4c <xTaskIncrementTick+0x220>)
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295
 8002db4:	601a      	str	r2, [r3, #0]
                    break;
 8002db6:	e09f      	b.n	8002ef8 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002db8:	4b61      	ldr	r3, [pc, #388]	@ (8002f40 <xTaskIncrementTick+0x214>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002dc8:	6a3a      	ldr	r2, [r7, #32]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d203      	bcs.n	8002dd8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002dd0:	4a5e      	ldr	r2, [pc, #376]	@ (8002f4c <xTaskIncrementTick+0x220>)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002dd6:	e08f      	b.n	8002ef8 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	68d2      	ldr	r2, [r2, #12]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	6892      	ldr	r2, [r2, #8]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d103      	bne.n	8002e06 <xTaskIncrementTick+0xda>
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	615a      	str	r2, [r3, #20]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	1e5a      	subs	r2, r3, #1
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01e      	beq.n	8002e5c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	6a12      	ldr	r2, [r2, #32]
 8002e2c:	609a      	str	r2, [r3, #8]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	69d2      	ldr	r2, [r2, #28]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	3318      	adds	r3, #24
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d103      	bne.n	8002e4c <xTaskIncrementTick+0x120>
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	1e5a      	subs	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fa08 	bl	8006274 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e68:	2201      	movs	r2, #1
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	4b38      	ldr	r3, [pc, #224]	@ (8002f50 <xTaskIncrementTick+0x224>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	4a37      	ldr	r2, [pc, #220]	@ (8002f50 <xTaskIncrementTick+0x224>)
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7a:	4936      	ldr	r1, [pc, #216]	@ (8002f54 <xTaskIncrementTick+0x228>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	3304      	adds	r3, #4
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	3204      	adds	r2, #4
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	1d1a      	adds	r2, r3, #4
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4a26      	ldr	r2, [pc, #152]	@ (8002f54 <xTaskIncrementTick+0x228>)
 8002eba:	441a      	add	r2, r3
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	615a      	str	r2, [r3, #20]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec4:	4923      	ldr	r1, [pc, #140]	@ (8002f54 <xTaskIncrementTick+0x228>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	1c59      	adds	r1, r3, #1
 8002ed4:	481f      	ldr	r0, [pc, #124]	@ (8002f54 <xTaskIncrementTick+0x228>)
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4403      	add	r3, r0
 8002ee0:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f58 <xTaskIncrementTick+0x22c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	429a      	cmp	r2, r3
 8002eee:	f67f af59 	bls.w	8002da4 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ef6:	e755      	b.n	8002da4 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ef8:	4b17      	ldr	r3, [pc, #92]	@ (8002f58 <xTaskIncrementTick+0x22c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002efe:	4915      	ldr	r1, [pc, #84]	@ (8002f54 <xTaskIncrementTick+0x228>)
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d901      	bls.n	8002f14 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002f14:	4b11      	ldr	r3, [pc, #68]	@ (8002f5c <xTaskIncrementTick+0x230>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f20:	e004      	b.n	8002f2c <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f22:	4b0f      	ldr	r3, [pc, #60]	@ (8002f60 <xTaskIncrementTick+0x234>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	4a0d      	ldr	r2, [pc, #52]	@ (8002f60 <xTaskIncrementTick+0x234>)
 8002f2a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3728      	adds	r7, #40	@ 0x28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200001bc 	.word	0x200001bc
 8002f3c:	20000198 	.word	0x20000198
 8002f40:	2000014c 	.word	0x2000014c
 8002f44:	20000150 	.word	0x20000150
 8002f48:	200001ac 	.word	0x200001ac
 8002f4c:	200001b4 	.word	0x200001b4
 8002f50:	2000019c 	.word	0x2000019c
 8002f54:	200000c0 	.word	0x200000c0
 8002f58:	200000bc 	.word	0x200000bc
 8002f5c:	200001a8 	.word	0x200001a8
 8002f60:	200001a4 	.word	0x200001a4

08002f64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003020 <vTaskSwitchContext+0xbc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f72:	4b2c      	ldr	r3, [pc, #176]	@ (8003024 <vTaskSwitchContext+0xc0>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002f78:	e04e      	b.n	8003018 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <vTaskSwitchContext+0xc0>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f80:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <vTaskSwitchContext+0xc4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	fab3 f383 	clz	r3, r3
 8002f8c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f8e:	7afb      	ldrb	r3, [r7, #11]
 8002f90:	f1c3 031f 	rsb	r3, r3, #31
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	4925      	ldr	r1, [pc, #148]	@ (800302c <vTaskSwitchContext+0xc8>)
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10b      	bne.n	8002fc2 <vTaskSwitchContext+0x5e>
        __asm volatile
 8002faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	607b      	str	r3, [r7, #4]
    }
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	e7fd      	b.n	8002fbe <vTaskSwitchContext+0x5a>
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4a17      	ldr	r2, [pc, #92]	@ (800302c <vTaskSwitchContext+0xc8>)
 8002fce:	4413      	add	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d104      	bne.n	8002ff2 <vTaskSwitchContext+0x8e>
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <vTaskSwitchContext+0xcc>)
 8002ffa:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8003030 <vTaskSwitchContext+0xcc>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <vTaskSwitchContext+0xd0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d102      	bne.n	800300e <vTaskSwitchContext+0xaa>
 8003008:	f003 f894 	bl	8006134 <SEGGER_SYSVIEW_OnIdle>
}
 800300c:	e004      	b.n	8003018 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800300e:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <vTaskSwitchContext+0xcc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f003 f8ec 	bl	80061f0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003018:	bf00      	nop
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	200001bc 	.word	0x200001bc
 8003024:	200001a8 	.word	0x200001a8
 8003028:	2000019c 	.word	0x2000019c
 800302c:	200000c0 	.word	0x200000c0
 8003030:	200000bc 	.word	0x200000bc
 8003034:	200001b8 	.word	0x200001b8

08003038 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	60fb      	str	r3, [r7, #12]
    }
 800305a:	bf00      	nop
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003060:	4b07      	ldr	r3, [pc, #28]	@ (8003080 <vTaskPlaceOnEventList+0x48>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3318      	adds	r3, #24
 8003066:	4619      	mov	r1, r3
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7fe ff6e 	bl	8001f4a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800306e:	2101      	movs	r1, #1
 8003070:	6838      	ldr	r0, [r7, #0]
 8003072:	f000 fa85 	bl	8003580 <prvAddCurrentTaskToDelayedList>
}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200000bc 	.word	0x200000bc

08003084 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	613b      	str	r3, [r7, #16]
    }
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	e7fd      	b.n	80030aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <vTaskPlaceOnEventListRestricted+0x90>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	61da      	str	r2, [r3, #28]
 80030bc:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <vTaskPlaceOnEventListRestricted+0x90>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	6892      	ldr	r2, [r2, #8]
 80030c4:	621a      	str	r2, [r3, #32]
 80030c6:	4b13      	ldr	r3, [pc, #76]	@ (8003114 <vTaskPlaceOnEventListRestricted+0x90>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	3218      	adds	r2, #24
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	4b10      	ldr	r3, [pc, #64]	@ (8003114 <vTaskPlaceOnEventListRestricted+0x90>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f103 0218 	add.w	r2, r3, #24
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <vTaskPlaceOnEventListRestricted+0x90>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80030fc:	2024      	movs	r0, #36	@ 0x24
 80030fe:	f002 fb1b 	bl	8005738 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	68b8      	ldr	r0, [r7, #8]
 8003106:	f000 fa3b 	bl	8003580 <prvAddCurrentTaskToDelayedList>
    }
 800310a:	bf00      	nop
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200000bc 	.word	0x200000bc

08003118 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	@ 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10b      	bne.n	8003146 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	60fb      	str	r3, [r7, #12]
    }
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	e7fd      	b.n	8003142 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	6a3a      	ldr	r2, [r7, #32]
 8003152:	6a12      	ldr	r2, [r2, #32]
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	6a3a      	ldr	r2, [r7, #32]
 800315c:	69d2      	ldr	r2, [r2, #28]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	3318      	adds	r3, #24
 8003168:	429a      	cmp	r2, r3
 800316a:	d103      	bne.n	8003174 <xTaskRemoveFromEventList+0x5c>
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	6a1a      	ldr	r2, [r3, #32]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	2200      	movs	r2, #0
 8003178:	629a      	str	r2, [r3, #40]	@ 0x28
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	1e5a      	subs	r2, r3, #1
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003184:	4b4b      	ldr	r3, [pc, #300]	@ (80032b4 <xTaskRemoveFromEventList+0x19c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d162      	bne.n	8003252 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	6a3a      	ldr	r2, [r7, #32]
 8003198:	68d2      	ldr	r2, [r2, #12]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	6892      	ldr	r2, [r2, #8]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	3304      	adds	r3, #4
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d103      	bne.n	80031ba <xTaskRemoveFromEventList+0xa2>
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	2200      	movs	r2, #0
 80031be:	615a      	str	r2, [r3, #20]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	1e5a      	subs	r2, r3, #1
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f003 f851 	bl	8006274 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	2201      	movs	r2, #1
 80031d8:	409a      	lsls	r2, r3
 80031da:	4b37      	ldr	r3, [pc, #220]	@ (80032b8 <xTaskRemoveFromEventList+0x1a0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	4a35      	ldr	r2, [pc, #212]	@ (80032b8 <xTaskRemoveFromEventList+0x1a0>)
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e8:	4934      	ldr	r1, [pc, #208]	@ (80032bc <xTaskRemoveFromEventList+0x1a4>)
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3304      	adds	r3, #4
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	60da      	str	r2, [r3, #12]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	6a3a      	ldr	r2, [r7, #32]
 800320e:	3204      	adds	r2, #4
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	1d1a      	adds	r2, r3, #4
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4a25      	ldr	r2, [pc, #148]	@ (80032bc <xTaskRemoveFromEventList+0x1a4>)
 8003228:	441a      	add	r2, r3
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	615a      	str	r2, [r3, #20]
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003232:	4922      	ldr	r1, [pc, #136]	@ (80032bc <xTaskRemoveFromEventList+0x1a4>)
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	1c59      	adds	r1, r3, #1
 8003242:	481e      	ldr	r0, [pc, #120]	@ (80032bc <xTaskRemoveFromEventList+0x1a4>)
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4403      	add	r3, r0
 800324e:	6019      	str	r1, [r3, #0]
 8003250:	e01b      	b.n	800328a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003252:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <xTaskRemoveFromEventList+0x1a8>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	61da      	str	r2, [r3, #28]
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	621a      	str	r2, [r3, #32]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	6a3a      	ldr	r2, [r7, #32]
 800326c:	3218      	adds	r2, #24
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	f103 0218 	add.w	r2, r3, #24
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	4a10      	ldr	r2, [pc, #64]	@ (80032c0 <xTaskRemoveFromEventList+0x1a8>)
 800327e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003280:	4b0f      	ldr	r3, [pc, #60]	@ (80032c0 <xTaskRemoveFromEventList+0x1a8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	4a0e      	ldr	r2, [pc, #56]	@ (80032c0 <xTaskRemoveFromEventList+0x1a8>)
 8003288:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <xTaskRemoveFromEventList+0x1ac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	429a      	cmp	r2, r3
 8003296:	d905      	bls.n	80032a4 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003298:	2301      	movs	r3, #1
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800329c:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <xTaskRemoveFromEventList+0x1b0>)
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e001      	b.n	80032a8 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 80032a4:	2300      	movs	r3, #0
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3728      	adds	r7, #40	@ 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200001bc 	.word	0x200001bc
 80032b8:	2000019c 	.word	0x2000019c
 80032bc:	200000c0 	.word	0x200000c0
 80032c0:	20000154 	.word	0x20000154
 80032c4:	200000bc 	.word	0x200000bc
 80032c8:	200001a8 	.word	0x200001a8

080032cc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032d4:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <vTaskInternalSetTimeOutState+0x24>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80032dc:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <vTaskInternalSetTimeOutState+0x28>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	605a      	str	r2, [r3, #4]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	200001ac 	.word	0x200001ac
 80032f4:	20000198 	.word	0x20000198

080032f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10b      	bne.n	8003320 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	613b      	str	r3, [r7, #16]
    }
 800331a:	bf00      	nop
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10b      	bne.n	800333e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	60fb      	str	r3, [r7, #12]
    }
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	e7fd      	b.n	800333a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800333e:	f000 fddd 	bl	8003efc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003342:	4b1f      	ldr	r3, [pc, #124]	@ (80033c0 <xTaskCheckForTimeOut+0xc8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d102      	bne.n	8003362 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800335c:	2300      	movs	r3, #0
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	e026      	b.n	80033b0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b17      	ldr	r3, [pc, #92]	@ (80033c4 <xTaskCheckForTimeOut+0xcc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d00a      	beq.n	8003384 <xTaskCheckForTimeOut+0x8c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	429a      	cmp	r2, r3
 8003376:	d305      	bcc.n	8003384 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003378:	2301      	movs	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	e015      	b.n	80033b0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	429a      	cmp	r2, r3
 800338c:	d20b      	bcs.n	80033a6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	1ad2      	subs	r2, r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff96 	bl	80032cc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	e004      	b.n	80033b0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80033ac:	2301      	movs	r3, #1
 80033ae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80033b0:	f000 fdd6 	bl	8003f60 <vPortExitCritical>

    return xReturn;
 80033b4:	69fb      	ldr	r3, [r7, #28]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000198 	.word	0x20000198
 80033c4:	200001ac 	.word	0x200001ac

080033c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80033cc:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <vTaskMissedYield+0x14>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	200001a8 	.word	0x200001a8

080033e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80033e8:	f000 f852 	bl	8003490 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033ec:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <prvIdleTask+0x28>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d9f9      	bls.n	80033e8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80033f4:	4b05      	ldr	r3, [pc, #20]	@ (800340c <prvIdleTask+0x2c>)
 80033f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003404:	e7f0      	b.n	80033e8 <prvIdleTask+0x8>
 8003406:	bf00      	nop
 8003408:	200000c0 	.word	0x200000c0
 800340c:	e000ed04 	.word	0xe000ed04

08003410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	e00c      	b.n	8003436 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4a12      	ldr	r2, [pc, #72]	@ (8003470 <prvInitialiseTaskLists+0x60>)
 8003428:	4413      	add	r3, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe fd60 	bl	8001ef0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3301      	adds	r3, #1
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b04      	cmp	r3, #4
 800343a:	d9ef      	bls.n	800341c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800343c:	480d      	ldr	r0, [pc, #52]	@ (8003474 <prvInitialiseTaskLists+0x64>)
 800343e:	f7fe fd57 	bl	8001ef0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003442:	480d      	ldr	r0, [pc, #52]	@ (8003478 <prvInitialiseTaskLists+0x68>)
 8003444:	f7fe fd54 	bl	8001ef0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003448:	480c      	ldr	r0, [pc, #48]	@ (800347c <prvInitialiseTaskLists+0x6c>)
 800344a:	f7fe fd51 	bl	8001ef0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800344e:	480c      	ldr	r0, [pc, #48]	@ (8003480 <prvInitialiseTaskLists+0x70>)
 8003450:	f7fe fd4e 	bl	8001ef0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003454:	480b      	ldr	r0, [pc, #44]	@ (8003484 <prvInitialiseTaskLists+0x74>)
 8003456:	f7fe fd4b 	bl	8001ef0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800345a:	4b0b      	ldr	r3, [pc, #44]	@ (8003488 <prvInitialiseTaskLists+0x78>)
 800345c:	4a05      	ldr	r2, [pc, #20]	@ (8003474 <prvInitialiseTaskLists+0x64>)
 800345e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003460:	4b0a      	ldr	r3, [pc, #40]	@ (800348c <prvInitialiseTaskLists+0x7c>)
 8003462:	4a05      	ldr	r2, [pc, #20]	@ (8003478 <prvInitialiseTaskLists+0x68>)
 8003464:	601a      	str	r2, [r3, #0]
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200000c0 	.word	0x200000c0
 8003474:	20000124 	.word	0x20000124
 8003478:	20000138 	.word	0x20000138
 800347c:	20000154 	.word	0x20000154
 8003480:	20000168 	.word	0x20000168
 8003484:	20000180 	.word	0x20000180
 8003488:	2000014c 	.word	0x2000014c
 800348c:	20000150 	.word	0x20000150

08003490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003496:	e019      	b.n	80034cc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003498:	f000 fd30 	bl	8003efc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800349c:	4b10      	ldr	r3, [pc, #64]	@ (80034e0 <prvCheckTasksWaitingTermination+0x50>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fd87 	bl	8001fbc <uxListRemove>
                --uxCurrentNumberOfTasks;
 80034ae:	4b0d      	ldr	r3, [pc, #52]	@ (80034e4 <prvCheckTasksWaitingTermination+0x54>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	4a0b      	ldr	r2, [pc, #44]	@ (80034e4 <prvCheckTasksWaitingTermination+0x54>)
 80034b6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80034b8:	4b0b      	ldr	r3, [pc, #44]	@ (80034e8 <prvCheckTasksWaitingTermination+0x58>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3b01      	subs	r3, #1
 80034be:	4a0a      	ldr	r2, [pc, #40]	@ (80034e8 <prvCheckTasksWaitingTermination+0x58>)
 80034c0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80034c2:	f000 fd4d 	bl	8003f60 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f810 	bl	80034ec <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034cc:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <prvCheckTasksWaitingTermination+0x58>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e1      	bne.n	8003498 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000168 	.word	0x20000168
 80034e4:	20000194 	.word	0x20000194
 80034e8:	2000017c 	.word	0x2000017c

080034ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 feed 	bl	80042d8 <vPortFree>
            vPortFree( pxTCB );
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 feea 	bl	80042d8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003510:	4b0a      	ldr	r3, [pc, #40]	@ (800353c <prvResetNextTaskUnblockTime+0x30>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800351a:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <prvResetNextTaskUnblockTime+0x34>)
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003522:	e005      	b.n	8003530 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003524:	4b05      	ldr	r3, [pc, #20]	@ (800353c <prvResetNextTaskUnblockTime+0x30>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a04      	ldr	r2, [pc, #16]	@ (8003540 <prvResetNextTaskUnblockTime+0x34>)
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	2000014c 	.word	0x2000014c
 8003540:	200001b4 	.word	0x200001b4

08003544 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800354a:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <xTaskGetSchedulerState+0x34>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003552:	2301      	movs	r3, #1
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	e008      	b.n	800356a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003558:	4b08      	ldr	r3, [pc, #32]	@ (800357c <xTaskGetSchedulerState+0x38>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003560:	2302      	movs	r3, #2
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	e001      	b.n	800356a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003566:	2300      	movs	r3, #0
 8003568:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800356a:	687b      	ldr	r3, [r7, #4]
    }
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	200001a0 	.word	0x200001a0
 800357c:	200001bc 	.word	0x200001bc

08003580 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800358a:	4b36      	ldr	r3, [pc, #216]	@ (8003664 <prvAddCurrentTaskToDelayedList+0xe4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003590:	4b35      	ldr	r3, [pc, #212]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3304      	adds	r3, #4
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe fd10 	bl	8001fbc <uxListRemove>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10b      	bne.n	80035ba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80035a2:	4b31      	ldr	r3, [pc, #196]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	2201      	movs	r2, #1
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43da      	mvns	r2, r3
 80035b0:	4b2e      	ldr	r3, [pc, #184]	@ (800366c <prvAddCurrentTaskToDelayedList+0xec>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4013      	ands	r3, r2
 80035b6:	4a2d      	ldr	r2, [pc, #180]	@ (800366c <prvAddCurrentTaskToDelayedList+0xec>)
 80035b8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d124      	bne.n	800360c <prvAddCurrentTaskToDelayedList+0x8c>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d021      	beq.n	800360c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035c8:	4b29      	ldr	r3, [pc, #164]	@ (8003670 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	4b26      	ldr	r3, [pc, #152]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	4b24      	ldr	r3, [pc, #144]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	6892      	ldr	r2, [r2, #8]
 80035de:	60da      	str	r2, [r3, #12]
 80035e0:	4b21      	ldr	r3, [pc, #132]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	3204      	adds	r2, #4
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	1d1a      	adds	r2, r3, #4
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	609a      	str	r2, [r3, #8]
 80035f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003670 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035fc:	615a      	str	r2, [r3, #20]
 80035fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003670 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3301      	adds	r3, #1
 8003604:	4a1a      	ldr	r2, [pc, #104]	@ (8003670 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800360a:	e026      	b.n	800365a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4413      	add	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003614:	4b14      	ldr	r3, [pc, #80]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	429a      	cmp	r2, r3
 8003622:	d209      	bcs.n	8003638 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003624:	4b13      	ldr	r3, [pc, #76]	@ (8003674 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4b0f      	ldr	r3, [pc, #60]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xe8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3304      	adds	r3, #4
 800362e:	4619      	mov	r1, r3
 8003630:	4610      	mov	r0, r2
 8003632:	f7fe fc8a 	bl	8001f4a <vListInsert>
}
 8003636:	e010      	b.n	800365a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003638:	4b0f      	ldr	r3, [pc, #60]	@ (8003678 <prvAddCurrentTaskToDelayedList+0xf8>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b0a      	ldr	r3, [pc, #40]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xe8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3304      	adds	r3, #4
 8003642:	4619      	mov	r1, r3
 8003644:	4610      	mov	r0, r2
 8003646:	f7fe fc80 	bl	8001f4a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800364a:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <prvAddCurrentTaskToDelayedList+0xfc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	429a      	cmp	r2, r3
 8003652:	d202      	bcs.n	800365a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003654:	4a09      	ldr	r2, [pc, #36]	@ (800367c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6013      	str	r3, [r2, #0]
}
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000198 	.word	0x20000198
 8003668:	200000bc 	.word	0x200000bc
 800366c:	2000019c 	.word	0x2000019c
 8003670:	20000180 	.word	0x20000180
 8003674:	20000150 	.word	0x20000150
 8003678:	2000014c 	.word	0x2000014c
 800367c:	200001b4 	.word	0x200001b4

08003680 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800368a:	f000 fa4f 	bl	8003b2c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800368e:	4b12      	ldr	r3, [pc, #72]	@ (80036d8 <xTimerCreateTimerTask+0x58>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003696:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <xTimerCreateTimerTask+0x5c>)
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	2302      	movs	r3, #2
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	2300      	movs	r3, #0
 80036a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80036a4:	490e      	ldr	r1, [pc, #56]	@ (80036e0 <xTimerCreateTimerTask+0x60>)
 80036a6:	480f      	ldr	r0, [pc, #60]	@ (80036e4 <xTimerCreateTimerTask+0x64>)
 80036a8:	f7fe ffea 	bl	8002680 <xTaskCreate>
 80036ac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	603b      	str	r3, [r7, #0]
    }
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80036cc:	687b      	ldr	r3, [r7, #4]
    }
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	200001f0 	.word	0x200001f0
 80036dc:	200001f4 	.word	0x200001f4
 80036e0:	080066d0 	.word	0x080066d0
 80036e4:	0800378d 	.word	0x0800378d

080036e8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80036f4:	e008      	b.n	8003708 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	4413      	add	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	18d1      	adds	r1, r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f8df 	bl	80038d8 <prvInsertTimerInActiveList>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1ea      	bne.n	80036f6 <prvReloadTimer+0xe>
        }
    }
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003736:	4b14      	ldr	r3, [pc, #80]	@ (8003788 <prvProcessExpiredTimer+0x5c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	3304      	adds	r3, #4
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe fc39 	bl	8001fbc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff ffc3 	bl	80036e8 <prvReloadTimer>
 8003762:	e008      	b.n	8003776 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	b2da      	uxtb	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	4798      	blx	r3
    }
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200001e8 	.word	0x200001e8

0800378c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003794:	f107 0308 	add.w	r3, r7, #8
 8003798:	4618      	mov	r0, r3
 800379a:	f000 f859 	bl	8003850 <prvGetNextExpireTime>
 800379e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4619      	mov	r1, r3
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f805 	bl	80037b4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80037aa:	f000 f8d7 	bl	800395c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037ae:	bf00      	nop
 80037b0:	e7f0      	b.n	8003794 <prvTimerTask+0x8>
	...

080037b4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80037be:	f7ff f985 	bl	8002acc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037c2:	f107 0308 	add.w	r3, r7, #8
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f866 	bl	8003898 <prvSampleTimeNow>
 80037cc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d130      	bne.n	8003836 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <prvProcessTimerOrBlockTask+0x3c>
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d806      	bhi.n	80037f0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80037e2:	f7ff f981 	bl	8002ae8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff9f 	bl	800372c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80037ee:	e024      	b.n	800383a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80037f6:	4b13      	ldr	r3, [pc, #76]	@ (8003844 <prvProcessTimerOrBlockTask+0x90>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <prvProcessTimerOrBlockTask+0x50>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <prvProcessTimerOrBlockTask+0x52>
 8003804:	2300      	movs	r3, #0
 8003806:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003808:	4b0f      	ldr	r3, [pc, #60]	@ (8003848 <prvProcessTimerOrBlockTask+0x94>)
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	4619      	mov	r1, r3
 8003816:	f7fe feff 	bl	8002618 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800381a:	f7ff f965 	bl	8002ae8 <xTaskResumeAll>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003824:	4b09      	ldr	r3, [pc, #36]	@ (800384c <prvProcessTimerOrBlockTask+0x98>)
 8003826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	f3bf 8f6f 	isb	sy
    }
 8003834:	e001      	b.n	800383a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003836:	f7ff f957 	bl	8002ae8 <xTaskResumeAll>
    }
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200001ec 	.word	0x200001ec
 8003848:	200001f0 	.word	0x200001f0
 800384c:	e000ed04 	.word	0xe000ed04

08003850 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003858:	4b0e      	ldr	r3, [pc, #56]	@ (8003894 <prvGetNextExpireTime+0x44>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <prvGetNextExpireTime+0x16>
 8003862:	2201      	movs	r2, #1
 8003864:	e000      	b.n	8003868 <prvGetNextExpireTime+0x18>
 8003866:	2200      	movs	r2, #0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003874:	4b07      	ldr	r3, [pc, #28]	@ (8003894 <prvGetNextExpireTime+0x44>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e001      	b.n	8003884 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003884:	68fb      	ldr	r3, [r7, #12]
    }
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	200001e8 	.word	0x200001e8

08003898 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80038a0:	f7ff fa22 	bl	8002ce8 <xTaskGetTickCount>
 80038a4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80038a6:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <prvSampleTimeNow+0x3c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d205      	bcs.n	80038bc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80038b0:	f000 f916 	bl	8003ae0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e002      	b.n	80038c2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80038c2:	4a04      	ldr	r2, [pc, #16]	@ (80038d4 <prvSampleTimeNow+0x3c>)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80038c8:	68fb      	ldr	r3, [r7, #12]
    }
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200001f8 	.word	0x200001f8

080038d8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d812      	bhi.n	8003924 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	1ad2      	subs	r2, r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	429a      	cmp	r2, r3
 800390a:	d302      	bcc.n	8003912 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800390c:	2301      	movs	r3, #1
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e01b      	b.n	800394a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <prvInsertTimerInActiveList+0x7c>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3304      	adds	r3, #4
 800391a:	4619      	mov	r1, r3
 800391c:	4610      	mov	r0, r2
 800391e:	f7fe fb14 	bl	8001f4a <vListInsert>
 8003922:	e012      	b.n	800394a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d206      	bcs.n	800393a <prvInsertTimerInActiveList+0x62>
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d302      	bcc.n	800393a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003934:	2301      	movs	r3, #1
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	e007      	b.n	800394a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800393a:	4b07      	ldr	r3, [pc, #28]	@ (8003958 <prvInsertTimerInActiveList+0x80>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3304      	adds	r3, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f7fe fb00 	bl	8001f4a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800394a:	697b      	ldr	r3, [r7, #20]
    }
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	200001ec 	.word	0x200001ec
 8003958:	200001e8 	.word	0x200001e8

0800395c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003962:	e0a9      	b.n	8003ab8 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f2c0 80a6 	blt.w	8003ab8 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	3304      	adds	r3, #4
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe fb1d 	bl	8001fbc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003982:	1d3b      	adds	r3, r7, #4
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff87 	bl	8003898 <prvSampleTimeNow>
 800398a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	3b01      	subs	r3, #1
 8003990:	2b08      	cmp	r3, #8
 8003992:	f200 808e 	bhi.w	8003ab2 <prvProcessReceivedCommands+0x156>
 8003996:	a201      	add	r2, pc, #4	@ (adr r2, 800399c <prvProcessReceivedCommands+0x40>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039c1 	.word	0x080039c1
 80039a0:	080039c1 	.word	0x080039c1
 80039a4:	08003a29 	.word	0x08003a29
 80039a8:	08003a3d 	.word	0x08003a3d
 80039ac:	08003a89 	.word	0x08003a89
 80039b0:	080039c1 	.word	0x080039c1
 80039b4:	080039c1 	.word	0x080039c1
 80039b8:	08003a29 	.word	0x08003a29
 80039bc:	08003a3d 	.word	0x08003a3d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	18d1      	adds	r1, r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	69f8      	ldr	r0, [r7, #28]
 80039e0:	f7ff ff7a 	bl	80038d8 <prvInsertTimerInActiveList>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d065      	beq.n	8003ab6 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4619      	mov	r1, r3
 8003a04:	69f8      	ldr	r0, [r7, #28]
 8003a06:	f7ff fe6f 	bl	80036e8 <prvReloadTimer>
 8003a0a:	e008      	b.n	8003a1e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	69f8      	ldr	r0, [r7, #28]
 8003a24:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003a26:	e046      	b.n	8003ab6 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003a3a:	e03d      	b.n	8003ab8 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10b      	bne.n	8003a74 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	617b      	str	r3, [r7, #20]
    }
 8003a6e:	bf00      	nop
 8003a70:	bf00      	nop
 8003a72:	e7fd      	b.n	8003a70 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	699a      	ldr	r2, [r3, #24]
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	18d1      	adds	r1, r2, r3
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	69f8      	ldr	r0, [r7, #28]
 8003a82:	f7ff ff29 	bl	80038d8 <prvInsertTimerInActiveList>
                        break;
 8003a86:	e017      	b.n	8003ab8 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003a96:	69f8      	ldr	r0, [r7, #28]
 8003a98:	f000 fc1e 	bl	80042d8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003a9c:	e00c      	b.n	8003ab8 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003ab0:	e002      	b.n	8003ab8 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <prvProcessReceivedCommands+0x15c>
                        break;
 8003ab6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ab8:	4b08      	ldr	r3, [pc, #32]	@ (8003adc <prvProcessReceivedCommands+0x180>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f107 0108 	add.w	r1, r7, #8
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fbae 	bl	8002224 <xQueueReceive>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f47f af4a 	bne.w	8003964 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200001f0 	.word	0x200001f0

08003ae0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ae6:	e009      	b.n	8003afc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <prvSwitchTimerLists+0x44>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003af2:	f04f 31ff 	mov.w	r1, #4294967295
 8003af6:	6838      	ldr	r0, [r7, #0]
 8003af8:	f7ff fe18 	bl	800372c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <prvSwitchTimerLists+0x44>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003b06:	4b07      	ldr	r3, [pc, #28]	@ (8003b24 <prvSwitchTimerLists+0x44>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <prvSwitchTimerLists+0x48>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <prvSwitchTimerLists+0x44>)
 8003b12:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003b14:	4a04      	ldr	r2, [pc, #16]	@ (8003b28 <prvSwitchTimerLists+0x48>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6013      	str	r3, [r2, #0]
    }
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	200001e8 	.word	0x200001e8
 8003b28:	200001ec 	.word	0x200001ec

08003b2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003b30:	f000 f9e4 	bl	8003efc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003b34:	4b12      	ldr	r3, [pc, #72]	@ (8003b80 <prvCheckForValidListAndQueue+0x54>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d11d      	bne.n	8003b78 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003b3c:	4811      	ldr	r0, [pc, #68]	@ (8003b84 <prvCheckForValidListAndQueue+0x58>)
 8003b3e:	f7fe f9d7 	bl	8001ef0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003b42:	4811      	ldr	r0, [pc, #68]	@ (8003b88 <prvCheckForValidListAndQueue+0x5c>)
 8003b44:	f7fe f9d4 	bl	8001ef0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003b48:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <prvCheckForValidListAndQueue+0x60>)
 8003b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b84 <prvCheckForValidListAndQueue+0x58>)
 8003b4c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003b4e:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <prvCheckForValidListAndQueue+0x64>)
 8003b50:	4a0d      	ldr	r2, [pc, #52]	@ (8003b88 <prvCheckForValidListAndQueue+0x5c>)
 8003b52:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003b54:	2200      	movs	r2, #0
 8003b56:	210c      	movs	r1, #12
 8003b58:	200a      	movs	r0, #10
 8003b5a:	f7fe faeb 	bl	8002134 <xQueueGenericCreate>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4a07      	ldr	r2, [pc, #28]	@ (8003b80 <prvCheckForValidListAndQueue+0x54>)
 8003b62:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003b64:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <prvCheckForValidListAndQueue+0x54>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b6c:	4b04      	ldr	r3, [pc, #16]	@ (8003b80 <prvCheckForValidListAndQueue+0x54>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4908      	ldr	r1, [pc, #32]	@ (8003b94 <prvCheckForValidListAndQueue+0x68>)
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fcf8 	bl	8002568 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b78:	f000 f9f2 	bl	8003f60 <vPortExitCritical>
    }
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	200001f0 	.word	0x200001f0
 8003b84:	200001c0 	.word	0x200001c0
 8003b88:	200001d4 	.word	0x200001d4
 8003b8c:	200001e8 	.word	0x200001e8
 8003b90:	200001ec 	.word	0x200001ec
 8003b94:	080066d8 	.word	0x080066d8

08003b98 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3b04      	subs	r3, #4
 8003ba8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bb0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3b04      	subs	r3, #4
 8003bb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3b04      	subs	r3, #4
 8003bc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8003bfc <pxPortInitialiseStack+0x64>)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3b14      	subs	r3, #20
 8003bd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3b04      	subs	r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f06f 0202 	mvn.w	r2, #2
 8003be6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3b20      	subs	r3, #32
 8003bec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003bee:	68fb      	ldr	r3, [r7, #12]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	08003c01 	.word	0x08003c01

08003c00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003c0a:	4b13      	ldr	r3, [pc, #76]	@ (8003c58 <prvTaskExitError+0x58>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d00b      	beq.n	8003c2c <prvTaskExitError+0x2c>
        __asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	60fb      	str	r3, [r7, #12]
    }
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	e7fd      	b.n	8003c28 <prvTaskExitError+0x28>
        __asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	60bb      	str	r3, [r7, #8]
    }
 8003c3e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003c40:	bf00      	nop
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0fc      	beq.n	8003c42 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000010 	.word	0x20000010
 8003c5c:	00000000 	.word	0x00000000

08003c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003c60:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <pxCurrentTCBConst2>)
 8003c62:	6819      	ldr	r1, [r3, #0]
 8003c64:	6808      	ldr	r0, [r1, #0]
 8003c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c6a:	f380 8809 	msr	PSP, r0
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f380 8811 	msr	BASEPRI, r0
 8003c7a:	4770      	bx	lr
 8003c7c:	f3af 8000 	nop.w

08003c80 <pxCurrentTCBConst2>:
 8003c80:	200000bc 	.word	0x200000bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop

08003c88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003c88:	4808      	ldr	r0, [pc, #32]	@ (8003cac <prvPortStartFirstTask+0x24>)
 8003c8a:	6800      	ldr	r0, [r0, #0]
 8003c8c:	6800      	ldr	r0, [r0, #0]
 8003c8e:	f380 8808 	msr	MSP, r0
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f380 8814 	msr	CONTROL, r0
 8003c9a:	b662      	cpsie	i
 8003c9c:	b661      	cpsie	f
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	df00      	svc	0
 8003ca8:	bf00      	nop
 8003caa:	0000      	.short	0x0000
 8003cac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop

08003cb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003cba:	4b47      	ldr	r3, [pc, #284]	@ (8003dd8 <xPortStartScheduler+0x124>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a47      	ldr	r2, [pc, #284]	@ (8003ddc <xPortStartScheduler+0x128>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d10b      	bne.n	8003cdc <xPortStartScheduler+0x28>
        __asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	613b      	str	r3, [r7, #16]
    }
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	e7fd      	b.n	8003cd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cdc:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd8 <xPortStartScheduler+0x124>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a3f      	ldr	r2, [pc, #252]	@ (8003de0 <xPortStartScheduler+0x12c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d10b      	bne.n	8003cfe <xPortStartScheduler+0x4a>
        __asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	60fb      	str	r3, [r7, #12]
    }
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	e7fd      	b.n	8003cfa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cfe:	4b39      	ldr	r3, [pc, #228]	@ (8003de4 <xPortStartScheduler+0x130>)
 8003d00:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	22ff      	movs	r2, #255	@ 0xff
 8003d0e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4b31      	ldr	r3, [pc, #196]	@ (8003de8 <xPortStartScheduler+0x134>)
 8003d24:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d26:	4b31      	ldr	r3, [pc, #196]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d28:	2207      	movs	r2, #7
 8003d2a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d2c:	e009      	b.n	8003d42 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	4a2d      	ldr	r2, [pc, #180]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d36:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4a:	2b80      	cmp	r3, #128	@ 0x80
 8003d4c:	d0ef      	beq.n	8003d2e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d4e:	4b27      	ldr	r3, [pc, #156]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f1c3 0307 	rsb	r3, r3, #7
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d00b      	beq.n	8003d72 <xPortStartScheduler+0xbe>
        __asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	60bb      	str	r3, [r7, #8]
    }
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	e7fd      	b.n	8003d6e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d72:	4b1e      	ldr	r3, [pc, #120]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	021b      	lsls	r3, r3, #8
 8003d78:	4a1c      	ldr	r2, [pc, #112]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d7a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d84:	4a19      	ldr	r2, [pc, #100]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d86:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003d90:	4b17      	ldr	r3, [pc, #92]	@ (8003df0 <xPortStartScheduler+0x13c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a16      	ldr	r2, [pc, #88]	@ (8003df0 <xPortStartScheduler+0x13c>)
 8003d96:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d9a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003d9c:	4b14      	ldr	r3, [pc, #80]	@ (8003df0 <xPortStartScheduler+0x13c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a13      	ldr	r2, [pc, #76]	@ (8003df0 <xPortStartScheduler+0x13c>)
 8003da2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003da6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003da8:	f000 f968 	bl	800407c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <xPortStartScheduler+0x140>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003db2:	f000 f987 	bl	80040c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003db6:	4b10      	ldr	r3, [pc, #64]	@ (8003df8 <xPortStartScheduler+0x144>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a0f      	ldr	r2, [pc, #60]	@ (8003df8 <xPortStartScheduler+0x144>)
 8003dbc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003dc0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003dc2:	f7ff ff61 	bl	8003c88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003dc6:	f7ff f8cd 	bl	8002f64 <vTaskSwitchContext>
    prvTaskExitError();
 8003dca:	f7ff ff19 	bl	8003c00 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	e000ed00 	.word	0xe000ed00
 8003ddc:	410fc271 	.word	0x410fc271
 8003de0:	410fc270 	.word	0x410fc270
 8003de4:	e000e400 	.word	0xe000e400
 8003de8:	200001fc 	.word	0x200001fc
 8003dec:	20000200 	.word	0x20000200
 8003df0:	e000ed20 	.word	0xe000ed20
 8003df4:	20000010 	.word	0x20000010
 8003df8:	e000ef34 	.word	0xe000ef34

08003dfc <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e02:	4b38      	ldr	r3, [pc, #224]	@ (8003ee4 <vInitPrioGroupValue+0xe8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a38      	ldr	r2, [pc, #224]	@ (8003ee8 <vInitPrioGroupValue+0xec>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d10b      	bne.n	8003e24 <vInitPrioGroupValue+0x28>
        __asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	613b      	str	r3, [r7, #16]
    }
 8003e1e:	bf00      	nop
 8003e20:	bf00      	nop
 8003e22:	e7fd      	b.n	8003e20 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e24:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee4 <vInitPrioGroupValue+0xe8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a30      	ldr	r2, [pc, #192]	@ (8003eec <vInitPrioGroupValue+0xf0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10b      	bne.n	8003e46 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	60fb      	str	r3, [r7, #12]
    }
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	e7fd      	b.n	8003e42 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e46:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef0 <vInitPrioGroupValue+0xf4>)
 8003e48:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	22ff      	movs	r2, #255	@ 0xff
 8003e56:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	4b22      	ldr	r3, [pc, #136]	@ (8003ef4 <vInitPrioGroupValue+0xf8>)
 8003e6c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ef8 <vInitPrioGroupValue+0xfc>)
 8003e70:	2207      	movs	r2, #7
 8003e72:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e74:	e009      	b.n	8003e8a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003e76:	4b20      	ldr	r3, [pc, #128]	@ (8003ef8 <vInitPrioGroupValue+0xfc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef8 <vInitPrioGroupValue+0xfc>)
 8003e7e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e92:	2b80      	cmp	r3, #128	@ 0x80
 8003e94:	d0ef      	beq.n	8003e76 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e96:	4b18      	ldr	r3, [pc, #96]	@ (8003ef8 <vInitPrioGroupValue+0xfc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f1c3 0307 	rsb	r3, r3, #7
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d00b      	beq.n	8003eba <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	60bb      	str	r3, [r7, #8]
    }
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	e7fd      	b.n	8003eb6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003eba:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef8 <vInitPrioGroupValue+0xfc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ef8 <vInitPrioGroupValue+0xfc>)
 8003ec2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <vInitPrioGroupValue+0xfc>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <vInitPrioGroupValue+0xfc>)
 8003ece:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003ed8:	bf00      	nop
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00
 8003ee8:	410fc271 	.word	0x410fc271
 8003eec:	410fc270 	.word	0x410fc270
 8003ef0:	e000e400 	.word	0xe000e400
 8003ef4:	200001fc 	.word	0x200001fc
 8003ef8:	20000200 	.word	0x20000200

08003efc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
        __asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	607b      	str	r3, [r7, #4]
    }
 8003f14:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003f16:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <vPortEnterCritical+0x5c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8003f58 <vPortEnterCritical+0x5c>)
 8003f1e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003f20:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <vPortEnterCritical+0x5c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d110      	bne.n	8003f4a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f28:	4b0c      	ldr	r3, [pc, #48]	@ (8003f5c <vPortEnterCritical+0x60>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <vPortEnterCritical+0x4e>
        __asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	603b      	str	r3, [r7, #0]
    }
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	e7fd      	b.n	8003f46 <vPortEnterCritical+0x4a>
    }
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000010 	.word	0x20000010
 8003f5c:	e000ed04 	.word	0xe000ed04

08003f60 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003f66:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <vPortExitCritical+0x50>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10b      	bne.n	8003f86 <vPortExitCritical+0x26>
        __asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	607b      	str	r3, [r7, #4]
    }
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	e7fd      	b.n	8003f82 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003f86:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <vPortExitCritical+0x50>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	4a08      	ldr	r2, [pc, #32]	@ (8003fb0 <vPortExitCritical+0x50>)
 8003f8e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003f90:	4b07      	ldr	r3, [pc, #28]	@ (8003fb0 <vPortExitCritical+0x50>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <vPortExitCritical+0x44>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003fa2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	20000010 	.word	0x20000010
	...

08003fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003fc0:	f3ef 8009 	mrs	r0, PSP
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <pxCurrentTCBConst>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	f01e 0f10 	tst.w	lr, #16
 8003fd0:	bf08      	it	eq
 8003fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fda:	6010      	str	r0, [r2, #0]
 8003fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003fe4:	f380 8811 	msr	BASEPRI, r0
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f7fe ffb8 	bl	8002f64 <vTaskSwitchContext>
 8003ff4:	f04f 0000 	mov.w	r0, #0
 8003ff8:	f380 8811 	msr	BASEPRI, r0
 8003ffc:	bc09      	pop	{r0, r3}
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	6808      	ldr	r0, [r1, #0]
 8004002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004006:	f01e 0f10 	tst.w	lr, #16
 800400a:	bf08      	it	eq
 800400c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004010:	f380 8809 	msr	PSP, r0
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	f3af 8000 	nop.w

08004020 <pxCurrentTCBConst>:
 8004020:	200000bc 	.word	0x200000bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop

08004028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
        __asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	607b      	str	r3, [r7, #4]
    }
 8004040:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004042:	f001 fffd 	bl	8006040 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004046:	f7fe fe71 	bl	8002d2c <xTaskIncrementTick>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d006      	beq.n	800405e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004050:	f002 f854 	bl	80060fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004054:	4b08      	ldr	r3, [pc, #32]	@ (8004078 <SysTick_Handler+0x50>)
 8004056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	e001      	b.n	8004062 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800405e:	f002 f831 	bl	80060c4 <SEGGER_SYSVIEW_RecordExitISR>
 8004062:	2300      	movs	r3, #0
 8004064:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f383 8811 	msr	BASEPRI, r3
    }
 800406c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	e000ed04 	.word	0xe000ed04

0800407c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004080:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <vPortSetupTimerInterrupt+0x34>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004086:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <vPortSetupTimerInterrupt+0x38>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800408c:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <vPortSetupTimerInterrupt+0x3c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a0a      	ldr	r2, [pc, #40]	@ (80040bc <vPortSetupTimerInterrupt+0x40>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	4a09      	ldr	r2, [pc, #36]	@ (80040c0 <vPortSetupTimerInterrupt+0x44>)
 800409a:	3b01      	subs	r3, #1
 800409c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800409e:	4b04      	ldr	r3, [pc, #16]	@ (80040b0 <vPortSetupTimerInterrupt+0x34>)
 80040a0:	2207      	movs	r2, #7
 80040a2:	601a      	str	r2, [r3, #0]
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000e010 	.word	0xe000e010
 80040b4:	e000e018 	.word	0xe000e018
 80040b8:	20000000 	.word	0x20000000
 80040bc:	10624dd3 	.word	0x10624dd3
 80040c0:	e000e014 	.word	0xe000e014

080040c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80040c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80040d4 <vPortEnableVFP+0x10>
 80040c8:	6801      	ldr	r1, [r0, #0]
 80040ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80040ce:	6001      	str	r1, [r0, #0]
 80040d0:	4770      	bx	lr
 80040d2:	0000      	.short	0x0000
 80040d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop

080040dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80040e2:	f3ef 8305 	mrs	r3, IPSR
 80040e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	d915      	bls.n	800411a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80040ee:	4a18      	ldr	r2, [pc, #96]	@ (8004150 <vPortValidateInterruptPriority+0x74>)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80040f8:	4b16      	ldr	r3, [pc, #88]	@ (8004154 <vPortValidateInterruptPriority+0x78>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	7afa      	ldrb	r2, [r7, #11]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d20b      	bcs.n	800411a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	607b      	str	r3, [r7, #4]
    }
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	e7fd      	b.n	8004116 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800411a:	4b0f      	ldr	r3, [pc, #60]	@ (8004158 <vPortValidateInterruptPriority+0x7c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004122:	4b0e      	ldr	r3, [pc, #56]	@ (800415c <vPortValidateInterruptPriority+0x80>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d90b      	bls.n	8004142 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	603b      	str	r3, [r7, #0]
    }
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	e7fd      	b.n	800413e <vPortValidateInterruptPriority+0x62>
    }
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000e3f0 	.word	0xe000e3f0
 8004154:	200001fc 	.word	0x200001fc
 8004158:	e000ed0c 	.word	0xe000ed0c
 800415c:	20000200 	.word	0x20000200

08004160 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	@ 0x28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800416c:	f7fe fcae 	bl	8002acc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004170:	4b54      	ldr	r3, [pc, #336]	@ (80042c4 <pvPortMalloc+0x164>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004178:	f000 f90c 	bl	8004394 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d012      	beq.n	80041a8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004182:	2208      	movs	r2, #8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	3308      	adds	r3, #8
 800418e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	43db      	mvns	r3, r3
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	d804      	bhi.n	80041a4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	4413      	add	r3, r2
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	e001      	b.n	80041a8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	db71      	blt.n	8004292 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d06e      	beq.n	8004292 <pvPortMalloc+0x132>
 80041b4:	4b44      	ldr	r3, [pc, #272]	@ (80042c8 <pvPortMalloc+0x168>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d869      	bhi.n	8004292 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80041be:	4b43      	ldr	r3, [pc, #268]	@ (80042cc <pvPortMalloc+0x16c>)
 80041c0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80041c2:	4b42      	ldr	r3, [pc, #264]	@ (80042cc <pvPortMalloc+0x16c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041c8:	e004      	b.n	80041d4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d903      	bls.n	80041e6 <pvPortMalloc+0x86>
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f1      	bne.n	80041ca <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80041e6:	4b37      	ldr	r3, [pc, #220]	@ (80042c4 <pvPortMalloc+0x164>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d050      	beq.n	8004292 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2208      	movs	r2, #8
 80041f6:	4413      	add	r3, r2
 80041f8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	1ad2      	subs	r2, r2, r3
 800420a:	2308      	movs	r3, #8
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	429a      	cmp	r2, r3
 8004210:	d920      	bls.n	8004254 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4413      	add	r3, r2
 8004218:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <pvPortMalloc+0xdc>
        __asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	613b      	str	r3, [r7, #16]
    }
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	e7fd      	b.n	8004238 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	1ad2      	subs	r2, r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800424e:	6978      	ldr	r0, [r7, #20]
 8004250:	f000 f8fc 	bl	800444c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004254:	4b1c      	ldr	r3, [pc, #112]	@ (80042c8 <pvPortMalloc+0x168>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	4a1a      	ldr	r2, [pc, #104]	@ (80042c8 <pvPortMalloc+0x168>)
 8004260:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004262:	4b19      	ldr	r3, [pc, #100]	@ (80042c8 <pvPortMalloc+0x168>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b1a      	ldr	r3, [pc, #104]	@ (80042d0 <pvPortMalloc+0x170>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d203      	bcs.n	8004276 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800426e:	4b16      	ldr	r3, [pc, #88]	@ (80042c8 <pvPortMalloc+0x168>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a17      	ldr	r2, [pc, #92]	@ (80042d0 <pvPortMalloc+0x170>)
 8004274:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004280:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004288:	4b12      	ldr	r3, [pc, #72]	@ (80042d4 <pvPortMalloc+0x174>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	4a11      	ldr	r2, [pc, #68]	@ (80042d4 <pvPortMalloc+0x174>)
 8004290:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004292:	f7fe fc29 	bl	8002ae8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00b      	beq.n	80042b8 <pvPortMalloc+0x158>
        __asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60fb      	str	r3, [r7, #12]
    }
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <pvPortMalloc+0x154>
    return pvReturn;
 80042b8:	69fb      	ldr	r3, [r7, #28]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3728      	adds	r7, #40	@ 0x28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20012e0c 	.word	0x20012e0c
 80042c8:	20012e10 	.word	0x20012e10
 80042cc:	20012e04 	.word	0x20012e04
 80042d0:	20012e14 	.word	0x20012e14
 80042d4:	20012e18 	.word	0x20012e18

080042d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d04b      	beq.n	8004382 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80042ea:	2308      	movs	r3, #8
 80042ec:	425b      	negs	r3, r3
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4413      	add	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	db0b      	blt.n	8004318 <vPortFree+0x40>
        __asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	60fb      	str	r3, [r7, #12]
    }
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00b      	beq.n	8004338 <vPortFree+0x60>
        __asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	60bb      	str	r3, [r7, #8]
    }
 8004332:	bf00      	nop
 8004334:	bf00      	nop
 8004336:	e7fd      	b.n	8004334 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	0fdb      	lsrs	r3, r3, #31
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01c      	beq.n	8004382 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d118      	bne.n	8004382 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800435c:	f7fe fbb6 	bl	8002acc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	4b09      	ldr	r3, [pc, #36]	@ (800438c <vPortFree+0xb4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4413      	add	r3, r2
 800436a:	4a08      	ldr	r2, [pc, #32]	@ (800438c <vPortFree+0xb4>)
 800436c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800436e:	6938      	ldr	r0, [r7, #16]
 8004370:	f000 f86c 	bl	800444c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004374:	4b06      	ldr	r3, [pc, #24]	@ (8004390 <vPortFree+0xb8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3301      	adds	r3, #1
 800437a:	4a05      	ldr	r2, [pc, #20]	@ (8004390 <vPortFree+0xb8>)
 800437c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800437e:	f7fe fbb3 	bl	8002ae8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004382:	bf00      	nop
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20012e10 	.word	0x20012e10
 8004390:	20012e1c 	.word	0x20012e1c

08004394 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800439a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800439e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80043a0:	4b25      	ldr	r3, [pc, #148]	@ (8004438 <prvHeapInit+0xa4>)
 80043a2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3307      	adds	r3, #7
 80043b2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0307 	bic.w	r3, r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004438 <prvHeapInit+0xa4>)
 80043c4:	4413      	add	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043cc:	4a1b      	ldr	r2, [pc, #108]	@ (800443c <prvHeapInit+0xa8>)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80043d2:	4b1a      	ldr	r3, [pc, #104]	@ (800443c <prvHeapInit+0xa8>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	4413      	add	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80043e0:	2208      	movs	r2, #8
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0307 	bic.w	r3, r3, #7
 80043ee:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4a13      	ldr	r2, [pc, #76]	@ (8004440 <prvHeapInit+0xac>)
 80043f4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80043f6:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <prvHeapInit+0xac>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80043fe:	4b10      	ldr	r3, [pc, #64]	@ (8004440 <prvHeapInit+0xac>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	1ad2      	subs	r2, r2, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004414:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <prvHeapInit+0xac>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4a08      	ldr	r2, [pc, #32]	@ (8004444 <prvHeapInit+0xb0>)
 8004422:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4a07      	ldr	r2, [pc, #28]	@ (8004448 <prvHeapInit+0xb4>)
 800442a:	6013      	str	r3, [r2, #0]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	20000204 	.word	0x20000204
 800443c:	20012e04 	.word	0x20012e04
 8004440:	20012e0c 	.word	0x20012e0c
 8004444:	20012e14 	.word	0x20012e14
 8004448:	20012e10 	.word	0x20012e10

0800444c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004454:	4b28      	ldr	r3, [pc, #160]	@ (80044f8 <prvInsertBlockIntoFreeList+0xac>)
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e002      	b.n	8004460 <prvInsertBlockIntoFreeList+0x14>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	429a      	cmp	r2, r3
 8004468:	d8f7      	bhi.n	800445a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	4413      	add	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	429a      	cmp	r2, r3
 800447a:	d108      	bne.n	800448e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	441a      	add	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	441a      	add	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d118      	bne.n	80044d4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b15      	ldr	r3, [pc, #84]	@ (80044fc <prvInsertBlockIntoFreeList+0xb0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d00d      	beq.n	80044ca <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	441a      	add	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e008      	b.n	80044dc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044ca:	4b0c      	ldr	r3, [pc, #48]	@ (80044fc <prvInsertBlockIntoFreeList+0xb0>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e003      	b.n	80044dc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d002      	beq.n	80044ea <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80044ea:	bf00      	nop
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20012e04 	.word	0x20012e04
 80044fc:	20012e0c 	.word	0x20012e0c

08004500 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004504:	4803      	ldr	r0, [pc, #12]	@ (8004514 <_cbSendSystemDesc+0x14>)
 8004506:	f001 fd45 	bl	8005f94 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800450a:	4803      	ldr	r0, [pc, #12]	@ (8004518 <_cbSendSystemDesc+0x18>)
 800450c:	f001 fd42 	bl	8005f94 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004510:	bf00      	nop
 8004512:	bd80      	pop	{r7, pc}
 8004514:	080066e0 	.word	0x080066e0
 8004518:	08006724 	.word	0x08006724

0800451c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004520:	4b06      	ldr	r3, [pc, #24]	@ (800453c <SEGGER_SYSVIEW_Conf+0x20>)
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <SEGGER_SYSVIEW_Conf+0x20>)
 8004526:	6819      	ldr	r1, [r3, #0]
 8004528:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <SEGGER_SYSVIEW_Conf+0x24>)
 800452a:	4a06      	ldr	r2, [pc, #24]	@ (8004544 <SEGGER_SYSVIEW_Conf+0x28>)
 800452c:	f001 f8b0 	bl	8005690 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004530:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004534:	f001 f8f0 	bl	8005718 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004538:	bf00      	nop
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000000 	.word	0x20000000
 8004540:	08004501 	.word	0x08004501
 8004544:	080067c4 	.word	0x080067c4

08004548 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800454a:	b085      	sub	sp, #20
 800454c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800454e:	2300      	movs	r3, #0
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	e033      	b.n	80045bc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004554:	491e      	ldr	r1, [pc, #120]	@ (80045d0 <_cbSendTaskList+0x88>)
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	491a      	ldr	r1, [pc, #104]	@ (80045d0 <_cbSendTaskList+0x88>)
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	3304      	adds	r3, #4
 8004574:	6819      	ldr	r1, [r3, #0]
 8004576:	4c16      	ldr	r4, [pc, #88]	@ (80045d0 <_cbSendTaskList+0x88>)
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4423      	add	r3, r4
 8004584:	3308      	adds	r3, #8
 8004586:	681c      	ldr	r4, [r3, #0]
 8004588:	4d11      	ldr	r5, [pc, #68]	@ (80045d0 <_cbSendTaskList+0x88>)
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	442b      	add	r3, r5
 8004596:	330c      	adds	r3, #12
 8004598:	681d      	ldr	r5, [r3, #0]
 800459a:	4e0d      	ldr	r6, [pc, #52]	@ (80045d0 <_cbSendTaskList+0x88>)
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4433      	add	r3, r6
 80045a8:	3310      	adds	r3, #16
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	462b      	mov	r3, r5
 80045b0:	4622      	mov	r2, r4
 80045b2:	f000 f8bd 	bl	8004730 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3301      	adds	r3, #1
 80045ba:	607b      	str	r3, [r7, #4]
 80045bc:	4b05      	ldr	r3, [pc, #20]	@ (80045d4 <_cbSendTaskList+0x8c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d3c6      	bcc.n	8004554 <_cbSendTaskList+0xc>
  }
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d0:	20012e20 	.word	0x20012e20
 80045d4:	20012ec0 	.word	0x20012ec0

080045d8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80045d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80045e0:	f7fe fb92 	bl	8002d08 <xTaskGetTickCountFromISR>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2200      	movs	r2, #0
 80045e8:	469a      	mov	sl, r3
 80045ea:	4693      	mov	fp, r2
 80045ec:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80045f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	f04f 0a00 	mov.w	sl, #0
 80045fc:	f04f 0b00 	mov.w	fp, #0
 8004600:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004604:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004608:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800460c:	4652      	mov	r2, sl
 800460e:	465b      	mov	r3, fp
 8004610:	1a14      	subs	r4, r2, r0
 8004612:	eb63 0501 	sbc.w	r5, r3, r1
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	00ab      	lsls	r3, r5, #2
 8004620:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004624:	00a2      	lsls	r2, r4, #2
 8004626:	4614      	mov	r4, r2
 8004628:	461d      	mov	r5, r3
 800462a:	eb14 0800 	adds.w	r8, r4, r0
 800462e:	eb45 0901 	adc.w	r9, r5, r1
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800463e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004646:	4690      	mov	r8, r2
 8004648:	4699      	mov	r9, r3
 800464a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800464e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004652:	4610      	mov	r0, r2
 8004654:	4619      	mov	r1, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004660 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800466e:	2205      	movs	r2, #5
 8004670:	492b      	ldr	r1, [pc, #172]	@ (8004720 <SYSVIEW_AddTask+0xc0>)
 8004672:	68b8      	ldr	r0, [r7, #8]
 8004674:	f001 ff9c 	bl	80065b0 <memcmp>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d04b      	beq.n	8004716 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800467e:	4b29      	ldr	r3, [pc, #164]	@ (8004724 <SYSVIEW_AddTask+0xc4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b07      	cmp	r3, #7
 8004684:	d903      	bls.n	800468e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004686:	4828      	ldr	r0, [pc, #160]	@ (8004728 <SYSVIEW_AddTask+0xc8>)
 8004688:	f001 ff36 	bl	80064f8 <SEGGER_SYSVIEW_Warn>
    return;
 800468c:	e044      	b.n	8004718 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800468e:	4b25      	ldr	r3, [pc, #148]	@ (8004724 <SYSVIEW_AddTask+0xc4>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4926      	ldr	r1, [pc, #152]	@ (800472c <SYSVIEW_AddTask+0xcc>)
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80046a2:	4b20      	ldr	r3, [pc, #128]	@ (8004724 <SYSVIEW_AddTask+0xc4>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4921      	ldr	r1, [pc, #132]	@ (800472c <SYSVIEW_AddTask+0xcc>)
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	3304      	adds	r3, #4
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80046b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004724 <SYSVIEW_AddTask+0xc4>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	491b      	ldr	r1, [pc, #108]	@ (800472c <SYSVIEW_AddTask+0xcc>)
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	3308      	adds	r3, #8
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80046ce:	4b15      	ldr	r3, [pc, #84]	@ (8004724 <SYSVIEW_AddTask+0xc4>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4916      	ldr	r1, [pc, #88]	@ (800472c <SYSVIEW_AddTask+0xcc>)
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	330c      	adds	r3, #12
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80046e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004724 <SYSVIEW_AddTask+0xc4>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4910      	ldr	r1, [pc, #64]	@ (800472c <SYSVIEW_AddTask+0xcc>)
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	3310      	adds	r3, #16
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80046fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004724 <SYSVIEW_AddTask+0xc4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3301      	adds	r3, #1
 8004700:	4a08      	ldr	r2, [pc, #32]	@ (8004724 <SYSVIEW_AddTask+0xc4>)
 8004702:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f80e 	bl	8004730 <SYSVIEW_SendTaskInfo>
 8004714:	e000      	b.n	8004718 <SYSVIEW_AddTask+0xb8>
    return;
 8004716:	bf00      	nop

}
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	08006734 	.word	0x08006734
 8004724:	20012ec0 	.word	0x20012ec0
 8004728:	0800673c 	.word	0x0800673c
 800472c:	20012e20 	.word	0x20012e20

08004730 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	@ 0x28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800473e:	f107 0314 	add.w	r3, r7, #20
 8004742:	2214      	movs	r2, #20
 8004744:	2100      	movs	r1, #0
 8004746:	4618      	mov	r0, r3
 8004748:	f001 ff42 	bl	80065d0 <memset>
  TaskInfo.TaskID     = TaskID;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800475c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004760:	f107 0314 	add.w	r3, r7, #20
 8004764:	4618      	mov	r0, r3
 8004766:	f001 fb1d 	bl	8005da4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800476a:	bf00      	nop
 800476c:	3728      	adds	r7, #40	@ 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800477a:	4b24      	ldr	r3, [pc, #144]	@ (800480c <_DoInit+0x98>)
 800477c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2203      	movs	r2, #3
 8004782:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2203      	movs	r2, #3
 8004788:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a20      	ldr	r2, [pc, #128]	@ (8004810 <_DoInit+0x9c>)
 800478e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a20      	ldr	r2, [pc, #128]	@ (8004814 <_DoInit+0xa0>)
 8004794:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800479c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a17      	ldr	r2, [pc, #92]	@ (8004810 <_DoInit+0x9c>)
 80047b4:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a17      	ldr	r2, [pc, #92]	@ (8004818 <_DoInit+0xa4>)
 80047ba:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2210      	movs	r2, #16
 80047c0:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3307      	adds	r3, #7
 80047d8:	4a10      	ldr	r2, [pc, #64]	@ (800481c <_DoInit+0xa8>)
 80047da:	6810      	ldr	r0, [r2, #0]
 80047dc:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80047de:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004820 <_DoInit+0xac>)
 80047e6:	6810      	ldr	r0, [r2, #0]
 80047e8:	6018      	str	r0, [r3, #0]
 80047ea:	8891      	ldrh	r1, [r2, #4]
 80047ec:	7992      	ldrb	r2, [r2, #6]
 80047ee:	8099      	strh	r1, [r3, #4]
 80047f0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80047f2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80047fc:	f3bf 8f5f 	dmb	sy
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	20012ec4 	.word	0x20012ec4
 8004810:	0800678c 	.word	0x0800678c
 8004814:	20012f6c 	.word	0x20012f6c
 8004818:	2001336c 	.word	0x2001336c
 800481c:	08006798 	.word	0x08006798
 8004820:	0800679c 	.word	0x0800679c

08004824 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b08c      	sub	sp, #48	@ 0x30
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004830:	4b3e      	ldr	r3, [pc, #248]	@ (800492c <SEGGER_RTT_ReadNoLock+0x108>)
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <SEGGER_RTT_ReadNoLock+0x1e>
 800483e:	f7ff ff99 	bl	8004774 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4613      	mov	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4413      	add	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	3360      	adds	r3, #96	@ 0x60
 800484e:	4a37      	ldr	r2, [pc, #220]	@ (800492c <SEGGER_RTT_ReadNoLock+0x108>)
 8004850:	4413      	add	r3, r2
 8004852:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	429a      	cmp	r2, r3
 800486e:	d92b      	bls.n	80048c8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4293      	cmp	r3, r2
 8004880:	bf28      	it	cs
 8004882:	4613      	movcs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488c:	4413      	add	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	6939      	ldr	r1, [r7, #16]
 8004894:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004896:	f001 fec7 	bl	8006628 <memcpy>
    NumBytesRead += NumBytesRem;
 800489a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	4413      	add	r3, r2
 80048a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80048a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	4413      	add	r3, r2
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80048b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	4413      	add	r3, r2
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d101      	bne.n	80048c8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80048c4:	2300      	movs	r3, #0
 80048c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4293      	cmp	r3, r2
 80048d6:	bf28      	it	cs
 80048d8:	4613      	movcs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d019      	beq.n	8004916 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e8:	4413      	add	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	6939      	ldr	r1, [r7, #16]
 80048f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048f2:	f001 fe99 	bl	8006628 <memcpy>
    NumBytesRead += NumBytesRem;
 80048f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4413      	add	r3, r2
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80048fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	4413      	add	r3, r2
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800490e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	4413      	add	r3, r2
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004920:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004924:	4618      	mov	r0, r3
 8004926:	3730      	adds	r7, #48	@ 0x30
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20012ec4 	.word	0x20012ec4

08004930 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800493e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a34 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <SEGGER_RTT_AllocUpBuffer+0x20>
 800494c:	f7ff ff12 	bl	8004774 <_DoInit>
  SEGGER_RTT_LOCK();
 8004950:	f3ef 8311 	mrs	r3, BASEPRI
 8004954:	f04f 0120 	mov.w	r1, #32
 8004958:	f381 8811 	msr	BASEPRI, r1
 800495c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800495e:	4b35      	ldr	r3, [pc, #212]	@ (8004a34 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004960:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004966:	6939      	ldr	r1, [r7, #16]
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	4613      	mov	r3, r2
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	4413      	add	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	440b      	add	r3, r1
 8004976:	3304      	adds	r3, #4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3301      	adds	r3, #1
 8004982:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	429a      	cmp	r2, r3
 800498c:	dbeb      	blt.n	8004966 <SEGGER_RTT_AllocUpBuffer+0x36>
 800498e:	e000      	b.n	8004992 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004990:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	429a      	cmp	r2, r3
 800499a:	da3f      	bge.n	8004a1c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800499c:	6939      	ldr	r1, [r7, #16]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	4613      	mov	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4413      	add	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	440b      	add	r3, r1
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80049b0:	6939      	ldr	r1, [r7, #16]
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	4613      	mov	r3, r2
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	4413      	add	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	440b      	add	r3, r1
 80049c0:	3304      	adds	r3, #4
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80049c6:	6939      	ldr	r1, [r7, #16]
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	4613      	mov	r3, r2
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	4413      	add	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	440b      	add	r3, r1
 80049d4:	3320      	adds	r3, #32
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80049da:	6939      	ldr	r1, [r7, #16]
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	4613      	mov	r3, r2
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	4413      	add	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	440b      	add	r3, r1
 80049e8:	3328      	adds	r3, #40	@ 0x28
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80049ee:	6939      	ldr	r1, [r7, #16]
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	4613      	mov	r3, r2
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4413      	add	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	440b      	add	r3, r1
 80049fc:	3324      	adds	r3, #36	@ 0x24
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004a02:	6939      	ldr	r1, [r7, #16]
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	4613      	mov	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	440b      	add	r3, r1
 8004a10:	332c      	adds	r3, #44	@ 0x2c
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004a16:	f3bf 8f5f 	dmb	sy
 8004a1a:	e002      	b.n	8004a22 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a20:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004a28:	69fb      	ldr	r3, [r7, #28]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20012ec4 	.word	0x20012ec4

08004a38 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004a46:	4b33      	ldr	r3, [pc, #204]	@ (8004b14 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004a54:	f7ff fe8e 	bl	8004774 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a58:	4b2e      	ldr	r3, [pc, #184]	@ (8004b14 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004a5a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	461a      	mov	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d24d      	bcs.n	8004b04 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004a68:	f3ef 8311 	mrs	r3, BASEPRI
 8004a6c:	f04f 0120 	mov.w	r1, #32
 8004a70:	f381 8811 	msr	BASEPRI, r1
 8004a74:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d031      	beq.n	8004ae0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004a7c:	6979      	ldr	r1, [r7, #20]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4613      	mov	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	4413      	add	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	440b      	add	r3, r1
 8004a8a:	3360      	adds	r3, #96	@ 0x60
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004a90:	6979      	ldr	r1, [r7, #20]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4613      	mov	r3, r2
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4413      	add	r3, r2
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	440b      	add	r3, r1
 8004a9e:	3364      	adds	r3, #100	@ 0x64
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004aa4:	6979      	ldr	r1, [r7, #20]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4413      	add	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	440b      	add	r3, r1
 8004ab2:	3368      	adds	r3, #104	@ 0x68
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004ab8:	6979      	ldr	r1, [r7, #20]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4613      	mov	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4413      	add	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	440b      	add	r3, r1
 8004ac6:	3370      	adds	r3, #112	@ 0x70
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004acc:	6979      	ldr	r1, [r7, #20]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4413      	add	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	440b      	add	r3, r1
 8004ada:	336c      	adds	r3, #108	@ 0x6c
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004ae0:	6979      	ldr	r1, [r7, #20]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4413      	add	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	440b      	add	r3, r1
 8004aee:	3374      	adds	r3, #116	@ 0x74
 8004af0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004af2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004af4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	e002      	b.n	8004b0a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004b04:	f04f 33ff 	mov.w	r3, #4294967295
 8004b08:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3720      	adds	r7, #32
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20012ec4 	.word	0x20012ec4

08004b18 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004b28:	e002      	b.n	8004b30 <_EncodeStr+0x18>
    Len++;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4413      	add	r3, r2
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f6      	bne.n	8004b2a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d901      	bls.n	8004b48 <_EncodeStr+0x30>
    Len = Limit;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2bfe      	cmp	r3, #254	@ 0xfe
 8004b4c:	d806      	bhi.n	8004b5c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	60fa      	str	r2, [r7, #12]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	e011      	b.n	8004b80 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	60fa      	str	r2, [r7, #12]
 8004b62:	22ff      	movs	r2, #255	@ 0xff
 8004b64:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	60fa      	str	r2, [r7, #12]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	0a19      	lsrs	r1, r3, #8
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	60fa      	str	r2, [r7, #12]
 8004b7c:	b2ca      	uxtb	r2, r1
 8004b7e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004b84:	e00a      	b.n	8004b9c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	1c53      	adds	r3, r2, #1
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1c59      	adds	r1, r3, #1
 8004b90:	60f9      	str	r1, [r7, #12]
 8004b92:	7812      	ldrb	r2, [r2, #0]
 8004b94:	701a      	strb	r2, [r3, #0]
    n++;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d3f0      	bcc.n	8004b86 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3304      	adds	r3, #4
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004bd2:	4b35      	ldr	r3, [pc, #212]	@ (8004ca8 <_HandleIncomingPacket+0xdc>)
 8004bd4:	7e1b      	ldrb	r3, [r3, #24]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	1cfb      	adds	r3, r7, #3
 8004bda:	2201      	movs	r2, #1
 8004bdc:	4619      	mov	r1, r3
 8004bde:	f7ff fe21 	bl	8004824 <SEGGER_RTT_ReadNoLock>
 8004be2:	4603      	mov	r3, r0
 8004be4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	dd59      	ble.n	8004ca0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	2b80      	cmp	r3, #128	@ 0x80
 8004bf0:	d032      	beq.n	8004c58 <_HandleIncomingPacket+0x8c>
 8004bf2:	2b80      	cmp	r3, #128	@ 0x80
 8004bf4:	dc42      	bgt.n	8004c7c <_HandleIncomingPacket+0xb0>
 8004bf6:	2b07      	cmp	r3, #7
 8004bf8:	dc16      	bgt.n	8004c28 <_HandleIncomingPacket+0x5c>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	dd3e      	ble.n	8004c7c <_HandleIncomingPacket+0xb0>
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	2b06      	cmp	r3, #6
 8004c02:	d83b      	bhi.n	8004c7c <_HandleIncomingPacket+0xb0>
 8004c04:	a201      	add	r2, pc, #4	@ (adr r2, 8004c0c <_HandleIncomingPacket+0x40>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c2f 	.word	0x08004c2f
 8004c10:	08004c35 	.word	0x08004c35
 8004c14:	08004c3b 	.word	0x08004c3b
 8004c18:	08004c41 	.word	0x08004c41
 8004c1c:	08004c47 	.word	0x08004c47
 8004c20:	08004c4d 	.word	0x08004c4d
 8004c24:	08004c53 	.word	0x08004c53
 8004c28:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c2a:	d034      	beq.n	8004c96 <_HandleIncomingPacket+0xca>
 8004c2c:	e026      	b.n	8004c7c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004c2e:	f000 ff3f 	bl	8005ab0 <SEGGER_SYSVIEW_Start>
      break;
 8004c32:	e035      	b.n	8004ca0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004c34:	f000 fff6 	bl	8005c24 <SEGGER_SYSVIEW_Stop>
      break;
 8004c38:	e032      	b.n	8004ca0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004c3a:	f001 f9cf 	bl	8005fdc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004c3e:	e02f      	b.n	8004ca0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004c40:	f001 f994 	bl	8005f6c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004c44:	e02c      	b.n	8004ca0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004c46:	f001 f813 	bl	8005c70 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004c4a:	e029      	b.n	8004ca0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004c4c:	f001 fc02 	bl	8006454 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004c50:	e026      	b.n	8004ca0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004c52:	f001 fbe1 	bl	8006418 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004c56:	e023      	b.n	8004ca0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c58:	4b13      	ldr	r3, [pc, #76]	@ (8004ca8 <_HandleIncomingPacket+0xdc>)
 8004c5a:	7e1b      	ldrb	r3, [r3, #24]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	1cfb      	adds	r3, r7, #3
 8004c60:	2201      	movs	r2, #1
 8004c62:	4619      	mov	r1, r3
 8004c64:	f7ff fdde 	bl	8004824 <SEGGER_RTT_ReadNoLock>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	dd13      	ble.n	8004c9a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 fb4f 	bl	8006318 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004c7a:	e00e      	b.n	8004c9a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	b25b      	sxtb	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	da0c      	bge.n	8004c9e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c84:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <_HandleIncomingPacket+0xdc>)
 8004c86:	7e1b      	ldrb	r3, [r3, #24]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	1cfb      	adds	r3, r7, #3
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f7ff fdc8 	bl	8004824 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004c94:	e003      	b.n	8004c9e <_HandleIncomingPacket+0xd2>
      break;
 8004c96:	bf00      	nop
 8004c98:	e002      	b.n	8004ca0 <_HandleIncomingPacket+0xd4>
      break;
 8004c9a:	bf00      	nop
 8004c9c:	e000      	b.n	8004ca0 <_HandleIncomingPacket+0xd4>
      break;
 8004c9e:	bf00      	nop
    }
  }
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20014384 	.word	0x20014384

08004cac <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08c      	sub	sp, #48	@ 0x30
 8004cb0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004cb6:	1d3b      	adds	r3, r7, #4
 8004cb8:	3301      	adds	r3, #1
 8004cba:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cc0:	4b31      	ldr	r3, [pc, #196]	@ (8004d88 <_TrySendOverflowPacket+0xdc>)
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cc6:	e00b      	b.n	8004ce0 <_TrySendOverflowPacket+0x34>
 8004cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004cd2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	09db      	lsrs	r3, r3, #7
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ce4:	d8f0      	bhi.n	8004cc8 <_TrySendOverflowPacket+0x1c>
 8004ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004cf6:	4b25      	ldr	r3, [pc, #148]	@ (8004d8c <_TrySendOverflowPacket+0xe0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004cfc:	4b22      	ldr	r3, [pc, #136]	@ (8004d88 <_TrySendOverflowPacket+0xdc>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	623b      	str	r3, [r7, #32]
 8004d0e:	e00b      	b.n	8004d28 <_TrySendOverflowPacket+0x7c>
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	1c59      	adds	r1, r3, #1
 8004d18:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	09db      	lsrs	r3, r3, #7
 8004d26:	623b      	str	r3, [r7, #32]
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d2c:	d8f0      	bhi.n	8004d10 <_TrySendOverflowPacket+0x64>
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d34:	6a3a      	ldr	r2, [r7, #32]
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004d3e:	4b12      	ldr	r3, [pc, #72]	@ (8004d88 <_TrySendOverflowPacket+0xdc>)
 8004d40:	785b      	ldrb	r3, [r3, #1]
 8004d42:	4618      	mov	r0, r3
 8004d44:	1d3b      	adds	r3, r7, #4
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f7fb fa46 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004d54:	4603      	mov	r3, r0
 8004d56:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d88 <_TrySendOverflowPacket+0xdc>)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004d64:	4b08      	ldr	r3, [pc, #32]	@ (8004d88 <_TrySendOverflowPacket+0xdc>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <_TrySendOverflowPacket+0xdc>)
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e004      	b.n	8004d7c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004d72:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <_TrySendOverflowPacket+0xdc>)
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	3301      	adds	r3, #1
 8004d78:	4a03      	ldr	r2, [pc, #12]	@ (8004d88 <_TrySendOverflowPacket+0xdc>)
 8004d7a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004d7c:	693b      	ldr	r3, [r7, #16]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3730      	adds	r7, #48	@ 0x30
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20014384 	.word	0x20014384
 8004d8c:	e0001004 	.word	0xe0001004

08004d90 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	@ 0x28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8004f50 <_SendPacket+0x1c0>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d010      	beq.n	8004dc6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004da4:	4b6a      	ldr	r3, [pc, #424]	@ (8004f50 <_SendPacket+0x1c0>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a3 	beq.w	8004ef4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004dae:	4b68      	ldr	r3, [pc, #416]	@ (8004f50 <_SendPacket+0x1c0>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d109      	bne.n	8004dca <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004db6:	f7ff ff79 	bl	8004cac <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004dba:	4b65      	ldr	r3, [pc, #404]	@ (8004f50 <_SendPacket+0x1c0>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	f040 809a 	bne.w	8004ef8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004dc4:	e001      	b.n	8004dca <_SendPacket+0x3a>
    goto Send;
 8004dc6:	bf00      	nop
 8004dc8:	e000      	b.n	8004dcc <_SendPacket+0x3c>
Send:
 8004dca:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b1f      	cmp	r3, #31
 8004dd0:	d809      	bhi.n	8004de6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8004f50 <_SendPacket+0x1c0>)
 8004dd4:	69da      	ldr	r2, [r3, #28]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 808b 	bne.w	8004efc <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b17      	cmp	r3, #23
 8004dea:	d807      	bhi.n	8004dfc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	e03d      	b.n	8004e78 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e08:	d912      	bls.n	8004e30 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	09da      	lsrs	r2, r3, #7
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	3a01      	subs	r2, #1
 8004e22:	60fa      	str	r2, [r7, #12]
 8004e24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e006      	b.n	8004e3e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e42:	d912      	bls.n	8004e6a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	09da      	lsrs	r2, r3, #7
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	3a01      	subs	r2, #1
 8004e5c:	60fa      	str	r2, [r7, #12]
 8004e5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	e006      	b.n	8004e78 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e78:	4b36      	ldr	r3, [pc, #216]	@ (8004f54 <_SendPacket+0x1c4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e7e:	4b34      	ldr	r3, [pc, #208]	@ (8004f50 <_SendPacket+0x1c0>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	623b      	str	r3, [r7, #32]
 8004e90:	e00b      	b.n	8004eaa <_SendPacket+0x11a>
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	1c59      	adds	r1, r3, #1
 8004e9a:	6279      	str	r1, [r7, #36]	@ 0x24
 8004e9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	09db      	lsrs	r3, r3, #7
 8004ea8:	623b      	str	r3, [r7, #32]
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eae:	d8f0      	bhi.n	8004e92 <_SendPacket+0x102>
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004ec0:	4b23      	ldr	r3, [pc, #140]	@ (8004f50 <_SendPacket+0x1c0>)
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	68f9      	ldr	r1, [r7, #12]
 8004ed0:	f7fb f986 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004ede:	4a1c      	ldr	r2, [pc, #112]	@ (8004f50 <_SendPacket+0x1c0>)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	60d3      	str	r3, [r2, #12]
 8004ee4:	e00b      	b.n	8004efe <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f50 <_SendPacket+0x1c0>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	3301      	adds	r3, #1
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	4b18      	ldr	r3, [pc, #96]	@ (8004f50 <_SendPacket+0x1c0>)
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	e004      	b.n	8004efe <_SendPacket+0x16e>
    goto SendDone;
 8004ef4:	bf00      	nop
 8004ef6:	e002      	b.n	8004efe <_SendPacket+0x16e>
      goto SendDone;
 8004ef8:	bf00      	nop
 8004efa:	e000      	b.n	8004efe <_SendPacket+0x16e>
      goto SendDone;
 8004efc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004efe:	4b14      	ldr	r3, [pc, #80]	@ (8004f50 <_SendPacket+0x1c0>)
 8004f00:	7e1b      	ldrb	r3, [r3, #24]
 8004f02:	4619      	mov	r1, r3
 8004f04:	4a14      	ldr	r2, [pc, #80]	@ (8004f58 <_SendPacket+0x1c8>)
 8004f06:	460b      	mov	r3, r1
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	440b      	add	r3, r1
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4413      	add	r3, r2
 8004f10:	336c      	adds	r3, #108	@ 0x6c
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	4b0e      	ldr	r3, [pc, #56]	@ (8004f50 <_SendPacket+0x1c0>)
 8004f16:	7e1b      	ldrb	r3, [r3, #24]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	490f      	ldr	r1, [pc, #60]	@ (8004f58 <_SendPacket+0x1c8>)
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4403      	add	r3, r0
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	440b      	add	r3, r1
 8004f26:	3370      	adds	r3, #112	@ 0x70
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d00b      	beq.n	8004f46 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004f2e:	4b08      	ldr	r3, [pc, #32]	@ (8004f50 <_SendPacket+0x1c0>)
 8004f30:	789b      	ldrb	r3, [r3, #2]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d107      	bne.n	8004f46 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004f36:	4b06      	ldr	r3, [pc, #24]	@ (8004f50 <_SendPacket+0x1c0>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004f3c:	f7ff fe46 	bl	8004bcc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004f40:	4b03      	ldr	r3, [pc, #12]	@ (8004f50 <_SendPacket+0x1c0>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004f46:	bf00      	nop
 8004f48:	3728      	adds	r7, #40	@ 0x28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20014384 	.word	0x20014384
 8004f54:	e0001004 	.word	0xe0001004
 8004f58:	20012ec4 	.word	0x20012ec4

08004f5c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	@ 0x28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	3301      	adds	r3, #1
 8004f72:	2b80      	cmp	r3, #128	@ 0x80
 8004f74:	d80a      	bhi.n	8004f8c <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	1c59      	adds	r1, r3, #1
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6051      	str	r1, [r2, #4]
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b80      	cmp	r3, #128	@ 0x80
 8004f92:	d15a      	bne.n	800504a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	623b      	str	r3, [r7, #32]
 8004fb4:	e00b      	b.n	8004fce <_StoreChar+0x72>
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	1c59      	adds	r1, r3, #1
 8004fbe:	6279      	str	r1, [r7, #36]	@ 0x24
 8004fc0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	09db      	lsrs	r3, r3, #7
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fd2:	d8f0      	bhi.n	8004fb6 <_StoreChar+0x5a>
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fda:	6a3a      	ldr	r2, [r7, #32]
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	e00b      	b.n	8005006 <_StoreChar+0xaa>
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	1c59      	adds	r1, r3, #1
 8004ff6:	61f9      	str	r1, [r7, #28]
 8004ff8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	09db      	lsrs	r3, r3, #7
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b7f      	cmp	r3, #127	@ 0x7f
 800500a:	d8f0      	bhi.n	8004fee <_StoreChar+0x92>
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	61fa      	str	r2, [r7, #28]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	221a      	movs	r2, #26
 8005022:	6939      	ldr	r1, [r7, #16]
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff feb3 	bl	8004d90 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fdbf 	bl	8004bb2 <_PreparePacket>
 8005034:	4602      	mov	r2, r0
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	611a      	str	r2, [r3, #16]
  }
}
 800504a:	bf00      	nop
 800504c:	3728      	adds	r7, #40	@ 0x28
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b08a      	sub	sp, #40	@ 0x28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005066:	2301      	movs	r3, #1
 8005068:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800506a:	2301      	movs	r3, #1
 800506c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800506e:	e007      	b.n	8005080 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005070:	6a3a      	ldr	r2, [r7, #32]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	623b      	str	r3, [r7, #32]
    Width++;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	3301      	adds	r3, #1
 800507e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005080:	6a3a      	ldr	r2, [r7, #32]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	d2f3      	bcs.n	8005070 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	429a      	cmp	r2, r3
 800508e:	d901      	bls.n	8005094 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d000      	beq.n	80050a0 <_PrintUnsigned+0x4c>
 800509e:	e01f      	b.n	80050e0 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80050a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01c      	beq.n	80050e0 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80050a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <_PrintUnsigned+0x68>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d102      	bne.n	80050bc <_PrintUnsigned+0x68>
        c = '0';
 80050b6:	2330      	movs	r3, #48	@ 0x30
 80050b8:	76fb      	strb	r3, [r7, #27]
 80050ba:	e001      	b.n	80050c0 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80050bc:	2320      	movs	r3, #32
 80050be:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80050c0:	e007      	b.n	80050d2 <_PrintUnsigned+0x7e>
        FieldWidth--;
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	3b01      	subs	r3, #1
 80050c6:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80050c8:	7efb      	ldrb	r3, [r7, #27]
 80050ca:	4619      	mov	r1, r3
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7ff ff45 	bl	8004f5c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <_PrintUnsigned+0x8c>
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	429a      	cmp	r2, r3
 80050de:	d3f0      	bcc.n	80050c2 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d903      	bls.n	80050ee <_PrintUnsigned+0x9a>
      NumDigits--;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	e009      	b.n	8005102 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d200      	bcs.n	8005102 <_PrintUnsigned+0xae>
        break;
 8005100:	e005      	b.n	800510e <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	fb02 f303 	mul.w	r3, r2, r3
 800510a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800510c:	e7e8      	b.n	80050e0 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005112:	fbb2 f3f3 	udiv	r3, r2, r3
 8005116:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800511c:	fb02 f303 	mul.w	r3, r2, r3
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005126:	4a15      	ldr	r2, [pc, #84]	@ (800517c <_PrintUnsigned+0x128>)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	4413      	add	r3, r2
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	4619      	mov	r1, r3
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff ff13 	bl	8004f5c <_StoreChar>
    Digit /= Base;
 8005136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	fbb2 f3f3 	udiv	r3, r2, r3
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e3      	bne.n	800510e <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d011      	beq.n	8005174 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00e      	beq.n	8005174 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005156:	e006      	b.n	8005166 <_PrintUnsigned+0x112>
        FieldWidth--;
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	3b01      	subs	r3, #1
 800515c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800515e:	2120      	movs	r1, #32
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7ff fefb 	bl	8004f5c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <_PrintUnsigned+0x120>
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005170:	429a      	cmp	r2, r3
 8005172:	d3f1      	bcc.n	8005158 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005174:	bf00      	nop
 8005176:	3728      	adds	r7, #40	@ 0x28
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	080067d8 	.word	0x080067d8

08005180 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	bfb8      	it	lt
 8005194:	425b      	neglt	r3, r3
 8005196:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005198:	2301      	movs	r3, #1
 800519a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800519c:	e007      	b.n	80051ae <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80051a6:	613b      	str	r3, [r7, #16]
    Width++;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	3301      	adds	r3, #1
 80051ac:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	daf3      	bge.n	800519e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d901      	bls.n	80051c2 <_PrintInt+0x42>
    Width = NumDigits;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <_PrintInt+0x5e>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	db04      	blt.n	80051d8 <_PrintInt+0x58>
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <_PrintInt+0x5e>
    FieldWidth--;
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	3b01      	subs	r3, #1
 80051dc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <_PrintInt+0x6e>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d016      	beq.n	800521c <_PrintInt+0x9c>
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d111      	bne.n	800521c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00e      	beq.n	800521c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051fe:	e006      	b.n	800520e <_PrintInt+0x8e>
        FieldWidth--;
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	3b01      	subs	r3, #1
 8005204:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005206:	2120      	movs	r1, #32
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7ff fea7 	bl	8004f5c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <_PrintInt+0x9c>
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	429a      	cmp	r2, r3
 800521a:	d3f1      	bcc.n	8005200 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	da07      	bge.n	8005232 <_PrintInt+0xb2>
    v = -v;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	425b      	negs	r3, r3
 8005226:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005228:	212d      	movs	r1, #45	@ 0x2d
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff fe96 	bl	8004f5c <_StoreChar>
 8005230:	e008      	b.n	8005244 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800523c:	212b      	movs	r1, #43	@ 0x2b
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f7ff fe8c 	bl	8004f5c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d019      	beq.n	8005282 <_PrintInt+0x102>
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d114      	bne.n	8005282 <_PrintInt+0x102>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d111      	bne.n	8005282 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00e      	beq.n	8005282 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005264:	e006      	b.n	8005274 <_PrintInt+0xf4>
        FieldWidth--;
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	3b01      	subs	r3, #1
 800526a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800526c:	2130      	movs	r1, #48	@ 0x30
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff fe74 	bl	8004f5c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <_PrintInt+0x102>
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	429a      	cmp	r2, r3
 8005280:	d3f1      	bcc.n	8005266 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f7ff fedf 	bl	8005054 <_PrintUnsigned>
}
 8005296:	bf00      	nop
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b098      	sub	sp, #96	@ 0x60
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80052ac:	f3ef 8311 	mrs	r3, BASEPRI
 80052b0:	f04f 0120 	mov.w	r1, #32
 80052b4:	f381 8811 	msr	BASEPRI, r1
 80052b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ba:	48b7      	ldr	r0, [pc, #732]	@ (8005598 <_VPrintTarget+0x2f8>)
 80052bc:	f7ff fc79 	bl	8004bb2 <_PreparePacket>
 80052c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80052c2:	4bb5      	ldr	r3, [pc, #724]	@ (8005598 <_VPrintTarget+0x2f8>)
 80052c4:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80052c6:	2300      	movs	r3, #0
 80052c8:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80052ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052cc:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	3301      	adds	r3, #1
 80052d2:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80052e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 8183 	beq.w	80055f6 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80052f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052f4:	2b25      	cmp	r3, #37	@ 0x25
 80052f6:	f040 8170 	bne.w	80055da <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80052fa:	2300      	movs	r3, #0
 80052fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80052fe:	2301      	movs	r3, #1
 8005300:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800530a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800530e:	3b23      	subs	r3, #35	@ 0x23
 8005310:	2b0d      	cmp	r3, #13
 8005312:	d83f      	bhi.n	8005394 <_VPrintTarget+0xf4>
 8005314:	a201      	add	r2, pc, #4	@ (adr r2, 800531c <_VPrintTarget+0x7c>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	08005385 	.word	0x08005385
 8005320:	08005395 	.word	0x08005395
 8005324:	08005395 	.word	0x08005395
 8005328:	08005395 	.word	0x08005395
 800532c:	08005395 	.word	0x08005395
 8005330:	08005395 	.word	0x08005395
 8005334:	08005395 	.word	0x08005395
 8005338:	08005395 	.word	0x08005395
 800533c:	08005375 	.word	0x08005375
 8005340:	08005395 	.word	0x08005395
 8005344:	08005355 	.word	0x08005355
 8005348:	08005395 	.word	0x08005395
 800534c:	08005395 	.word	0x08005395
 8005350:	08005365 	.word	0x08005365
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3301      	adds	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	e01a      	b.n	800539a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005366:	f043 0302 	orr.w	r3, r3, #2
 800536a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	e012      	b.n	800539a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005376:	f043 0304 	orr.w	r3, r3, #4
 800537a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3301      	adds	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	e00a      	b.n	800539a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005386:	f043 0308 	orr.w	r3, r3, #8
 800538a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3301      	adds	r3, #1
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	e002      	b.n	800539a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005394:	2300      	movs	r3, #0
 8005396:	653b      	str	r3, [r7, #80]	@ 0x50
 8005398:	bf00      	nop
        }
      } while (v);
 800539a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1b0      	bne.n	8005302 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80053a0:	2300      	movs	r3, #0
 80053a2:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80053ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80053b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80053b2:	d912      	bls.n	80053da <_VPrintTarget+0x13a>
 80053b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80053b8:	2b39      	cmp	r3, #57	@ 0x39
 80053ba:	d80e      	bhi.n	80053da <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80053c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	461a      	mov	r2, r3
 80053ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80053d2:	4413      	add	r3, r2
 80053d4:	3b30      	subs	r3, #48	@ 0x30
 80053d6:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80053d8:	e7e4      	b.n	80053a4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80053da:	2300      	movs	r3, #0
 80053dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80053e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80053ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80053ec:	d11d      	bne.n	800542a <_VPrintTarget+0x18a>
        sFormat++;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3301      	adds	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80053fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005400:	2b2f      	cmp	r3, #47	@ 0x2f
 8005402:	d912      	bls.n	800542a <_VPrintTarget+0x18a>
 8005404:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005408:	2b39      	cmp	r3, #57	@ 0x39
 800540a:	d80e      	bhi.n	800542a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005412:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	461a      	mov	r2, r3
 800541e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005422:	4413      	add	r3, r2
 8005424:	3b30      	subs	r3, #48	@ 0x30
 8005426:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005428:	e7e4      	b.n	80053f4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005432:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005436:	2b6c      	cmp	r3, #108	@ 0x6c
 8005438:	d003      	beq.n	8005442 <_VPrintTarget+0x1a2>
 800543a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800543e:	2b68      	cmp	r3, #104	@ 0x68
 8005440:	d107      	bne.n	8005452 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3301      	adds	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005450:	e7ef      	b.n	8005432 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005452:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005456:	2b25      	cmp	r3, #37	@ 0x25
 8005458:	f000 80b3 	beq.w	80055c2 <_VPrintTarget+0x322>
 800545c:	2b25      	cmp	r3, #37	@ 0x25
 800545e:	f2c0 80b7 	blt.w	80055d0 <_VPrintTarget+0x330>
 8005462:	2b78      	cmp	r3, #120	@ 0x78
 8005464:	f300 80b4 	bgt.w	80055d0 <_VPrintTarget+0x330>
 8005468:	2b58      	cmp	r3, #88	@ 0x58
 800546a:	f2c0 80b1 	blt.w	80055d0 <_VPrintTarget+0x330>
 800546e:	3b58      	subs	r3, #88	@ 0x58
 8005470:	2b20      	cmp	r3, #32
 8005472:	f200 80ad 	bhi.w	80055d0 <_VPrintTarget+0x330>
 8005476:	a201      	add	r2, pc, #4	@ (adr r2, 800547c <_VPrintTarget+0x1dc>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	08005573 	.word	0x08005573
 8005480:	080055d1 	.word	0x080055d1
 8005484:	080055d1 	.word	0x080055d1
 8005488:	080055d1 	.word	0x080055d1
 800548c:	080055d1 	.word	0x080055d1
 8005490:	080055d1 	.word	0x080055d1
 8005494:	080055d1 	.word	0x080055d1
 8005498:	080055d1 	.word	0x080055d1
 800549c:	080055d1 	.word	0x080055d1
 80054a0:	080055d1 	.word	0x080055d1
 80054a4:	080055d1 	.word	0x080055d1
 80054a8:	08005501 	.word	0x08005501
 80054ac:	08005527 	.word	0x08005527
 80054b0:	080055d1 	.word	0x080055d1
 80054b4:	080055d1 	.word	0x080055d1
 80054b8:	080055d1 	.word	0x080055d1
 80054bc:	080055d1 	.word	0x080055d1
 80054c0:	080055d1 	.word	0x080055d1
 80054c4:	080055d1 	.word	0x080055d1
 80054c8:	080055d1 	.word	0x080055d1
 80054cc:	080055d1 	.word	0x080055d1
 80054d0:	080055d1 	.word	0x080055d1
 80054d4:	080055d1 	.word	0x080055d1
 80054d8:	080055d1 	.word	0x080055d1
 80054dc:	0800559d 	.word	0x0800559d
 80054e0:	080055d1 	.word	0x080055d1
 80054e4:	080055d1 	.word	0x080055d1
 80054e8:	080055d1 	.word	0x080055d1
 80054ec:	080055d1 	.word	0x080055d1
 80054f0:	0800554d 	.word	0x0800554d
 80054f4:	080055d1 	.word	0x080055d1
 80054f8:	080055d1 	.word	0x080055d1
 80054fc:	08005573 	.word	0x08005573
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	1d19      	adds	r1, r3, #4
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6011      	str	r1, [r2, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800550e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005510:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8005514:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005518:	f107 0314 	add.w	r3, r7, #20
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fd1c 	bl	8004f5c <_StoreChar>
        break;
 8005524:	e055      	b.n	80055d2 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	1d19      	adds	r1, r3, #4
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6011      	str	r1, [r2, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005534:	f107 0014 	add.w	r0, r7, #20
 8005538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800553a:	9301      	str	r3, [sp, #4]
 800553c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005542:	220a      	movs	r2, #10
 8005544:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005546:	f7ff fe1b 	bl	8005180 <_PrintInt>
        break;
 800554a:	e042      	b.n	80055d2 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	1d19      	adds	r1, r3, #4
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6011      	str	r1, [r2, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800555a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800555c:	f107 0014 	add.w	r0, r7, #20
 8005560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005562:	9301      	str	r3, [sp, #4]
 8005564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800556a:	220a      	movs	r2, #10
 800556c:	f7ff fd72 	bl	8005054 <_PrintUnsigned>
        break;
 8005570:	e02f      	b.n	80055d2 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	1d19      	adds	r1, r3, #4
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6011      	str	r1, [r2, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005580:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005582:	f107 0014 	add.w	r0, r7, #20
 8005586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005590:	2210      	movs	r2, #16
 8005592:	f7ff fd5f 	bl	8005054 <_PrintUnsigned>
        break;
 8005596:	e01c      	b.n	80055d2 <_VPrintTarget+0x332>
 8005598:	200143b4 	.word	0x200143b4
      case 'p':
        v = va_arg(*pParamList, int);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	1d19      	adds	r1, r3, #4
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6011      	str	r1, [r2, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80055aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055ac:	f107 0014 	add.w	r0, r7, #20
 80055b0:	2300      	movs	r3, #0
 80055b2:	9301      	str	r3, [sp, #4]
 80055b4:	2308      	movs	r3, #8
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	2308      	movs	r3, #8
 80055ba:	2210      	movs	r2, #16
 80055bc:	f7ff fd4a 	bl	8005054 <_PrintUnsigned>
        break;
 80055c0:	e007      	b.n	80055d2 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80055c2:	f107 0314 	add.w	r3, r7, #20
 80055c6:	2125      	movs	r1, #37	@ 0x25
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff fcc7 	bl	8004f5c <_StoreChar>
        break;
 80055ce:	e000      	b.n	80055d2 <_VPrintTarget+0x332>
      default:
        break;
 80055d0:	bf00      	nop
      }
      sFormat++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e007      	b.n	80055ea <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80055da:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80055de:	f107 0314 	add.w	r3, r7, #20
 80055e2:	4611      	mov	r1, r2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fcb9 	bl	8004f5c <_StoreChar>
    }
  } while (*sFormat);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f47f ae72 	bne.w	80052d8 <_VPrintTarget+0x38>
 80055f4:	e000      	b.n	80055f8 <_VPrintTarget+0x358>
      break;
 80055f6:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d041      	beq.n	8005682 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80055fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	643b      	str	r3, [r7, #64]	@ 0x40
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800560e:	e00b      	b.n	8005628 <_VPrintTarget+0x388>
 8005610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005612:	b2da      	uxtb	r2, r3
 8005614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005616:	1c59      	adds	r1, r3, #1
 8005618:	6439      	str	r1, [r7, #64]	@ 0x40
 800561a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005624:	09db      	lsrs	r3, r3, #7
 8005626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800562a:	2b7f      	cmp	r3, #127	@ 0x7f
 800562c:	d8f0      	bhi.n	8005610 <_VPrintTarget+0x370>
 800562e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	643a      	str	r2, [r7, #64]	@ 0x40
 8005634:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800563c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005642:	2300      	movs	r3, #0
 8005644:	637b      	str	r3, [r7, #52]	@ 0x34
 8005646:	e00b      	b.n	8005660 <_VPrintTarget+0x3c0>
 8005648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564a:	b2da      	uxtb	r2, r3
 800564c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564e:	1c59      	adds	r1, r3, #1
 8005650:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005652:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	09db      	lsrs	r3, r3, #7
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005662:	2b7f      	cmp	r3, #127	@ 0x7f
 8005664:	d8f0      	bhi.n	8005648 <_VPrintTarget+0x3a8>
 8005666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800566c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005674:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	69b9      	ldr	r1, [r7, #24]
 800567a:	221a      	movs	r2, #26
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff fb87 	bl	8004d90 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005684:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005688:	bf00      	nop
 800568a:	3758      	adds	r7, #88	@ 0x58
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800569e:	2300      	movs	r3, #0
 80056a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80056a4:	4917      	ldr	r1, [pc, #92]	@ (8005704 <SEGGER_SYSVIEW_Init+0x74>)
 80056a6:	4818      	ldr	r0, [pc, #96]	@ (8005708 <SEGGER_SYSVIEW_Init+0x78>)
 80056a8:	f7ff f942 	bl	8004930 <SEGGER_RTT_AllocUpBuffer>
 80056ac:	4603      	mov	r3, r0
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	4b16      	ldr	r3, [pc, #88]	@ (800570c <SEGGER_SYSVIEW_Init+0x7c>)
 80056b2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80056b4:	4b15      	ldr	r3, [pc, #84]	@ (800570c <SEGGER_SYSVIEW_Init+0x7c>)
 80056b6:	785a      	ldrb	r2, [r3, #1]
 80056b8:	4b14      	ldr	r3, [pc, #80]	@ (800570c <SEGGER_SYSVIEW_Init+0x7c>)
 80056ba:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80056bc:	4b13      	ldr	r3, [pc, #76]	@ (800570c <SEGGER_SYSVIEW_Init+0x7c>)
 80056be:	7e1b      	ldrb	r3, [r3, #24]
 80056c0:	4618      	mov	r0, r3
 80056c2:	2300      	movs	r3, #0
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	2308      	movs	r3, #8
 80056c8:	4a11      	ldr	r2, [pc, #68]	@ (8005710 <SEGGER_SYSVIEW_Init+0x80>)
 80056ca:	490f      	ldr	r1, [pc, #60]	@ (8005708 <SEGGER_SYSVIEW_Init+0x78>)
 80056cc:	f7ff f9b4 	bl	8004a38 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80056d0:	4b0e      	ldr	r3, [pc, #56]	@ (800570c <SEGGER_SYSVIEW_Init+0x7c>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005714 <SEGGER_SYSVIEW_Init+0x84>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a0c      	ldr	r2, [pc, #48]	@ (800570c <SEGGER_SYSVIEW_Init+0x7c>)
 80056dc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80056de:	4a0b      	ldr	r2, [pc, #44]	@ (800570c <SEGGER_SYSVIEW_Init+0x7c>)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80056e4:	4a09      	ldr	r2, [pc, #36]	@ (800570c <SEGGER_SYSVIEW_Init+0x7c>)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80056ea:	4a08      	ldr	r2, [pc, #32]	@ (800570c <SEGGER_SYSVIEW_Init+0x7c>)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80056f0:	4a06      	ldr	r2, [pc, #24]	@ (800570c <SEGGER_SYSVIEW_Init+0x7c>)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80056f6:	4b05      	ldr	r3, [pc, #20]	@ (800570c <SEGGER_SYSVIEW_Init+0x7c>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80056fc:	bf00      	nop
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	2001337c 	.word	0x2001337c
 8005708:	080067a4 	.word	0x080067a4
 800570c:	20014384 	.word	0x20014384
 8005710:	2001437c 	.word	0x2001437c
 8005714:	e0001004 	.word	0xe0001004

08005718 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005720:	4a04      	ldr	r2, [pc, #16]	@ (8005734 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6113      	str	r3, [r2, #16]
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20014384 	.word	0x20014384

08005738 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005740:	f3ef 8311 	mrs	r3, BASEPRI
 8005744:	f04f 0120 	mov.w	r1, #32
 8005748:	f381 8811 	msr	BASEPRI, r1
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	4808      	ldr	r0, [pc, #32]	@ (8005770 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005750:	f7ff fa2f 	bl	8004bb2 <_PreparePacket>
 8005754:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	68b8      	ldr	r0, [r7, #8]
 800575c:	f7ff fb18 	bl	8004d90 <_SendPacket>
  RECORD_END();
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f383 8811 	msr	BASEPRI, r3
}
 8005766:	bf00      	nop
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	200143b4 	.word	0x200143b4

08005774 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800577e:	f3ef 8311 	mrs	r3, BASEPRI
 8005782:	f04f 0120 	mov.w	r1, #32
 8005786:	f381 8811 	msr	BASEPRI, r1
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	4816      	ldr	r0, [pc, #88]	@ (80057e8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800578e:	f7ff fa10 	bl	8004bb2 <_PreparePacket>
 8005792:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	61fb      	str	r3, [r7, #28]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	e00b      	b.n	80057ba <SEGGER_SYSVIEW_RecordU32+0x46>
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	1c59      	adds	r1, r3, #1
 80057aa:	61f9      	str	r1, [r7, #28]
 80057ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	09db      	lsrs	r3, r3, #7
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80057be:	d8f0      	bhi.n	80057a2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	61fa      	str	r2, [r7, #28]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	6938      	ldr	r0, [r7, #16]
 80057d6:	f7ff fadb 	bl	8004d90 <_SendPacket>
  RECORD_END();
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f383 8811 	msr	BASEPRI, r3
}
 80057e0:	bf00      	nop
 80057e2:	3720      	adds	r7, #32
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	200143b4 	.word	0x200143b4

080057ec <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08c      	sub	sp, #48	@ 0x30
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057f8:	f3ef 8311 	mrs	r3, BASEPRI
 80057fc:	f04f 0120 	mov.w	r1, #32
 8005800:	f381 8811 	msr	BASEPRI, r1
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	4825      	ldr	r0, [pc, #148]	@ (800589c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005808:	f7ff f9d3 	bl	8004bb2 <_PreparePacket>
 800580c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800581a:	e00b      	b.n	8005834 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800581c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581e:	b2da      	uxtb	r2, r3
 8005820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005822:	1c59      	adds	r1, r3, #1
 8005824:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005826:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005830:	09db      	lsrs	r3, r3, #7
 8005832:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	2b7f      	cmp	r3, #127	@ 0x7f
 8005838:	d8f0      	bhi.n	800581c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800583a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005848:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	627b      	str	r3, [r7, #36]	@ 0x24
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	623b      	str	r3, [r7, #32]
 8005852:	e00b      	b.n	800586c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	b2da      	uxtb	r2, r3
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585a:	1c59      	adds	r1, r3, #1
 800585c:	6279      	str	r1, [r7, #36]	@ 0x24
 800585e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	09db      	lsrs	r3, r3, #7
 800586a:	623b      	str	r3, [r7, #32]
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005870:	d8f0      	bhi.n	8005854 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	627a      	str	r2, [r7, #36]	@ 0x24
 8005878:	6a3a      	ldr	r2, [r7, #32]
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	6979      	ldr	r1, [r7, #20]
 8005886:	69b8      	ldr	r0, [r7, #24]
 8005888:	f7ff fa82 	bl	8004d90 <_SendPacket>
  RECORD_END();
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f383 8811 	msr	BASEPRI, r3
}
 8005892:	bf00      	nop
 8005894:	3730      	adds	r7, #48	@ 0x30
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	200143b4 	.word	0x200143b4

080058a0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08e      	sub	sp, #56	@ 0x38
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80058ae:	f3ef 8311 	mrs	r3, BASEPRI
 80058b2:	f04f 0120 	mov.w	r1, #32
 80058b6:	f381 8811 	msr	BASEPRI, r1
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	4832      	ldr	r0, [pc, #200]	@ (8005988 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80058be:	f7ff f978 	bl	8004bb2 <_PreparePacket>
 80058c2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80058d0:	e00b      	b.n	80058ea <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d8:	1c59      	adds	r1, r3, #1
 80058da:	6379      	str	r1, [r7, #52]	@ 0x34
 80058dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	09db      	lsrs	r3, r3, #7
 80058e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80058ee:	d8f0      	bhi.n	80058d2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80058f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	637a      	str	r2, [r7, #52]	@ 0x34
 80058f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005908:	e00b      	b.n	8005922 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800590a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590c:	b2da      	uxtb	r2, r3
 800590e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005910:	1c59      	adds	r1, r3, #1
 8005912:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005914:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	09db      	lsrs	r3, r3, #7
 8005920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005924:	2b7f      	cmp	r3, #127	@ 0x7f
 8005926:	d8f0      	bhi.n	800590a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800592e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005936:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	627b      	str	r3, [r7, #36]	@ 0x24
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	623b      	str	r3, [r7, #32]
 8005940:	e00b      	b.n	800595a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	b2da      	uxtb	r2, r3
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	1c59      	adds	r1, r3, #1
 800594a:	6279      	str	r1, [r7, #36]	@ 0x24
 800594c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	09db      	lsrs	r3, r3, #7
 8005958:	623b      	str	r3, [r7, #32]
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	2b7f      	cmp	r3, #127	@ 0x7f
 800595e:	d8f0      	bhi.n	8005942 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	627a      	str	r2, [r7, #36]	@ 0x24
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	6979      	ldr	r1, [r7, #20]
 8005974:	69b8      	ldr	r0, [r7, #24]
 8005976:	f7ff fa0b 	bl	8004d90 <_SendPacket>
  RECORD_END();
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f383 8811 	msr	BASEPRI, r3
}
 8005980:	bf00      	nop
 8005982:	3738      	adds	r7, #56	@ 0x38
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	200143b4 	.word	0x200143b4

0800598c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800598c:	b580      	push	{r7, lr}
 800598e:	b090      	sub	sp, #64	@ 0x40
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800599a:	f3ef 8311 	mrs	r3, BASEPRI
 800599e:	f04f 0120 	mov.w	r1, #32
 80059a2:	f381 8811 	msr	BASEPRI, r1
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	4840      	ldr	r0, [pc, #256]	@ (8005aac <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80059aa:	f7ff f902 	bl	8004bb2 <_PreparePacket>
 80059ae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059bc:	e00b      	b.n	80059d6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80059be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c4:	1c59      	adds	r1, r3, #1
 80059c6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80059c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d2:	09db      	lsrs	r3, r3, #7
 80059d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80059da:	d8f0      	bhi.n	80059be <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80059dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80059e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80059f4:	e00b      	b.n	8005a0e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fc:	1c59      	adds	r1, r3, #1
 80059fe:	6379      	str	r1, [r7, #52]	@ 0x34
 8005a00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0a:	09db      	lsrs	r3, r3, #7
 8005a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a10:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a12:	d8f0      	bhi.n	80059f6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	637a      	str	r2, [r7, #52]	@ 0x34
 8005a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a2c:	e00b      	b.n	8005a46 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a34:	1c59      	adds	r1, r3, #1
 8005a36:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005a38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a42:	09db      	lsrs	r3, r3, #7
 8005a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a48:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a4a:	d8f0      	bhi.n	8005a2e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a62:	623b      	str	r3, [r7, #32]
 8005a64:	e00b      	b.n	8005a7e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6c:	1c59      	adds	r1, r3, #1
 8005a6e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	09db      	lsrs	r3, r3, #7
 8005a7c:	623b      	str	r3, [r7, #32]
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a82:	d8f0      	bhi.n	8005a66 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a8a:	6a3a      	ldr	r2, [r7, #32]
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	6979      	ldr	r1, [r7, #20]
 8005a98:	69b8      	ldr	r0, [r7, #24]
 8005a9a:	f7ff f979 	bl	8004d90 <_SendPacket>
  RECORD_END();
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f383 8811 	msr	BASEPRI, r3
}
 8005aa4:	bf00      	nop
 8005aa6:	3740      	adds	r7, #64	@ 0x40
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	200143b4 	.word	0x200143b4

08005ab0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08c      	sub	sp, #48	@ 0x30
 8005ab4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005ab6:	4b58      	ldr	r3, [pc, #352]	@ (8005c18 <SEGGER_SYSVIEW_Start+0x168>)
 8005ab8:	2201      	movs	r2, #1
 8005aba:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005abc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac0:	f04f 0120 	mov.w	r1, #32
 8005ac4:	f381 8811 	msr	BASEPRI, r1
 8005ac8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005aca:	4b53      	ldr	r3, [pc, #332]	@ (8005c18 <SEGGER_SYSVIEW_Start+0x168>)
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	220a      	movs	r2, #10
 8005ad0:	4952      	ldr	r1, [pc, #328]	@ (8005c1c <SEGGER_SYSVIEW_Start+0x16c>)
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fa fb84 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005ade:	200a      	movs	r0, #10
 8005ae0:	f7ff fe2a 	bl	8005738 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ae4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ae8:	f04f 0120 	mov.w	r1, #32
 8005aec:	f381 8811 	msr	BASEPRI, r1
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	484b      	ldr	r0, [pc, #300]	@ (8005c20 <SEGGER_SYSVIEW_Start+0x170>)
 8005af4:	f7ff f85d 	bl	8004bb2 <_PreparePacket>
 8005af8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b02:	4b45      	ldr	r3, [pc, #276]	@ (8005c18 <SEGGER_SYSVIEW_Start+0x168>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b08:	e00b      	b.n	8005b22 <SEGGER_SYSVIEW_Start+0x72>
 8005b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b10:	1c59      	adds	r1, r3, #1
 8005b12:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1e:	09db      	lsrs	r3, r3, #7
 8005b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b24:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b26:	d8f0      	bhi.n	8005b0a <SEGGER_SYSVIEW_Start+0x5a>
 8005b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b36:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3c:	4b36      	ldr	r3, [pc, #216]	@ (8005c18 <SEGGER_SYSVIEW_Start+0x168>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	623b      	str	r3, [r7, #32]
 8005b42:	e00b      	b.n	8005b5c <SEGGER_SYSVIEW_Start+0xac>
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4a:	1c59      	adds	r1, r3, #1
 8005b4c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b4e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	09db      	lsrs	r3, r3, #7
 8005b5a:	623b      	str	r3, [r7, #32]
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b60:	d8f0      	bhi.n	8005b44 <SEGGER_SYSVIEW_Start+0x94>
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b68:	6a3a      	ldr	r2, [r7, #32]
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	61fb      	str	r3, [r7, #28]
 8005b76:	4b28      	ldr	r3, [pc, #160]	@ (8005c18 <SEGGER_SYSVIEW_Start+0x168>)
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	e00b      	b.n	8005b96 <SEGGER_SYSVIEW_Start+0xe6>
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	1c59      	adds	r1, r3, #1
 8005b86:	61f9      	str	r1, [r7, #28]
 8005b88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	09db      	lsrs	r3, r3, #7
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b9a:	d8f0      	bhi.n	8005b7e <SEGGER_SYSVIEW_Start+0xce>
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	61fa      	str	r2, [r7, #28]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	613b      	str	r3, [r7, #16]
 8005bb4:	e00b      	b.n	8005bce <SEGGER_SYSVIEW_Start+0x11e>
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	1c59      	adds	r1, r3, #1
 8005bbe:	6179      	str	r1, [r7, #20]
 8005bc0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	09db      	lsrs	r3, r3, #7
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bd2:	d8f0      	bhi.n	8005bb6 <SEGGER_SYSVIEW_Start+0x106>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	617a      	str	r2, [r7, #20]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005be4:	2218      	movs	r2, #24
 8005be6:	6839      	ldr	r1, [r7, #0]
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff f8d1 	bl	8004d90 <_SendPacket>
      RECORD_END();
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005bf4:	4b08      	ldr	r3, [pc, #32]	@ (8005c18 <SEGGER_SYSVIEW_Start+0x168>)
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005bfc:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <SEGGER_SYSVIEW_Start+0x168>)
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c00:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005c02:	f000 f9eb 	bl	8005fdc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005c06:	f000 f9b1 	bl	8005f6c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005c0a:	f000 fc23 	bl	8006454 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005c0e:	bf00      	nop
 8005c10:	3730      	adds	r7, #48	@ 0x30
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20014384 	.word	0x20014384
 8005c1c:	080067cc 	.word	0x080067cc
 8005c20:	200143b4 	.word	0x200143b4

08005c24 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c2e:	f04f 0120 	mov.w	r1, #32
 8005c32:	f381 8811 	msr	BASEPRI, r1
 8005c36:	607b      	str	r3, [r7, #4]
 8005c38:	480b      	ldr	r0, [pc, #44]	@ (8005c68 <SEGGER_SYSVIEW_Stop+0x44>)
 8005c3a:	f7fe ffba 	bl	8004bb2 <_PreparePacket>
 8005c3e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005c40:	4b0a      	ldr	r3, [pc, #40]	@ (8005c6c <SEGGER_SYSVIEW_Stop+0x48>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d007      	beq.n	8005c58 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005c48:	220b      	movs	r2, #11
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6838      	ldr	r0, [r7, #0]
 8005c4e:	f7ff f89f 	bl	8004d90 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005c52:	4b06      	ldr	r3, [pc, #24]	@ (8005c6c <SEGGER_SYSVIEW_Stop+0x48>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f383 8811 	msr	BASEPRI, r3
}
 8005c5e:	bf00      	nop
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	200143b4 	.word	0x200143b4
 8005c6c:	20014384 	.word	0x20014384

08005c70 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08c      	sub	sp, #48	@ 0x30
 8005c74:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c76:	f3ef 8311 	mrs	r3, BASEPRI
 8005c7a:	f04f 0120 	mov.w	r1, #32
 8005c7e:	f381 8811 	msr	BASEPRI, r1
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	4845      	ldr	r0, [pc, #276]	@ (8005d9c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005c86:	f7fe ff94 	bl	8004bb2 <_PreparePacket>
 8005c8a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c94:	4b42      	ldr	r3, [pc, #264]	@ (8005da0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c9a:	e00b      	b.n	8005cb4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca2:	1c59      	adds	r1, r3, #1
 8005ca4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005ca6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb0:	09db      	lsrs	r3, r3, #7
 8005cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cb8:	d8f0      	bhi.n	8005c9c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cce:	4b34      	ldr	r3, [pc, #208]	@ (8005da0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	623b      	str	r3, [r7, #32]
 8005cd4:	e00b      	b.n	8005cee <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	1c59      	adds	r1, r3, #1
 8005cde:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ce0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	09db      	lsrs	r3, r3, #7
 8005cec:	623b      	str	r3, [r7, #32]
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cf2:	d8f0      	bhi.n	8005cd6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cfa:	6a3a      	ldr	r2, [r7, #32]
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]
 8005d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	61fb      	str	r3, [r7, #28]
 8005d08:	4b25      	ldr	r3, [pc, #148]	@ (8005da0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	e00b      	b.n	8005d28 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	1c59      	adds	r1, r3, #1
 8005d18:	61f9      	str	r1, [r7, #28]
 8005d1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	09db      	lsrs	r3, r3, #7
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d2c:	d8f0      	bhi.n	8005d10 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	61fa      	str	r2, [r7, #28]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	e00b      	b.n	8005d60 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	1c59      	adds	r1, r3, #1
 8005d50:	6179      	str	r1, [r7, #20]
 8005d52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	09db      	lsrs	r3, r3, #7
 8005d5e:	613b      	str	r3, [r7, #16]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d64:	d8f0      	bhi.n	8005d48 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	617a      	str	r2, [r7, #20]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d76:	2218      	movs	r2, #24
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	68b8      	ldr	r0, [r7, #8]
 8005d7c:	f7ff f808 	bl	8004d90 <_SendPacket>
  RECORD_END();
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d86:	4b06      	ldr	r3, [pc, #24]	@ (8005da0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005d8e:	4b04      	ldr	r3, [pc, #16]	@ (8005da0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d92:	4798      	blx	r3
  }
}
 8005d94:	bf00      	nop
 8005d96:	3730      	adds	r7, #48	@ 0x30
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	200143b4 	.word	0x200143b4
 8005da0:	20014384 	.word	0x20014384

08005da4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b092      	sub	sp, #72	@ 0x48
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005dac:	f3ef 8311 	mrs	r3, BASEPRI
 8005db0:	f04f 0120 	mov.w	r1, #32
 8005db4:	f381 8811 	msr	BASEPRI, r1
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	486a      	ldr	r0, [pc, #424]	@ (8005f64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005dbc:	f7fe fef9 	bl	8004bb2 <_PreparePacket>
 8005dc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b66      	ldr	r3, [pc, #408]	@ (8005f68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dd6:	e00b      	b.n	8005df0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dde:	1c59      	adds	r1, r3, #1
 8005de0:	6479      	str	r1, [r7, #68]	@ 0x44
 8005de2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dec:	09db      	lsrs	r3, r3, #7
 8005dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8005df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005df2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005df4:	d8f0      	bhi.n	8005dd8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	647a      	str	r2, [r7, #68]	@ 0x44
 8005dfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e10:	e00b      	b.n	8005e2a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e18:	1c59      	adds	r1, r3, #1
 8005e1a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005e1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e26:	09db      	lsrs	r3, r3, #7
 8005e28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e2e:	d8f0      	bhi.n	8005e12 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	4619      	mov	r1, r3
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f7fe fe65 	bl	8004b18 <_EncodeStr>
 8005e4e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005e50:	2209      	movs	r2, #9
 8005e52:	68f9      	ldr	r1, [r7, #12]
 8005e54:	6938      	ldr	r0, [r7, #16]
 8005e56:	f7fe ff9b 	bl	8004d90 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b40      	ldr	r3, [pc, #256]	@ (8005f68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e6e:	e00b      	b.n	8005e88 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e76:	1c59      	adds	r1, r3, #1
 8005e78:	6379      	str	r1, [r7, #52]	@ 0x34
 8005e7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	09db      	lsrs	r3, r3, #7
 8005e86:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e8c:	d8f0      	bhi.n	8005e70 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	637a      	str	r2, [r7, #52]	@ 0x34
 8005e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ea8:	e00b      	b.n	8005ec2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb0:	1c59      	adds	r1, r3, #1
 8005eb2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005eb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebe:	09db      	lsrs	r3, r3, #7
 8005ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ec6:	d8f0      	bhi.n	8005eaa <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	623b      	str	r3, [r7, #32]
 8005ee2:	e00b      	b.n	8005efc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	1c59      	adds	r1, r3, #1
 8005eec:	6279      	str	r1, [r7, #36]	@ 0x24
 8005eee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	09db      	lsrs	r3, r3, #7
 8005efa:	623b      	str	r3, [r7, #32]
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f00:	d8f0      	bhi.n	8005ee4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f08:	6a3a      	ldr	r2, [r7, #32]
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	2300      	movs	r3, #0
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	e00b      	b.n	8005f34 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	1c59      	adds	r1, r3, #1
 8005f24:	61f9      	str	r1, [r7, #28]
 8005f26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	09db      	lsrs	r3, r3, #7
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f38:	d8f0      	bhi.n	8005f1c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	61fa      	str	r2, [r7, #28]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005f4a:	2215      	movs	r2, #21
 8005f4c:	68f9      	ldr	r1, [r7, #12]
 8005f4e:	6938      	ldr	r0, [r7, #16]
 8005f50:	f7fe ff1e 	bl	8004d90 <_SendPacket>
  RECORD_END();
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f383 8811 	msr	BASEPRI, r3
}
 8005f5a:	bf00      	nop
 8005f5c:	3748      	adds	r7, #72	@ 0x48
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	200143b4 	.word	0x200143b4
 8005f68:	20014384 	.word	0x20014384

08005f6c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005f70:	4b07      	ldr	r3, [pc, #28]	@ (8005f90 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d008      	beq.n	8005f8a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005f78:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005f82:	4b03      	ldr	r3, [pc, #12]	@ (8005f90 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	4798      	blx	r3
  }
}
 8005f8a:	bf00      	nop
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20014384 	.word	0x20014384

08005f94 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa0:	f04f 0120 	mov.w	r1, #32
 8005fa4:	f381 8811 	msr	BASEPRI, r1
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	480b      	ldr	r0, [pc, #44]	@ (8005fd8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005fac:	f7fe fe01 	bl	8004bb2 <_PreparePacket>
 8005fb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fb2:	2280      	movs	r2, #128	@ 0x80
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	6938      	ldr	r0, [r7, #16]
 8005fb8:	f7fe fdae 	bl	8004b18 <_EncodeStr>
 8005fbc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005fbe:	220e      	movs	r2, #14
 8005fc0:	68f9      	ldr	r1, [r7, #12]
 8005fc2:	6938      	ldr	r0, [r7, #16]
 8005fc4:	f7fe fee4 	bl	8004d90 <_SendPacket>
  RECORD_END();
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f383 8811 	msr	BASEPRI, r3
}
 8005fce:	bf00      	nop
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200143b4 	.word	0x200143b4

08005fdc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005fdc:	b590      	push	{r4, r7, lr}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005fe2:	4b15      	ldr	r3, [pc, #84]	@ (8006038 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d01a      	beq.n	8006020 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005fea:	4b13      	ldr	r3, [pc, #76]	@ (8006038 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d015      	beq.n	8006020 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005ff4:	4b10      	ldr	r3, [pc, #64]	@ (8006038 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4798      	blx	r3
 8005ffc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006000:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006002:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006006:	f04f 0200 	mov.w	r2, #0
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	000a      	movs	r2, r1
 8006010:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006012:	4613      	mov	r3, r2
 8006014:	461a      	mov	r2, r3
 8006016:	4621      	mov	r1, r4
 8006018:	200d      	movs	r0, #13
 800601a:	f7ff fbe7 	bl	80057ec <SEGGER_SYSVIEW_RecordU32x2>
 800601e:	e006      	b.n	800602e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006020:	4b06      	ldr	r3, [pc, #24]	@ (800603c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4619      	mov	r1, r3
 8006026:	200c      	movs	r0, #12
 8006028:	f7ff fba4 	bl	8005774 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	bd90      	pop	{r4, r7, pc}
 8006036:	bf00      	nop
 8006038:	20014384 	.word	0x20014384
 800603c:	e0001004 	.word	0xe0001004

08006040 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006046:	f3ef 8311 	mrs	r3, BASEPRI
 800604a:	f04f 0120 	mov.w	r1, #32
 800604e:	f381 8811 	msr	BASEPRI, r1
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	4819      	ldr	r0, [pc, #100]	@ (80060bc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006056:	f7fe fdac 	bl	8004bb2 <_PreparePacket>
 800605a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006060:	4b17      	ldr	r3, [pc, #92]	@ (80060c0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006068:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	617b      	str	r3, [r7, #20]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	e00b      	b.n	800608c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	b2da      	uxtb	r2, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	1c59      	adds	r1, r3, #1
 800607c:	6179      	str	r1, [r7, #20]
 800607e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	09db      	lsrs	r3, r3, #7
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006090:	d8f0      	bhi.n	8006074 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	617a      	str	r2, [r7, #20]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80060a2:	2202      	movs	r2, #2
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	68b8      	ldr	r0, [r7, #8]
 80060a8:	f7fe fe72 	bl	8004d90 <_SendPacket>
  RECORD_END();
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f383 8811 	msr	BASEPRI, r3
}
 80060b2:	bf00      	nop
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200143b4 	.word	0x200143b4
 80060c0:	e000ed04 	.word	0xe000ed04

080060c4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060ca:	f3ef 8311 	mrs	r3, BASEPRI
 80060ce:	f04f 0120 	mov.w	r1, #32
 80060d2:	f381 8811 	msr	BASEPRI, r1
 80060d6:	607b      	str	r3, [r7, #4]
 80060d8:	4807      	ldr	r0, [pc, #28]	@ (80060f8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80060da:	f7fe fd6a 	bl	8004bb2 <_PreparePacket>
 80060de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80060e0:	2203      	movs	r2, #3
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6838      	ldr	r0, [r7, #0]
 80060e6:	f7fe fe53 	bl	8004d90 <_SendPacket>
  RECORD_END();
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f383 8811 	msr	BASEPRI, r3
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	200143b4 	.word	0x200143b4

080060fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006102:	f3ef 8311 	mrs	r3, BASEPRI
 8006106:	f04f 0120 	mov.w	r1, #32
 800610a:	f381 8811 	msr	BASEPRI, r1
 800610e:	607b      	str	r3, [r7, #4]
 8006110:	4807      	ldr	r0, [pc, #28]	@ (8006130 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006112:	f7fe fd4e 	bl	8004bb2 <_PreparePacket>
 8006116:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006118:	2212      	movs	r2, #18
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6838      	ldr	r0, [r7, #0]
 800611e:	f7fe fe37 	bl	8004d90 <_SendPacket>
  RECORD_END();
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f383 8811 	msr	BASEPRI, r3
}
 8006128:	bf00      	nop
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	200143b4 	.word	0x200143b4

08006134 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800613a:	f3ef 8311 	mrs	r3, BASEPRI
 800613e:	f04f 0120 	mov.w	r1, #32
 8006142:	f381 8811 	msr	BASEPRI, r1
 8006146:	607b      	str	r3, [r7, #4]
 8006148:	4807      	ldr	r0, [pc, #28]	@ (8006168 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800614a:	f7fe fd32 	bl	8004bb2 <_PreparePacket>
 800614e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006150:	2211      	movs	r2, #17
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6838      	ldr	r0, [r7, #0]
 8006156:	f7fe fe1b 	bl	8004d90 <_SendPacket>
  RECORD_END();
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f383 8811 	msr	BASEPRI, r3
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	200143b4 	.word	0x200143b4

0800616c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006174:	f3ef 8311 	mrs	r3, BASEPRI
 8006178:	f04f 0120 	mov.w	r1, #32
 800617c:	f381 8811 	msr	BASEPRI, r1
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	4819      	ldr	r0, [pc, #100]	@ (80061e8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006184:	f7fe fd15 	bl	8004bb2 <_PreparePacket>
 8006188:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800618e:	4b17      	ldr	r3, [pc, #92]	@ (80061ec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	61fb      	str	r3, [r7, #28]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	e00b      	b.n	80061ba <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	1c59      	adds	r1, r3, #1
 80061aa:	61f9      	str	r1, [r7, #28]
 80061ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	09db      	lsrs	r3, r3, #7
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80061be:	d8f0      	bhi.n	80061a2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	61fa      	str	r2, [r7, #28]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80061d0:	2208      	movs	r2, #8
 80061d2:	68f9      	ldr	r1, [r7, #12]
 80061d4:	6938      	ldr	r0, [r7, #16]
 80061d6:	f7fe fddb 	bl	8004d90 <_SendPacket>
  RECORD_END();
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f383 8811 	msr	BASEPRI, r3
}
 80061e0:	bf00      	nop
 80061e2:	3720      	adds	r7, #32
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	200143b4 	.word	0x200143b4
 80061ec:	20014384 	.word	0x20014384

080061f0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061f8:	f3ef 8311 	mrs	r3, BASEPRI
 80061fc:	f04f 0120 	mov.w	r1, #32
 8006200:	f381 8811 	msr	BASEPRI, r1
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	4819      	ldr	r0, [pc, #100]	@ (800626c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006208:	f7fe fcd3 	bl	8004bb2 <_PreparePacket>
 800620c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006212:	4b17      	ldr	r3, [pc, #92]	@ (8006270 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	61fb      	str	r3, [r7, #28]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	e00b      	b.n	800623e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	b2da      	uxtb	r2, r3
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	1c59      	adds	r1, r3, #1
 800622e:	61f9      	str	r1, [r7, #28]
 8006230:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	09db      	lsrs	r3, r3, #7
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b7f      	cmp	r3, #127	@ 0x7f
 8006242:	d8f0      	bhi.n	8006226 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	61fa      	str	r2, [r7, #28]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006254:	2204      	movs	r2, #4
 8006256:	68f9      	ldr	r1, [r7, #12]
 8006258:	6938      	ldr	r0, [r7, #16]
 800625a:	f7fe fd99 	bl	8004d90 <_SendPacket>
  RECORD_END();
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f383 8811 	msr	BASEPRI, r3
}
 8006264:	bf00      	nop
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	200143b4 	.word	0x200143b4
 8006270:	20014384 	.word	0x20014384

08006274 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800627c:	f3ef 8311 	mrs	r3, BASEPRI
 8006280:	f04f 0120 	mov.w	r1, #32
 8006284:	f381 8811 	msr	BASEPRI, r1
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	4819      	ldr	r0, [pc, #100]	@ (80062f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800628c:	f7fe fc91 	bl	8004bb2 <_PreparePacket>
 8006290:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006296:	4b17      	ldr	r3, [pc, #92]	@ (80062f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	61bb      	str	r3, [r7, #24]
 80062a8:	e00b      	b.n	80062c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	1c59      	adds	r1, r3, #1
 80062b2:	61f9      	str	r1, [r7, #28]
 80062b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	09db      	lsrs	r3, r3, #7
 80062c0:	61bb      	str	r3, [r7, #24]
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80062c6:	d8f0      	bhi.n	80062aa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	61fa      	str	r2, [r7, #28]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80062d8:	2206      	movs	r2, #6
 80062da:	68f9      	ldr	r1, [r7, #12]
 80062dc:	6938      	ldr	r0, [r7, #16]
 80062de:	f7fe fd57 	bl	8004d90 <_SendPacket>
  RECORD_END();
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f383 8811 	msr	BASEPRI, r3
}
 80062e8:	bf00      	nop
 80062ea:	3720      	adds	r7, #32
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	200143b4 	.word	0x200143b4
 80062f4:	20014384 	.word	0x20014384

080062f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006300:	4b04      	ldr	r3, [pc, #16]	@ (8006314 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	1ad3      	subs	r3, r2, r3
}
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	20014384 	.word	0x20014384

08006318 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b08c      	sub	sp, #48	@ 0x30
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006322:	4b3b      	ldr	r3, [pc, #236]	@ (8006410 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d06d      	beq.n	8006406 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800632a:	4b39      	ldr	r3, [pc, #228]	@ (8006410 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006330:	2300      	movs	r3, #0
 8006332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006334:	e008      	b.n	8006348 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800633c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006344:	3301      	adds	r3, #1
 8006346:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800634c:	429a      	cmp	r2, r3
 800634e:	d3f2      	bcc.n	8006336 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006350:	e000      	b.n	8006354 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006352:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d055      	beq.n	8006406 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800635a:	f3ef 8311 	mrs	r3, BASEPRI
 800635e:	f04f 0120 	mov.w	r1, #32
 8006362:	f381 8811 	msr	BASEPRI, r1
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	482a      	ldr	r0, [pc, #168]	@ (8006414 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800636a:	f7fe fc22 	bl	8004bb2 <_PreparePacket>
 800636e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	627b      	str	r3, [r7, #36]	@ 0x24
 8006378:	79fb      	ldrb	r3, [r7, #7]
 800637a:	623b      	str	r3, [r7, #32]
 800637c:	e00b      	b.n	8006396 <SEGGER_SYSVIEW_SendModule+0x7e>
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	1c59      	adds	r1, r3, #1
 8006386:	6279      	str	r1, [r7, #36]	@ 0x24
 8006388:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	09db      	lsrs	r3, r3, #7
 8006394:	623b      	str	r3, [r7, #32]
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	2b7f      	cmp	r3, #127	@ 0x7f
 800639a:	d8f0      	bhi.n	800637e <SEGGER_SYSVIEW_SendModule+0x66>
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80063a2:	6a3a      	ldr	r2, [r7, #32]
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	e00b      	b.n	80063d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	1c59      	adds	r1, r3, #1
 80063c0:	61f9      	str	r1, [r7, #28]
 80063c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	09db      	lsrs	r3, r3, #7
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80063d4:	d8f0      	bhi.n	80063b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	61fa      	str	r2, [r7, #28]
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2280      	movs	r2, #128	@ 0x80
 80063ec:	4619      	mov	r1, r3
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f7fe fb92 	bl	8004b18 <_EncodeStr>
 80063f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80063f6:	2216      	movs	r2, #22
 80063f8:	68f9      	ldr	r1, [r7, #12]
 80063fa:	6938      	ldr	r0, [r7, #16]
 80063fc:	f7fe fcc8 	bl	8004d90 <_SendPacket>
      RECORD_END();
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006406:	bf00      	nop
 8006408:	3730      	adds	r7, #48	@ 0x30
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	200143ac 	.word	0x200143ac
 8006414:	200143b4 	.word	0x200143b4

08006418 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800641e:	4b0c      	ldr	r3, [pc, #48]	@ (8006450 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00f      	beq.n	8006446 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006426:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1f2      	bne.n	800642c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	200143ac 	.word	0x200143ac

08006454 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800645a:	f3ef 8311 	mrs	r3, BASEPRI
 800645e:	f04f 0120 	mov.w	r1, #32
 8006462:	f381 8811 	msr	BASEPRI, r1
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	4817      	ldr	r0, [pc, #92]	@ (80064c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800646a:	f7fe fba2 	bl	8004bb2 <_PreparePacket>
 800646e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	4b14      	ldr	r3, [pc, #80]	@ (80064cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	e00b      	b.n	8006498 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	b2da      	uxtb	r2, r3
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	1c59      	adds	r1, r3, #1
 8006488:	6179      	str	r1, [r7, #20]
 800648a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	09db      	lsrs	r3, r3, #7
 8006496:	613b      	str	r3, [r7, #16]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2b7f      	cmp	r3, #127	@ 0x7f
 800649c:	d8f0      	bhi.n	8006480 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	617a      	str	r2, [r7, #20]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80064ae:	221b      	movs	r2, #27
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	68b8      	ldr	r0, [r7, #8]
 80064b4:	f7fe fc6c 	bl	8004d90 <_SendPacket>
  RECORD_END();
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f383 8811 	msr	BASEPRI, r3
}
 80064be:	bf00      	nop
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	200143b4 	.word	0x200143b4
 80064cc:	200143b0 	.word	0x200143b0

080064d0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80064d0:	b40f      	push	{r0, r1, r2, r3}
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80064d8:	f107 0314 	add.w	r3, r7, #20
 80064dc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80064de:	1d3b      	adds	r3, r7, #4
 80064e0:	461a      	mov	r2, r3
 80064e2:	2100      	movs	r1, #0
 80064e4:	6938      	ldr	r0, [r7, #16]
 80064e6:	f7fe fedb 	bl	80052a0 <_VPrintTarget>
  va_end(ParamList);
}
 80064ea:	bf00      	nop
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064f4:	b004      	add	sp, #16
 80064f6:	4770      	bx	lr

080064f8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	@ 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006500:	f3ef 8311 	mrs	r3, BASEPRI
 8006504:	f04f 0120 	mov.w	r1, #32
 8006508:	f381 8811 	msr	BASEPRI, r1
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	4827      	ldr	r0, [pc, #156]	@ (80065ac <SEGGER_SYSVIEW_Warn+0xb4>)
 8006510:	f7fe fb4f 	bl	8004bb2 <_PreparePacket>
 8006514:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006516:	2280      	movs	r2, #128	@ 0x80
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	6938      	ldr	r0, [r7, #16]
 800651c:	f7fe fafc 	bl	8004b18 <_EncodeStr>
 8006520:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
 8006526:	2301      	movs	r3, #1
 8006528:	623b      	str	r3, [r7, #32]
 800652a:	e00b      	b.n	8006544 <SEGGER_SYSVIEW_Warn+0x4c>
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	b2da      	uxtb	r2, r3
 8006530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006532:	1c59      	adds	r1, r3, #1
 8006534:	6279      	str	r1, [r7, #36]	@ 0x24
 8006536:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	09db      	lsrs	r3, r3, #7
 8006542:	623b      	str	r3, [r7, #32]
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	2b7f      	cmp	r3, #127	@ 0x7f
 8006548:	d8f0      	bhi.n	800652c <SEGGER_SYSVIEW_Warn+0x34>
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006550:	6a3a      	ldr	r2, [r7, #32]
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006558:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	61fb      	str	r3, [r7, #28]
 800655e:	2300      	movs	r3, #0
 8006560:	61bb      	str	r3, [r7, #24]
 8006562:	e00b      	b.n	800657c <SEGGER_SYSVIEW_Warn+0x84>
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	b2da      	uxtb	r2, r3
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	1c59      	adds	r1, r3, #1
 800656c:	61f9      	str	r1, [r7, #28]
 800656e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	09db      	lsrs	r3, r3, #7
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006580:	d8f0      	bhi.n	8006564 <SEGGER_SYSVIEW_Warn+0x6c>
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	61fa      	str	r2, [r7, #28]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006592:	221a      	movs	r2, #26
 8006594:	68f9      	ldr	r1, [r7, #12]
 8006596:	6938      	ldr	r0, [r7, #16]
 8006598:	f7fe fbfa 	bl	8004d90 <_SendPacket>
  RECORD_END();
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f383 8811 	msr	BASEPRI, r3
}
 80065a2:	bf00      	nop
 80065a4:	3728      	adds	r7, #40	@ 0x28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	200143b4 	.word	0x200143b4

080065b0 <memcmp>:
 80065b0:	b510      	push	{r4, lr}
 80065b2:	3901      	subs	r1, #1
 80065b4:	4402      	add	r2, r0
 80065b6:	4290      	cmp	r0, r2
 80065b8:	d101      	bne.n	80065be <memcmp+0xe>
 80065ba:	2000      	movs	r0, #0
 80065bc:	e005      	b.n	80065ca <memcmp+0x1a>
 80065be:	7803      	ldrb	r3, [r0, #0]
 80065c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d001      	beq.n	80065cc <memcmp+0x1c>
 80065c8:	1b18      	subs	r0, r3, r4
 80065ca:	bd10      	pop	{r4, pc}
 80065cc:	3001      	adds	r0, #1
 80065ce:	e7f2      	b.n	80065b6 <memcmp+0x6>

080065d0 <memset>:
 80065d0:	4402      	add	r2, r0
 80065d2:	4603      	mov	r3, r0
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d100      	bne.n	80065da <memset+0xa>
 80065d8:	4770      	bx	lr
 80065da:	f803 1b01 	strb.w	r1, [r3], #1
 80065de:	e7f9      	b.n	80065d4 <memset+0x4>

080065e0 <__libc_init_array>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006618 <__libc_init_array+0x38>)
 80065e4:	4c0d      	ldr	r4, [pc, #52]	@ (800661c <__libc_init_array+0x3c>)
 80065e6:	1b64      	subs	r4, r4, r5
 80065e8:	10a4      	asrs	r4, r4, #2
 80065ea:	2600      	movs	r6, #0
 80065ec:	42a6      	cmp	r6, r4
 80065ee:	d109      	bne.n	8006604 <__libc_init_array+0x24>
 80065f0:	4d0b      	ldr	r5, [pc, #44]	@ (8006620 <__libc_init_array+0x40>)
 80065f2:	4c0c      	ldr	r4, [pc, #48]	@ (8006624 <__libc_init_array+0x44>)
 80065f4:	f000 f826 	bl	8006644 <_init>
 80065f8:	1b64      	subs	r4, r4, r5
 80065fa:	10a4      	asrs	r4, r4, #2
 80065fc:	2600      	movs	r6, #0
 80065fe:	42a6      	cmp	r6, r4
 8006600:	d105      	bne.n	800660e <__libc_init_array+0x2e>
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	f855 3b04 	ldr.w	r3, [r5], #4
 8006608:	4798      	blx	r3
 800660a:	3601      	adds	r6, #1
 800660c:	e7ee      	b.n	80065ec <__libc_init_array+0xc>
 800660e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006612:	4798      	blx	r3
 8006614:	3601      	adds	r6, #1
 8006616:	e7f2      	b.n	80065fe <__libc_init_array+0x1e>
 8006618:	080067f0 	.word	0x080067f0
 800661c:	080067f0 	.word	0x080067f0
 8006620:	080067f0 	.word	0x080067f0
 8006624:	080067f4 	.word	0x080067f4

08006628 <memcpy>:
 8006628:	440a      	add	r2, r1
 800662a:	4291      	cmp	r1, r2
 800662c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006630:	d100      	bne.n	8006634 <memcpy+0xc>
 8006632:	4770      	bx	lr
 8006634:	b510      	push	{r4, lr}
 8006636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800663a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800663e:	4291      	cmp	r1, r2
 8006640:	d1f9      	bne.n	8006636 <memcpy+0xe>
 8006642:	bd10      	pop	{r4, pc}

08006644 <_init>:
 8006644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006646:	bf00      	nop
 8006648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664a:	bc08      	pop	{r3}
 800664c:	469e      	mov	lr, r3
 800664e:	4770      	bx	lr

08006650 <_fini>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr
