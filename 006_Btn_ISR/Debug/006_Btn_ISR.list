
006_Btn_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d50  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08006ef0  08006ef0  00007ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c0  080070c0  00009018  2**0
                  CONTENTS
  4 .ARM          00000008  080070c0  080070c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070c8  080070c8  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c8  080070c8  000080c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070cc  080070cc  000080cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080070d0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014490  20000018  080070e8  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144a8  080070e8  000094a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013951  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc6  00000000  00000000  0001c999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0001f960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb3  00000000  00000000  00020c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018026  00000000  00000000  00021b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001502a  00000000  00000000  00039b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099d16  00000000  00000000  0004eb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8899  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005010  00000000  00000000  000e88dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  000ed8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ed8 	.word	0x08006ed8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	08006ed8 	.word	0x08006ed8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ed4 	.word	0x20012ed4

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fb5d 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f879 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8e3 	bl	800073c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000576:	4b30      	ldr	r3, [pc, #192]	@ (8000638 <main+0xd4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a2f      	ldr	r2, [pc, #188]	@ (8000638 <main+0xd4>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000582:	f004 faab 	bl	8004adc <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000586:	f005 fedd 	bl	8006344 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 800058a:	4b2c      	ldr	r3, [pc, #176]	@ (800063c <main+0xd8>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2303      	movs	r3, #3
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22c8      	movs	r2, #200	@ 0xc8
 8000596:	492a      	ldr	r1, [pc, #168]	@ (8000640 <main+0xdc>)
 8000598:	482a      	ldr	r0, [pc, #168]	@ (8000644 <main+0xe0>)
 800059a:	f002 f95b 	bl	8002854 <xTaskCreate>
 800059e:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00b      	beq.n	80005be <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <main+0x56>

  next_task_handle = ledg_task_handle;
 80005be:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <main+0xd8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a21      	ldr	r2, [pc, #132]	@ (8000648 <main+0xe4>)
 80005c4:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80005c6:	4b21      	ldr	r3, [pc, #132]	@ (800064c <main+0xe8>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	@ 0xc8
 80005d2:	491f      	ldr	r1, [pc, #124]	@ (8000650 <main+0xec>)
 80005d4:	481f      	ldr	r0, [pc, #124]	@ (8000654 <main+0xf0>)
 80005d6:	f002 f93d 	bl	8002854 <xTaskCreate>
 80005da:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00b      	beq.n	80005fa <main+0x96>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	607b      	str	r3, [r7, #4]
    }
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x92>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 1, &ledr_task_handle);
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <main+0xf4>)
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2301      	movs	r3, #1
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22c8      	movs	r2, #200	@ 0xc8
 8000606:	4915      	ldr	r1, [pc, #84]	@ (800065c <main+0xf8>)
 8000608:	4815      	ldr	r0, [pc, #84]	@ (8000660 <main+0xfc>)
 800060a:	f002 f923 	bl	8002854 <xTaskCreate>
 800060e:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00b      	beq.n	800062e <main+0xca>
        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	603b      	str	r3, [r7, #0]
    }
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0xc6>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800062e:	f002 fb4b 	bl	8002cc8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000632:	bf00      	nop
 8000634:	e7fd      	b.n	8000632 <main+0xce>
 8000636:	bf00      	nop
 8000638:	e0001000 	.word	0xe0001000
 800063c:	20000034 	.word	0x20000034
 8000640:	08006ef0 	.word	0x08006ef0
 8000644:	08000899 	.word	0x08000899
 8000648:	20000040 	.word	0x20000040
 800064c:	20000038 	.word	0x20000038
 8000650:	08006f00 	.word	0x08006f00
 8000654:	08000905 	.word	0x08000905
 8000658:	2000003c 	.word	0x2000003c
 800065c:	08006f10 	.word	0x08006f10
 8000660:	08000971 	.word	0x08000971

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	@ 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	@ 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 fbf6 	bl	8006e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b29      	ldr	r3, [pc, #164]	@ (8000734 <SystemClock_Config+0xd0>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	4a28      	ldr	r2, [pc, #160]	@ (8000734 <SystemClock_Config+0xd0>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	@ 0x40
 8000698:	4b26      	ldr	r3, [pc, #152]	@ (8000734 <SystemClock_Config+0xd0>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemClock_Config+0xd4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b0:	4a21      	ldr	r2, [pc, #132]	@ (8000738 <SystemClock_Config+0xd4>)
 80006b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <SystemClock_Config+0xd4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d8:	2310      	movs	r3, #16
 80006da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fd9a 	bl	8001228 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fa:	f000 f97f 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fffc 	bl	8001718 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000726:	f000 f969 	bl	80009fc <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	@ 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b39      	ldr	r3, [pc, #228]	@ (800083c <MX_GPIO_Init+0x100>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a38      	ldr	r2, [pc, #224]	@ (800083c <MX_GPIO_Init+0x100>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b36      	ldr	r3, [pc, #216]	@ (800083c <MX_GPIO_Init+0x100>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b32      	ldr	r3, [pc, #200]	@ (800083c <MX_GPIO_Init+0x100>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a31      	ldr	r2, [pc, #196]	@ (800083c <MX_GPIO_Init+0x100>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b2f      	ldr	r3, [pc, #188]	@ (800083c <MX_GPIO_Init+0x100>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b2b      	ldr	r3, [pc, #172]	@ (800083c <MX_GPIO_Init+0x100>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a2a      	ldr	r2, [pc, #168]	@ (800083c <MX_GPIO_Init+0x100>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b28      	ldr	r3, [pc, #160]	@ (800083c <MX_GPIO_Init+0x100>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b24      	ldr	r3, [pc, #144]	@ (800083c <MX_GPIO_Init+0x100>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a23      	ldr	r2, [pc, #140]	@ (800083c <MX_GPIO_Init+0x100>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b21      	ldr	r3, [pc, #132]	@ (800083c <MX_GPIO_Init+0x100>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	21e0      	movs	r1, #224	@ 0xe0
 80007c6:	481e      	ldr	r0, [pc, #120]	@ (8000840 <MX_GPIO_Init+0x104>)
 80007c8:	f000 fcd6 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4818      	ldr	r0, [pc, #96]	@ (8000844 <MX_GPIO_Init+0x108>)
 80007e4:	f000 fb44 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007e8:	230c      	movs	r3, #12
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f8:	2307      	movs	r3, #7
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480f      	ldr	r0, [pc, #60]	@ (8000840 <MX_GPIO_Init+0x104>)
 8000804:	f000 fb34 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 8000808:	23e0      	movs	r3, #224	@ 0xe0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4808      	ldr	r0, [pc, #32]	@ (8000840 <MX_GPIO_Init+0x104>)
 8000820:	f000 fb26 	bl	8000e70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2106      	movs	r1, #6
 8000828:	2028      	movs	r0, #40	@ 0x28
 800082a:	f000 faf7 	bl	8000e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800082e:	2028      	movs	r0, #40	@ 0x28
 8000830:	f000 fb10 	bl	8000e54 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	@ 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000
 8000844:	40020800 	.word	0x40020800

08000848 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken = pdFALSE;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 8000852:	f006 f83f 	bl	80068d4 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <button_interrupt_handler+0x48>)
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	2300      	movs	r3, #0
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2300      	movs	r3, #0
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	f003 f874 	bl	8003954 <xTaskGenericNotifyFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d007      	beq.n	8000882 <button_interrupt_handler+0x3a>
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <button_interrupt_handler+0x4c>)
 8000874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	f3bf 8f4f 	dsb	sy
 800087e:	f3bf 8f6f 	isb	sy

	traceISR_EXIT();
 8000882:	f006 f869 	bl	8006958 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000040 	.word	0x20000040
 8000894:	e000ed04 	.word	0xe000ed04

08000898 <led_green_handler>:


static void led_green_handler(void* parameters)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80008a0:	4813      	ldr	r0, [pc, #76]	@ (80008f0 <led_green_handler+0x58>)
 80008a2:	f006 fa5f 	bl	8006d64 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 80008a6:	2120      	movs	r1, #32
 80008a8:	4812      	ldr	r0, [pc, #72]	@ (80008f4 <led_green_handler+0x5c>)
 80008aa:	f000 fc7e 	bl	80011aa <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80008ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2300      	movs	r3, #0
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2000      	movs	r0, #0
 80008bc:	f002 ffc0 	bl	8003840 <xTaskGenericNotifyWait>
 80008c0:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d1eb      	bne.n	80008a0 <led_green_handler+0x8>
			portENTER_CRITICAL();
 80008c8:	f003 fdf8 	bl	80044bc <vPortEnterCritical>
			next_task_handle = ledo_task_handle;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <led_green_handler+0x60>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <led_green_handler+0x64>)
 80008d2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_PIN,GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2120      	movs	r1, #32
 80008d8:	4806      	ldr	r0, [pc, #24]	@ (80008f4 <led_green_handler+0x5c>)
 80008da:	f000 fc4d 	bl	8001178 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 80008de:	4808      	ldr	r0, [pc, #32]	@ (8000900 <led_green_handler+0x68>)
 80008e0:	f006 fa40 	bl	8006d64 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 80008e4:	f003 fe1c 	bl	8004520 <vPortExitCritical>
			vTaskDelete(NULL);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f002 f93d 	bl	8002b68 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80008ee:	e7d7      	b.n	80008a0 <led_green_handler+0x8>
 80008f0:	08006f20 	.word	0x08006f20
 80008f4:	40020000 	.word	0x40020000
 80008f8:	20000038 	.word	0x20000038
 80008fc:	20000040 	.word	0x20000040
 8000900:	08006f34 	.word	0x08006f34

08000904 <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af02      	add	r7, sp, #8
 800090a:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800090c:	4813      	ldr	r0, [pc, #76]	@ (800095c <led_orange_handler+0x58>)
 800090e:	f006 fa29 	bl	8006d64 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_ORANGE_PIN );
 8000912:	2180      	movs	r1, #128	@ 0x80
 8000914:	4812      	ldr	r0, [pc, #72]	@ (8000960 <led_orange_handler+0x5c>)
 8000916:	f000 fc48 	bl	80011aa <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 800091a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2300      	movs	r3, #0
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2000      	movs	r0, #0
 8000928:	f002 ff8a 	bl	8003840 <xTaskGenericNotifyWait>
 800092c:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d1eb      	bne.n	800090c <led_orange_handler+0x8>
			portENTER_CRITICAL();
 8000934:	f003 fdc2 	bl	80044bc <vPortEnterCritical>
			next_task_handle = ledr_task_handle;
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <led_orange_handler+0x60>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <led_orange_handler+0x64>)
 800093e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, LED_ORANGE_PIN,GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2180      	movs	r1, #128	@ 0x80
 8000944:	4806      	ldr	r0, [pc, #24]	@ (8000960 <led_orange_handler+0x5c>)
 8000946:	f000 fc17 	bl	8001178 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 800094a:	4808      	ldr	r0, [pc, #32]	@ (800096c <led_orange_handler+0x68>)
 800094c:	f006 fa0a 	bl	8006d64 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000950:	f003 fde6 	bl	8004520 <vPortExitCritical>
			vTaskDelete(NULL);
 8000954:	2000      	movs	r0, #0
 8000956:	f002 f907 	bl	8002b68 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800095a:	e7d7      	b.n	800090c <led_orange_handler+0x8>
 800095c:	08006f4c 	.word	0x08006f4c
 8000960:	40020000 	.word	0x40020000
 8000964:	2000003c 	.word	0x2000003c
 8000968:	20000040 	.word	0x20000040
 800096c:	08006f60 	.word	0x08006f60

08000970 <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af02      	add	r7, sp, #8
 8000976:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000978:	4813      	ldr	r0, [pc, #76]	@ (80009c8 <led_red_handler+0x58>)
 800097a:	f006 f9f3 	bl	8006d64 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_RED_PIN);
 800097e:	2140      	movs	r1, #64	@ 0x40
 8000980:	4812      	ldr	r0, [pc, #72]	@ (80009cc <led_red_handler+0x5c>)
 8000982:	f000 fc12 	bl	80011aa <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000986:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2300      	movs	r3, #0
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2000      	movs	r0, #0
 8000994:	f002 ff54 	bl	8003840 <xTaskGenericNotifyWait>
 8000998:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d1eb      	bne.n	8000978 <led_red_handler+0x8>
			portENTER_CRITICAL();
 80009a0:	f003 fd8c 	bl	80044bc <vPortEnterCritical>
			next_task_handle = NULL;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <led_red_handler+0x60>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, LED_RED_PIN,GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2140      	movs	r1, #64	@ 0x40
 80009ae:	4807      	ldr	r0, [pc, #28]	@ (80009cc <led_red_handler+0x5c>)
 80009b0:	f000 fbe2 	bl	8001178 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 80009b4:	4807      	ldr	r0, [pc, #28]	@ (80009d4 <led_red_handler+0x64>)
 80009b6:	f006 f9d5 	bl	8006d64 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 80009ba:	f003 fdb1 	bl	8004520 <vPortExitCritical>
			vTaskDelete(NULL);
 80009be:	2000      	movs	r0, #0
 80009c0:	f002 f8d2 	bl	8002b68 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80009c4:	e7d8      	b.n	8000978 <led_red_handler+0x8>
 80009c6:	bf00      	nop
 80009c8:	08006f78 	.word	0x08006f78
 80009cc:	40020000 	.word	0x40020000
 80009d0:	20000040 	.word	0x20000040
 80009d4:	08006f8c 	.word	0x08006f8c

080009d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d101      	bne.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ea:	f000 f93f 	bl	8000c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40000c00 	.word	0x40000c00

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a0f      	ldr	r2, [pc, #60]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08e      	sub	sp, #56	@ 0x38
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	4b33      	ldr	r3, [pc, #204]	@ (8000b3c <HAL_InitTick+0xe4>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a70:	4a32      	ldr	r2, [pc, #200]	@ (8000b3c <HAL_InitTick+0xe4>)
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a78:	4b30      	ldr	r3, [pc, #192]	@ (8000b3c <HAL_InitTick+0xe4>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a84:	f107 0210 	add.w	r2, r7, #16
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f84e 	bl	8001b30 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d103      	bne.n	8000aa6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a9e:	f001 f833 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8000aa2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000aa4:	e004      	b.n	8000ab0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aa6:	f001 f82f 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ab2:	4a23      	ldr	r2, [pc, #140]	@ (8000b40 <HAL_InitTick+0xe8>)
 8000ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab8:	0c9b      	lsrs	r3, r3, #18
 8000aba:	3b01      	subs	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000abe:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <HAL_InitTick+0xec>)
 8000ac0:	4a21      	ldr	r2, [pc, #132]	@ (8000b48 <HAL_InitTick+0xf0>)
 8000ac2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <HAL_InitTick+0xec>)
 8000ac6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aca:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000acc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b44 <HAL_InitTick+0xec>)
 8000ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ad0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <HAL_InitTick+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <HAL_InitTick+0xec>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ade:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <HAL_InitTick+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000ae4:	4817      	ldr	r0, [pc, #92]	@ (8000b44 <HAL_InitTick+0xec>)
 8000ae6:	f001 f855 	bl	8001b94 <HAL_TIM_Base_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000af0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d11b      	bne.n	8000b30 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000af8:	4812      	ldr	r0, [pc, #72]	@ (8000b44 <HAL_InitTick+0xec>)
 8000afa:	f001 f8a5 	bl	8001c48 <HAL_TIM_Base_Start_IT>
 8000afe:	4603      	mov	r3, r0
 8000b00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d111      	bne.n	8000b30 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b0c:	2032      	movs	r0, #50	@ 0x32
 8000b0e:	f000 f9a1 	bl	8000e54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d808      	bhi.n	8000b2a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	2032      	movs	r0, #50	@ 0x32
 8000b1e:	f000 f97d 	bl	8000e1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <HAL_InitTick+0xf4>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6013      	str	r3, [r2, #0]
 8000b28:	e002      	b.n	8000b30 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3738      	adds	r7, #56	@ 0x38
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	431bde83 	.word	0x431bde83
 8000b44:	20000044 	.word	0x20000044
 8000b48:	40000c00 	.word	0x40000c00
 8000b4c:	20000004 	.word	0x20000004

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	button_interrupt_handler();
 8000b8a:	f7ff fe5d 	bl	8000848 <button_interrupt_handler>

	//clear EXTI 13 pending bit in the exti pending register
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b8e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b92:	f000 fb25 	bl	80011e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <TIM5_IRQHandler+0x10>)
 8000ba2:	f001 f8b3 	bl	8001d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000044 	.word	0x20000044

08000bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <SystemInit+0x20>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bba:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <SystemInit+0x20>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bd8:	f7ff ffea 	bl	8000bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bdc:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bde:	490d      	ldr	r1, [pc, #52]	@ (8000c14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f006 f937 	bl	8006e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff fcad 	bl	8000564 <main>
  bx  lr    
 8000c0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000c18:	080070d0 	.word	0x080070d0
  ldr r2, =_sbss
 8000c1c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000c20:	200144a8 	.word	0x200144a8

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <HAL_Init+0x40>)
 8000c32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <HAL_Init+0x40>)
 8000c3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	@ (8000c68 <HAL_Init+0x40>)
 8000c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f8d8 	bl	8000e06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fefe 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fed4 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00

08000c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	2000008c 	.word	0x2000008c

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b03      	ldr	r3, [pc, #12]	@ (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	2000008c 	.word	0x2000008c

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	@ (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	@ (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	@ (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	@ 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	@ 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff4c 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2e:	f7ff ff61 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	6978      	ldr	r0, [r7, #20]
 8000e3a:	f7ff ffb1 	bl	8000da0 <NVIC_EncodePriority>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff80 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e4c:	bf00      	nop
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff54 	bl	8000d10 <__NVIC_EnableIRQ>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	@ 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	e159      	b.n	8001140 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	f040 8148 	bne.w	800113a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d005      	beq.n	8000ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d130      	bne.n	8000f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	f003 0201 	and.w	r2, r3, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d017      	beq.n	8000f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d123      	bne.n	8000fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	69b9      	ldr	r1, [r7, #24]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0203 	and.w	r2, r3, #3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80a2 	beq.w	800113a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b57      	ldr	r3, [pc, #348]	@ (8001158 <HAL_GPIO_Init+0x2e8>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	4a56      	ldr	r2, [pc, #344]	@ (8001158 <HAL_GPIO_Init+0x2e8>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001004:	6453      	str	r3, [r2, #68]	@ 0x44
 8001006:	4b54      	ldr	r3, [pc, #336]	@ (8001158 <HAL_GPIO_Init+0x2e8>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001012:	4a52      	ldr	r2, [pc, #328]	@ (800115c <HAL_GPIO_Init+0x2ec>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a49      	ldr	r2, [pc, #292]	@ (8001160 <HAL_GPIO_Init+0x2f0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x202>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a48      	ldr	r2, [pc, #288]	@ (8001164 <HAL_GPIO_Init+0x2f4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x1fe>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a47      	ldr	r2, [pc, #284]	@ (8001168 <HAL_GPIO_Init+0x2f8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x1fa>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a46      	ldr	r2, [pc, #280]	@ (800116c <HAL_GPIO_Init+0x2fc>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x1f6>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a45      	ldr	r2, [pc, #276]	@ (8001170 <HAL_GPIO_Init+0x300>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x1f2>
 800105e:	2304      	movs	r3, #4
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001062:	2307      	movs	r3, #7
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x204>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x204>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001072:	2300      	movs	r3, #0
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001084:	4935      	ldr	r1, [pc, #212]	@ (800115c <HAL_GPIO_Init+0x2ec>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001092:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <HAL_GPIO_Init+0x304>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001174 <HAL_GPIO_Init+0x304>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001174 <HAL_GPIO_Init+0x304>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e0:	4a24      	ldr	r2, [pc, #144]	@ (8001174 <HAL_GPIO_Init+0x304>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e6:	4b23      	ldr	r3, [pc, #140]	@ (8001174 <HAL_GPIO_Init+0x304>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110a:	4a1a      	ldr	r2, [pc, #104]	@ (8001174 <HAL_GPIO_Init+0x304>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001110:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <HAL_GPIO_Init+0x304>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001134:	4a0f      	ldr	r2, [pc, #60]	@ (8001174 <HAL_GPIO_Init+0x304>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	f67f aea2 	bls.w	8000e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3724      	adds	r7, #36	@ 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40013800 	.word	0x40013800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40013c00 	.word	0x40013c00

08001178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001194:	e003      	b.n	800119e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	041a      	lsls	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b085      	sub	sp, #20
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	460b      	mov	r3, r1
 80011b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011bc:	887a      	ldrh	r2, [r7, #2]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4013      	ands	r3, r2
 80011c2:	041a      	lsls	r2, r3, #16
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	400b      	ands	r3, r1
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]
}
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f806 	bl	8001210 <HAL_GPIO_EXTI_Callback>
  }
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40013c00 	.word	0x40013c00

08001210 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e267      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d075      	beq.n	8001332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001246:	4b88      	ldr	r3, [pc, #544]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b04      	cmp	r3, #4
 8001250:	d00c      	beq.n	800126c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001252:	4b85      	ldr	r3, [pc, #532]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800125a:	2b08      	cmp	r3, #8
 800125c:	d112      	bne.n	8001284 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4b82      	ldr	r3, [pc, #520]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001266:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800126a:	d10b      	bne.n	8001284 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	4b7e      	ldr	r3, [pc, #504]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d05b      	beq.n	8001330 <HAL_RCC_OscConfig+0x108>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d157      	bne.n	8001330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e242      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800128c:	d106      	bne.n	800129c <HAL_RCC_OscConfig+0x74>
 800128e:	4b76      	ldr	r3, [pc, #472]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a75      	ldr	r2, [pc, #468]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e01d      	b.n	80012d8 <HAL_RCC_OscConfig+0xb0>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x98>
 80012a6:	4b70      	ldr	r3, [pc, #448]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0xb0>
 80012c0:	4b69      	ldr	r3, [pc, #420]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a68      	ldr	r2, [pc, #416]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b66      	ldr	r3, [pc, #408]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a65      	ldr	r2, [pc, #404]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fcd8 	bl	8000c94 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fcd4 	bl	8000c94 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	@ 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e207      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0xc0>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fcc4 	bl	8000c94 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fcc0 	bl	8000c94 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	@ 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e1f3      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	4b51      	ldr	r3, [pc, #324]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0xe8>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d063      	beq.n	8001406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800133e:	4b4a      	ldr	r3, [pc, #296]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134a:	4b47      	ldr	r3, [pc, #284]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001352:	2b08      	cmp	r3, #8
 8001354:	d11c      	bne.n	8001390 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b44      	ldr	r3, [pc, #272]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d116      	bne.n	8001390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	4b41      	ldr	r3, [pc, #260]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <HAL_RCC_OscConfig+0x152>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1c7      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4b3b      	ldr	r3, [pc, #236]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4937      	ldr	r1, [pc, #220]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	e03a      	b.n	8001406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d020      	beq.n	80013da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001398:	4b34      	ldr	r3, [pc, #208]	@ (800146c <HAL_RCC_OscConfig+0x244>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139e:	f7ff fc79 	bl	8000c94 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a6:	f7ff fc75 	bl	8000c94 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e1a8      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b28      	ldr	r3, [pc, #160]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4925      	ldr	r1, [pc, #148]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
 80013d8:	e015      	b.n	8001406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013da:	4b24      	ldr	r3, [pc, #144]	@ (800146c <HAL_RCC_OscConfig+0x244>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fc58 	bl	8000c94 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fc54 	bl	8000c94 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e187      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d036      	beq.n	8001480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d016      	beq.n	8001448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_RCC_OscConfig+0x248>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001420:	f7ff fc38 	bl	8000c94 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff fc34 	bl	8000c94 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e167      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 800143c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x200>
 8001446:	e01b      	b.n	8001480 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <HAL_RCC_OscConfig+0x248>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fc21 	bl	8000c94 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	e00e      	b.n	8001474 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001456:	f7ff fc1d 	bl	8000c94 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d907      	bls.n	8001474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e150      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
 8001468:	40023800 	.word	0x40023800
 800146c:	42470000 	.word	0x42470000
 8001470:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	4b88      	ldr	r3, [pc, #544]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1ea      	bne.n	8001456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8097 	beq.w	80015bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001492:	4b81      	ldr	r3, [pc, #516]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10f      	bne.n	80014be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	4a7c      	ldr	r2, [pc, #496]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ba:	2301      	movs	r3, #1
 80014bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014be:	4b77      	ldr	r3, [pc, #476]	@ (800169c <HAL_RCC_OscConfig+0x474>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d118      	bne.n	80014fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ca:	4b74      	ldr	r3, [pc, #464]	@ (800169c <HAL_RCC_OscConfig+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a73      	ldr	r2, [pc, #460]	@ (800169c <HAL_RCC_OscConfig+0x474>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fbdd 	bl	8000c94 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014de:	f7ff fbd9 	bl	8000c94 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e10c      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	4b6a      	ldr	r3, [pc, #424]	@ (800169c <HAL_RCC_OscConfig+0x474>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x2ea>
 8001504:	4b64      	ldr	r3, [pc, #400]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001508:	4a63      	ldr	r2, [pc, #396]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001510:	e01c      	b.n	800154c <HAL_RCC_OscConfig+0x324>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b05      	cmp	r3, #5
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x30c>
 800151a:	4b5f      	ldr	r3, [pc, #380]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151e:	4a5e      	ldr	r2, [pc, #376]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	6713      	str	r3, [r2, #112]	@ 0x70
 8001526:	4b5c      	ldr	r3, [pc, #368]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152a:	4a5b      	ldr	r2, [pc, #364]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	@ 0x70
 8001532:	e00b      	b.n	800154c <HAL_RCC_OscConfig+0x324>
 8001534:	4b58      	ldr	r3, [pc, #352]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001538:	4a57      	ldr	r2, [pc, #348]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001540:	4b55      	ldr	r3, [pc, #340]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001544:	4a54      	ldr	r2, [pc, #336]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 0304 	bic.w	r3, r3, #4
 800154a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d015      	beq.n	8001580 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fb9e 	bl	8000c94 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155a:	e00a      	b.n	8001572 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155c:	f7ff fb9a 	bl	8000c94 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e0cb      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001572:	4b49      	ldr	r3, [pc, #292]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0ee      	beq.n	800155c <HAL_RCC_OscConfig+0x334>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001580:	f7ff fb88 	bl	8000c94 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fb84 	bl	8000c94 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0b5      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159e:	4b3e      	ldr	r3, [pc, #248]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ee      	bne.n	8001588 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d105      	bne.n	80015bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b0:	4b39      	ldr	r3, [pc, #228]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	4a38      	ldr	r2, [pc, #224]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a1 	beq.w	8001708 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c6:	4b34      	ldr	r3, [pc, #208]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d05c      	beq.n	800168c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d141      	bne.n	800165e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015da:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <HAL_RCC_OscConfig+0x478>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb58 	bl	8000c94 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff fb54 	bl	8000c94 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e087      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	4b27      	ldr	r3, [pc, #156]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69da      	ldr	r2, [r3, #28]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001614:	019b      	lsls	r3, r3, #6
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	085b      	lsrs	r3, r3, #1
 800161e:	3b01      	subs	r3, #1
 8001620:	041b      	lsls	r3, r3, #16
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	491b      	ldr	r1, [pc, #108]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <HAL_RCC_OscConfig+0x478>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff fb2d 	bl	8000c94 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163e:	f7ff fb29 	bl	8000c94 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e05c      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x416>
 800165c:	e054      	b.n	8001708 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <HAL_RCC_OscConfig+0x478>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fb16 	bl	8000c94 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fb12 	bl	8000c94 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e045      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x444>
 800168a:	e03d      	b.n	8001708 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d107      	bne.n	80016a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e038      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
 8001698:	40023800 	.word	0x40023800
 800169c:	40007000 	.word	0x40007000
 80016a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <HAL_RCC_OscConfig+0x4ec>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d028      	beq.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d121      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d11a      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016d4:	4013      	ands	r3, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016dc:	4293      	cmp	r3, r2
 80016de:	d111      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	3b01      	subs	r3, #1
 80016ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0cc      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b68      	ldr	r3, [pc, #416]	@ (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d90c      	bls.n	8001754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b65      	ldr	r3, [pc, #404]	@ (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b63      	ldr	r3, [pc, #396]	@ (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0b8      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800176c:	4b59      	ldr	r3, [pc, #356]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a58      	ldr	r2, [pc, #352]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001776:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001784:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a52      	ldr	r2, [pc, #328]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800178e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001790:	4b50      	ldr	r3, [pc, #320]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	494d      	ldr	r1, [pc, #308]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d044      	beq.n	8001838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b47      	ldr	r3, [pc, #284]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d119      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e07f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	4b3f      	ldr	r3, [pc, #252]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e06f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	4b3b      	ldr	r3, [pc, #236]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e067      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f6:	4b37      	ldr	r3, [pc, #220]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f023 0203 	bic.w	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4934      	ldr	r1, [pc, #208]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001808:	f7ff fa44 	bl	8000c94 <HAL_GetTick>
 800180c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	e00a      	b.n	8001826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001810:	f7ff fa40 	bl	8000c94 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e04f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	4b2b      	ldr	r3, [pc, #172]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 020c 	and.w	r2, r3, #12
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	429a      	cmp	r2, r3
 8001836:	d1eb      	bne.n	8001810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001838:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d20c      	bcs.n	8001860 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e032      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186c:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4916      	ldr	r1, [pc, #88]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188a:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	490e      	ldr	r1, [pc, #56]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189e:	f000 f821 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	490a      	ldr	r1, [pc, #40]	@ (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	5ccb      	ldrb	r3, [r1, r3]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff f8ca 	bl	8000a58 <HAL_InitTick>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00
 80018d4:	40023800 	.word	0x40023800
 80018d8:	08007084 	.word	0x08007084
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e8:	b094      	sub	sp, #80	@ 0x50
 80018ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018fc:	4b79      	ldr	r3, [pc, #484]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d00d      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x40>
 8001908:	2b08      	cmp	r3, #8
 800190a:	f200 80e1 	bhi.w	8001ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x34>
 8001912:	2b04      	cmp	r3, #4
 8001914:	d003      	beq.n	800191e <HAL_RCC_GetSysClockFreq+0x3a>
 8001916:	e0db      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b73      	ldr	r3, [pc, #460]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 800191a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800191c:	e0db      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800191e:	4b73      	ldr	r3, [pc, #460]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x208>)
 8001920:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001922:	e0d8      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001924:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800192c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800192e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d063      	beq.n	8001a02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	099b      	lsrs	r3, r3, #6
 8001940:	2200      	movs	r2, #0
 8001942:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001944:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800194c:	633b      	str	r3, [r7, #48]	@ 0x30
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
 8001952:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001956:	4622      	mov	r2, r4
 8001958:	462b      	mov	r3, r5
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0159      	lsls	r1, r3, #5
 8001964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001968:	0150      	lsls	r0, r2, #5
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4621      	mov	r1, r4
 8001970:	1a51      	subs	r1, r2, r1
 8001972:	6139      	str	r1, [r7, #16]
 8001974:	4629      	mov	r1, r5
 8001976:	eb63 0301 	sbc.w	r3, r3, r1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001988:	4659      	mov	r1, fp
 800198a:	018b      	lsls	r3, r1, #6
 800198c:	4651      	mov	r1, sl
 800198e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001992:	4651      	mov	r1, sl
 8001994:	018a      	lsls	r2, r1, #6
 8001996:	4651      	mov	r1, sl
 8001998:	ebb2 0801 	subs.w	r8, r2, r1
 800199c:	4659      	mov	r1, fp
 800199e:	eb63 0901 	sbc.w	r9, r3, r1
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019b6:	4690      	mov	r8, r2
 80019b8:	4699      	mov	r9, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	eb18 0303 	adds.w	r3, r8, r3
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	462b      	mov	r3, r5
 80019c4:	eb49 0303 	adc.w	r3, r9, r3
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019d6:	4629      	mov	r1, r5
 80019d8:	024b      	lsls	r3, r1, #9
 80019da:	4621      	mov	r1, r4
 80019dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019e0:	4621      	mov	r1, r4
 80019e2:	024a      	lsls	r2, r1, #9
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ea:	2200      	movs	r2, #0
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019f4:	f7fe fc3e 	bl	8000274 <__aeabi_uldivmod>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4613      	mov	r3, r2
 80019fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a00:	e058      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a02:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	464b      	mov	r3, r9
 8001a20:	f04f 0000 	mov.w	r0, #0
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	0159      	lsls	r1, r3, #5
 8001a2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a2e:	0150      	lsls	r0, r2, #5
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4641      	mov	r1, r8
 8001a36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a3a:	4649      	mov	r1, r9
 8001a3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a54:	ebb2 040a 	subs.w	r4, r2, sl
 8001a58:	eb63 050b 	sbc.w	r5, r3, fp
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	00eb      	lsls	r3, r5, #3
 8001a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a6a:	00e2      	lsls	r2, r4, #3
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	461d      	mov	r5, r3
 8001a70:	4643      	mov	r3, r8
 8001a72:	18e3      	adds	r3, r4, r3
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	464b      	mov	r3, r9
 8001a78:	eb45 0303 	adc.w	r3, r5, r3
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	028b      	lsls	r3, r1, #10
 8001a8e:	4621      	mov	r1, r4
 8001a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a94:	4621      	mov	r1, r4
 8001a96:	028a      	lsls	r2, r1, #10
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	61fa      	str	r2, [r7, #28]
 8001aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa8:	f7fe fbe4 	bl	8000274 <__aeabi_uldivmod>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ac4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ace:	e002      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3750      	adds	r7, #80	@ 0x50
 8001adc:	46bd      	mov	sp, r7
 8001ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	007a1200 	.word	0x007a1200

08001af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b0c:	f7ff fff0 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0a9b      	lsrs	r3, r3, #10
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	@ (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08007094 	.word	0x08007094

08001b30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0203 	and.w	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b72:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <HAL_RCC_GetClockConfig+0x60>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0207 	and.w	r2, r3, #7
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	601a      	str	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e041      	b.n	8001c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f839 	bl	8001c32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f000 f9b2 	bl	8001f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d001      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e044      	b.n	8001cea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d018      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8a:	d013      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1a      	ldr	r2, [pc, #104]	@ (8001cfc <HAL_TIM_Base_Start_IT+0xb4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00e      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a19      	ldr	r2, [pc, #100]	@ (8001d00 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d009      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a17      	ldr	r2, [pc, #92]	@ (8001d04 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d004      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a16      	ldr	r2, [pc, #88]	@ (8001d08 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d111      	bne.n	8001cd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d010      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0201 	orr.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd6:	e007      	b.n	8001ce8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40000800 	.word	0x40000800
 8001d04:	40000c00 	.word	0x40000c00
 8001d08:	40014000 	.word	0x40014000

08001d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d020      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d01b      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0202 	mvn.w	r2, #2
 8001d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8d2 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8c4 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f8d5 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d020      	beq.n	8001dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01b      	beq.n	8001dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0204 	mvn.w	r2, #4
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8ac 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f89e 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8af 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d020      	beq.n	8001e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01b      	beq.n	8001e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0208 	mvn.w	r2, #8
 8001dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2204      	movs	r2, #4
 8001dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f886 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f878 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f889 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d020      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01b      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0210 	mvn.w	r2, #16
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f860 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f852 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f863 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0201 	mvn.w	r2, #1
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fdb0 	bl	80009d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00c      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8e6 	bl	8002068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00c      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f834 	bl	8001f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0320 	and.w	r3, r3, #32
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0220 	mvn.w	r2, #32
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8b8 	bl	8002054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3a      	ldr	r2, [pc, #232]	@ (8002038 <TIM_Base_SetConfig+0xfc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00f      	beq.n	8001f74 <TIM_Base_SetConfig+0x38>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f5a:	d00b      	beq.n	8001f74 <TIM_Base_SetConfig+0x38>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a37      	ldr	r2, [pc, #220]	@ (800203c <TIM_Base_SetConfig+0x100>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d007      	beq.n	8001f74 <TIM_Base_SetConfig+0x38>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a36      	ldr	r2, [pc, #216]	@ (8002040 <TIM_Base_SetConfig+0x104>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d003      	beq.n	8001f74 <TIM_Base_SetConfig+0x38>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a35      	ldr	r2, [pc, #212]	@ (8002044 <TIM_Base_SetConfig+0x108>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d108      	bne.n	8001f86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2b      	ldr	r2, [pc, #172]	@ (8002038 <TIM_Base_SetConfig+0xfc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01b      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f94:	d017      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a28      	ldr	r2, [pc, #160]	@ (800203c <TIM_Base_SetConfig+0x100>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a27      	ldr	r2, [pc, #156]	@ (8002040 <TIM_Base_SetConfig+0x104>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00f      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a26      	ldr	r2, [pc, #152]	@ (8002044 <TIM_Base_SetConfig+0x108>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00b      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a25      	ldr	r2, [pc, #148]	@ (8002048 <TIM_Base_SetConfig+0x10c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a24      	ldr	r2, [pc, #144]	@ (800204c <TIM_Base_SetConfig+0x110>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d003      	beq.n	8001fc6 <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a23      	ldr	r2, [pc, #140]	@ (8002050 <TIM_Base_SetConfig+0x114>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d108      	bne.n	8001fd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8002038 <TIM_Base_SetConfig+0xfc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d103      	bne.n	800200c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d105      	bne.n	800202a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f023 0201 	bic.w	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	611a      	str	r2, [r3, #16]
  }
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40010000 	.word	0x40010000
 800203c:	40000400 	.word	0x40000400
 8002040:	40000800 	.word	0x40000800
 8002044:	40000c00 	.word	0x40000c00
 8002048:	40014000 	.word	0x40014000
 800204c:	40014400 	.word	0x40014400
 8002050:	40014800 	.word	0x40014800

08002054 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f103 0208 	add.w	r2, r3, #8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f04f 32ff 	mov.w	r2, #4294967295
 8002094:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f103 0208 	add.w	r2, r3, #8
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f103 0208 	add.w	r2, r3, #8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	601a      	str	r2, [r3, #0]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d103      	bne.n	800213e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e00c      	b.n	8002158 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3308      	adds	r3, #8
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e002      	b.n	800214c <vListInsert+0x2e>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	429a      	cmp	r2, r3
 8002156:	d2f6      	bcs.n	8002146 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	601a      	str	r2, [r3, #0]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6892      	ldr	r2, [r2, #8]
 80021a6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6852      	ldr	r2, [r2, #4]
 80021b0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d103      	bne.n	80021c4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	1e5a      	subs	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80021ee:	2301      	movs	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <xQueueGenericReset+0x30>
        __asm volatile
 80021fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002200:	f383 8811 	msr	BASEPRI, r3
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	60fb      	str	r3, [r7, #12]
    }
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d05d      	beq.n	80022d6 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800221e:	2b00      	cmp	r3, #0
 8002220:	d059      	beq.n	80022d6 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222a:	2100      	movs	r1, #0
 800222c:	fba3 2302 	umull	r2, r3, r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d000      	beq.n	8002236 <xQueueGenericReset+0x52>
 8002234:	2101      	movs	r1, #1
 8002236:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002238:	2b00      	cmp	r3, #0
 800223a:	d14c      	bne.n	80022d6 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 800223c:	f002 f93e 	bl	80044bc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002248:	6939      	ldr	r1, [r7, #16]
 800224a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	441a      	add	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2200      	movs	r2, #0
 800225a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226c:	3b01      	subs	r3, #1
 800226e:	6939      	ldr	r1, [r7, #16]
 8002270:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	441a      	add	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	22ff      	movs	r2, #255	@ 0xff
 8002280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	22ff      	movs	r2, #255	@ 0xff
 8002288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d114      	bne.n	80022bc <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01a      	beq.n	80022d0 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	3310      	adds	r3, #16
 800229e:	4618      	mov	r0, r3
 80022a0:	f001 f89a 	bl	80033d8 <xTaskRemoveFromEventList>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d012      	beq.n	80022d0 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80022aa:	4b16      	ldr	r3, [pc, #88]	@ (8002304 <xQueueGenericReset+0x120>)
 80022ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	f3bf 8f4f 	dsb	sy
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	e009      	b.n	80022d0 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	3310      	adds	r3, #16
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fedb 	bl	800207c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	3324      	adds	r3, #36	@ 0x24
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fed6 	bl	800207c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022d0:	f002 f926 	bl	8004520 <vPortExitCritical>
 80022d4:	e001      	b.n	80022da <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10b      	bne.n	80022f8 <xQueueGenericReset+0x114>
        __asm volatile
 80022e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022e4:	f383 8811 	msr	BASEPRI, r3
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	60bb      	str	r3, [r7, #8]
    }
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80022f8:	697b      	ldr	r3, [r7, #20]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000ed04 	.word	0xe000ed04

08002308 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	@ 0x28
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	4613      	mov	r3, r2
 8002314:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d02e      	beq.n	800237e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002320:	2100      	movs	r1, #0
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	fba3 2302 	umull	r2, r3, r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d000      	beq.n	8002330 <xQueueGenericCreate+0x28>
 800232e:	2101      	movs	r1, #1
 8002330:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	d123      	bne.n	800237e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800233e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002342:	d81c      	bhi.n	800237e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	3350      	adds	r3, #80	@ 0x50
 8002352:	4618      	mov	r0, r3
 8002354:	f002 f9e4 	bl	8004720 <pvPortMalloc>
 8002358:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01d      	beq.n	800239c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3350      	adds	r3, #80	@ 0x50
 8002368:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800236a:	79fa      	ldrb	r2, [r7, #7]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f815 	bl	80023a6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800237c:	e00e      	b.n	800239c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10b      	bne.n	800239c <xQueueGenericCreate+0x94>
        __asm volatile
 8002384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	613b      	str	r3, [r7, #16]
    }
 8002396:	bf00      	nop
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800239c:	69fb      	ldr	r3, [r7, #28]
    }
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d103      	bne.n	80023c2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e002      	b.n	80023c8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023d4:	2101      	movs	r1, #1
 80023d6:	69b8      	ldr	r0, [r7, #24]
 80023d8:	f7ff ff04 	bl	80021e4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	68f9      	ldr	r1, [r7, #12]
 80023ea:	2073      	movs	r0, #115	@ 0x73
 80023ec:	f003 fdf4 	bl	8005fd8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b08f      	sub	sp, #60	@ 0x3c
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800240c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10b      	bne.n	800242a <xQueueReceive+0x32>
        __asm volatile
 8002412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002416:	f383 8811 	msr	BASEPRI, r3
 800241a:	f3bf 8f6f 	isb	sy
 800241e:	f3bf 8f4f 	dsb	sy
 8002422:	623b      	str	r3, [r7, #32]
    }
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	e7fd      	b.n	8002426 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d103      	bne.n	8002438 <xQueueReceive+0x40>
 8002430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <xQueueReceive+0x44>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <xQueueReceive+0x46>
 800243c:	2300      	movs	r3, #0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10b      	bne.n	800245a <xQueueReceive+0x62>
        __asm volatile
 8002442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002446:	f383 8811 	msr	BASEPRI, r3
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	61fb      	str	r3, [r7, #28]
    }
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	e7fd      	b.n	8002456 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800245a:	f001 f9d3 	bl	8003804 <xTaskGetSchedulerState>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <xQueueReceive+0x72>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <xQueueReceive+0x76>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <xQueueReceive+0x78>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10b      	bne.n	800248c <xQueueReceive+0x94>
        __asm volatile
 8002474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	61bb      	str	r3, [r7, #24]
    }
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800248c:	f002 f816 	bl	80044bc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	2b00      	cmp	r3, #0
 800249a:	d02f      	beq.n	80024fc <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024a0:	f000 f8be 	bl	8002620 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80024a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 fb70 	bl	8006b8c <SEGGER_SYSVIEW_ShrinkId>
 80024ac:	4604      	mov	r4, r0
 80024ae:	2000      	movs	r0, #0
 80024b0:	f004 fb6c 	bl	8006b8c <SEGGER_SYSVIEW_ShrinkId>
 80024b4:	4602      	mov	r2, r0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2101      	movs	r1, #1
 80024ba:	9100      	str	r1, [sp, #0]
 80024bc:	4621      	mov	r1, r4
 80024be:	205c      	movs	r0, #92	@ 0x5c
 80024c0:	f003 fe00 	bl	80060c4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	1e5a      	subs	r2, r3, #1
 80024c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ca:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00f      	beq.n	80024f4 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d6:	3310      	adds	r3, #16
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 ff7d 	bl	80033d8 <xTaskRemoveFromEventList>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024e4:	4b4d      	ldr	r3, [pc, #308]	@ (800261c <xQueueReceive+0x224>)
 80024e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024f4:	f002 f814 	bl	8004520 <vPortExitCritical>
                return pdPASS;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e08a      	b.n	8002612 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d113      	bne.n	800252a <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002502:	f002 f80d 	bl	8004520 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002508:	4618      	mov	r0, r3
 800250a:	f004 fb3f 	bl	8006b8c <SEGGER_SYSVIEW_ShrinkId>
 800250e:	4604      	mov	r4, r0
 8002510:	2000      	movs	r0, #0
 8002512:	f004 fb3b 	bl	8006b8c <SEGGER_SYSVIEW_ShrinkId>
 8002516:	4602      	mov	r2, r0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2101      	movs	r1, #1
 800251c:	9100      	str	r1, [sp, #0]
 800251e:	4621      	mov	r1, r4
 8002520:	205c      	movs	r0, #92	@ 0x5c
 8002522:	f003 fdcf 	bl	80060c4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002526:	2300      	movs	r3, #0
 8002528:	e073      	b.n	8002612 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800252a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d106      	bne.n	800253e <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	4618      	mov	r0, r3
 8002536:	f001 f829 	bl	800358c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800253a:	2301      	movs	r3, #1
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800253e:	f001 ffef 	bl	8004520 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002542:	f000 fc23 	bl	8002d8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002546:	f001 ffb9 	bl	80044bc <vPortEnterCritical>
 800254a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002550:	b25b      	sxtb	r3, r3
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d103      	bne.n	8002560 <xQueueReceive+0x168>
 8002558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002562:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002566:	b25b      	sxtb	r3, r3
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d103      	bne.n	8002576 <xQueueReceive+0x17e>
 800256e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002576:	f001 ffd3 	bl	8004520 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800257a:	1d3a      	adds	r2, r7, #4
 800257c:	f107 0310 	add.w	r3, r7, #16
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f001 f818 	bl	80035b8 <xTaskCheckForTimeOut>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d124      	bne.n	80025d8 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800258e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002590:	f000 f8be 	bl	8002710 <prvIsQueueEmpty>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d018      	beq.n	80025cc <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800259a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259c:	3324      	adds	r3, #36	@ 0x24
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fea8 	bl	80032f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025aa:	f000 f85f 	bl	800266c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025ae:	f000 fbfb 	bl	8002da8 <xTaskResumeAll>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f47f af69 	bne.w	800248c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <xQueueReceive+0x224>)
 80025bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	e75f      	b.n	800248c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025ce:	f000 f84d 	bl	800266c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025d2:	f000 fbe9 	bl	8002da8 <xTaskResumeAll>
 80025d6:	e759      	b.n	800248c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025da:	f000 f847 	bl	800266c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025de:	f000 fbe3 	bl	8002da8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025e4:	f000 f894 	bl	8002710 <prvIsQueueEmpty>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f43f af4e 	beq.w	800248c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 faca 	bl	8006b8c <SEGGER_SYSVIEW_ShrinkId>
 80025f8:	4604      	mov	r4, r0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f004 fac6 	bl	8006b8c <SEGGER_SYSVIEW_ShrinkId>
 8002600:	4602      	mov	r2, r0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2101      	movs	r1, #1
 8002606:	9100      	str	r1, [sp, #0]
 8002608:	4621      	mov	r1, r4
 800260a:	205c      	movs	r0, #92	@ 0x5c
 800260c:	f003 fd5a 	bl	80060c4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002610:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002612:	4618      	mov	r0, r3
 8002614:	3734      	adds	r7, #52	@ 0x34
 8002616:	46bd      	mov	sp, r7
 8002618:	bd90      	pop	{r4, r7, pc}
 800261a:	bf00      	nop
 800261c:	e000ed04 	.word	0xe000ed04

08002620 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d018      	beq.n	8002664 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	441a      	add	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	429a      	cmp	r2, r3
 800264a:	d303      	bcc.n	8002654 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68d9      	ldr	r1, [r3, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	461a      	mov	r2, r3
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	f004 fc2c 	bl	8006ebc <memcpy>
    }
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002674:	f001 ff22 	bl	80044bc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800267e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002680:	e011      	b.n	80026a6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	2b00      	cmp	r3, #0
 8002688:	d012      	beq.n	80026b0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3324      	adds	r3, #36	@ 0x24
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fea2 	bl	80033d8 <xTaskRemoveFromEventList>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800269a:	f000 fff5 	bl	8003688 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	dce9      	bgt.n	8002682 <prvUnlockQueue+0x16>
 80026ae:	e000      	b.n	80026b2 <prvUnlockQueue+0x46>
                    break;
 80026b0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	22ff      	movs	r2, #255	@ 0xff
 80026b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80026ba:	f001 ff31 	bl	8004520 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026be:	f001 fefd 	bl	80044bc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026c8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026ca:	e011      	b.n	80026f0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d012      	beq.n	80026fa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3310      	adds	r3, #16
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fe7d 	bl	80033d8 <xTaskRemoveFromEventList>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80026e4:	f000 ffd0 	bl	8003688 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026e8:	7bbb      	ldrb	r3, [r7, #14]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	dce9      	bgt.n	80026cc <prvUnlockQueue+0x60>
 80026f8:	e000      	b.n	80026fc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026fa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	22ff      	movs	r2, #255	@ 0xff
 8002700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002704:	f001 ff0c 	bl	8004520 <vPortExitCritical>
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002718:	f001 fed0 	bl	80044bc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002724:	2301      	movs	r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e001      	b.n	800272e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800272e:	f001 fef7 	bl	8004520 <vPortExitCritical>

    return xReturn;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10b      	bne.n	8002768 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	60fb      	str	r3, [r7, #12]
    }
 8002762:	bf00      	nop
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d024      	beq.n	80027b8 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e01e      	b.n	80027b2 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002774:	4a1c      	ldr	r2, [pc, #112]	@ (80027e8 <vQueueAddToRegistry+0xac>)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d105      	bne.n	8002790 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4a17      	ldr	r2, [pc, #92]	@ (80027e8 <vQueueAddToRegistry+0xac>)
 800278a:	4413      	add	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
                    break;
 800278e:	e013      	b.n	80027b8 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <vQueueAddToRegistry+0x70>
 8002796:	4a14      	ldr	r2, [pc, #80]	@ (80027e8 <vQueueAddToRegistry+0xac>)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d104      	bne.n	80027ac <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4a10      	ldr	r2, [pc, #64]	@ (80027e8 <vQueueAddToRegistry+0xac>)
 80027a8:	4413      	add	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3301      	adds	r3, #1
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b07      	cmp	r3, #7
 80027b6:	d9dd      	bls.n	8002774 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00f      	beq.n	80027de <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f004 f9dd 	bl	8006b8c <SEGGER_SYSVIEW_ShrinkId>
 80027d2:	4601      	mov	r1, r0
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	2071      	movs	r0, #113	@ 0x71
 80027da:	f003 fba3 	bl	8005f24 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80027de:	bf00      	nop
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000090 	.word	0x20000090

080027ec <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027fc:	f001 fe5e 	bl	80044bc <vPortEnterCritical>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002806:	b25b      	sxtb	r3, r3
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d103      	bne.n	8002816 <vQueueWaitForMessageRestricted+0x2a>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800281c:	b25b      	sxtb	r3, r3
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d103      	bne.n	800282c <vQueueWaitForMessageRestricted+0x40>
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800282c:	f001 fe78 	bl	8004520 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002834:	2b00      	cmp	r3, #0
 8002836:	d106      	bne.n	8002846 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	3324      	adds	r3, #36	@ 0x24
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fd7f 	bl	8003344 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002846:	6978      	ldr	r0, [r7, #20]
 8002848:	f7ff ff10 	bl	800266c <prvUnlockQueue>
    }
 800284c:	bf00      	nop
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002854:	b580      	push	{r7, lr}
 8002856:	b08c      	sub	sp, #48	@ 0x30
 8002858:	af04      	add	r7, sp, #16
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4618      	mov	r0, r3
 800286a:	f001 ff59 	bl	8004720 <pvPortMalloc>
 800286e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d013      	beq.n	800289e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002876:	2058      	movs	r0, #88	@ 0x58
 8002878:	f001 ff52 	bl	8004720 <pvPortMalloc>
 800287c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002884:	2258      	movs	r2, #88	@ 0x58
 8002886:	2100      	movs	r1, #0
 8002888:	69f8      	ldr	r0, [r7, #28]
 800288a:	f004 faeb 	bl	8006e64 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
 8002894:	e005      	b.n	80028a2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f001 fffe 	bl	8004898 <vPortFree>
 800289c:	e001      	b.n	80028a2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	2300      	movs	r3, #0
 80028ac:	9303      	str	r3, [sp, #12]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f80e 	bl	80028e0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80028c4:	69f8      	ldr	r0, [r7, #28]
 80028c6:	f000 f89b 	bl	8002a00 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80028ca:	2301      	movs	r3, #1
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	e002      	b.n	80028d6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
 80028d4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80028d6:	69bb      	ldr	r3, [r7, #24]
    }
 80028d8:	4618      	mov	r0, r3
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	461a      	mov	r2, r3
 80028f8:	21a5      	movs	r1, #165	@ 0xa5
 80028fa:	f004 fab3 	bl	8006e64 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002908:	3b01      	subs	r3, #1
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f023 0307 	bic.w	r3, r3, #7
 8002916:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	617b      	str	r3, [r7, #20]
    }
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	e7fd      	b.n	8002936 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01e      	beq.n	800297e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	e012      	b.n	800296c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	4413      	add	r3, r2
 800294c:	7819      	ldrb	r1, [r3, #0]
 800294e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	3334      	adds	r3, #52	@ 0x34
 8002956:	460a      	mov	r2, r1
 8002958:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3301      	adds	r3, #1
 800296a:	61fb      	str	r3, [r7, #28]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b09      	cmp	r3, #9
 8002970:	d9e9      	bls.n	8002946 <prvInitialiseNewTask+0x66>
 8002972:	e000      	b.n	8002976 <prvInitialiseNewTask+0x96>
            {
                break;
 8002974:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	2b04      	cmp	r3, #4
 8002982:	d90b      	bls.n	800299c <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	613b      	str	r3, [r7, #16]
    }
 8002996:	bf00      	nop
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800299c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d901      	bls.n	80029a6 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029a2:	2304      	movs	r3, #4
 80029a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80029a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80029ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029b0:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b4:	3304      	adds	r3, #4
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fb80 	bl	80020bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029be:	3318      	adds	r3, #24
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fb7b 	bl	80020bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ca:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ce:	f1c3 0205 	rsb	r2, r3, #5
 80029d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029da:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	69b8      	ldr	r0, [r7, #24]
 80029e2:	f001 fc35 	bl	8004250 <pxPortInitialiseStack>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ea:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80029ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029f6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029f8:	bf00      	nop
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a00:	b5b0      	push	{r4, r5, r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a08:	f001 fd58 	bl	80044bc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b4c <prvAddNewTaskToReadyList+0x14c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	4a4e      	ldr	r2, [pc, #312]	@ (8002b4c <prvAddNewTaskToReadyList+0x14c>)
 8002a14:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a16:	4b4e      	ldr	r3, [pc, #312]	@ (8002b50 <prvAddNewTaskToReadyList+0x150>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b50 <prvAddNewTaskToReadyList+0x150>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a24:	4b49      	ldr	r3, [pc, #292]	@ (8002b4c <prvAddNewTaskToReadyList+0x14c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d110      	bne.n	8002a4e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a2c:	f000 fe50 	bl	80036d0 <prvInitialiseTaskLists>
 8002a30:	e00d      	b.n	8002a4e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a32:	4b48      	ldr	r3, [pc, #288]	@ (8002b54 <prvAddNewTaskToReadyList+0x154>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a3a:	4b45      	ldr	r3, [pc, #276]	@ (8002b50 <prvAddNewTaskToReadyList+0x150>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d802      	bhi.n	8002a4e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a48:	4a41      	ldr	r2, [pc, #260]	@ (8002b50 <prvAddNewTaskToReadyList+0x150>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a4e:	4b42      	ldr	r3, [pc, #264]	@ (8002b58 <prvAddNewTaskToReadyList+0x158>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	4a40      	ldr	r2, [pc, #256]	@ (8002b58 <prvAddNewTaskToReadyList+0x158>)
 8002a56:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a58:	4b3f      	ldr	r3, [pc, #252]	@ (8002b58 <prvAddNewTaskToReadyList+0x158>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <prvAddNewTaskToReadyList+0x94>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 ffc9 	bl	8006a00 <SEGGER_SYSVIEW_OnTaskCreate>
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	461d      	mov	r5, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461c      	mov	r4, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	1ae3      	subs	r3, r4, r3
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	462b      	mov	r3, r5
 8002a90:	f002 f8c6 	bl	8004c20 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 f836 	bl	8006b08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b5c <prvAddNewTaskToReadyList+0x15c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8002b5c <prvAddNewTaskToReadyList+0x15c>)
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab2:	492b      	ldr	r1, [pc, #172]	@ (8002b60 <prvAddNewTaskToReadyList+0x160>)
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	3304      	adds	r3, #4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	3204      	adds	r2, #4
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	1d1a      	adds	r2, r3, #4
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b60 <prvAddNewTaskToReadyList+0x160>)
 8002af2:	441a      	add	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	615a      	str	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002afc:	4918      	ldr	r1, [pc, #96]	@ (8002b60 <prvAddNewTaskToReadyList+0x160>)
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	1c59      	adds	r1, r3, #1
 8002b0c:	4814      	ldr	r0, [pc, #80]	@ (8002b60 <prvAddNewTaskToReadyList+0x160>)
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4403      	add	r3, r0
 8002b18:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b1a:	f001 fd01 	bl	8004520 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <prvAddNewTaskToReadyList+0x154>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00e      	beq.n	8002b44 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b26:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <prvAddNewTaskToReadyList+0x150>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d207      	bcs.n	8002b44 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <prvAddNewTaskToReadyList+0x164>)
 8002b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b4c:	200001a8 	.word	0x200001a8
 8002b50:	200000d0 	.word	0x200000d0
 8002b54:	200001b4 	.word	0x200001b4
 8002b58:	200001c4 	.word	0x200001c4
 8002b5c:	200001b0 	.word	0x200001b0
 8002b60:	200000d4 	.word	0x200000d4
 8002b64:	e000ed04 	.word	0xe000ed04

08002b68 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002b70:	f001 fca4 	bl	80044bc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d102      	bne.n	8002b80 <vTaskDelete+0x18>
 8002b7a:	4b49      	ldr	r3, [pc, #292]	@ (8002ca0 <vTaskDelete+0x138>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	e000      	b.n	8002b82 <vTaskDelete+0x1a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3304      	adds	r3, #4
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fb01 	bl	8002190 <uxListRemove>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d115      	bne.n	8002bc0 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b98:	4942      	ldr	r1, [pc, #264]	@ (8002ca4 <vTaskDelete+0x13c>)
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <vTaskDelete+0x58>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bae:	2201      	movs	r2, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca8 <vTaskDelete+0x140>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ca8 <vTaskDelete+0x140>)
 8002bbe:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3318      	adds	r3, #24
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fadf 	bl	8002190 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002bd2:	4b36      	ldr	r3, [pc, #216]	@ (8002cac <vTaskDelete+0x144>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	4a34      	ldr	r2, [pc, #208]	@ (8002cac <vTaskDelete+0x144>)
 8002bda:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002bdc:	4b30      	ldr	r3, [pc, #192]	@ (8002ca0 <vTaskDelete+0x138>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d118      	bne.n	8002c18 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3304      	adds	r3, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4830      	ldr	r0, [pc, #192]	@ (8002cb0 <vTaskDelete+0x148>)
 8002bee:	f7ff fa72 	bl	80020d6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002bf2:	4b30      	ldr	r3, [pc, #192]	@ (8002cb4 <vTaskDelete+0x14c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8002cb4 <vTaskDelete+0x14c>)
 8002bfa:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 ffc4 	bl	8006b8c <SEGGER_SYSVIEW_ShrinkId>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4619      	mov	r1, r3
 8002c08:	2022      	movs	r0, #34	@ 0x22
 8002c0a:	f003 f94f 	bl	8005eac <SEGGER_SYSVIEW_RecordU32>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 f86d 	bl	8004cf0 <SYSVIEW_DeleteTask>
 8002c16:	e013      	b.n	8002c40 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002c18:	4b27      	ldr	r3, [pc, #156]	@ (8002cb8 <vTaskDelete+0x150>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	4a26      	ldr	r2, [pc, #152]	@ (8002cb8 <vTaskDelete+0x150>)
 8002c20:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 ffb1 	bl	8006b8c <SEGGER_SYSVIEW_ShrinkId>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	2022      	movs	r0, #34	@ 0x22
 8002c30:	f003 f93c 	bl	8005eac <SEGGER_SYSVIEW_RecordU32>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f002 f85a 	bl	8004cf0 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002c3c:	f000 fdc6 	bl	80037cc <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002c40:	f001 fc6e 	bl	8004520 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002c44:	4b16      	ldr	r3, [pc, #88]	@ (8002ca0 <vTaskDelete+0x138>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d002      	beq.n	8002c54 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fdac 	bl	80037ac <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002c54:	4b19      	ldr	r3, [pc, #100]	@ (8002cbc <vTaskDelete+0x154>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01c      	beq.n	8002c96 <vTaskDelete+0x12e>
        {
            if( pxTCB == pxCurrentTCB )
 8002c5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ca0 <vTaskDelete+0x138>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d117      	bne.n	8002c96 <vTaskDelete+0x12e>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002c66:	4b16      	ldr	r3, [pc, #88]	@ (8002cc0 <vTaskDelete+0x158>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <vTaskDelete+0x11e>
        __asm volatile
 8002c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	60bb      	str	r3, [r7, #8]
    }
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	e7fd      	b.n	8002c82 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002c86:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc4 <vTaskDelete+0x15c>)
 8002c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200000d0 	.word	0x200000d0
 8002ca4:	200000d4 	.word	0x200000d4
 8002ca8:	200001b0 	.word	0x200001b0
 8002cac:	200001c4 	.word	0x200001c4
 8002cb0:	2000017c 	.word	0x2000017c
 8002cb4:	20000190 	.word	0x20000190
 8002cb8:	200001a8 	.word	0x200001a8
 8002cbc:	200001b4 	.word	0x200001b4
 8002cc0:	200001d0 	.word	0x200001d0
 8002cc4:	e000ed04 	.word	0xe000ed04

08002cc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002cce:	4b27      	ldr	r3, [pc, #156]	@ (8002d6c <vTaskStartScheduler+0xa4>)
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2282      	movs	r2, #130	@ 0x82
 8002cda:	4925      	ldr	r1, [pc, #148]	@ (8002d70 <vTaskStartScheduler+0xa8>)
 8002cdc:	4825      	ldr	r0, [pc, #148]	@ (8002d74 <vTaskStartScheduler+0xac>)
 8002cde:	f7ff fdb9 	bl	8002854 <xTaskCreate>
 8002ce2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002cea:	f001 f825 	bl	8003d38 <xTimerCreateTimerTask>
 8002cee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d124      	bne.n	8002d40 <vTaskStartScheduler+0x78>
        __asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	60bb      	str	r3, [r7, #8]
    }
 8002d08:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d78 <vTaskStartScheduler+0xb0>)
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d10:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d12:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <vTaskStartScheduler+0xb4>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d18:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <vTaskStartScheduler+0xb8>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002d1e:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <vTaskStartScheduler+0xbc>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <vTaskStartScheduler+0xa4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d102      	bne.n	8002d30 <vTaskStartScheduler+0x68>
 8002d2a:	f003 fe4d 	bl	80069c8 <SEGGER_SYSVIEW_OnIdle>
 8002d2e:	e004      	b.n	8002d3a <vTaskStartScheduler+0x72>
 8002d30:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <vTaskStartScheduler+0xbc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 fea5 	bl	8006a84 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002d3a:	f001 fb1b 	bl	8004374 <xPortStartScheduler>
 8002d3e:	e00f      	b.n	8002d60 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d10b      	bne.n	8002d60 <vTaskStartScheduler+0x98>
        __asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	607b      	str	r3, [r7, #4]
    }
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d60:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <vTaskStartScheduler+0xc0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	200001cc 	.word	0x200001cc
 8002d70:	08006fa0 	.word	0x08006fa0
 8002d74:	080036a1 	.word	0x080036a1
 8002d78:	200001c8 	.word	0x200001c8
 8002d7c:	200001b4 	.word	0x200001b4
 8002d80:	200001ac 	.word	0x200001ac
 8002d84:	200000d0 	.word	0x200000d0
 8002d88:	2000000c 	.word	0x2000000c

08002d8c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d90:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <vTaskSuspendAll+0x18>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	4a03      	ldr	r2, [pc, #12]	@ (8002da4 <vTaskSuspendAll+0x18>)
 8002d98:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d9a:	bf00      	nop
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	200001d0 	.word	0x200001d0

08002da8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002db6:	4b73      	ldr	r3, [pc, #460]	@ (8002f84 <xTaskResumeAll+0x1dc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10b      	bne.n	8002dd6 <xTaskResumeAll+0x2e>
        __asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	607b      	str	r3, [r7, #4]
    }
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	e7fd      	b.n	8002dd2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002dd6:	f001 fb71 	bl	80044bc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002dda:	4b6a      	ldr	r3, [pc, #424]	@ (8002f84 <xTaskResumeAll+0x1dc>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	4a68      	ldr	r2, [pc, #416]	@ (8002f84 <xTaskResumeAll+0x1dc>)
 8002de2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002de4:	4b67      	ldr	r3, [pc, #412]	@ (8002f84 <xTaskResumeAll+0x1dc>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 80c4 	bne.w	8002f76 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dee:	4b66      	ldr	r3, [pc, #408]	@ (8002f88 <xTaskResumeAll+0x1e0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80bf 	beq.w	8002f76 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002df8:	e08e      	b.n	8002f18 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dfa:	4b64      	ldr	r3, [pc, #400]	@ (8002f8c <xTaskResumeAll+0x1e4>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	6a12      	ldr	r2, [r2, #32]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	69d2      	ldr	r2, [r2, #28]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	3318      	adds	r3, #24
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d103      	bne.n	8002e30 <xTaskResumeAll+0x88>
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2200      	movs	r2, #0
 8002e34:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	1e5a      	subs	r2, r3, #1
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	6892      	ldr	r2, [r2, #8]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3304      	adds	r3, #4
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d103      	bne.n	8002e6e <xTaskResumeAll+0xc6>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	2200      	movs	r2, #0
 8002e72:	615a      	str	r2, [r3, #20]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 fe41 	bl	8006b08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	4b40      	ldr	r3, [pc, #256]	@ (8002f90 <xTaskResumeAll+0x1e8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	4a3e      	ldr	r2, [pc, #248]	@ (8002f90 <xTaskResumeAll+0x1e8>)
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e9c:	493d      	ldr	r1, [pc, #244]	@ (8002f94 <xTaskResumeAll+0x1ec>)
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	3204      	adds	r2, #4
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	1d1a      	adds	r2, r3, #4
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4a2e      	ldr	r2, [pc, #184]	@ (8002f94 <xTaskResumeAll+0x1ec>)
 8002edc:	441a      	add	r2, r3
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	615a      	str	r2, [r3, #20]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee6:	492b      	ldr	r1, [pc, #172]	@ (8002f94 <xTaskResumeAll+0x1ec>)
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	1c59      	adds	r1, r3, #1
 8002ef6:	4827      	ldr	r0, [pc, #156]	@ (8002f94 <xTaskResumeAll+0x1ec>)
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4403      	add	r3, r0
 8002f02:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f08:	4b23      	ldr	r3, [pc, #140]	@ (8002f98 <xTaskResumeAll+0x1f0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002f12:	4b22      	ldr	r3, [pc, #136]	@ (8002f9c <xTaskResumeAll+0x1f4>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f18:	4b1c      	ldr	r3, [pc, #112]	@ (8002f8c <xTaskResumeAll+0x1e4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f47f af6c 	bne.w	8002dfa <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f28:	f000 fc50 	bl	80037cc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa0 <xTaskResumeAll+0x1f8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d010      	beq.n	8002f5a <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f38:	f000 f858 	bl	8002fec <xTaskIncrementTick>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002f42:	4b16      	ldr	r3, [pc, #88]	@ (8002f9c <xTaskResumeAll+0x1f4>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f1      	bne.n	8002f38 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002f54:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <xTaskResumeAll+0x1f8>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f5a:	4b10      	ldr	r3, [pc, #64]	@ (8002f9c <xTaskResumeAll+0x1f4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002f62:	2301      	movs	r3, #1
 8002f64:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f66:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <xTaskResumeAll+0x1fc>)
 8002f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f76:	f001 fad3 	bl	8004520 <vPortExitCritical>

    return xAlreadyYielded;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3720      	adds	r7, #32
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	200001d0 	.word	0x200001d0
 8002f88:	200001a8 	.word	0x200001a8
 8002f8c:	20000168 	.word	0x20000168
 8002f90:	200001b0 	.word	0x200001b0
 8002f94:	200000d4 	.word	0x200000d4
 8002f98:	200000d0 	.word	0x200000d0
 8002f9c:	200001bc 	.word	0x200001bc
 8002fa0:	200001b8 	.word	0x200001b8
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002fae:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <xTaskGetTickCount+0x1c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002fb4:	687b      	ldr	r3, [r7, #4]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	200001ac 	.word	0x200001ac

08002fc8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fce:	f001 fb65 	bl	800469c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002fd6:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <xTaskGetTickCountFromISR+0x20>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002fdc:	683b      	ldr	r3, [r7, #0]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200001ac 	.word	0x200001ac

08002fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	@ 0x28
 8002ff0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ff6:	4b80      	ldr	r3, [pc, #512]	@ (80031f8 <xTaskIncrementTick+0x20c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 80f1 	bne.w	80031e2 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003000:	4b7e      	ldr	r3, [pc, #504]	@ (80031fc <xTaskIncrementTick+0x210>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003008:	4a7c      	ldr	r2, [pc, #496]	@ (80031fc <xTaskIncrementTick+0x210>)
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d121      	bne.n	8003058 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003014:	4b7a      	ldr	r3, [pc, #488]	@ (8003200 <xTaskIncrementTick+0x214>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <xTaskIncrementTick+0x4a>
        __asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	607b      	str	r3, [r7, #4]
    }
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	e7fd      	b.n	8003032 <xTaskIncrementTick+0x46>
 8003036:	4b72      	ldr	r3, [pc, #456]	@ (8003200 <xTaskIncrementTick+0x214>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	4b71      	ldr	r3, [pc, #452]	@ (8003204 <xTaskIncrementTick+0x218>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a6f      	ldr	r2, [pc, #444]	@ (8003200 <xTaskIncrementTick+0x214>)
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4a6f      	ldr	r2, [pc, #444]	@ (8003204 <xTaskIncrementTick+0x218>)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b6f      	ldr	r3, [pc, #444]	@ (8003208 <xTaskIncrementTick+0x21c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	4a6d      	ldr	r2, [pc, #436]	@ (8003208 <xTaskIncrementTick+0x21c>)
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	f000 fbba 	bl	80037cc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003058:	4b6c      	ldr	r3, [pc, #432]	@ (800320c <xTaskIncrementTick+0x220>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6a3a      	ldr	r2, [r7, #32]
 800305e:	429a      	cmp	r2, r3
 8003060:	f0c0 80aa 	bcc.w	80031b8 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003064:	4b66      	ldr	r3, [pc, #408]	@ (8003200 <xTaskIncrementTick+0x214>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d104      	bne.n	8003078 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800306e:	4b67      	ldr	r3, [pc, #412]	@ (800320c <xTaskIncrementTick+0x220>)
 8003070:	f04f 32ff 	mov.w	r2, #4294967295
 8003074:	601a      	str	r2, [r3, #0]
                    break;
 8003076:	e09f      	b.n	80031b8 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003078:	4b61      	ldr	r3, [pc, #388]	@ (8003200 <xTaskIncrementTick+0x214>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	429a      	cmp	r2, r3
 800308e:	d203      	bcs.n	8003098 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003090:	4a5e      	ldr	r2, [pc, #376]	@ (800320c <xTaskIncrementTick+0x220>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003096:	e08f      	b.n	80031b8 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	68d2      	ldr	r2, [r2, #12]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	6892      	ldr	r2, [r2, #8]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	3304      	adds	r3, #4
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d103      	bne.n	80030c6 <xTaskIncrementTick+0xda>
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2200      	movs	r2, #0
 80030ca:	615a      	str	r2, [r3, #20]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	1e5a      	subs	r2, r3, #1
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01e      	beq.n	800311c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	6a12      	ldr	r2, [r2, #32]
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	69d2      	ldr	r2, [r2, #28]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	3318      	adds	r3, #24
 8003100:	429a      	cmp	r2, r3
 8003102:	d103      	bne.n	800310c <xTaskIncrementTick+0x120>
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2200      	movs	r2, #0
 8003110:	629a      	str	r2, [r3, #40]	@ 0x28
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	1e5a      	subs	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4618      	mov	r0, r3
 8003120:	f003 fcf2 	bl	8006b08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	2201      	movs	r2, #1
 800312a:	409a      	lsls	r2, r3
 800312c:	4b38      	ldr	r3, [pc, #224]	@ (8003210 <xTaskIncrementTick+0x224>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4313      	orrs	r3, r2
 8003132:	4a37      	ldr	r2, [pc, #220]	@ (8003210 <xTaskIncrementTick+0x224>)
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800313a:	4936      	ldr	r1, [pc, #216]	@ (8003214 <xTaskIncrementTick+0x228>)
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	3304      	adds	r3, #4
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	3204      	adds	r2, #4
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	1d1a      	adds	r2, r3, #4
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4a26      	ldr	r2, [pc, #152]	@ (8003214 <xTaskIncrementTick+0x228>)
 800317a:	441a      	add	r2, r3
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	615a      	str	r2, [r3, #20]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003184:	4923      	ldr	r1, [pc, #140]	@ (8003214 <xTaskIncrementTick+0x228>)
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	1c59      	adds	r1, r3, #1
 8003194:	481f      	ldr	r0, [pc, #124]	@ (8003214 <xTaskIncrementTick+0x228>)
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4403      	add	r3, r0
 80031a0:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003218 <xTaskIncrementTick+0x22c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	429a      	cmp	r2, r3
 80031ae:	f67f af59 	bls.w	8003064 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031b6:	e755      	b.n	8003064 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031b8:	4b17      	ldr	r3, [pc, #92]	@ (8003218 <xTaskIncrementTick+0x22c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031be:	4915      	ldr	r1, [pc, #84]	@ (8003214 <xTaskIncrementTick+0x228>)
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d901      	bls.n	80031d4 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 80031d0:	2301      	movs	r3, #1
 80031d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <xTaskIncrementTick+0x230>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 80031dc:	2301      	movs	r3, #1
 80031de:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e0:	e004      	b.n	80031ec <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80031e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003220 <xTaskIncrementTick+0x234>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3301      	adds	r3, #1
 80031e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003220 <xTaskIncrementTick+0x234>)
 80031ea:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3728      	adds	r7, #40	@ 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200001d0 	.word	0x200001d0
 80031fc:	200001ac 	.word	0x200001ac
 8003200:	20000160 	.word	0x20000160
 8003204:	20000164 	.word	0x20000164
 8003208:	200001c0 	.word	0x200001c0
 800320c:	200001c8 	.word	0x200001c8
 8003210:	200001b0 	.word	0x200001b0
 8003214:	200000d4 	.word	0x200000d4
 8003218:	200000d0 	.word	0x200000d0
 800321c:	200001bc 	.word	0x200001bc
 8003220:	200001b8 	.word	0x200001b8

08003224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800322a:	4b2d      	ldr	r3, [pc, #180]	@ (80032e0 <vTaskSwitchContext+0xbc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003232:	4b2c      	ldr	r3, [pc, #176]	@ (80032e4 <vTaskSwitchContext+0xc0>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003238:	e04e      	b.n	80032d8 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800323a:	4b2a      	ldr	r3, [pc, #168]	@ (80032e4 <vTaskSwitchContext+0xc0>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003240:	4b29      	ldr	r3, [pc, #164]	@ (80032e8 <vTaskSwitchContext+0xc4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800324e:	7afb      	ldrb	r3, [r7, #11]
 8003250:	f1c3 031f 	rsb	r3, r3, #31
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	4925      	ldr	r1, [pc, #148]	@ (80032ec <vTaskSwitchContext+0xc8>)
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <vTaskSwitchContext+0x5e>
        __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	607b      	str	r3, [r7, #4]
    }
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	e7fd      	b.n	800327e <vTaskSwitchContext+0x5a>
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4a17      	ldr	r2, [pc, #92]	@ (80032ec <vTaskSwitchContext+0xc8>)
 800328e:	4413      	add	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	3308      	adds	r3, #8
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d104      	bne.n	80032b2 <vTaskSwitchContext+0x8e>
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a0d      	ldr	r2, [pc, #52]	@ (80032f0 <vTaskSwitchContext+0xcc>)
 80032ba:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <vTaskSwitchContext+0xcc>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b0c      	ldr	r3, [pc, #48]	@ (80032f4 <vTaskSwitchContext+0xd0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d102      	bne.n	80032ce <vTaskSwitchContext+0xaa>
 80032c8:	f003 fb7e 	bl	80069c8 <SEGGER_SYSVIEW_OnIdle>
}
 80032cc:	e004      	b.n	80032d8 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80032ce:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <vTaskSwitchContext+0xcc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f003 fbd6 	bl	8006a84 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80032d8:	bf00      	nop
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200001d0 	.word	0x200001d0
 80032e4:	200001bc 	.word	0x200001bc
 80032e8:	200001b0 	.word	0x200001b0
 80032ec:	200000d4 	.word	0x200000d4
 80032f0:	200000d0 	.word	0x200000d0
 80032f4:	200001cc 	.word	0x200001cc

080032f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10b      	bne.n	8003320 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	60fb      	str	r3, [r7, #12]
    }
 800331a:	bf00      	nop
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003320:	4b07      	ldr	r3, [pc, #28]	@ (8003340 <vTaskPlaceOnEventList+0x48>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3318      	adds	r3, #24
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fe fef8 	bl	800211e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800332e:	2101      	movs	r1, #1
 8003330:	6838      	ldr	r0, [r7, #0]
 8003332:	f000 fc81 	bl	8003c38 <prvAddCurrentTaskToDelayedList>
}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200000d0 	.word	0x200000d0

08003344 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10b      	bne.n	800336e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	613b      	str	r3, [r7, #16]
    }
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	e7fd      	b.n	800336a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	4b17      	ldr	r3, [pc, #92]	@ (80033d4 <vTaskPlaceOnEventListRestricted+0x90>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	61da      	str	r2, [r3, #28]
 800337c:	4b15      	ldr	r3, [pc, #84]	@ (80033d4 <vTaskPlaceOnEventListRestricted+0x90>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	6892      	ldr	r2, [r2, #8]
 8003384:	621a      	str	r2, [r3, #32]
 8003386:	4b13      	ldr	r3, [pc, #76]	@ (80033d4 <vTaskPlaceOnEventListRestricted+0x90>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	3218      	adds	r2, #24
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	4b10      	ldr	r3, [pc, #64]	@ (80033d4 <vTaskPlaceOnEventListRestricted+0x90>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f103 0218 	add.w	r2, r3, #24
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <vTaskPlaceOnEventListRestricted+0x90>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80033b6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ba:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80033bc:	2024      	movs	r0, #36	@ 0x24
 80033be:	f002 fd57 	bl	8005e70 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	68b8      	ldr	r0, [r7, #8]
 80033c6:	f000 fc37 	bl	8003c38 <prvAddCurrentTaskToDelayedList>
    }
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	200000d0 	.word	0x200000d0

080033d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	@ 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	60fb      	str	r3, [r7, #12]
    }
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	e7fd      	b.n	8003402 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	6a3a      	ldr	r2, [r7, #32]
 8003412:	6a12      	ldr	r2, [r2, #32]
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	6a3a      	ldr	r2, [r7, #32]
 800341c:	69d2      	ldr	r2, [r2, #28]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	3318      	adds	r3, #24
 8003428:	429a      	cmp	r2, r3
 800342a:	d103      	bne.n	8003434 <xTaskRemoveFromEventList+0x5c>
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	2200      	movs	r2, #0
 8003438:	629a      	str	r2, [r3, #40]	@ 0x28
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	1e5a      	subs	r2, r3, #1
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003444:	4b4b      	ldr	r3, [pc, #300]	@ (8003574 <xTaskRemoveFromEventList+0x19c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d162      	bne.n	8003512 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	6a3a      	ldr	r2, [r7, #32]
 8003458:	68d2      	ldr	r2, [r2, #12]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	6892      	ldr	r2, [r2, #8]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	3304      	adds	r3, #4
 800346e:	429a      	cmp	r2, r3
 8003470:	d103      	bne.n	800347a <xTaskRemoveFromEventList+0xa2>
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	2200      	movs	r2, #0
 800347e:	615a      	str	r2, [r3, #20]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	1e5a      	subs	r2, r3, #1
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	4618      	mov	r0, r3
 800348e:	f003 fb3b 	bl	8006b08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003496:	2201      	movs	r2, #1
 8003498:	409a      	lsls	r2, r3
 800349a:	4b37      	ldr	r3, [pc, #220]	@ (8003578 <xTaskRemoveFromEventList+0x1a0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	4a35      	ldr	r2, [pc, #212]	@ (8003578 <xTaskRemoveFromEventList+0x1a0>)
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a8:	4934      	ldr	r1, [pc, #208]	@ (800357c <xTaskRemoveFromEventList+0x1a4>)
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3304      	adds	r3, #4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	60da      	str	r2, [r3, #12]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	3204      	adds	r2, #4
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	1d1a      	adds	r2, r3, #4
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4a25      	ldr	r2, [pc, #148]	@ (800357c <xTaskRemoveFromEventList+0x1a4>)
 80034e8:	441a      	add	r2, r3
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	615a      	str	r2, [r3, #20]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f2:	4922      	ldr	r1, [pc, #136]	@ (800357c <xTaskRemoveFromEventList+0x1a4>)
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	1c59      	adds	r1, r3, #1
 8003502:	481e      	ldr	r0, [pc, #120]	@ (800357c <xTaskRemoveFromEventList+0x1a4>)
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4403      	add	r3, r0
 800350e:	6019      	str	r1, [r3, #0]
 8003510:	e01b      	b.n	800354a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003512:	4b1b      	ldr	r3, [pc, #108]	@ (8003580 <xTaskRemoveFromEventList+0x1a8>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	61da      	str	r2, [r3, #28]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	621a      	str	r2, [r3, #32]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	6a3a      	ldr	r2, [r7, #32]
 800352c:	3218      	adds	r2, #24
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	f103 0218 	add.w	r2, r3, #24
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	609a      	str	r2, [r3, #8]
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	4a10      	ldr	r2, [pc, #64]	@ (8003580 <xTaskRemoveFromEventList+0x1a8>)
 800353e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003540:	4b0f      	ldr	r3, [pc, #60]	@ (8003580 <xTaskRemoveFromEventList+0x1a8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3301      	adds	r3, #1
 8003546:	4a0e      	ldr	r2, [pc, #56]	@ (8003580 <xTaskRemoveFromEventList+0x1a8>)
 8003548:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <xTaskRemoveFromEventList+0x1ac>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	429a      	cmp	r2, r3
 8003556:	d905      	bls.n	8003564 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003558:	2301      	movs	r3, #1
 800355a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800355c:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <xTaskRemoveFromEventList+0x1b0>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e001      	b.n	8003568 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8003564:	2300      	movs	r3, #0
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800356a:	4618      	mov	r0, r3
 800356c:	3728      	adds	r7, #40	@ 0x28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	200001d0 	.word	0x200001d0
 8003578:	200001b0 	.word	0x200001b0
 800357c:	200000d4 	.word	0x200000d4
 8003580:	20000168 	.word	0x20000168
 8003584:	200000d0 	.word	0x200000d0
 8003588:	200001bc 	.word	0x200001bc

0800358c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003594:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <vTaskInternalSetTimeOutState+0x24>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800359c:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <vTaskInternalSetTimeOutState+0x28>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	605a      	str	r2, [r3, #4]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	200001c0 	.word	0x200001c0
 80035b4:	200001ac 	.word	0x200001ac

080035b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10b      	bne.n	80035e0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	613b      	str	r3, [r7, #16]
    }
 80035da:	bf00      	nop
 80035dc:	bf00      	nop
 80035de:	e7fd      	b.n	80035dc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	60fb      	str	r3, [r7, #12]
    }
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	e7fd      	b.n	80035fa <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80035fe:	f000 ff5d 	bl	80044bc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003602:	4b1f      	ldr	r3, [pc, #124]	@ (8003680 <xTaskCheckForTimeOut+0xc8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d102      	bne.n	8003622 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	e026      	b.n	8003670 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	4b17      	ldr	r3, [pc, #92]	@ (8003684 <xTaskCheckForTimeOut+0xcc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d00a      	beq.n	8003644 <xTaskCheckForTimeOut+0x8c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	429a      	cmp	r2, r3
 8003636:	d305      	bcc.n	8003644 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003638:	2301      	movs	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e015      	b.n	8003670 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	429a      	cmp	r2, r3
 800364c:	d20b      	bcs.n	8003666 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	1ad2      	subs	r2, r2, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff ff96 	bl	800358c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
 8003664:	e004      	b.n	8003670 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800366c:	2301      	movs	r3, #1
 800366e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003670:	f000 ff56 	bl	8004520 <vPortExitCritical>

    return xReturn;
 8003674:	69fb      	ldr	r3, [r7, #28]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3720      	adds	r7, #32
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200001ac 	.word	0x200001ac
 8003684:	200001c0 	.word	0x200001c0

08003688 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800368c:	4b03      	ldr	r3, [pc, #12]	@ (800369c <vTaskMissedYield+0x14>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	200001bc 	.word	0x200001bc

080036a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80036a8:	f000 f852 	bl	8003750 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036ac:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <prvIdleTask+0x28>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d9f9      	bls.n	80036a8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <prvIdleTask+0x2c>)
 80036b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80036c4:	e7f0      	b.n	80036a8 <prvIdleTask+0x8>
 80036c6:	bf00      	nop
 80036c8:	200000d4 	.word	0x200000d4
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036d6:	2300      	movs	r3, #0
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	e00c      	b.n	80036f6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4a12      	ldr	r2, [pc, #72]	@ (8003730 <prvInitialiseTaskLists+0x60>)
 80036e8:	4413      	add	r3, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fcc6 	bl	800207c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3301      	adds	r3, #1
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d9ef      	bls.n	80036dc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036fc:	480d      	ldr	r0, [pc, #52]	@ (8003734 <prvInitialiseTaskLists+0x64>)
 80036fe:	f7fe fcbd 	bl	800207c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003702:	480d      	ldr	r0, [pc, #52]	@ (8003738 <prvInitialiseTaskLists+0x68>)
 8003704:	f7fe fcba 	bl	800207c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003708:	480c      	ldr	r0, [pc, #48]	@ (800373c <prvInitialiseTaskLists+0x6c>)
 800370a:	f7fe fcb7 	bl	800207c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800370e:	480c      	ldr	r0, [pc, #48]	@ (8003740 <prvInitialiseTaskLists+0x70>)
 8003710:	f7fe fcb4 	bl	800207c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003714:	480b      	ldr	r0, [pc, #44]	@ (8003744 <prvInitialiseTaskLists+0x74>)
 8003716:	f7fe fcb1 	bl	800207c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800371a:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <prvInitialiseTaskLists+0x78>)
 800371c:	4a05      	ldr	r2, [pc, #20]	@ (8003734 <prvInitialiseTaskLists+0x64>)
 800371e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003720:	4b0a      	ldr	r3, [pc, #40]	@ (800374c <prvInitialiseTaskLists+0x7c>)
 8003722:	4a05      	ldr	r2, [pc, #20]	@ (8003738 <prvInitialiseTaskLists+0x68>)
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	200000d4 	.word	0x200000d4
 8003734:	20000138 	.word	0x20000138
 8003738:	2000014c 	.word	0x2000014c
 800373c:	20000168 	.word	0x20000168
 8003740:	2000017c 	.word	0x2000017c
 8003744:	20000194 	.word	0x20000194
 8003748:	20000160 	.word	0x20000160
 800374c:	20000164 	.word	0x20000164

08003750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003756:	e019      	b.n	800378c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003758:	f000 feb0 	bl	80044bc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800375c:	4b10      	ldr	r3, [pc, #64]	@ (80037a0 <prvCheckTasksWaitingTermination+0x50>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe fd11 	bl	8002190 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800376e:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <prvCheckTasksWaitingTermination+0x54>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3b01      	subs	r3, #1
 8003774:	4a0b      	ldr	r2, [pc, #44]	@ (80037a4 <prvCheckTasksWaitingTermination+0x54>)
 8003776:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003778:	4b0b      	ldr	r3, [pc, #44]	@ (80037a8 <prvCheckTasksWaitingTermination+0x58>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3b01      	subs	r3, #1
 800377e:	4a0a      	ldr	r2, [pc, #40]	@ (80037a8 <prvCheckTasksWaitingTermination+0x58>)
 8003780:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003782:	f000 fecd 	bl	8004520 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f810 	bl	80037ac <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800378c:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <prvCheckTasksWaitingTermination+0x58>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e1      	bne.n	8003758 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	2000017c 	.word	0x2000017c
 80037a4:	200001a8 	.word	0x200001a8
 80037a8:	20000190 	.word	0x20000190

080037ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 f86d 	bl	8004898 <vPortFree>
            vPortFree( pxTCB );
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f001 f86a 	bl	8004898 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037d0:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <prvResetNextTaskUnblockTime+0x30>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d104      	bne.n	80037e4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80037da:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <prvResetNextTaskUnblockTime+0x34>)
 80037dc:	f04f 32ff 	mov.w	r2, #4294967295
 80037e0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80037e2:	e005      	b.n	80037f0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037e4:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <prvResetNextTaskUnblockTime+0x30>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a04      	ldr	r2, [pc, #16]	@ (8003800 <prvResetNextTaskUnblockTime+0x34>)
 80037ee:	6013      	str	r3, [r2, #0]
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000160 	.word	0x20000160
 8003800:	200001c8 	.word	0x200001c8

08003804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800380a:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <xTaskGetSchedulerState+0x34>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003812:	2301      	movs	r3, #1
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	e008      	b.n	800382a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003818:	4b08      	ldr	r3, [pc, #32]	@ (800383c <xTaskGetSchedulerState+0x38>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003820:	2302      	movs	r3, #2
 8003822:	607b      	str	r3, [r7, #4]
 8003824:	e001      	b.n	800382a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800382a:	687b      	ldr	r3, [r7, #4]
    }
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	200001b4 	.word	0x200001b4
 800383c:	200001d0 	.word	0x200001d0

08003840 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00b      	beq.n	800386c <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	613b      	str	r3, [r7, #16]
    }
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800386c:	f000 fe26 	bl	80044bc <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003870:	4b36      	ldr	r3, [pc, #216]	@ (800394c <xTaskGenericNotifyWait+0x10c>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	3354      	adds	r3, #84	@ 0x54
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d022      	beq.n	80038c8 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003882:	4b32      	ldr	r3, [pc, #200]	@ (800394c <xTaskGenericNotifyWait+0x10c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	3214      	adds	r2, #20
 800388a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	43d2      	mvns	r2, r2
 8003892:	4011      	ands	r1, r2
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	3214      	adds	r2, #20
 8003898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800389c:	4b2b      	ldr	r3, [pc, #172]	@ (800394c <xTaskGenericNotifyWait+0x10c>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	3354      	adds	r3, #84	@ 0x54
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00b      	beq.n	80038c8 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038b0:	2101      	movs	r1, #1
 80038b2:	6a38      	ldr	r0, [r7, #32]
 80038b4:	f000 f9c0 	bl	8003c38 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80038b8:	4b25      	ldr	r3, [pc, #148]	@ (8003950 <xTaskGenericNotifyWait+0x110>)
 80038ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80038c8:	f000 fe2a 	bl	8004520 <vPortExitCritical>

        taskENTER_CRITICAL();
 80038cc:	f000 fdf6 	bl	80044bc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	4613      	mov	r3, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	2040      	movs	r0, #64	@ 0x40
 80038de:	f002 fbf1 	bl	80060c4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80038e8:	4b18      	ldr	r3, [pc, #96]	@ (800394c <xTaskGenericNotifyWait+0x10c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	3214      	adds	r2, #20
 80038f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80038f8:	4b14      	ldr	r3, [pc, #80]	@ (800394c <xTaskGenericNotifyWait+0x10c>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	3354      	adds	r3, #84	@ 0x54
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d002      	beq.n	8003910 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e00e      	b.n	800392e <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003910:	4b0e      	ldr	r3, [pc, #56]	@ (800394c <xTaskGenericNotifyWait+0x10c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	3214      	adds	r2, #20
 8003918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	43d2      	mvns	r2, r2
 8003920:	4011      	ands	r1, r2
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	3214      	adds	r2, #20
 8003926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800392a:	2301      	movs	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800392e:	4b07      	ldr	r3, [pc, #28]	@ (800394c <xTaskGenericNotifyWait+0x10c>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	3354      	adds	r3, #84	@ 0x54
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800393c:	f000 fdf0 	bl	8004520 <vPortExitCritical>

        return xReturn;
 8003940:	697b      	ldr	r3, [r7, #20]
    }
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	200000d0 	.word	0x200000d0
 8003950:	e000ed04 	.word	0xe000ed04

08003954 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003954:	b580      	push	{r7, lr}
 8003956:	b094      	sub	sp, #80	@ 0x50
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003962:	2301      	movs	r3, #1
 8003964:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10b      	bne.n	8003984 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	e7fd      	b.n	8003980 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	e7fd      	b.n	800399e <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039a2:	f000 fe7b 	bl	800469c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	643b      	str	r3, [r7, #64]	@ 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80039aa:	f3ef 8211 	mrs	r2, BASEPRI
 80039ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	623a      	str	r2, [r7, #32]
 80039c0:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80039c2:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80039c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80039cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	3214      	adds	r2, #20
 80039d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039d8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80039da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4413      	add	r3, r2
 80039e0:	3354      	adds	r3, #84	@ 0x54
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80039e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	3354      	adds	r3, #84	@ 0x54
 80039f0:	2202      	movs	r2, #2
 80039f2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d83b      	bhi.n	8003a72 <xTaskGenericNotifyFromISR+0x11e>
 80039fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003a00 <xTaskGenericNotifyFromISR+0xac>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a93 	.word	0x08003a93
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a31 	.word	0x08003a31
 8003a0c:	08003a49 	.word	0x08003a49
 8003a10:	08003a57 	.word	0x08003a57
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	3214      	adds	r2, #20
 8003a1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	ea42 0103 	orr.w	r1, r2, r3
 8003a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	3214      	adds	r2, #20
 8003a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003a2e:	e033      	b.n	8003a98 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	3214      	adds	r2, #20
 8003a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3a:	1c59      	adds	r1, r3, #1
 8003a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	3214      	adds	r2, #20
 8003a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003a46:	e027      	b.n	8003a98 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	3214      	adds	r2, #20
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003a54:	e020      	b.n	8003a98 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003a56:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d006      	beq.n	8003a6c <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	3214      	adds	r2, #20
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003a6a:	e015      	b.n	8003a98 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8003a70:	e012      	b.n	8003a98 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003a72:	4b6a      	ldr	r3, [pc, #424]	@ (8003c1c <xTaskGenericNotifyFromISR+0x2c8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	61bb      	str	r3, [r7, #24]
    }
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	e7fd      	b.n	8003a8e <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8003a92:	bf00      	nop
 8003a94:	e000      	b.n	8003a98 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8003a96:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 f876 	bl	8006b8c <SEGGER_SYSVIEW_ShrinkId>
 8003aa0:	78f9      	ldrb	r1, [r7, #3]
 8003aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aa4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003aa6:	9201      	str	r2, [sp, #4]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4601      	mov	r1, r0
 8003ab0:	203f      	movs	r0, #63	@ 0x3f
 8003ab2:	f002 fb99 	bl	80061e8 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003ab6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	f040 80a3 	bne.w	8003c06 <xTaskGenericNotifyFromISR+0x2b2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <xTaskGenericNotifyFromISR+0x18c>
        __asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	617b      	str	r3, [r7, #20]
    }
 8003ada:	bf00      	nop
 8003adc:	bf00      	nop
 8003ade:	e7fd      	b.n	8003adc <xTaskGenericNotifyFromISR+0x188>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ae0:	4b4f      	ldr	r3, [pc, #316]	@ (8003c20 <xTaskGenericNotifyFromISR+0x2cc>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d162      	bne.n	8003bae <xTaskGenericNotifyFromISR+0x25a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003af4:	68d2      	ldr	r2, [r2, #12]
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003afe:	6892      	ldr	r2, [r2, #8]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b08:	3304      	adds	r3, #4
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d103      	bne.n	8003b16 <xTaskGenericNotifyFromISR+0x1c2>
 8003b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b18:	2200      	movs	r2, #0
 8003b1a:	615a      	str	r2, [r3, #20]
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	1e5a      	subs	r2, r3, #1
 8003b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b24:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 ffed 	bl	8006b08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b32:	2201      	movs	r2, #1
 8003b34:	409a      	lsls	r2, r3
 8003b36:	4b3b      	ldr	r3, [pc, #236]	@ (8003c24 <xTaskGenericNotifyFromISR+0x2d0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	4a39      	ldr	r2, [pc, #228]	@ (8003c24 <xTaskGenericNotifyFromISR+0x2d0>)
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b44:	4938      	ldr	r1, [pc, #224]	@ (8003c28 <xTaskGenericNotifyFromISR+0x2d4>)
 8003b46:	4613      	mov	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	3304      	adds	r3, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b62:	60da      	str	r2, [r3, #12]
 8003b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b6a:	3204      	adds	r2, #4
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b70:	1d1a      	adds	r2, r3, #4
 8003b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4a29      	ldr	r2, [pc, #164]	@ (8003c28 <xTaskGenericNotifyFromISR+0x2d4>)
 8003b84:	441a      	add	r2, r3
 8003b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b88:	615a      	str	r2, [r3, #20]
 8003b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8e:	4926      	ldr	r1, [pc, #152]	@ (8003c28 <xTaskGenericNotifyFromISR+0x2d4>)
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	1c59      	adds	r1, r3, #1
 8003b9e:	4822      	ldr	r0, [pc, #136]	@ (8003c28 <xTaskGenericNotifyFromISR+0x2d4>)
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4403      	add	r3, r0
 8003baa:	6019      	str	r1, [r3, #0]
 8003bac:	e01b      	b.n	8003be6 <xTaskGenericNotifyFromISR+0x292>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003bae:	4b1f      	ldr	r3, [pc, #124]	@ (8003c2c <xTaskGenericNotifyFromISR+0x2d8>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bb8:	61da      	str	r2, [r3, #28]
 8003bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc0:	621a      	str	r2, [r3, #32]
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bc8:	3218      	adds	r2, #24
 8003bca:	605a      	str	r2, [r3, #4]
 8003bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bce:	f103 0218 	add.w	r2, r3, #24
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd4:	609a      	str	r2, [r3, #8]
 8003bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bd8:	4a14      	ldr	r2, [pc, #80]	@ (8003c2c <xTaskGenericNotifyFromISR+0x2d8>)
 8003bda:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bdc:	4b13      	ldr	r3, [pc, #76]	@ (8003c2c <xTaskGenericNotifyFromISR+0x2d8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	4a12      	ldr	r2, [pc, #72]	@ (8003c2c <xTaskGenericNotifyFromISR+0x2d8>)
 8003be4:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bea:	4b11      	ldr	r3, [pc, #68]	@ (8003c30 <xTaskGenericNotifyFromISR+0x2dc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d908      	bls.n	8003c06 <xTaskGenericNotifyFromISR+0x2b2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <xTaskGenericNotifyFromISR+0x2ac>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003c00:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <xTaskGenericNotifyFromISR+0x2e0>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c08:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003c10:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8003c14:	4618      	mov	r0, r3
 8003c16:	3748      	adds	r7, #72	@ 0x48
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	200001ac 	.word	0x200001ac
 8003c20:	200001d0 	.word	0x200001d0
 8003c24:	200001b0 	.word	0x200001b0
 8003c28:	200000d4 	.word	0x200000d4
 8003c2c:	20000168 	.word	0x20000168
 8003c30:	200000d0 	.word	0x200000d0
 8003c34:	200001bc 	.word	0x200001bc

08003c38 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c42:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c48:	4b35      	ldr	r3, [pc, #212]	@ (8003d20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fa9e 	bl	8002190 <uxListRemove>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10b      	bne.n	8003c72 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c5a:	4b31      	ldr	r3, [pc, #196]	@ (8003d20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	2201      	movs	r2, #1
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43da      	mvns	r2, r3
 8003c68:	4b2e      	ldr	r3, [pc, #184]	@ (8003d24 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003d24 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c70:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d124      	bne.n	8003cc4 <prvAddCurrentTaskToDelayedList+0x8c>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d021      	beq.n	8003cc4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c80:	4b29      	ldr	r3, [pc, #164]	@ (8003d28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	4b26      	ldr	r3, [pc, #152]	@ (8003d20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	609a      	str	r2, [r3, #8]
 8003c8e:	4b24      	ldr	r3, [pc, #144]	@ (8003d20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	6892      	ldr	r2, [r2, #8]
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	4b21      	ldr	r3, [pc, #132]	@ (8003d20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	3204      	adds	r2, #4
 8003ca2:	605a      	str	r2, [r3, #4]
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	1d1a      	adds	r2, r3, #4
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	4b1c      	ldr	r3, [pc, #112]	@ (8003d20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cb4:	615a      	str	r2, [r3, #20]
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8003d28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003cc2:	e026      	b.n	8003d12 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ccc:	4b14      	ldr	r3, [pc, #80]	@ (8003d20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d209      	bcs.n	8003cf0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cdc:	4b13      	ldr	r3, [pc, #76]	@ (8003d2c <prvAddCurrentTaskToDelayedList+0xf4>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f7fe fa18 	bl	800211e <vListInsert>
}
 8003cee:	e010      	b.n	8003d12 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f7fe fa0e 	bl	800211e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003d02:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d202      	bcs.n	8003d12 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003d0c:	4a09      	ldr	r2, [pc, #36]	@ (8003d34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6013      	str	r3, [r2, #0]
}
 8003d12:	bf00      	nop
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	200001ac 	.word	0x200001ac
 8003d20:	200000d0 	.word	0x200000d0
 8003d24:	200001b0 	.word	0x200001b0
 8003d28:	20000194 	.word	0x20000194
 8003d2c:	20000164 	.word	0x20000164
 8003d30:	20000160 	.word	0x20000160
 8003d34:	200001c8 	.word	0x200001c8

08003d38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d42:	f000 fa4f 	bl	80041e4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d46:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <xTimerCreateTimerTask+0x58>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003d4e:	4b11      	ldr	r3, [pc, #68]	@ (8003d94 <xTimerCreateTimerTask+0x5c>)
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	2302      	movs	r3, #2
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2300      	movs	r3, #0
 8003d58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d5c:	490e      	ldr	r1, [pc, #56]	@ (8003d98 <xTimerCreateTimerTask+0x60>)
 8003d5e:	480f      	ldr	r0, [pc, #60]	@ (8003d9c <xTimerCreateTimerTask+0x64>)
 8003d60:	f7fe fd78 	bl	8002854 <xTaskCreate>
 8003d64:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	603b      	str	r3, [r7, #0]
    }
 8003d7e:	bf00      	nop
 8003d80:	bf00      	nop
 8003d82:	e7fd      	b.n	8003d80 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003d84:	687b      	ldr	r3, [r7, #4]
    }
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000204 	.word	0x20000204
 8003d94:	20000208 	.word	0x20000208
 8003d98:	08006fa8 	.word	0x08006fa8
 8003d9c:	08003e45 	.word	0x08003e45

08003da0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003dac:	e008      	b.n	8003dc0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	4413      	add	r3, r2
 8003db6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	699a      	ldr	r2, [r3, #24]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	18d1      	adds	r1, r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f8df 	bl	8003f90 <prvInsertTimerInActiveList>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1ea      	bne.n	8003dae <prvReloadTimer+0xe>
        }
    }
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dee:	4b14      	ldr	r3, [pc, #80]	@ (8003e40 <prvProcessExpiredTimer+0x5c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe f9c7 	bl	8002190 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff ffc3 	bl	8003da0 <prvReloadTimer>
 8003e1a:	e008      	b.n	8003e2e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	4798      	blx	r3
    }
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200001fc 	.word	0x200001fc

08003e44 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e4c:	f107 0308 	add.w	r3, r7, #8
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f859 	bl	8003f08 <prvGetNextExpireTime>
 8003e56:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f805 	bl	8003e6c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e62:	f000 f8d7 	bl	8004014 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e66:	bf00      	nop
 8003e68:	e7f0      	b.n	8003e4c <prvTimerTask+0x8>
	...

08003e6c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e76:	f7fe ff89 	bl	8002d8c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e7a:	f107 0308 	add.w	r3, r7, #8
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f866 	bl	8003f50 <prvSampleTimeNow>
 8003e84:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d130      	bne.n	8003eee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <prvProcessTimerOrBlockTask+0x3c>
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d806      	bhi.n	8003ea8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e9a:	f7fe ff85 	bl	8002da8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e9e:	68f9      	ldr	r1, [r7, #12]
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff ff9f 	bl	8003de4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003ea6:	e024      	b.n	8003ef2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003eae:	4b13      	ldr	r3, [pc, #76]	@ (8003efc <prvProcessTimerOrBlockTask+0x90>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <prvProcessTimerOrBlockTask+0x50>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <prvProcessTimerOrBlockTask+0x52>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f00 <prvProcessTimerOrBlockTask+0x94>)
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f7fe fc8d 	bl	80027ec <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003ed2:	f7fe ff69 	bl	8002da8 <xTaskResumeAll>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003edc:	4b09      	ldr	r3, [pc, #36]	@ (8003f04 <prvProcessTimerOrBlockTask+0x98>)
 8003ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	f3bf 8f6f 	isb	sy
    }
 8003eec:	e001      	b.n	8003ef2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003eee:	f7fe ff5b 	bl	8002da8 <xTaskResumeAll>
    }
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000200 	.word	0x20000200
 8003f00:	20000204 	.word	0x20000204
 8003f04:	e000ed04 	.word	0xe000ed04

08003f08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f10:	4b0e      	ldr	r3, [pc, #56]	@ (8003f4c <prvGetNextExpireTime+0x44>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <prvGetNextExpireTime+0x16>
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	e000      	b.n	8003f20 <prvGetNextExpireTime+0x18>
 8003f1e:	2200      	movs	r2, #0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f2c:	4b07      	ldr	r3, [pc, #28]	@ (8003f4c <prvGetNextExpireTime+0x44>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	e001      	b.n	8003f3c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
    }
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	200001fc 	.word	0x200001fc

08003f50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003f58:	f7ff f826 	bl	8002fa8 <xTaskGetTickCount>
 8003f5c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f8c <prvSampleTimeNow+0x3c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d205      	bcs.n	8003f74 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003f68:	f000 f916 	bl	8004198 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e002      	b.n	8003f7a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f7a:	4a04      	ldr	r2, [pc, #16]	@ (8003f8c <prvSampleTimeNow+0x3c>)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f80:	68fb      	ldr	r3, [r7, #12]
    }
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	2000020c 	.word	0x2000020c

08003f90 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d812      	bhi.n	8003fdc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	1ad2      	subs	r2, r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d302      	bcc.n	8003fca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e01b      	b.n	8004002 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fca:	4b10      	ldr	r3, [pc, #64]	@ (800400c <prvInsertTimerInActiveList+0x7c>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	f7fe f8a2 	bl	800211e <vListInsert>
 8003fda:	e012      	b.n	8004002 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d206      	bcs.n	8003ff2 <prvInsertTimerInActiveList+0x62>
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d302      	bcc.n	8003ff2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e007      	b.n	8004002 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ff2:	4b07      	ldr	r3, [pc, #28]	@ (8004010 <prvInsertTimerInActiveList+0x80>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f7fe f88e 	bl	800211e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004002:	697b      	ldr	r3, [r7, #20]
    }
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20000200 	.word	0x20000200
 8004010:	200001fc 	.word	0x200001fc

08004014 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800401a:	e0a9      	b.n	8004170 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f2c0 80a6 	blt.w	8004170 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d004      	beq.n	800403a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	3304      	adds	r3, #4
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe f8ab 	bl	8002190 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800403a:	1d3b      	adds	r3, r7, #4
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff ff87 	bl	8003f50 <prvSampleTimeNow>
 8004042:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	3b01      	subs	r3, #1
 8004048:	2b08      	cmp	r3, #8
 800404a:	f200 808e 	bhi.w	800416a <prvProcessReceivedCommands+0x156>
 800404e:	a201      	add	r2, pc, #4	@ (adr r2, 8004054 <prvProcessReceivedCommands+0x40>)
 8004050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004054:	08004079 	.word	0x08004079
 8004058:	08004079 	.word	0x08004079
 800405c:	080040e1 	.word	0x080040e1
 8004060:	080040f5 	.word	0x080040f5
 8004064:	08004141 	.word	0x08004141
 8004068:	08004079 	.word	0x08004079
 800406c:	08004079 	.word	0x08004079
 8004070:	080040e1 	.word	0x080040e1
 8004074:	080040f5 	.word	0x080040f5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	b2da      	uxtb	r2, r3
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	18d1      	adds	r1, r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	69f8      	ldr	r0, [r7, #28]
 8004098:	f7ff ff7a 	bl	8003f90 <prvInsertTimerInActiveList>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d065      	beq.n	800416e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	4413      	add	r3, r2
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4619      	mov	r1, r3
 80040bc:	69f8      	ldr	r0, [r7, #28]
 80040be:	f7ff fe6f 	bl	8003da0 <prvReloadTimer>
 80040c2:	e008      	b.n	80040d6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	69f8      	ldr	r0, [r7, #28]
 80040dc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80040de:	e046      	b.n	800416e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80040f2:	e03d      	b.n	8004170 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <prvProcessReceivedCommands+0x118>
        __asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	617b      	str	r3, [r7, #20]
    }
 8004126:	bf00      	nop
 8004128:	bf00      	nop
 800412a:	e7fd      	b.n	8004128 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	18d1      	adds	r1, r2, r3
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	69f8      	ldr	r0, [r7, #28]
 800413a:	f7ff ff29 	bl	8003f90 <prvInsertTimerInActiveList>
                        break;
 800413e:	e017      	b.n	8004170 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 800414e:	69f8      	ldr	r0, [r7, #28]
 8004150:	f000 fba2 	bl	8004898 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004154:	e00c      	b.n	8004170 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	b2da      	uxtb	r2, r3
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004168:	e002      	b.n	8004170 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <prvProcessReceivedCommands+0x15c>
                        break;
 800416e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004170:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <prvProcessReceivedCommands+0x180>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f107 0108 	add.w	r1, r7, #8
 8004178:	2200      	movs	r2, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe f93c 	bl	80023f8 <xQueueReceive>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	f47f af4a 	bne.w	800401c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000204 	.word	0x20000204

08004198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800419e:	e009      	b.n	80041b4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041a0:	4b0e      	ldr	r3, [pc, #56]	@ (80041dc <prvSwitchTimerLists+0x44>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80041aa:	f04f 31ff 	mov.w	r1, #4294967295
 80041ae:	6838      	ldr	r0, [r7, #0]
 80041b0:	f7ff fe18 	bl	8003de4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041b4:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <prvSwitchTimerLists+0x44>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80041be:	4b07      	ldr	r3, [pc, #28]	@ (80041dc <prvSwitchTimerLists+0x44>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80041c4:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <prvSwitchTimerLists+0x48>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a04      	ldr	r2, [pc, #16]	@ (80041dc <prvSwitchTimerLists+0x44>)
 80041ca:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80041cc:	4a04      	ldr	r2, [pc, #16]	@ (80041e0 <prvSwitchTimerLists+0x48>)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6013      	str	r3, [r2, #0]
    }
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	200001fc 	.word	0x200001fc
 80041e0:	20000200 	.word	0x20000200

080041e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80041e8:	f000 f968 	bl	80044bc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80041ec:	4b12      	ldr	r3, [pc, #72]	@ (8004238 <prvCheckForValidListAndQueue+0x54>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d11d      	bne.n	8004230 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80041f4:	4811      	ldr	r0, [pc, #68]	@ (800423c <prvCheckForValidListAndQueue+0x58>)
 80041f6:	f7fd ff41 	bl	800207c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80041fa:	4811      	ldr	r0, [pc, #68]	@ (8004240 <prvCheckForValidListAndQueue+0x5c>)
 80041fc:	f7fd ff3e 	bl	800207c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004200:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <prvCheckForValidListAndQueue+0x60>)
 8004202:	4a0e      	ldr	r2, [pc, #56]	@ (800423c <prvCheckForValidListAndQueue+0x58>)
 8004204:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004206:	4b10      	ldr	r3, [pc, #64]	@ (8004248 <prvCheckForValidListAndQueue+0x64>)
 8004208:	4a0d      	ldr	r2, [pc, #52]	@ (8004240 <prvCheckForValidListAndQueue+0x5c>)
 800420a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800420c:	2200      	movs	r2, #0
 800420e:	210c      	movs	r1, #12
 8004210:	200a      	movs	r0, #10
 8004212:	f7fe f879 	bl	8002308 <xQueueGenericCreate>
 8004216:	4603      	mov	r3, r0
 8004218:	4a07      	ldr	r2, [pc, #28]	@ (8004238 <prvCheckForValidListAndQueue+0x54>)
 800421a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800421c:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <prvCheckForValidListAndQueue+0x54>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004224:	4b04      	ldr	r3, [pc, #16]	@ (8004238 <prvCheckForValidListAndQueue+0x54>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4908      	ldr	r1, [pc, #32]	@ (800424c <prvCheckForValidListAndQueue+0x68>)
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe fa86 	bl	800273c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004230:	f000 f976 	bl	8004520 <vPortExitCritical>
    }
 8004234:	bf00      	nop
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000204 	.word	0x20000204
 800423c:	200001d4 	.word	0x200001d4
 8004240:	200001e8 	.word	0x200001e8
 8004244:	200001fc 	.word	0x200001fc
 8004248:	20000200 	.word	0x20000200
 800424c:	08006fb0 	.word	0x08006fb0

08004250 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3b04      	subs	r3, #4
 8004260:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004268:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3b04      	subs	r3, #4
 800426e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f023 0201 	bic.w	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3b04      	subs	r3, #4
 800427e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004280:	4a0c      	ldr	r2, [pc, #48]	@ (80042b4 <pxPortInitialiseStack+0x64>)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3b14      	subs	r3, #20
 800428a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3b04      	subs	r3, #4
 8004296:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f06f 0202 	mvn.w	r2, #2
 800429e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3b20      	subs	r3, #32
 80042a4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	080042b9 	.word	0x080042b9

080042b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80042c2:	4b13      	ldr	r3, [pc, #76]	@ (8004310 <prvTaskExitError+0x58>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d00b      	beq.n	80042e4 <prvTaskExitError+0x2c>
        __asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	60fb      	str	r3, [r7, #12]
    }
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <prvTaskExitError+0x28>
        __asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	60bb      	str	r3, [r7, #8]
    }
 80042f6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80042f8:	bf00      	nop
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0fc      	beq.n	80042fa <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000010 	.word	0x20000010
	...

08004320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004320:	4b07      	ldr	r3, [pc, #28]	@ (8004340 <pxCurrentTCBConst2>)
 8004322:	6819      	ldr	r1, [r3, #0]
 8004324:	6808      	ldr	r0, [r1, #0]
 8004326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432a:	f380 8809 	msr	PSP, r0
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8811 	msr	BASEPRI, r0
 800433a:	4770      	bx	lr
 800433c:	f3af 8000 	nop.w

08004340 <pxCurrentTCBConst2>:
 8004340:	200000d0 	.word	0x200000d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop

08004348 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004348:	4808      	ldr	r0, [pc, #32]	@ (800436c <prvPortStartFirstTask+0x24>)
 800434a:	6800      	ldr	r0, [r0, #0]
 800434c:	6800      	ldr	r0, [r0, #0]
 800434e:	f380 8808 	msr	MSP, r0
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f380 8814 	msr	CONTROL, r0
 800435a:	b662      	cpsie	i
 800435c:	b661      	cpsie	f
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	df00      	svc	0
 8004368:	bf00      	nop
 800436a:	0000      	.short	0x0000
 800436c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop

08004374 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800437a:	4b47      	ldr	r3, [pc, #284]	@ (8004498 <xPortStartScheduler+0x124>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a47      	ldr	r2, [pc, #284]	@ (800449c <xPortStartScheduler+0x128>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d10b      	bne.n	800439c <xPortStartScheduler+0x28>
        __asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	613b      	str	r3, [r7, #16]
    }
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800439c:	4b3e      	ldr	r3, [pc, #248]	@ (8004498 <xPortStartScheduler+0x124>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a3f      	ldr	r2, [pc, #252]	@ (80044a0 <xPortStartScheduler+0x12c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d10b      	bne.n	80043be <xPortStartScheduler+0x4a>
        __asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	60fb      	str	r3, [r7, #12]
    }
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	e7fd      	b.n	80043ba <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043be:	4b39      	ldr	r3, [pc, #228]	@ (80044a4 <xPortStartScheduler+0x130>)
 80043c0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	22ff      	movs	r2, #255	@ 0xff
 80043ce:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <xPortStartScheduler+0x134>)
 80043e4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043e6:	4b31      	ldr	r3, [pc, #196]	@ (80044ac <xPortStartScheduler+0x138>)
 80043e8:	2207      	movs	r2, #7
 80043ea:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043ec:	e009      	b.n	8004402 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80043ee:	4b2f      	ldr	r3, [pc, #188]	@ (80044ac <xPortStartScheduler+0x138>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	4a2d      	ldr	r2, [pc, #180]	@ (80044ac <xPortStartScheduler+0x138>)
 80043f6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440a:	2b80      	cmp	r3, #128	@ 0x80
 800440c:	d0ef      	beq.n	80043ee <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800440e:	4b27      	ldr	r3, [pc, #156]	@ (80044ac <xPortStartScheduler+0x138>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1c3 0307 	rsb	r3, r3, #7
 8004416:	2b04      	cmp	r3, #4
 8004418:	d00b      	beq.n	8004432 <xPortStartScheduler+0xbe>
        __asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60bb      	str	r3, [r7, #8]
    }
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	e7fd      	b.n	800442e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004432:	4b1e      	ldr	r3, [pc, #120]	@ (80044ac <xPortStartScheduler+0x138>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	4a1c      	ldr	r2, [pc, #112]	@ (80044ac <xPortStartScheduler+0x138>)
 800443a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800443c:	4b1b      	ldr	r3, [pc, #108]	@ (80044ac <xPortStartScheduler+0x138>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004444:	4a19      	ldr	r2, [pc, #100]	@ (80044ac <xPortStartScheduler+0x138>)
 8004446:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004450:	4b17      	ldr	r3, [pc, #92]	@ (80044b0 <xPortStartScheduler+0x13c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a16      	ldr	r2, [pc, #88]	@ (80044b0 <xPortStartScheduler+0x13c>)
 8004456:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800445a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800445c:	4b14      	ldr	r3, [pc, #80]	@ (80044b0 <xPortStartScheduler+0x13c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a13      	ldr	r2, [pc, #76]	@ (80044b0 <xPortStartScheduler+0x13c>)
 8004462:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004466:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004468:	f000 f8e8 	bl	800463c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800446c:	4b11      	ldr	r3, [pc, #68]	@ (80044b4 <xPortStartScheduler+0x140>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004472:	f000 f907 	bl	8004684 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004476:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <xPortStartScheduler+0x144>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a0f      	ldr	r2, [pc, #60]	@ (80044b8 <xPortStartScheduler+0x144>)
 800447c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004480:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004482:	f7ff ff61 	bl	8004348 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004486:	f7fe fecd 	bl	8003224 <vTaskSwitchContext>
    prvTaskExitError();
 800448a:	f7ff ff15 	bl	80042b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	e000ed00 	.word	0xe000ed00
 800449c:	410fc271 	.word	0x410fc271
 80044a0:	410fc270 	.word	0x410fc270
 80044a4:	e000e400 	.word	0xe000e400
 80044a8:	20000210 	.word	0x20000210
 80044ac:	20000014 	.word	0x20000014
 80044b0:	e000ed20 	.word	0xe000ed20
 80044b4:	20000010 	.word	0x20000010
 80044b8:	e000ef34 	.word	0xe000ef34

080044bc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
        __asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	607b      	str	r3, [r7, #4]
    }
 80044d4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80044d6:	4b10      	ldr	r3, [pc, #64]	@ (8004518 <vPortEnterCritical+0x5c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3301      	adds	r3, #1
 80044dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004518 <vPortEnterCritical+0x5c>)
 80044de:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80044e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <vPortEnterCritical+0x5c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d110      	bne.n	800450a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044e8:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <vPortEnterCritical+0x60>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <vPortEnterCritical+0x4e>
        __asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	603b      	str	r3, [r7, #0]
    }
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <vPortEnterCritical+0x4a>
    }
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20000010 	.word	0x20000010
 800451c:	e000ed04 	.word	0xe000ed04

08004520 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004526:	4b12      	ldr	r3, [pc, #72]	@ (8004570 <vPortExitCritical+0x50>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10b      	bne.n	8004546 <vPortExitCritical+0x26>
        __asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	607b      	str	r3, [r7, #4]
    }
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	e7fd      	b.n	8004542 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004546:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <vPortExitCritical+0x50>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	4a08      	ldr	r2, [pc, #32]	@ (8004570 <vPortExitCritical+0x50>)
 800454e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004550:	4b07      	ldr	r3, [pc, #28]	@ (8004570 <vPortExitCritical+0x50>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <vPortExitCritical+0x44>
 8004558:	2300      	movs	r3, #0
 800455a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f383 8811 	msr	BASEPRI, r3
    }
 8004562:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	20000010 	.word	0x20000010
	...

08004580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004580:	f3ef 8009 	mrs	r0, PSP
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	4b15      	ldr	r3, [pc, #84]	@ (80045e0 <pxCurrentTCBConst>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	f01e 0f10 	tst.w	lr, #16
 8004590:	bf08      	it	eq
 8004592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459a:	6010      	str	r0, [r2, #0]
 800459c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80045a4:	f380 8811 	msr	BASEPRI, r0
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f7fe fe38 	bl	8003224 <vTaskSwitchContext>
 80045b4:	f04f 0000 	mov.w	r0, #0
 80045b8:	f380 8811 	msr	BASEPRI, r0
 80045bc:	bc09      	pop	{r0, r3}
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	6808      	ldr	r0, [r1, #0]
 80045c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c6:	f01e 0f10 	tst.w	lr, #16
 80045ca:	bf08      	it	eq
 80045cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045d0:	f380 8809 	msr	PSP, r0
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	f3af 8000 	nop.w

080045e0 <pxCurrentTCBConst>:
 80045e0:	200000d0 	.word	0x200000d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
        __asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	607b      	str	r3, [r7, #4]
    }
 8004600:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004602:	f002 f967 	bl	80068d4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004606:	f7fe fcf1 	bl	8002fec <xTaskIncrementTick>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d006      	beq.n	800461e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004610:	f002 f9be 	bl	8006990 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004614:	4b08      	ldr	r3, [pc, #32]	@ (8004638 <SysTick_Handler+0x50>)
 8004616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e001      	b.n	8004622 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800461e:	f002 f99b 	bl	8006958 <SEGGER_SYSVIEW_RecordExitISR>
 8004622:	2300      	movs	r3, #0
 8004624:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	f383 8811 	msr	BASEPRI, r3
    }
 800462c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004640:	4b0b      	ldr	r3, [pc, #44]	@ (8004670 <vPortSetupTimerInterrupt+0x34>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004646:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <vPortSetupTimerInterrupt+0x38>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800464c:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <vPortSetupTimerInterrupt+0x3c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0a      	ldr	r2, [pc, #40]	@ (800467c <vPortSetupTimerInterrupt+0x40>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	099b      	lsrs	r3, r3, #6
 8004658:	4a09      	ldr	r2, [pc, #36]	@ (8004680 <vPortSetupTimerInterrupt+0x44>)
 800465a:	3b01      	subs	r3, #1
 800465c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800465e:	4b04      	ldr	r3, [pc, #16]	@ (8004670 <vPortSetupTimerInterrupt+0x34>)
 8004660:	2207      	movs	r2, #7
 8004662:	601a      	str	r2, [r3, #0]
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	e000e010 	.word	0xe000e010
 8004674:	e000e018 	.word	0xe000e018
 8004678:	20000000 	.word	0x20000000
 800467c:	10624dd3 	.word	0x10624dd3
 8004680:	e000e014 	.word	0xe000e014

08004684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004684:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004694 <vPortEnableVFP+0x10>
 8004688:	6801      	ldr	r1, [r0, #0]
 800468a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800468e:	6001      	str	r1, [r0, #0]
 8004690:	4770      	bx	lr
 8004692:	0000      	.short	0x0000
 8004694:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop

0800469c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80046a2:	f3ef 8305 	mrs	r3, IPSR
 80046a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b0f      	cmp	r3, #15
 80046ac:	d915      	bls.n	80046da <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046ae:	4a18      	ldr	r2, [pc, #96]	@ (8004710 <vPortValidateInterruptPriority+0x74>)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046b8:	4b16      	ldr	r3, [pc, #88]	@ (8004714 <vPortValidateInterruptPriority+0x78>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	7afa      	ldrb	r2, [r7, #11]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d20b      	bcs.n	80046da <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	607b      	str	r3, [r7, #4]
    }
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	e7fd      	b.n	80046d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046da:	4b0f      	ldr	r3, [pc, #60]	@ (8004718 <vPortValidateInterruptPriority+0x7c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046e2:	4b0e      	ldr	r3, [pc, #56]	@ (800471c <vPortValidateInterruptPriority+0x80>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d90b      	bls.n	8004702 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	603b      	str	r3, [r7, #0]
    }
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <vPortValidateInterruptPriority+0x62>
    }
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	e000e3f0 	.word	0xe000e3f0
 8004714:	20000210 	.word	0x20000210
 8004718:	e000ed0c 	.word	0xe000ed0c
 800471c:	20000014 	.word	0x20000014

08004720 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	@ 0x28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800472c:	f7fe fb2e 	bl	8002d8c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004730:	4b54      	ldr	r3, [pc, #336]	@ (8004884 <pvPortMalloc+0x164>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004738:	f000 f90c 	bl	8004954 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d012      	beq.n	8004768 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004742:	2208      	movs	r2, #8
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	3308      	adds	r3, #8
 800474e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	43db      	mvns	r3, r3
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d804      	bhi.n	8004764 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	4413      	add	r3, r2
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	e001      	b.n	8004768 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	db71      	blt.n	8004852 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d06e      	beq.n	8004852 <pvPortMalloc+0x132>
 8004774:	4b44      	ldr	r3, [pc, #272]	@ (8004888 <pvPortMalloc+0x168>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	429a      	cmp	r2, r3
 800477c:	d869      	bhi.n	8004852 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800477e:	4b43      	ldr	r3, [pc, #268]	@ (800488c <pvPortMalloc+0x16c>)
 8004780:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004782:	4b42      	ldr	r3, [pc, #264]	@ (800488c <pvPortMalloc+0x16c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004788:	e004      	b.n	8004794 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	429a      	cmp	r2, r3
 800479c:	d903      	bls.n	80047a6 <pvPortMalloc+0x86>
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f1      	bne.n	800478a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80047a6:	4b37      	ldr	r3, [pc, #220]	@ (8004884 <pvPortMalloc+0x164>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d050      	beq.n	8004852 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2208      	movs	r2, #8
 80047b6:	4413      	add	r3, r2
 80047b8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	1ad2      	subs	r2, r2, r3
 80047ca:	2308      	movs	r3, #8
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d920      	bls.n	8004814 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00b      	beq.n	80047fc <pvPortMalloc+0xdc>
        __asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	613b      	str	r3, [r7, #16]
    }
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	e7fd      	b.n	80047f8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	1ad2      	subs	r2, r2, r3
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	f000 f8fc 	bl	8004a0c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004814:	4b1c      	ldr	r3, [pc, #112]	@ (8004888 <pvPortMalloc+0x168>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	4a1a      	ldr	r2, [pc, #104]	@ (8004888 <pvPortMalloc+0x168>)
 8004820:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004822:	4b19      	ldr	r3, [pc, #100]	@ (8004888 <pvPortMalloc+0x168>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b1a      	ldr	r3, [pc, #104]	@ (8004890 <pvPortMalloc+0x170>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d203      	bcs.n	8004836 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800482e:	4b16      	ldr	r3, [pc, #88]	@ (8004888 <pvPortMalloc+0x168>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a17      	ldr	r2, [pc, #92]	@ (8004890 <pvPortMalloc+0x170>)
 8004834:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004848:	4b12      	ldr	r3, [pc, #72]	@ (8004894 <pvPortMalloc+0x174>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	4a11      	ldr	r2, [pc, #68]	@ (8004894 <pvPortMalloc+0x174>)
 8004850:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004852:	f7fe faa9 	bl	8002da8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00b      	beq.n	8004878 <pvPortMalloc+0x158>
        __asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	60fb      	str	r3, [r7, #12]
    }
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	e7fd      	b.n	8004874 <pvPortMalloc+0x154>
    return pvReturn;
 8004878:	69fb      	ldr	r3, [r7, #28]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3728      	adds	r7, #40	@ 0x28
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20012e1c 	.word	0x20012e1c
 8004888:	20012e20 	.word	0x20012e20
 800488c:	20012e14 	.word	0x20012e14
 8004890:	20012e24 	.word	0x20012e24
 8004894:	20012e28 	.word	0x20012e28

08004898 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d04b      	beq.n	8004942 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80048aa:	2308      	movs	r3, #8
 80048ac:	425b      	negs	r3, r3
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4413      	add	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	db0b      	blt.n	80048d8 <vPortFree+0x40>
        __asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	60fb      	str	r3, [r7, #12]
    }
 80048d2:	bf00      	nop
 80048d4:	bf00      	nop
 80048d6:	e7fd      	b.n	80048d4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <vPortFree+0x60>
        __asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60bb      	str	r3, [r7, #8]
    }
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	e7fd      	b.n	80048f4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	0fdb      	lsrs	r3, r3, #31
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01c      	beq.n	8004942 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d118      	bne.n	8004942 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800491c:	f7fe fa36 	bl	8002d8c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	4b09      	ldr	r3, [pc, #36]	@ (800494c <vPortFree+0xb4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4413      	add	r3, r2
 800492a:	4a08      	ldr	r2, [pc, #32]	@ (800494c <vPortFree+0xb4>)
 800492c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800492e:	6938      	ldr	r0, [r7, #16]
 8004930:	f000 f86c 	bl	8004a0c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004934:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <vPortFree+0xb8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3301      	adds	r3, #1
 800493a:	4a05      	ldr	r2, [pc, #20]	@ (8004950 <vPortFree+0xb8>)
 800493c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800493e:	f7fe fa33 	bl	8002da8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004942:	bf00      	nop
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20012e20 	.word	0x20012e20
 8004950:	20012e2c 	.word	0x20012e2c

08004954 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800495a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800495e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004960:	4b25      	ldr	r3, [pc, #148]	@ (80049f8 <prvHeapInit+0xa4>)
 8004962:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00c      	beq.n	8004988 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3307      	adds	r3, #7
 8004972:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0307 	bic.w	r3, r3, #7
 800497a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	4a1d      	ldr	r2, [pc, #116]	@ (80049f8 <prvHeapInit+0xa4>)
 8004984:	4413      	add	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800498c:	4a1b      	ldr	r2, [pc, #108]	@ (80049fc <prvHeapInit+0xa8>)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004992:	4b1a      	ldr	r3, [pc, #104]	@ (80049fc <prvHeapInit+0xa8>)
 8004994:	2200      	movs	r2, #0
 8004996:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	4413      	add	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80049a0:	2208      	movs	r2, #8
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0307 	bic.w	r3, r3, #7
 80049ae:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4a13      	ldr	r2, [pc, #76]	@ (8004a00 <prvHeapInit+0xac>)
 80049b4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80049b6:	4b12      	ldr	r3, [pc, #72]	@ (8004a00 <prvHeapInit+0xac>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2200      	movs	r2, #0
 80049bc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80049be:	4b10      	ldr	r3, [pc, #64]	@ (8004a00 <prvHeapInit+0xac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004a00 <prvHeapInit+0xac>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a08      	ldr	r2, [pc, #32]	@ (8004a04 <prvHeapInit+0xb0>)
 80049e2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4a07      	ldr	r2, [pc, #28]	@ (8004a08 <prvHeapInit+0xb4>)
 80049ea:	6013      	str	r3, [r2, #0]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	20000214 	.word	0x20000214
 80049fc:	20012e14 	.word	0x20012e14
 8004a00:	20012e1c 	.word	0x20012e1c
 8004a04:	20012e24 	.word	0x20012e24
 8004a08:	20012e20 	.word	0x20012e20

08004a0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a14:	4b28      	ldr	r3, [pc, #160]	@ (8004ab8 <prvInsertBlockIntoFreeList+0xac>)
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	e002      	b.n	8004a20 <prvInsertBlockIntoFreeList+0x14>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d8f7      	bhi.n	8004a1a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	4413      	add	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d108      	bne.n	8004a4e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	441a      	add	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	441a      	add	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d118      	bne.n	8004a94 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b15      	ldr	r3, [pc, #84]	@ (8004abc <prvInsertBlockIntoFreeList+0xb0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d00d      	beq.n	8004a8a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	441a      	add	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	e008      	b.n	8004a9c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004abc <prvInsertBlockIntoFreeList+0xb0>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e003      	b.n	8004a9c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d002      	beq.n	8004aaa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20012e14 	.word	0x20012e14
 8004abc:	20012e1c 	.word	0x20012e1c

08004ac0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004ac4:	4803      	ldr	r0, [pc, #12]	@ (8004ad4 <_cbSendSystemDesc+0x14>)
 8004ac6:	f001 feaf 	bl	8006828 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004aca:	4803      	ldr	r0, [pc, #12]	@ (8004ad8 <_cbSendSystemDesc+0x18>)
 8004acc:	f001 feac 	bl	8006828 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ad0:	bf00      	nop
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	08006fb8 	.word	0x08006fb8
 8004ad8:	08006ffc 	.word	0x08006ffc

08004adc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ae0:	4b06      	ldr	r3, [pc, #24]	@ (8004afc <SEGGER_SYSVIEW_Conf+0x20>)
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <SEGGER_SYSVIEW_Conf+0x20>)
 8004ae6:	6819      	ldr	r1, [r3, #0]
 8004ae8:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <SEGGER_SYSVIEW_Conf+0x24>)
 8004aea:	4a06      	ldr	r2, [pc, #24]	@ (8004b04 <SEGGER_SYSVIEW_Conf+0x28>)
 8004aec:	f001 f96c 	bl	8005dc8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004af0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004af4:	f001 f9ac 	bl	8005e50 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004af8:	bf00      	nop
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20000000 	.word	0x20000000
 8004b00:	08004ac1 	.word	0x08004ac1
 8004b04:	0800709c 	.word	0x0800709c

08004b08 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b0e:	2300      	movs	r3, #0
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	e033      	b.n	8004b7c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004b14:	491e      	ldr	r1, [pc, #120]	@ (8004b90 <_cbSendTaskList+0x88>)
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	491a      	ldr	r1, [pc, #104]	@ (8004b90 <_cbSendTaskList+0x88>)
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	3304      	adds	r3, #4
 8004b34:	6819      	ldr	r1, [r3, #0]
 8004b36:	4c16      	ldr	r4, [pc, #88]	@ (8004b90 <_cbSendTaskList+0x88>)
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4423      	add	r3, r4
 8004b44:	3308      	adds	r3, #8
 8004b46:	681c      	ldr	r4, [r3, #0]
 8004b48:	4d11      	ldr	r5, [pc, #68]	@ (8004b90 <_cbSendTaskList+0x88>)
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	442b      	add	r3, r5
 8004b56:	330c      	adds	r3, #12
 8004b58:	681d      	ldr	r5, [r3, #0]
 8004b5a:	4e0d      	ldr	r6, [pc, #52]	@ (8004b90 <_cbSendTaskList+0x88>)
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4433      	add	r3, r6
 8004b68:	3310      	adds	r3, #16
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	462b      	mov	r3, r5
 8004b70:	4622      	mov	r2, r4
 8004b72:	f000 f979 	bl	8004e68 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <_cbSendTaskList+0x8c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d3c6      	bcc.n	8004b14 <_cbSendTaskList+0xc>
  }
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b90:	20012e30 	.word	0x20012e30
 8004b94:	20012ed0 	.word	0x20012ed0

08004b98 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004ba0:	f7fe fa12 	bl	8002fc8 <xTaskGetTickCountFromISR>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	469a      	mov	sl, r3
 8004baa:	4693      	mov	fp, r2
 8004bac:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004bb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	f04f 0a00 	mov.w	sl, #0
 8004bbc:	f04f 0b00 	mov.w	fp, #0
 8004bc0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004bc4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004bc8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004bcc:	4652      	mov	r2, sl
 8004bce:	465b      	mov	r3, fp
 8004bd0:	1a14      	subs	r4, r2, r0
 8004bd2:	eb63 0501 	sbc.w	r5, r3, r1
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	00ab      	lsls	r3, r5, #2
 8004be0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004be4:	00a2      	lsls	r2, r4, #2
 8004be6:	4614      	mov	r4, r2
 8004be8:	461d      	mov	r5, r3
 8004bea:	eb14 0800 	adds.w	r8, r4, r0
 8004bee:	eb45 0901 	adc.w	r9, r5, r1
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c06:	4690      	mov	r8, r2
 8004c08:	4699      	mov	r9, r3
 8004c0a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c12:	4610      	mov	r0, r2
 8004c14:	4619      	mov	r1, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004c20 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004c2e:	2205      	movs	r2, #5
 8004c30:	492b      	ldr	r1, [pc, #172]	@ (8004ce0 <SYSVIEW_AddTask+0xc0>)
 8004c32:	68b8      	ldr	r0, [r7, #8]
 8004c34:	f002 f906 	bl	8006e44 <memcmp>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d04b      	beq.n	8004cd6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004c3e:	4b29      	ldr	r3, [pc, #164]	@ (8004ce4 <SYSVIEW_AddTask+0xc4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b07      	cmp	r3, #7
 8004c44:	d903      	bls.n	8004c4e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004c46:	4828      	ldr	r0, [pc, #160]	@ (8004ce8 <SYSVIEW_AddTask+0xc8>)
 8004c48:	f002 f8a0 	bl	8006d8c <SEGGER_SYSVIEW_Warn>
    return;
 8004c4c:	e044      	b.n	8004cd8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c4e:	4b25      	ldr	r3, [pc, #148]	@ (8004ce4 <SYSVIEW_AddTask+0xc4>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4926      	ldr	r1, [pc, #152]	@ (8004cec <SYSVIEW_AddTask+0xcc>)
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c62:	4b20      	ldr	r3, [pc, #128]	@ (8004ce4 <SYSVIEW_AddTask+0xc4>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4921      	ldr	r1, [pc, #132]	@ (8004cec <SYSVIEW_AddTask+0xcc>)
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	3304      	adds	r3, #4
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004c78:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce4 <SYSVIEW_AddTask+0xc4>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	491b      	ldr	r1, [pc, #108]	@ (8004cec <SYSVIEW_AddTask+0xcc>)
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	3308      	adds	r3, #8
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004c8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ce4 <SYSVIEW_AddTask+0xc4>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4916      	ldr	r1, [pc, #88]	@ (8004cec <SYSVIEW_AddTask+0xcc>)
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce4 <SYSVIEW_AddTask+0xc4>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4910      	ldr	r1, [pc, #64]	@ (8004cec <SYSVIEW_AddTask+0xcc>)
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	3310      	adds	r3, #16
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004cba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <SYSVIEW_AddTask+0xc4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	4a08      	ldr	r2, [pc, #32]	@ (8004ce4 <SYSVIEW_AddTask+0xc4>)
 8004cc2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f8ca 	bl	8004e68 <SYSVIEW_SendTaskInfo>
 8004cd4:	e000      	b.n	8004cd8 <SYSVIEW_AddTask+0xb8>
    return;
 8004cd6:	bf00      	nop

}
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	0800700c 	.word	0x0800700c
 8004ce4:	20012ed0 	.word	0x20012ed0
 8004ce8:	08007014 	.word	0x08007014
 8004cec:	20012e30 	.word	0x20012e30

08004cf0 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004cf8:	4b59      	ldr	r3, [pc, #356]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80ab 	beq.w	8004e58 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	e00d      	b.n	8004d24 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004d08:	4956      	ldr	r1, [pc, #344]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d008      	beq.n	8004d30 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3301      	adds	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	4b4e      	ldr	r3, [pc, #312]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d3ec      	bcc.n	8004d08 <SYSVIEW_DeleteTask+0x18>
 8004d2e:	e000      	b.n	8004d32 <SYSVIEW_DeleteTask+0x42>
      break;
 8004d30:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004d32:	4b4b      	ldr	r3, [pc, #300]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d111      	bne.n	8004d62 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4a46      	ldr	r2, [pc, #280]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004d4a:	4413      	add	r3, r2
 8004d4c:	2214      	movs	r2, #20
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4618      	mov	r0, r3
 8004d52:	f002 f887 	bl	8006e64 <memset>
    _NumTasks--;
 8004d56:	4b42      	ldr	r3, [pc, #264]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	4a40      	ldr	r2, [pc, #256]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	e07b      	b.n	8004e5a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004d62:	4b3f      	ldr	r3, [pc, #252]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d276      	bcs.n	8004e5a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	1e5a      	subs	r2, r3, #1
 8004d72:	493c      	ldr	r1, [pc, #240]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	4838      	ldr	r0, [pc, #224]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4403      	add	r3, r0
 8004d8e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004d90:	4b33      	ldr	r3, [pc, #204]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	1e5a      	subs	r2, r3, #1
 8004d96:	4933      	ldr	r1, [pc, #204]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	3304      	adds	r3, #4
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	482f      	ldr	r0, [pc, #188]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4403      	add	r3, r0
 8004db4:	3304      	adds	r3, #4
 8004db6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004db8:	4b29      	ldr	r3, [pc, #164]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	1e5a      	subs	r2, r3, #1
 8004dbe:	4929      	ldr	r1, [pc, #164]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	3308      	adds	r3, #8
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	4825      	ldr	r0, [pc, #148]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4403      	add	r3, r0
 8004ddc:	3308      	adds	r3, #8
 8004dde:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004de0:	4b1f      	ldr	r3, [pc, #124]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	1e5a      	subs	r2, r3, #1
 8004de6:	491f      	ldr	r1, [pc, #124]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	330c      	adds	r3, #12
 8004df4:	6819      	ldr	r1, [r3, #0]
 8004df6:	481b      	ldr	r0, [pc, #108]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4403      	add	r3, r0
 8004e04:	330c      	adds	r3, #12
 8004e06:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004e08:	4b15      	ldr	r3, [pc, #84]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	1e5a      	subs	r2, r3, #1
 8004e0e:	4915      	ldr	r1, [pc, #84]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	3310      	adds	r3, #16
 8004e1c:	6819      	ldr	r1, [r3, #0]
 8004e1e:	4811      	ldr	r0, [pc, #68]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4403      	add	r3, r0
 8004e2c:	3310      	adds	r3, #16
 8004e2e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004e30:	4b0b      	ldr	r3, [pc, #44]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	1e5a      	subs	r2, r3, #1
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4a09      	ldr	r2, [pc, #36]	@ (8004e64 <SYSVIEW_DeleteTask+0x174>)
 8004e40:	4413      	add	r3, r2
 8004e42:	2214      	movs	r2, #20
 8004e44:	2100      	movs	r1, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	f002 f80c 	bl	8006e64 <memset>
    _NumTasks--;
 8004e4c:	4b04      	ldr	r3, [pc, #16]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	4a03      	ldr	r2, [pc, #12]	@ (8004e60 <SYSVIEW_DeleteTask+0x170>)
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e000      	b.n	8004e5a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8004e58:	bf00      	nop
  }
}
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20012ed0 	.word	0x20012ed0
 8004e64:	20012e30 	.word	0x20012e30

08004e68 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08a      	sub	sp, #40	@ 0x28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004e76:	f107 0314 	add.w	r3, r7, #20
 8004e7a:	2214      	movs	r2, #20
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 fff0 	bl	8006e64 <memset>
  TaskInfo.TaskID     = TaskID;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e96:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004e98:	f107 0314 	add.w	r3, r7, #20
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 fbcb 	bl	8006638 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ea2:	bf00      	nop
 8004ea4:	3728      	adds	r7, #40	@ 0x28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004eb2:	4b24      	ldr	r3, [pc, #144]	@ (8004f44 <_DoInit+0x98>)
 8004eb4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2203      	movs	r2, #3
 8004eba:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a20      	ldr	r2, [pc, #128]	@ (8004f48 <_DoInit+0x9c>)
 8004ec6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a20      	ldr	r2, [pc, #128]	@ (8004f4c <_DoInit+0xa0>)
 8004ecc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ed4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a17      	ldr	r2, [pc, #92]	@ (8004f48 <_DoInit+0x9c>)
 8004eec:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a17      	ldr	r2, [pc, #92]	@ (8004f50 <_DoInit+0xa4>)
 8004ef2:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2210      	movs	r2, #16
 8004ef8:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3307      	adds	r3, #7
 8004f10:	4a10      	ldr	r2, [pc, #64]	@ (8004f54 <_DoInit+0xa8>)
 8004f12:	6810      	ldr	r0, [r2, #0]
 8004f14:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f16:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8004f58 <_DoInit+0xac>)
 8004f1e:	6810      	ldr	r0, [r2, #0]
 8004f20:	6018      	str	r0, [r3, #0]
 8004f22:	8891      	ldrh	r1, [r2, #4]
 8004f24:	7992      	ldrb	r2, [r2, #6]
 8004f26:	8099      	strh	r1, [r3, #4]
 8004f28:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f2a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f34:	f3bf 8f5f 	dmb	sy
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	20012ed4 	.word	0x20012ed4
 8004f48:	08007064 	.word	0x08007064
 8004f4c:	20012f7c 	.word	0x20012f7c
 8004f50:	2001337c 	.word	0x2001337c
 8004f54:	08007070 	.word	0x08007070
 8004f58:	08007074 	.word	0x08007074

08004f5c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08c      	sub	sp, #48	@ 0x30
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004f68:	4b3e      	ldr	r3, [pc, #248]	@ (8005064 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f6a:	623b      	str	r3, [r7, #32]
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <SEGGER_RTT_ReadNoLock+0x1e>
 8004f76:	f7ff ff99 	bl	8004eac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	4413      	add	r3, r2
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	3360      	adds	r3, #96	@ 0x60
 8004f86:	4a37      	ldr	r2, [pc, #220]	@ (8005064 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f88:	4413      	add	r3, r2
 8004f8a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004fa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d92b      	bls.n	8005000 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	bf28      	it	cs
 8004fba:	4613      	movcs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc4:	4413      	add	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	6939      	ldr	r1, [r7, #16]
 8004fcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fce:	f001 ff75 	bl	8006ebc <memcpy>
    NumBytesRead += NumBytesRem;
 8004fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	4413      	add	r3, r2
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	4413      	add	r3, r2
 8004ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d101      	bne.n	8005000 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4293      	cmp	r3, r2
 800500e:	bf28      	it	cs
 8005010:	4613      	movcs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d019      	beq.n	800504e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005020:	4413      	add	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	6939      	ldr	r1, [r7, #16]
 8005028:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800502a:	f001 ff47 	bl	8006ebc <memcpy>
    NumBytesRead += NumBytesRem;
 800502e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4413      	add	r3, r2
 8005034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	4413      	add	r3, r2
 800504c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800504e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005058:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800505a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800505c:	4618      	mov	r0, r3
 800505e:	3730      	adds	r7, #48	@ 0x30
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20012ed4 	.word	0x20012ed4

08005068 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005076:	4b3d      	ldr	r3, [pc, #244]	@ (800516c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005084:	f7ff ff12 	bl	8004eac <_DoInit>
  SEGGER_RTT_LOCK();
 8005088:	f3ef 8311 	mrs	r3, BASEPRI
 800508c:	f04f 0120 	mov.w	r1, #32
 8005090:	f381 8811 	msr	BASEPRI, r1
 8005094:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005096:	4b35      	ldr	r3, [pc, #212]	@ (800516c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005098:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800509e:	6939      	ldr	r1, [r7, #16]
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	4613      	mov	r3, r2
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	440b      	add	r3, r1
 80050ae:	3304      	adds	r3, #4
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3301      	adds	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	dbeb      	blt.n	800509e <SEGGER_RTT_AllocUpBuffer+0x36>
 80050c6:	e000      	b.n	80050ca <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80050c8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	da3f      	bge.n	8005154 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80050d4:	6939      	ldr	r1, [r7, #16]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	4613      	mov	r3, r2
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	4413      	add	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	440b      	add	r3, r1
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80050e8:	6939      	ldr	r1, [r7, #16]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	4613      	mov	r3, r2
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	4413      	add	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	440b      	add	r3, r1
 80050f8:	3304      	adds	r3, #4
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80050fe:	6939      	ldr	r1, [r7, #16]
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	440b      	add	r3, r1
 800510c:	3320      	adds	r3, #32
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005112:	6939      	ldr	r1, [r7, #16]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	4613      	mov	r3, r2
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4413      	add	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	440b      	add	r3, r1
 8005120:	3328      	adds	r3, #40	@ 0x28
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005126:	6939      	ldr	r1, [r7, #16]
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	440b      	add	r3, r1
 8005134:	3324      	adds	r3, #36	@ 0x24
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800513a:	6939      	ldr	r1, [r7, #16]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	4613      	mov	r3, r2
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	440b      	add	r3, r1
 8005148:	332c      	adds	r3, #44	@ 0x2c
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800514e:	f3bf 8f5f 	dmb	sy
 8005152:	e002      	b.n	800515a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005154:	f04f 33ff 	mov.w	r3, #4294967295
 8005158:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005160:	69fb      	ldr	r3, [r7, #28]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20012ed4 	.word	0x20012ed4

08005170 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800517e:	4b33      	ldr	r3, [pc, #204]	@ (800524c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800518c:	f7ff fe8e 	bl	8004eac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005190:	4b2e      	ldr	r3, [pc, #184]	@ (800524c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005192:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	461a      	mov	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4293      	cmp	r3, r2
 800519e:	d24d      	bcs.n	800523c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80051a0:	f3ef 8311 	mrs	r3, BASEPRI
 80051a4:	f04f 0120 	mov.w	r1, #32
 80051a8:	f381 8811 	msr	BASEPRI, r1
 80051ac:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d031      	beq.n	8005218 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80051b4:	6979      	ldr	r1, [r7, #20]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4613      	mov	r3, r2
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	4413      	add	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	440b      	add	r3, r1
 80051c2:	3360      	adds	r3, #96	@ 0x60
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80051c8:	6979      	ldr	r1, [r7, #20]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4613      	mov	r3, r2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	4413      	add	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	440b      	add	r3, r1
 80051d6:	3364      	adds	r3, #100	@ 0x64
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80051dc:	6979      	ldr	r1, [r7, #20]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	440b      	add	r3, r1
 80051ea:	3368      	adds	r3, #104	@ 0x68
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80051f0:	6979      	ldr	r1, [r7, #20]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	440b      	add	r3, r1
 80051fe:	3370      	adds	r3, #112	@ 0x70
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005204:	6979      	ldr	r1, [r7, #20]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4613      	mov	r3, r2
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	4413      	add	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	440b      	add	r3, r1
 8005212:	336c      	adds	r3, #108	@ 0x6c
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005218:	6979      	ldr	r1, [r7, #20]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4613      	mov	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	440b      	add	r3, r1
 8005226:	3374      	adds	r3, #116	@ 0x74
 8005228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800522a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800522c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e002      	b.n	8005242 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
 8005240:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005242:	69fb      	ldr	r3, [r7, #28]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3720      	adds	r7, #32
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20012ed4 	.word	0x20012ed4

08005250 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005260:	e002      	b.n	8005268 <_EncodeStr+0x18>
    Len++;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	3301      	adds	r3, #1
 8005266:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	4413      	add	r3, r2
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f6      	bne.n	8005262 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	d901      	bls.n	8005280 <_EncodeStr+0x30>
    Len = Limit;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2bfe      	cmp	r3, #254	@ 0xfe
 8005284:	d806      	bhi.n	8005294 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	60fa      	str	r2, [r7, #12]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	e011      	b.n	80052b8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	60fa      	str	r2, [r7, #12]
 800529a:	22ff      	movs	r2, #255	@ 0xff
 800529c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	60fa      	str	r2, [r7, #12]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	0a19      	lsrs	r1, r3, #8
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	60fa      	str	r2, [r7, #12]
 80052b4:	b2ca      	uxtb	r2, r1
 80052b6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052bc:	e00a      	b.n	80052d4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	1c53      	adds	r3, r2, #1
 80052c2:	60bb      	str	r3, [r7, #8]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1c59      	adds	r1, r3, #1
 80052c8:	60f9      	str	r1, [r7, #12]
 80052ca:	7812      	ldrb	r2, [r2, #0]
 80052cc:	701a      	strb	r2, [r3, #0]
    n++;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	3301      	adds	r3, #1
 80052d2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d3f0      	bcc.n	80052be <_EncodeStr+0x6e>
  }
  return pPayload;
 80052dc:	68fb      	ldr	r3, [r7, #12]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3304      	adds	r3, #4
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800530a:	4b35      	ldr	r3, [pc, #212]	@ (80053e0 <_HandleIncomingPacket+0xdc>)
 800530c:	7e1b      	ldrb	r3, [r3, #24]
 800530e:	4618      	mov	r0, r3
 8005310:	1cfb      	adds	r3, r7, #3
 8005312:	2201      	movs	r2, #1
 8005314:	4619      	mov	r1, r3
 8005316:	f7ff fe21 	bl	8004f5c <SEGGER_RTT_ReadNoLock>
 800531a:	4603      	mov	r3, r0
 800531c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	dd59      	ble.n	80053d8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	2b80      	cmp	r3, #128	@ 0x80
 8005328:	d032      	beq.n	8005390 <_HandleIncomingPacket+0x8c>
 800532a:	2b80      	cmp	r3, #128	@ 0x80
 800532c:	dc42      	bgt.n	80053b4 <_HandleIncomingPacket+0xb0>
 800532e:	2b07      	cmp	r3, #7
 8005330:	dc16      	bgt.n	8005360 <_HandleIncomingPacket+0x5c>
 8005332:	2b00      	cmp	r3, #0
 8005334:	dd3e      	ble.n	80053b4 <_HandleIncomingPacket+0xb0>
 8005336:	3b01      	subs	r3, #1
 8005338:	2b06      	cmp	r3, #6
 800533a:	d83b      	bhi.n	80053b4 <_HandleIncomingPacket+0xb0>
 800533c:	a201      	add	r2, pc, #4	@ (adr r2, 8005344 <_HandleIncomingPacket+0x40>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005367 	.word	0x08005367
 8005348:	0800536d 	.word	0x0800536d
 800534c:	08005373 	.word	0x08005373
 8005350:	08005379 	.word	0x08005379
 8005354:	0800537f 	.word	0x0800537f
 8005358:	08005385 	.word	0x08005385
 800535c:	0800538b 	.word	0x0800538b
 8005360:	2b7f      	cmp	r3, #127	@ 0x7f
 8005362:	d034      	beq.n	80053ce <_HandleIncomingPacket+0xca>
 8005364:	e026      	b.n	80053b4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005366:	f000 ffed 	bl	8006344 <SEGGER_SYSVIEW_Start>
      break;
 800536a:	e035      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800536c:	f001 f8a4 	bl	80064b8 <SEGGER_SYSVIEW_Stop>
      break;
 8005370:	e032      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005372:	f001 fa7d 	bl	8006870 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005376:	e02f      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005378:	f001 fa42 	bl	8006800 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800537c:	e02c      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800537e:	f001 f8c1 	bl	8006504 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005382:	e029      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005384:	f001 fcb0 	bl	8006ce8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005388:	e026      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800538a:	f001 fc8f 	bl	8006cac <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800538e:	e023      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005390:	4b13      	ldr	r3, [pc, #76]	@ (80053e0 <_HandleIncomingPacket+0xdc>)
 8005392:	7e1b      	ldrb	r3, [r3, #24]
 8005394:	4618      	mov	r0, r3
 8005396:	1cfb      	adds	r3, r7, #3
 8005398:	2201      	movs	r2, #1
 800539a:	4619      	mov	r1, r3
 800539c:	f7ff fdde 	bl	8004f5c <SEGGER_RTT_ReadNoLock>
 80053a0:	4603      	mov	r3, r0
 80053a2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	dd13      	ble.n	80053d2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 fbfd 	bl	8006bac <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80053b2:	e00e      	b.n	80053d2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	b25b      	sxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	da0c      	bge.n	80053d6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053bc:	4b08      	ldr	r3, [pc, #32]	@ (80053e0 <_HandleIncomingPacket+0xdc>)
 80053be:	7e1b      	ldrb	r3, [r3, #24]
 80053c0:	4618      	mov	r0, r3
 80053c2:	1cfb      	adds	r3, r7, #3
 80053c4:	2201      	movs	r2, #1
 80053c6:	4619      	mov	r1, r3
 80053c8:	f7ff fdc8 	bl	8004f5c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80053cc:	e003      	b.n	80053d6 <_HandleIncomingPacket+0xd2>
      break;
 80053ce:	bf00      	nop
 80053d0:	e002      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
      break;
 80053d2:	bf00      	nop
 80053d4:	e000      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
      break;
 80053d6:	bf00      	nop
    }
  }
}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20014394 	.word	0x20014394

080053e4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08c      	sub	sp, #48	@ 0x30
 80053e8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80053ea:	2301      	movs	r3, #1
 80053ec:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	3301      	adds	r3, #1
 80053f2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f8:	4b31      	ldr	r3, [pc, #196]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053fe:	e00b      	b.n	8005418 <_TrySendOverflowPacket+0x34>
 8005400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005402:	b2da      	uxtb	r2, r3
 8005404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005406:	1c59      	adds	r1, r3, #1
 8005408:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800540a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	09db      	lsrs	r3, r3, #7
 8005416:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	2b7f      	cmp	r3, #127	@ 0x7f
 800541c:	d8f0      	bhi.n	8005400 <_TrySendOverflowPacket+0x1c>
 800541e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800542e:	4b25      	ldr	r3, [pc, #148]	@ (80054c4 <_TrySendOverflowPacket+0xe0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005434:	4b22      	ldr	r3, [pc, #136]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	623b      	str	r3, [r7, #32]
 8005446:	e00b      	b.n	8005460 <_TrySendOverflowPacket+0x7c>
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	b2da      	uxtb	r2, r3
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	1c59      	adds	r1, r3, #1
 8005450:	6279      	str	r1, [r7, #36]	@ 0x24
 8005452:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	09db      	lsrs	r3, r3, #7
 800545e:	623b      	str	r3, [r7, #32]
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	2b7f      	cmp	r3, #127	@ 0x7f
 8005464:	d8f0      	bhi.n	8005448 <_TrySendOverflowPacket+0x64>
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	627a      	str	r2, [r7, #36]	@ 0x24
 800546c:	6a3a      	ldr	r2, [r7, #32]
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005476:	4b12      	ldr	r3, [pc, #72]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	4618      	mov	r0, r3
 800547c:	1d3b      	adds	r3, r7, #4
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	461a      	mov	r2, r3
 8005484:	1d3b      	adds	r3, r7, #4
 8005486:	4619      	mov	r1, r3
 8005488:	f7fa feaa 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800548c:	4603      	mov	r3, r0
 800548e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005496:	4a0a      	ldr	r2, [pc, #40]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800549c:	4b08      	ldr	r3, [pc, #32]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e004      	b.n	80054b4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80054aa:	4b05      	ldr	r3, [pc, #20]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	3301      	adds	r3, #1
 80054b0:	4a03      	ldr	r2, [pc, #12]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 80054b2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80054b4:	693b      	ldr	r3, [r7, #16]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3730      	adds	r7, #48	@ 0x30
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20014394 	.word	0x20014394
 80054c4:	e0001004 	.word	0xe0001004

080054c8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	@ 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80054d4:	4b6c      	ldr	r3, [pc, #432]	@ (8005688 <_SendPacket+0x1c0>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d010      	beq.n	80054fe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80054dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005688 <_SendPacket+0x1c0>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80a3 	beq.w	800562c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80054e6:	4b68      	ldr	r3, [pc, #416]	@ (8005688 <_SendPacket+0x1c0>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d109      	bne.n	8005502 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80054ee:	f7ff ff79 	bl	80053e4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80054f2:	4b65      	ldr	r3, [pc, #404]	@ (8005688 <_SendPacket+0x1c0>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	f040 809a 	bne.w	8005630 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80054fc:	e001      	b.n	8005502 <_SendPacket+0x3a>
    goto Send;
 80054fe:	bf00      	nop
 8005500:	e000      	b.n	8005504 <_SendPacket+0x3c>
Send:
 8005502:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b1f      	cmp	r3, #31
 8005508:	d809      	bhi.n	800551e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800550a:	4b5f      	ldr	r3, [pc, #380]	@ (8005688 <_SendPacket+0x1c0>)
 800550c:	69da      	ldr	r2, [r3, #28]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	f040 808b 	bne.w	8005634 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b17      	cmp	r3, #23
 8005522:	d807      	bhi.n	8005534 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3b01      	subs	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	e03d      	b.n	80055b0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005540:	d912      	bls.n	8005568 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	09da      	lsrs	r2, r3, #7
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3b01      	subs	r3, #1
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	3a01      	subs	r2, #1
 800555a:	60fa      	str	r2, [r7, #12]
 800555c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	e006      	b.n	8005576 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3b01      	subs	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	b2da      	uxtb	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b7f      	cmp	r3, #127	@ 0x7f
 800557a:	d912      	bls.n	80055a2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	09da      	lsrs	r2, r3, #7
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3b01      	subs	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	3a01      	subs	r2, #1
 8005594:	60fa      	str	r2, [r7, #12]
 8005596:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800559a:	b2da      	uxtb	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	e006      	b.n	80055b0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055b0:	4b36      	ldr	r3, [pc, #216]	@ (800568c <_SendPacket+0x1c4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055b6:	4b34      	ldr	r3, [pc, #208]	@ (8005688 <_SendPacket+0x1c0>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	623b      	str	r3, [r7, #32]
 80055c8:	e00b      	b.n	80055e2 <_SendPacket+0x11a>
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	1c59      	adds	r1, r3, #1
 80055d2:	6279      	str	r1, [r7, #36]	@ 0x24
 80055d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	09db      	lsrs	r3, r3, #7
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80055e6:	d8f0      	bhi.n	80055ca <_SendPacket+0x102>
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80055ee:	6a3a      	ldr	r2, [r7, #32]
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80055f8:	4b23      	ldr	r3, [pc, #140]	@ (8005688 <_SendPacket+0x1c0>)
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	4618      	mov	r0, r3
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	461a      	mov	r2, r3
 8005606:	68f9      	ldr	r1, [r7, #12]
 8005608:	f7fa fdea 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800560c:	4603      	mov	r3, r0
 800560e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005616:	4a1c      	ldr	r2, [pc, #112]	@ (8005688 <_SendPacket+0x1c0>)
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	60d3      	str	r3, [r2, #12]
 800561c:	e00b      	b.n	8005636 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800561e:	4b1a      	ldr	r3, [pc, #104]	@ (8005688 <_SendPacket+0x1c0>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	3301      	adds	r3, #1
 8005624:	b2da      	uxtb	r2, r3
 8005626:	4b18      	ldr	r3, [pc, #96]	@ (8005688 <_SendPacket+0x1c0>)
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e004      	b.n	8005636 <_SendPacket+0x16e>
    goto SendDone;
 800562c:	bf00      	nop
 800562e:	e002      	b.n	8005636 <_SendPacket+0x16e>
      goto SendDone;
 8005630:	bf00      	nop
 8005632:	e000      	b.n	8005636 <_SendPacket+0x16e>
      goto SendDone;
 8005634:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005636:	4b14      	ldr	r3, [pc, #80]	@ (8005688 <_SendPacket+0x1c0>)
 8005638:	7e1b      	ldrb	r3, [r3, #24]
 800563a:	4619      	mov	r1, r3
 800563c:	4a14      	ldr	r2, [pc, #80]	@ (8005690 <_SendPacket+0x1c8>)
 800563e:	460b      	mov	r3, r1
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	440b      	add	r3, r1
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4413      	add	r3, r2
 8005648:	336c      	adds	r3, #108	@ 0x6c
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4b0e      	ldr	r3, [pc, #56]	@ (8005688 <_SendPacket+0x1c0>)
 800564e:	7e1b      	ldrb	r3, [r3, #24]
 8005650:	4618      	mov	r0, r3
 8005652:	490f      	ldr	r1, [pc, #60]	@ (8005690 <_SendPacket+0x1c8>)
 8005654:	4603      	mov	r3, r0
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4403      	add	r3, r0
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	440b      	add	r3, r1
 800565e:	3370      	adds	r3, #112	@ 0x70
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d00b      	beq.n	800567e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005666:	4b08      	ldr	r3, [pc, #32]	@ (8005688 <_SendPacket+0x1c0>)
 8005668:	789b      	ldrb	r3, [r3, #2]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d107      	bne.n	800567e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800566e:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <_SendPacket+0x1c0>)
 8005670:	2201      	movs	r2, #1
 8005672:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005674:	f7ff fe46 	bl	8005304 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005678:	4b03      	ldr	r3, [pc, #12]	@ (8005688 <_SendPacket+0x1c0>)
 800567a:	2200      	movs	r2, #0
 800567c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800567e:	bf00      	nop
 8005680:	3728      	adds	r7, #40	@ 0x28
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20014394 	.word	0x20014394
 800568c:	e0001004 	.word	0xe0001004
 8005690:	20012ed4 	.word	0x20012ed4

08005694 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	@ 0x28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	3301      	adds	r3, #1
 80056aa:	2b80      	cmp	r3, #128	@ 0x80
 80056ac:	d80a      	bhi.n	80056c4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	1c59      	adds	r1, r3, #1
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6051      	str	r1, [r2, #4]
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	2b80      	cmp	r3, #128	@ 0x80
 80056ca:	d15a      	bne.n	8005782 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	623b      	str	r3, [r7, #32]
 80056ec:	e00b      	b.n	8005706 <_StoreChar+0x72>
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	1c59      	adds	r1, r3, #1
 80056f6:	6279      	str	r1, [r7, #36]	@ 0x24
 80056f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	09db      	lsrs	r3, r3, #7
 8005704:	623b      	str	r3, [r7, #32]
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	2b7f      	cmp	r3, #127	@ 0x7f
 800570a:	d8f0      	bhi.n	80056ee <_StoreChar+0x5a>
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	627a      	str	r2, [r7, #36]	@ 0x24
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	2300      	movs	r3, #0
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	e00b      	b.n	800573e <_StoreChar+0xaa>
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	b2da      	uxtb	r2, r3
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	1c59      	adds	r1, r3, #1
 800572e:	61f9      	str	r1, [r7, #28]
 8005730:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	09db      	lsrs	r3, r3, #7
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b7f      	cmp	r3, #127	@ 0x7f
 8005742:	d8f0      	bhi.n	8005726 <_StoreChar+0x92>
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	61fa      	str	r2, [r7, #28]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	221a      	movs	r2, #26
 800575a:	6939      	ldr	r1, [r7, #16]
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff feb3 	bl	80054c8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fdbf 	bl	80052ea <_PreparePacket>
 800576c:	4602      	mov	r2, r0
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	611a      	str	r2, [r3, #16]
  }
}
 8005782:	bf00      	nop
 8005784:	3728      	adds	r7, #40	@ 0x28
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	@ 0x28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800579e:	2301      	movs	r3, #1
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80057a2:	2301      	movs	r3, #1
 80057a4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80057a6:	e007      	b.n	80057b8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80057a8:	6a3a      	ldr	r2, [r7, #32]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	623b      	str	r3, [r7, #32]
    Width++;
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3301      	adds	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80057b8:	6a3a      	ldr	r2, [r7, #32]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d2f3      	bcs.n	80057a8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d901      	bls.n	80057cc <_PrintUnsigned+0x40>
    Width = NumDigits;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80057cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d000      	beq.n	80057d8 <_PrintUnsigned+0x4c>
 80057d6:	e01f      	b.n	8005818 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01c      	beq.n	8005818 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80057de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <_PrintUnsigned+0x68>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <_PrintUnsigned+0x68>
        c = '0';
 80057ee:	2330      	movs	r3, #48	@ 0x30
 80057f0:	76fb      	strb	r3, [r7, #27]
 80057f2:	e001      	b.n	80057f8 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80057f4:	2320      	movs	r3, #32
 80057f6:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057f8:	e007      	b.n	800580a <_PrintUnsigned+0x7e>
        FieldWidth--;
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	3b01      	subs	r3, #1
 80057fe:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005800:	7efb      	ldrb	r3, [r7, #27]
 8005802:	4619      	mov	r1, r3
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f7ff ff45 	bl	8005694 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <_PrintUnsigned+0x8c>
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	429a      	cmp	r2, r3
 8005816:	d3f0      	bcc.n	80057fa <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d903      	bls.n	8005826 <_PrintUnsigned+0x9a>
      NumDigits--;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	3b01      	subs	r3, #1
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	e009      	b.n	800583a <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	fbb2 f3f3 	udiv	r3, r2, r3
 800582e:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d200      	bcs.n	800583a <_PrintUnsigned+0xae>
        break;
 8005838:	e005      	b.n	8005846 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	fb02 f303 	mul.w	r3, r2, r3
 8005842:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005844:	e7e8      	b.n	8005818 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	fbb2 f3f3 	udiv	r3, r2, r3
 800584e:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005854:	fb02 f303 	mul.w	r3, r2, r3
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800585e:	4a15      	ldr	r2, [pc, #84]	@ (80058b4 <_PrintUnsigned+0x128>)
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	4413      	add	r3, r2
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	4619      	mov	r1, r3
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f7ff ff13 	bl	8005694 <_StoreChar>
    Digit /= Base;
 800586e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	fbb2 f3f3 	udiv	r3, r2, r3
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e3      	bne.n	8005846 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800587e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d011      	beq.n	80058ac <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00e      	beq.n	80058ac <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800588e:	e006      	b.n	800589e <_PrintUnsigned+0x112>
        FieldWidth--;
 8005890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005892:	3b01      	subs	r3, #1
 8005894:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005896:	2120      	movs	r1, #32
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7ff fefb 	bl	8005694 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800589e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <_PrintUnsigned+0x120>
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d3f1      	bcc.n	8005890 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80058ac:	bf00      	nop
 80058ae:	3728      	adds	r7, #40	@ 0x28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	080070b0 	.word	0x080070b0

080058b8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bfb8      	it	lt
 80058cc:	425b      	neglt	r3, r3
 80058ce:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80058d0:	2301      	movs	r3, #1
 80058d2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80058d4:	e007      	b.n	80058e6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	fb92 f3f3 	sdiv	r3, r2, r3
 80058de:	613b      	str	r3, [r7, #16]
    Width++;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	3301      	adds	r3, #1
 80058e4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	daf3      	bge.n	80058d6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d901      	bls.n	80058fa <_PrintInt+0x42>
    Width = NumDigits;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <_PrintInt+0x5e>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	db04      	blt.n	8005910 <_PrintInt+0x58>
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <_PrintInt+0x5e>
    FieldWidth--;
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	3b01      	subs	r3, #1
 8005914:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <_PrintInt+0x6e>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d016      	beq.n	8005954 <_PrintInt+0x9c>
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d111      	bne.n	8005954 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00e      	beq.n	8005954 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005936:	e006      	b.n	8005946 <_PrintInt+0x8e>
        FieldWidth--;
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	3b01      	subs	r3, #1
 800593c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800593e:	2120      	movs	r1, #32
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7ff fea7 	bl	8005694 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <_PrintInt+0x9c>
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	429a      	cmp	r2, r3
 8005952:	d3f1      	bcc.n	8005938 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	da07      	bge.n	800596a <_PrintInt+0xb2>
    v = -v;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	425b      	negs	r3, r3
 800595e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005960:	212d      	movs	r1, #45	@ 0x2d
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7ff fe96 	bl	8005694 <_StoreChar>
 8005968:	e008      	b.n	800597c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005974:	212b      	movs	r1, #43	@ 0x2b
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f7ff fe8c 	bl	8005694 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d019      	beq.n	80059ba <_PrintInt+0x102>
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d114      	bne.n	80059ba <_PrintInt+0x102>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d111      	bne.n	80059ba <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00e      	beq.n	80059ba <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800599c:	e006      	b.n	80059ac <_PrintInt+0xf4>
        FieldWidth--;
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80059a4:	2130      	movs	r1, #48	@ 0x30
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f7ff fe74 	bl	8005694 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <_PrintInt+0x102>
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d3f1      	bcc.n	800599e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff fedf 	bl	800578c <_PrintUnsigned>
}
 80059ce:	bf00      	nop
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b098      	sub	sp, #96	@ 0x60
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80059e4:	f3ef 8311 	mrs	r3, BASEPRI
 80059e8:	f04f 0120 	mov.w	r1, #32
 80059ec:	f381 8811 	msr	BASEPRI, r1
 80059f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059f2:	48b7      	ldr	r0, [pc, #732]	@ (8005cd0 <_VPrintTarget+0x2f8>)
 80059f4:	f7ff fc79 	bl	80052ea <_PreparePacket>
 80059f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80059fa:	4bb5      	ldr	r3, [pc, #724]	@ (8005cd0 <_VPrintTarget+0x2f8>)
 80059fc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80059fe:	2300      	movs	r3, #0
 8005a00:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a04:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005a1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 8183 	beq.w	8005d2e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005a28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a2c:	2b25      	cmp	r3, #37	@ 0x25
 8005a2e:	f040 8170 	bne.w	8005d12 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005a32:	2300      	movs	r3, #0
 8005a34:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005a36:	2301      	movs	r3, #1
 8005a38:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005a42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a46:	3b23      	subs	r3, #35	@ 0x23
 8005a48:	2b0d      	cmp	r3, #13
 8005a4a:	d83f      	bhi.n	8005acc <_VPrintTarget+0xf4>
 8005a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a54 <_VPrintTarget+0x7c>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005abd 	.word	0x08005abd
 8005a58:	08005acd 	.word	0x08005acd
 8005a5c:	08005acd 	.word	0x08005acd
 8005a60:	08005acd 	.word	0x08005acd
 8005a64:	08005acd 	.word	0x08005acd
 8005a68:	08005acd 	.word	0x08005acd
 8005a6c:	08005acd 	.word	0x08005acd
 8005a70:	08005acd 	.word	0x08005acd
 8005a74:	08005aad 	.word	0x08005aad
 8005a78:	08005acd 	.word	0x08005acd
 8005a7c:	08005a8d 	.word	0x08005a8d
 8005a80:	08005acd 	.word	0x08005acd
 8005a84:	08005acd 	.word	0x08005acd
 8005a88:	08005a9d 	.word	0x08005a9d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3301      	adds	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	e01a      	b.n	8005ad2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a9e:	f043 0302 	orr.w	r3, r3, #2
 8005aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e012      	b.n	8005ad2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e00a      	b.n	8005ad2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005abc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005abe:	f043 0308 	orr.w	r3, r3, #8
 8005ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	e002      	b.n	8005ad2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005acc:	2300      	movs	r3, #0
 8005ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ad0:	bf00      	nop
        }
      } while (v);
 8005ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1b0      	bne.n	8005a3a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ae8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005aea:	d912      	bls.n	8005b12 <_VPrintTarget+0x13a>
 8005aec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005af0:	2b39      	cmp	r3, #57	@ 0x39
 8005af2:	d80e      	bhi.n	8005b12 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3301      	adds	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	461a      	mov	r2, r3
 8005b06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3b30      	subs	r3, #48	@ 0x30
 8005b0e:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005b10:	e7e4      	b.n	8005adc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005b12:	2300      	movs	r3, #0
 8005b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b22:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b24:	d11d      	bne.n	8005b62 <_VPrintTarget+0x18a>
        sFormat++;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005b34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b38:	2b2f      	cmp	r3, #47	@ 0x2f
 8005b3a:	d912      	bls.n	8005b62 <_VPrintTarget+0x18a>
 8005b3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b40:	2b39      	cmp	r3, #57	@ 0x39
 8005b42:	d80e      	bhi.n	8005b62 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005b4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	461a      	mov	r2, r3
 8005b56:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3b30      	subs	r3, #48	@ 0x30
 8005b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005b60:	e7e4      	b.n	8005b2c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005b6a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b6e:	2b6c      	cmp	r3, #108	@ 0x6c
 8005b70:	d003      	beq.n	8005b7a <_VPrintTarget+0x1a2>
 8005b72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b76:	2b68      	cmp	r3, #104	@ 0x68
 8005b78:	d107      	bne.n	8005b8a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3301      	adds	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005b88:	e7ef      	b.n	8005b6a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005b8a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b8e:	2b25      	cmp	r3, #37	@ 0x25
 8005b90:	f000 80b3 	beq.w	8005cfa <_VPrintTarget+0x322>
 8005b94:	2b25      	cmp	r3, #37	@ 0x25
 8005b96:	f2c0 80b7 	blt.w	8005d08 <_VPrintTarget+0x330>
 8005b9a:	2b78      	cmp	r3, #120	@ 0x78
 8005b9c:	f300 80b4 	bgt.w	8005d08 <_VPrintTarget+0x330>
 8005ba0:	2b58      	cmp	r3, #88	@ 0x58
 8005ba2:	f2c0 80b1 	blt.w	8005d08 <_VPrintTarget+0x330>
 8005ba6:	3b58      	subs	r3, #88	@ 0x58
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	f200 80ad 	bhi.w	8005d08 <_VPrintTarget+0x330>
 8005bae:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb4 <_VPrintTarget+0x1dc>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005cab 	.word	0x08005cab
 8005bb8:	08005d09 	.word	0x08005d09
 8005bbc:	08005d09 	.word	0x08005d09
 8005bc0:	08005d09 	.word	0x08005d09
 8005bc4:	08005d09 	.word	0x08005d09
 8005bc8:	08005d09 	.word	0x08005d09
 8005bcc:	08005d09 	.word	0x08005d09
 8005bd0:	08005d09 	.word	0x08005d09
 8005bd4:	08005d09 	.word	0x08005d09
 8005bd8:	08005d09 	.word	0x08005d09
 8005bdc:	08005d09 	.word	0x08005d09
 8005be0:	08005c39 	.word	0x08005c39
 8005be4:	08005c5f 	.word	0x08005c5f
 8005be8:	08005d09 	.word	0x08005d09
 8005bec:	08005d09 	.word	0x08005d09
 8005bf0:	08005d09 	.word	0x08005d09
 8005bf4:	08005d09 	.word	0x08005d09
 8005bf8:	08005d09 	.word	0x08005d09
 8005bfc:	08005d09 	.word	0x08005d09
 8005c00:	08005d09 	.word	0x08005d09
 8005c04:	08005d09 	.word	0x08005d09
 8005c08:	08005d09 	.word	0x08005d09
 8005c0c:	08005d09 	.word	0x08005d09
 8005c10:	08005d09 	.word	0x08005d09
 8005c14:	08005cd5 	.word	0x08005cd5
 8005c18:	08005d09 	.word	0x08005d09
 8005c1c:	08005d09 	.word	0x08005d09
 8005c20:	08005d09 	.word	0x08005d09
 8005c24:	08005d09 	.word	0x08005d09
 8005c28:	08005c85 	.word	0x08005c85
 8005c2c:	08005d09 	.word	0x08005d09
 8005c30:	08005d09 	.word	0x08005d09
 8005c34:	08005cab 	.word	0x08005cab
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	1d19      	adds	r1, r3, #4
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6011      	str	r1, [r2, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8005c4c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005c50:	f107 0314 	add.w	r3, r7, #20
 8005c54:	4611      	mov	r1, r2
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fd1c 	bl	8005694 <_StoreChar>
        break;
 8005c5c:	e055      	b.n	8005d0a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	1d19      	adds	r1, r3, #4
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6011      	str	r1, [r2, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c6c:	f107 0014 	add.w	r0, r7, #20
 8005c70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c7a:	220a      	movs	r2, #10
 8005c7c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c7e:	f7ff fe1b 	bl	80058b8 <_PrintInt>
        break;
 8005c82:	e042      	b.n	8005d0a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	1d19      	adds	r1, r3, #4
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6011      	str	r1, [r2, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c94:	f107 0014 	add.w	r0, r7, #20
 8005c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca2:	220a      	movs	r2, #10
 8005ca4:	f7ff fd72 	bl	800578c <_PrintUnsigned>
        break;
 8005ca8:	e02f      	b.n	8005d0a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	1d19      	adds	r1, r3, #4
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6011      	str	r1, [r2, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005cb8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cba:	f107 0014 	add.w	r0, r7, #20
 8005cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc8:	2210      	movs	r2, #16
 8005cca:	f7ff fd5f 	bl	800578c <_PrintUnsigned>
        break;
 8005cce:	e01c      	b.n	8005d0a <_VPrintTarget+0x332>
 8005cd0:	200143c4 	.word	0x200143c4
      case 'p':
        v = va_arg(*pParamList, int);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	1d19      	adds	r1, r3, #4
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6011      	str	r1, [r2, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005ce2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ce4:	f107 0014 	add.w	r0, r7, #20
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	2308      	movs	r3, #8
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	2308      	movs	r3, #8
 8005cf2:	2210      	movs	r2, #16
 8005cf4:	f7ff fd4a 	bl	800578c <_PrintUnsigned>
        break;
 8005cf8:	e007      	b.n	8005d0a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005cfa:	f107 0314 	add.w	r3, r7, #20
 8005cfe:	2125      	movs	r1, #37	@ 0x25
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff fcc7 	bl	8005694 <_StoreChar>
        break;
 8005d06:	e000      	b.n	8005d0a <_VPrintTarget+0x332>
      default:
        break;
 8005d08:	bf00      	nop
      }
      sFormat++;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e007      	b.n	8005d22 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005d12:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005d16:	f107 0314 	add.w	r3, r7, #20
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fcb9 	bl	8005694 <_StoreChar>
    }
  } while (*sFormat);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f47f ae72 	bne.w	8005a10 <_VPrintTarget+0x38>
 8005d2c:	e000      	b.n	8005d30 <_VPrintTarget+0x358>
      break;
 8005d2e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d041      	beq.n	8005dba <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d46:	e00b      	b.n	8005d60 <_VPrintTarget+0x388>
 8005d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d4e:	1c59      	adds	r1, r3, #1
 8005d50:	6439      	str	r1, [r7, #64]	@ 0x40
 8005d52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d5c:	09db      	lsrs	r3, r3, #7
 8005d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d62:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d64:	d8f0      	bhi.n	8005d48 <_VPrintTarget+0x370>
 8005d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d74:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d7e:	e00b      	b.n	8005d98 <_VPrintTarget+0x3c0>
 8005d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	1c59      	adds	r1, r3, #1
 8005d88:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d94:	09db      	lsrs	r3, r3, #7
 8005d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d9c:	d8f0      	bhi.n	8005d80 <_VPrintTarget+0x3a8>
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005da4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dac:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	69b9      	ldr	r1, [r7, #24]
 8005db2:	221a      	movs	r2, #26
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff fb87 	bl	80054c8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005dc0:	bf00      	nop
 8005dc2:	3758      	adds	r7, #88	@ 0x58
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005ddc:	4917      	ldr	r1, [pc, #92]	@ (8005e3c <SEGGER_SYSVIEW_Init+0x74>)
 8005dde:	4818      	ldr	r0, [pc, #96]	@ (8005e40 <SEGGER_SYSVIEW_Init+0x78>)
 8005de0:	f7ff f942 	bl	8005068 <SEGGER_RTT_AllocUpBuffer>
 8005de4:	4603      	mov	r3, r0
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	4b16      	ldr	r3, [pc, #88]	@ (8005e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005dea:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005dec:	4b15      	ldr	r3, [pc, #84]	@ (8005e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005dee:	785a      	ldrb	r2, [r3, #1]
 8005df0:	4b14      	ldr	r3, [pc, #80]	@ (8005e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005df2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005df4:	4b13      	ldr	r3, [pc, #76]	@ (8005e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005df6:	7e1b      	ldrb	r3, [r3, #24]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	2308      	movs	r3, #8
 8005e00:	4a11      	ldr	r2, [pc, #68]	@ (8005e48 <SEGGER_SYSVIEW_Init+0x80>)
 8005e02:	490f      	ldr	r1, [pc, #60]	@ (8005e40 <SEGGER_SYSVIEW_Init+0x78>)
 8005e04:	f7ff f9b4 	bl	8005170 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e08:	4b0e      	ldr	r3, [pc, #56]	@ (8005e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005e4c <SEGGER_SYSVIEW_Init+0x84>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a0c      	ldr	r2, [pc, #48]	@ (8005e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e14:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e16:	4a0b      	ldr	r2, [pc, #44]	@ (8005e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e1c:	4a09      	ldr	r2, [pc, #36]	@ (8005e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e22:	4a08      	ldr	r2, [pc, #32]	@ (8005e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e28:	4a06      	ldr	r2, [pc, #24]	@ (8005e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e2e:	4b05      	ldr	r3, [pc, #20]	@ (8005e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	2001338c 	.word	0x2001338c
 8005e40:	0800707c 	.word	0x0800707c
 8005e44:	20014394 	.word	0x20014394
 8005e48:	2001438c 	.word	0x2001438c
 8005e4c:	e0001004 	.word	0xe0001004

08005e50 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005e58:	4a04      	ldr	r2, [pc, #16]	@ (8005e6c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6113      	str	r3, [r2, #16]
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	20014394 	.word	0x20014394

08005e70 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e78:	f3ef 8311 	mrs	r3, BASEPRI
 8005e7c:	f04f 0120 	mov.w	r1, #32
 8005e80:	f381 8811 	msr	BASEPRI, r1
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	4808      	ldr	r0, [pc, #32]	@ (8005ea8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005e88:	f7ff fa2f 	bl	80052ea <_PreparePacket>
 8005e8c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	68b8      	ldr	r0, [r7, #8]
 8005e94:	f7ff fb18 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f383 8811 	msr	BASEPRI, r3
}
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	200143c4 	.word	0x200143c4

08005eac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8005eba:	f04f 0120 	mov.w	r1, #32
 8005ebe:	f381 8811 	msr	BASEPRI, r1
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	4816      	ldr	r0, [pc, #88]	@ (8005f20 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005ec6:	f7ff fa10 	bl	80052ea <_PreparePacket>
 8005eca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	61bb      	str	r3, [r7, #24]
 8005ed8:	e00b      	b.n	8005ef2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	1c59      	adds	r1, r3, #1
 8005ee2:	61f9      	str	r1, [r7, #28]
 8005ee4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	09db      	lsrs	r3, r3, #7
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ef6:	d8f0      	bhi.n	8005eda <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	61fa      	str	r2, [r7, #28]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68f9      	ldr	r1, [r7, #12]
 8005f0c:	6938      	ldr	r0, [r7, #16]
 8005f0e:	f7ff fadb 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f383 8811 	msr	BASEPRI, r3
}
 8005f18:	bf00      	nop
 8005f1a:	3720      	adds	r7, #32
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	200143c4 	.word	0x200143c4

08005f24 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08c      	sub	sp, #48	@ 0x30
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f30:	f3ef 8311 	mrs	r3, BASEPRI
 8005f34:	f04f 0120 	mov.w	r1, #32
 8005f38:	f381 8811 	msr	BASEPRI, r1
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	4825      	ldr	r0, [pc, #148]	@ (8005fd4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005f40:	f7ff f9d3 	bl	80052ea <_PreparePacket>
 8005f44:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f52:	e00b      	b.n	8005f6c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5a:	1c59      	adds	r1, r3, #1
 8005f5c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005f5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f68:	09db      	lsrs	r3, r3, #7
 8005f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f70:	d8f0      	bhi.n	8005f54 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]
 8005f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f80:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	623b      	str	r3, [r7, #32]
 8005f8a:	e00b      	b.n	8005fa4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	1c59      	adds	r1, r3, #1
 8005f94:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	09db      	lsrs	r3, r3, #7
 8005fa2:	623b      	str	r3, [r7, #32]
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fa8:	d8f0      	bhi.n	8005f8c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fb0:	6a3a      	ldr	r2, [r7, #32]
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	6979      	ldr	r1, [r7, #20]
 8005fbe:	69b8      	ldr	r0, [r7, #24]
 8005fc0:	f7ff fa82 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f383 8811 	msr	BASEPRI, r3
}
 8005fca:	bf00      	nop
 8005fcc:	3730      	adds	r7, #48	@ 0x30
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	200143c4 	.word	0x200143c4

08005fd8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08e      	sub	sp, #56	@ 0x38
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fea:	f04f 0120 	mov.w	r1, #32
 8005fee:	f381 8811 	msr	BASEPRI, r1
 8005ff2:	61fb      	str	r3, [r7, #28]
 8005ff4:	4832      	ldr	r0, [pc, #200]	@ (80060c0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005ff6:	f7ff f978 	bl	80052ea <_PreparePacket>
 8005ffa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	637b      	str	r3, [r7, #52]	@ 0x34
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	633b      	str	r3, [r7, #48]	@ 0x30
 8006008:	e00b      	b.n	8006022 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	b2da      	uxtb	r2, r3
 800600e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006010:	1c59      	adds	r1, r3, #1
 8006012:	6379      	str	r1, [r7, #52]	@ 0x34
 8006014:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	09db      	lsrs	r3, r3, #7
 8006020:	633b      	str	r3, [r7, #48]	@ 0x30
 8006022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006024:	2b7f      	cmp	r3, #127	@ 0x7f
 8006026:	d8f0      	bhi.n	800600a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	637a      	str	r2, [r7, #52]	@ 0x34
 800602e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006036:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006040:	e00b      	b.n	800605a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006044:	b2da      	uxtb	r2, r3
 8006046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006048:	1c59      	adds	r1, r3, #1
 800604a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800604c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	09db      	lsrs	r3, r3, #7
 8006058:	62bb      	str	r3, [r7, #40]	@ 0x28
 800605a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605c:	2b7f      	cmp	r3, #127	@ 0x7f
 800605e:	d8f0      	bhi.n	8006042 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	627b      	str	r3, [r7, #36]	@ 0x24
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	623b      	str	r3, [r7, #32]
 8006078:	e00b      	b.n	8006092 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	b2da      	uxtb	r2, r3
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	1c59      	adds	r1, r3, #1
 8006082:	6279      	str	r1, [r7, #36]	@ 0x24
 8006084:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	09db      	lsrs	r3, r3, #7
 8006090:	623b      	str	r3, [r7, #32]
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	2b7f      	cmp	r3, #127	@ 0x7f
 8006096:	d8f0      	bhi.n	800607a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	627a      	str	r2, [r7, #36]	@ 0x24
 800609e:	6a3a      	ldr	r2, [r7, #32]
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	6979      	ldr	r1, [r7, #20]
 80060ac:	69b8      	ldr	r0, [r7, #24]
 80060ae:	f7ff fa0b 	bl	80054c8 <_SendPacket>
  RECORD_END();
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f383 8811 	msr	BASEPRI, r3
}
 80060b8:	bf00      	nop
 80060ba:	3738      	adds	r7, #56	@ 0x38
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	200143c4 	.word	0x200143c4

080060c4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b090      	sub	sp, #64	@ 0x40
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80060d2:	f3ef 8311 	mrs	r3, BASEPRI
 80060d6:	f04f 0120 	mov.w	r1, #32
 80060da:	f381 8811 	msr	BASEPRI, r1
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	4840      	ldr	r0, [pc, #256]	@ (80061e4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80060e2:	f7ff f902 	bl	80052ea <_PreparePacket>
 80060e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060f4:	e00b      	b.n	800610e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80060f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060fc:	1c59      	adds	r1, r3, #1
 80060fe:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006100:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610a:	09db      	lsrs	r3, r3, #7
 800610c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800610e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006110:	2b7f      	cmp	r3, #127	@ 0x7f
 8006112:	d8f0      	bhi.n	80060f6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800611a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006122:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	637b      	str	r3, [r7, #52]	@ 0x34
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	633b      	str	r3, [r7, #48]	@ 0x30
 800612c:	e00b      	b.n	8006146 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006130:	b2da      	uxtb	r2, r3
 8006132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006134:	1c59      	adds	r1, r3, #1
 8006136:	6379      	str	r1, [r7, #52]	@ 0x34
 8006138:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	09db      	lsrs	r3, r3, #7
 8006144:	633b      	str	r3, [r7, #48]	@ 0x30
 8006146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006148:	2b7f      	cmp	r3, #127	@ 0x7f
 800614a:	d8f0      	bhi.n	800612e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800614c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	637a      	str	r2, [r7, #52]	@ 0x34
 8006152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800615a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006164:	e00b      	b.n	800617e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006168:	b2da      	uxtb	r2, r3
 800616a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616c:	1c59      	adds	r1, r3, #1
 800616e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006170:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617a:	09db      	lsrs	r3, r3, #7
 800617c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800617e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006180:	2b7f      	cmp	r3, #127	@ 0x7f
 8006182:	d8f0      	bhi.n	8006166 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800618a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006192:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	627b      	str	r3, [r7, #36]	@ 0x24
 8006198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800619a:	623b      	str	r3, [r7, #32]
 800619c:	e00b      	b.n	80061b6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	1c59      	adds	r1, r3, #1
 80061a6:	6279      	str	r1, [r7, #36]	@ 0x24
 80061a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	09db      	lsrs	r3, r3, #7
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80061ba:	d8f0      	bhi.n	800619e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80061c2:	6a3a      	ldr	r2, [r7, #32]
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	6979      	ldr	r1, [r7, #20]
 80061d0:	69b8      	ldr	r0, [r7, #24]
 80061d2:	f7ff f979 	bl	80054c8 <_SendPacket>
  RECORD_END();
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	f383 8811 	msr	BASEPRI, r3
}
 80061dc:	bf00      	nop
 80061de:	3740      	adds	r7, #64	@ 0x40
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	200143c4 	.word	0x200143c4

080061e8 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b092      	sub	sp, #72	@ 0x48
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80061f6:	f3ef 8311 	mrs	r3, BASEPRI
 80061fa:	f04f 0120 	mov.w	r1, #32
 80061fe:	f381 8811 	msr	BASEPRI, r1
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	484e      	ldr	r0, [pc, #312]	@ (8006340 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006206:	f7ff f870 	bl	80052ea <_PreparePacket>
 800620a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	647b      	str	r3, [r7, #68]	@ 0x44
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	643b      	str	r3, [r7, #64]	@ 0x40
 8006218:	e00b      	b.n	8006232 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800621a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800621c:	b2da      	uxtb	r2, r3
 800621e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006220:	1c59      	adds	r1, r3, #1
 8006222:	6479      	str	r1, [r7, #68]	@ 0x44
 8006224:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800622e:	09db      	lsrs	r3, r3, #7
 8006230:	643b      	str	r3, [r7, #64]	@ 0x40
 8006232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006234:	2b7f      	cmp	r3, #127	@ 0x7f
 8006236:	d8f0      	bhi.n	800621a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	647a      	str	r2, [r7, #68]	@ 0x44
 800623e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006246:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006250:	e00b      	b.n	800626a <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8006252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006254:	b2da      	uxtb	r2, r3
 8006256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006258:	1c59      	adds	r1, r3, #1
 800625a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800625c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006266:	09db      	lsrs	r3, r3, #7
 8006268:	63bb      	str	r3, [r7, #56]	@ 0x38
 800626a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626c:	2b7f      	cmp	r3, #127	@ 0x7f
 800626e:	d8f0      	bhi.n	8006252 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006276:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800627e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	633b      	str	r3, [r7, #48]	@ 0x30
 8006288:	e00b      	b.n	80062a2 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	b2da      	uxtb	r2, r3
 800628e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006290:	1c59      	adds	r1, r3, #1
 8006292:	6379      	str	r1, [r7, #52]	@ 0x34
 8006294:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	09db      	lsrs	r3, r3, #7
 80062a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80062a6:	d8f0      	bhi.n	800628a <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80062a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	637a      	str	r2, [r7, #52]	@ 0x34
 80062ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062c0:	e00b      	b.n	80062da <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80062c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c8:	1c59      	adds	r1, r3, #1
 80062ca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80062cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d6:	09db      	lsrs	r3, r3, #7
 80062d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80062de:	d8f0      	bhi.n	80062c2 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80062f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f6:	623b      	str	r3, [r7, #32]
 80062f8:	e00b      	b.n	8006312 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	1c59      	adds	r1, r3, #1
 8006302:	6279      	str	r1, [r7, #36]	@ 0x24
 8006304:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	09db      	lsrs	r3, r3, #7
 8006310:	623b      	str	r3, [r7, #32]
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	2b7f      	cmp	r3, #127	@ 0x7f
 8006316:	d8f0      	bhi.n	80062fa <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	627a      	str	r2, [r7, #36]	@ 0x24
 800631e:	6a3a      	ldr	r2, [r7, #32]
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	6979      	ldr	r1, [r7, #20]
 800632c:	69b8      	ldr	r0, [r7, #24]
 800632e:	f7ff f8cb 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	f383 8811 	msr	BASEPRI, r3
}
 8006338:	bf00      	nop
 800633a:	3748      	adds	r7, #72	@ 0x48
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	200143c4 	.word	0x200143c4

08006344 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b08c      	sub	sp, #48	@ 0x30
 8006348:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800634a:	4b58      	ldr	r3, [pc, #352]	@ (80064ac <SEGGER_SYSVIEW_Start+0x168>)
 800634c:	2201      	movs	r2, #1
 800634e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006350:	f3ef 8311 	mrs	r3, BASEPRI
 8006354:	f04f 0120 	mov.w	r1, #32
 8006358:	f381 8811 	msr	BASEPRI, r1
 800635c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800635e:	4b53      	ldr	r3, [pc, #332]	@ (80064ac <SEGGER_SYSVIEW_Start+0x168>)
 8006360:	785b      	ldrb	r3, [r3, #1]
 8006362:	220a      	movs	r2, #10
 8006364:	4952      	ldr	r1, [pc, #328]	@ (80064b0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006366:	4618      	mov	r0, r3
 8006368:	f7f9 ff3a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006372:	200a      	movs	r0, #10
 8006374:	f7ff fd7c 	bl	8005e70 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006378:	f3ef 8311 	mrs	r3, BASEPRI
 800637c:	f04f 0120 	mov.w	r1, #32
 8006380:	f381 8811 	msr	BASEPRI, r1
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	484b      	ldr	r0, [pc, #300]	@ (80064b4 <SEGGER_SYSVIEW_Start+0x170>)
 8006388:	f7fe ffaf 	bl	80052ea <_PreparePacket>
 800638c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006396:	4b45      	ldr	r3, [pc, #276]	@ (80064ac <SEGGER_SYSVIEW_Start+0x168>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800639c:	e00b      	b.n	80063b6 <SEGGER_SYSVIEW_Start+0x72>
 800639e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a4:	1c59      	adds	r1, r3, #1
 80063a6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80063a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b2:	09db      	lsrs	r3, r3, #7
 80063b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80063ba:	d8f0      	bhi.n	800639e <SEGGER_SYSVIEW_Start+0x5a>
 80063bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80063d0:	4b36      	ldr	r3, [pc, #216]	@ (80064ac <SEGGER_SYSVIEW_Start+0x168>)
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	623b      	str	r3, [r7, #32]
 80063d6:	e00b      	b.n	80063f0 <SEGGER_SYSVIEW_Start+0xac>
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	1c59      	adds	r1, r3, #1
 80063e0:	6279      	str	r1, [r7, #36]	@ 0x24
 80063e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	09db      	lsrs	r3, r3, #7
 80063ee:	623b      	str	r3, [r7, #32]
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80063f4:	d8f0      	bhi.n	80063d8 <SEGGER_SYSVIEW_Start+0x94>
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80063fc:	6a3a      	ldr	r2, [r7, #32]
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	61fb      	str	r3, [r7, #28]
 800640a:	4b28      	ldr	r3, [pc, #160]	@ (80064ac <SEGGER_SYSVIEW_Start+0x168>)
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	61bb      	str	r3, [r7, #24]
 8006410:	e00b      	b.n	800642a <SEGGER_SYSVIEW_Start+0xe6>
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	b2da      	uxtb	r2, r3
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	1c59      	adds	r1, r3, #1
 800641a:	61f9      	str	r1, [r7, #28]
 800641c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	09db      	lsrs	r3, r3, #7
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b7f      	cmp	r3, #127	@ 0x7f
 800642e:	d8f0      	bhi.n	8006412 <SEGGER_SYSVIEW_Start+0xce>
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	61fa      	str	r2, [r7, #28]
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	e00b      	b.n	8006462 <SEGGER_SYSVIEW_Start+0x11e>
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	b2da      	uxtb	r2, r3
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	1c59      	adds	r1, r3, #1
 8006452:	6179      	str	r1, [r7, #20]
 8006454:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	09db      	lsrs	r3, r3, #7
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b7f      	cmp	r3, #127	@ 0x7f
 8006466:	d8f0      	bhi.n	800644a <SEGGER_SYSVIEW_Start+0x106>
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	617a      	str	r2, [r7, #20]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006478:	2218      	movs	r2, #24
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff f823 	bl	80054c8 <_SendPacket>
      RECORD_END();
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006488:	4b08      	ldr	r3, [pc, #32]	@ (80064ac <SEGGER_SYSVIEW_Start+0x168>)
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006490:	4b06      	ldr	r3, [pc, #24]	@ (80064ac <SEGGER_SYSVIEW_Start+0x168>)
 8006492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006494:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006496:	f000 f9eb 	bl	8006870 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800649a:	f000 f9b1 	bl	8006800 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800649e:	f000 fc23 	bl	8006ce8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80064a2:	bf00      	nop
 80064a4:	3730      	adds	r7, #48	@ 0x30
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20014394 	.word	0x20014394
 80064b0:	080070a4 	.word	0x080070a4
 80064b4:	200143c4 	.word	0x200143c4

080064b8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064be:	f3ef 8311 	mrs	r3, BASEPRI
 80064c2:	f04f 0120 	mov.w	r1, #32
 80064c6:	f381 8811 	msr	BASEPRI, r1
 80064ca:	607b      	str	r3, [r7, #4]
 80064cc:	480b      	ldr	r0, [pc, #44]	@ (80064fc <SEGGER_SYSVIEW_Stop+0x44>)
 80064ce:	f7fe ff0c 	bl	80052ea <_PreparePacket>
 80064d2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80064d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006500 <SEGGER_SYSVIEW_Stop+0x48>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d007      	beq.n	80064ec <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80064dc:	220b      	movs	r2, #11
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6838      	ldr	r0, [r7, #0]
 80064e2:	f7fe fff1 	bl	80054c8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80064e6:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <SEGGER_SYSVIEW_Stop+0x48>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f383 8811 	msr	BASEPRI, r3
}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	200143c4 	.word	0x200143c4
 8006500:	20014394 	.word	0x20014394

08006504 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006504:	b580      	push	{r7, lr}
 8006506:	b08c      	sub	sp, #48	@ 0x30
 8006508:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800650a:	f3ef 8311 	mrs	r3, BASEPRI
 800650e:	f04f 0120 	mov.w	r1, #32
 8006512:	f381 8811 	msr	BASEPRI, r1
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	4845      	ldr	r0, [pc, #276]	@ (8006630 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800651a:	f7fe fee6 	bl	80052ea <_PreparePacket>
 800651e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006528:	4b42      	ldr	r3, [pc, #264]	@ (8006634 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800652e:	e00b      	b.n	8006548 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	b2da      	uxtb	r2, r3
 8006534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006536:	1c59      	adds	r1, r3, #1
 8006538:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800653a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006544:	09db      	lsrs	r3, r3, #7
 8006546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654a:	2b7f      	cmp	r3, #127	@ 0x7f
 800654c:	d8f0      	bhi.n	8006530 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800654e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006554:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800655c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	627b      	str	r3, [r7, #36]	@ 0x24
 8006562:	4b34      	ldr	r3, [pc, #208]	@ (8006634 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	623b      	str	r3, [r7, #32]
 8006568:	e00b      	b.n	8006582 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	b2da      	uxtb	r2, r3
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	1c59      	adds	r1, r3, #1
 8006572:	6279      	str	r1, [r7, #36]	@ 0x24
 8006574:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006578:	b2d2      	uxtb	r2, r2
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	09db      	lsrs	r3, r3, #7
 8006580:	623b      	str	r3, [r7, #32]
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	2b7f      	cmp	r3, #127	@ 0x7f
 8006586:	d8f0      	bhi.n	800656a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	627a      	str	r2, [r7, #36]	@ 0x24
 800658e:	6a3a      	ldr	r2, [r7, #32]
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	4b25      	ldr	r3, [pc, #148]	@ (8006634 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	e00b      	b.n	80065bc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	1c59      	adds	r1, r3, #1
 80065ac:	61f9      	str	r1, [r7, #28]
 80065ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	09db      	lsrs	r3, r3, #7
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2b7f      	cmp	r3, #127	@ 0x7f
 80065c0:	d8f0      	bhi.n	80065a4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	61fa      	str	r2, [r7, #28]
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	e00b      	b.n	80065f4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	1c59      	adds	r1, r3, #1
 80065e4:	6179      	str	r1, [r7, #20]
 80065e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	09db      	lsrs	r3, r3, #7
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80065f8:	d8f0      	bhi.n	80065dc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	617a      	str	r2, [r7, #20]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800660a:	2218      	movs	r2, #24
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	68b8      	ldr	r0, [r7, #8]
 8006610:	f7fe ff5a 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800661a:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006622:	4b04      	ldr	r3, [pc, #16]	@ (8006634 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	4798      	blx	r3
  }
}
 8006628:	bf00      	nop
 800662a:	3730      	adds	r7, #48	@ 0x30
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	200143c4 	.word	0x200143c4
 8006634:	20014394 	.word	0x20014394

08006638 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b092      	sub	sp, #72	@ 0x48
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006640:	f3ef 8311 	mrs	r3, BASEPRI
 8006644:	f04f 0120 	mov.w	r1, #32
 8006648:	f381 8811 	msr	BASEPRI, r1
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	486a      	ldr	r0, [pc, #424]	@ (80067f8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006650:	f7fe fe4b 	bl	80052ea <_PreparePacket>
 8006654:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	647b      	str	r3, [r7, #68]	@ 0x44
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b66      	ldr	r3, [pc, #408]	@ (80067fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	643b      	str	r3, [r7, #64]	@ 0x40
 800666a:	e00b      	b.n	8006684 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800666c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800666e:	b2da      	uxtb	r2, r3
 8006670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006672:	1c59      	adds	r1, r3, #1
 8006674:	6479      	str	r1, [r7, #68]	@ 0x44
 8006676:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006680:	09db      	lsrs	r3, r3, #7
 8006682:	643b      	str	r3, [r7, #64]	@ 0x40
 8006684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006686:	2b7f      	cmp	r3, #127	@ 0x7f
 8006688:	d8f0      	bhi.n	800666c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800668a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006690:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006698:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066a4:	e00b      	b.n	80066be <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ac:	1c59      	adds	r1, r3, #1
 80066ae:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80066b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	09db      	lsrs	r3, r3, #7
 80066bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80066c2:	d8f0      	bhi.n	80066a6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80066c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80066ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066d2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	4619      	mov	r1, r3
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7fe fdb7 	bl	8005250 <_EncodeStr>
 80066e2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80066e4:	2209      	movs	r2, #9
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	6938      	ldr	r0, [r7, #16]
 80066ea:	f7fe feed 	bl	80054c8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	4b40      	ldr	r3, [pc, #256]	@ (80067fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	633b      	str	r3, [r7, #48]	@ 0x30
 8006702:	e00b      	b.n	800671c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006706:	b2da      	uxtb	r2, r3
 8006708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670a:	1c59      	adds	r1, r3, #1
 800670c:	6379      	str	r1, [r7, #52]	@ 0x34
 800670e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	09db      	lsrs	r3, r3, #7
 800671a:	633b      	str	r3, [r7, #48]	@ 0x30
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006720:	d8f0      	bhi.n	8006704 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	637a      	str	r2, [r7, #52]	@ 0x34
 8006728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006730:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800673c:	e00b      	b.n	8006756 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800673e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006740:	b2da      	uxtb	r2, r3
 8006742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006744:	1c59      	adds	r1, r3, #1
 8006746:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006748:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006752:	09db      	lsrs	r3, r3, #7
 8006754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	2b7f      	cmp	r3, #127	@ 0x7f
 800675a:	d8f0      	bhi.n	800673e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006762:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	623b      	str	r3, [r7, #32]
 8006776:	e00b      	b.n	8006790 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	b2da      	uxtb	r2, r3
 800677c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677e:	1c59      	adds	r1, r3, #1
 8006780:	6279      	str	r1, [r7, #36]	@ 0x24
 8006782:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	09db      	lsrs	r3, r3, #7
 800678e:	623b      	str	r3, [r7, #32]
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	2b7f      	cmp	r3, #127	@ 0x7f
 8006794:	d8f0      	bhi.n	8006778 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	627a      	str	r2, [r7, #36]	@ 0x24
 800679c:	6a3a      	ldr	r2, [r7, #32]
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	2300      	movs	r3, #0
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	e00b      	b.n	80067c8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	1c59      	adds	r1, r3, #1
 80067b8:	61f9      	str	r1, [r7, #28]
 80067ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	09db      	lsrs	r3, r3, #7
 80067c6:	61bb      	str	r3, [r7, #24]
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80067cc:	d8f0      	bhi.n	80067b0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	61fa      	str	r2, [r7, #28]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80067de:	2215      	movs	r2, #21
 80067e0:	68f9      	ldr	r1, [r7, #12]
 80067e2:	6938      	ldr	r0, [r7, #16]
 80067e4:	f7fe fe70 	bl	80054c8 <_SendPacket>
  RECORD_END();
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f383 8811 	msr	BASEPRI, r3
}
 80067ee:	bf00      	nop
 80067f0:	3748      	adds	r7, #72	@ 0x48
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	200143c4 	.word	0x200143c4
 80067fc:	20014394 	.word	0x20014394

08006800 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006804:	4b07      	ldr	r3, [pc, #28]	@ (8006824 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d008      	beq.n	800681e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800680c:	4b05      	ldr	r3, [pc, #20]	@ (8006824 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006816:	4b03      	ldr	r3, [pc, #12]	@ (8006824 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4798      	blx	r3
  }
}
 800681e:	bf00      	nop
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20014394 	.word	0x20014394

08006828 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006830:	f3ef 8311 	mrs	r3, BASEPRI
 8006834:	f04f 0120 	mov.w	r1, #32
 8006838:	f381 8811 	msr	BASEPRI, r1
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	480b      	ldr	r0, [pc, #44]	@ (800686c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006840:	f7fe fd53 	bl	80052ea <_PreparePacket>
 8006844:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006846:	2280      	movs	r2, #128	@ 0x80
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	6938      	ldr	r0, [r7, #16]
 800684c:	f7fe fd00 	bl	8005250 <_EncodeStr>
 8006850:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006852:	220e      	movs	r2, #14
 8006854:	68f9      	ldr	r1, [r7, #12]
 8006856:	6938      	ldr	r0, [r7, #16]
 8006858:	f7fe fe36 	bl	80054c8 <_SendPacket>
  RECORD_END();
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f383 8811 	msr	BASEPRI, r3
}
 8006862:	bf00      	nop
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	200143c4 	.word	0x200143c4

08006870 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006870:	b590      	push	{r4, r7, lr}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006876:	4b15      	ldr	r3, [pc, #84]	@ (80068cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d01a      	beq.n	80068b4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800687e:	4b13      	ldr	r3, [pc, #76]	@ (80068cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d015      	beq.n	80068b4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006888:	4b10      	ldr	r3, [pc, #64]	@ (80068cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4798      	blx	r3
 8006890:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006894:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006896:	e9d7 0100 	ldrd	r0, r1, [r7]
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	000a      	movs	r2, r1
 80068a4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068a6:	4613      	mov	r3, r2
 80068a8:	461a      	mov	r2, r3
 80068aa:	4621      	mov	r1, r4
 80068ac:	200d      	movs	r0, #13
 80068ae:	f7ff fb39 	bl	8005f24 <SEGGER_SYSVIEW_RecordU32x2>
 80068b2:	e006      	b.n	80068c2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80068b4:	4b06      	ldr	r3, [pc, #24]	@ (80068d0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4619      	mov	r1, r3
 80068ba:	200c      	movs	r0, #12
 80068bc:	f7ff faf6 	bl	8005eac <SEGGER_SYSVIEW_RecordU32>
  }
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd90      	pop	{r4, r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20014394 	.word	0x20014394
 80068d0:	e0001004 	.word	0xe0001004

080068d4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068da:	f3ef 8311 	mrs	r3, BASEPRI
 80068de:	f04f 0120 	mov.w	r1, #32
 80068e2:	f381 8811 	msr	BASEPRI, r1
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	4819      	ldr	r0, [pc, #100]	@ (8006950 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80068ea:	f7fe fcfe 	bl	80052ea <_PreparePacket>
 80068ee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80068f4:	4b17      	ldr	r3, [pc, #92]	@ (8006954 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	e00b      	b.n	8006920 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	b2da      	uxtb	r2, r3
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	1c59      	adds	r1, r3, #1
 8006910:	6179      	str	r1, [r7, #20]
 8006912:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	09db      	lsrs	r3, r3, #7
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2b7f      	cmp	r3, #127	@ 0x7f
 8006924:	d8f0      	bhi.n	8006908 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	617a      	str	r2, [r7, #20]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006936:	2202      	movs	r2, #2
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	68b8      	ldr	r0, [r7, #8]
 800693c:	f7fe fdc4 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f383 8811 	msr	BASEPRI, r3
}
 8006946:	bf00      	nop
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	200143c4 	.word	0x200143c4
 8006954:	e000ed04 	.word	0xe000ed04

08006958 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800695e:	f3ef 8311 	mrs	r3, BASEPRI
 8006962:	f04f 0120 	mov.w	r1, #32
 8006966:	f381 8811 	msr	BASEPRI, r1
 800696a:	607b      	str	r3, [r7, #4]
 800696c:	4807      	ldr	r0, [pc, #28]	@ (800698c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800696e:	f7fe fcbc 	bl	80052ea <_PreparePacket>
 8006972:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006974:	2203      	movs	r2, #3
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6838      	ldr	r0, [r7, #0]
 800697a:	f7fe fda5 	bl	80054c8 <_SendPacket>
  RECORD_END();
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f383 8811 	msr	BASEPRI, r3
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	200143c4 	.word	0x200143c4

08006990 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006996:	f3ef 8311 	mrs	r3, BASEPRI
 800699a:	f04f 0120 	mov.w	r1, #32
 800699e:	f381 8811 	msr	BASEPRI, r1
 80069a2:	607b      	str	r3, [r7, #4]
 80069a4:	4807      	ldr	r0, [pc, #28]	@ (80069c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80069a6:	f7fe fca0 	bl	80052ea <_PreparePacket>
 80069aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80069ac:	2212      	movs	r2, #18
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6838      	ldr	r0, [r7, #0]
 80069b2:	f7fe fd89 	bl	80054c8 <_SendPacket>
  RECORD_END();
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f383 8811 	msr	BASEPRI, r3
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	200143c4 	.word	0x200143c4

080069c8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069ce:	f3ef 8311 	mrs	r3, BASEPRI
 80069d2:	f04f 0120 	mov.w	r1, #32
 80069d6:	f381 8811 	msr	BASEPRI, r1
 80069da:	607b      	str	r3, [r7, #4]
 80069dc:	4807      	ldr	r0, [pc, #28]	@ (80069fc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80069de:	f7fe fc84 	bl	80052ea <_PreparePacket>
 80069e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80069e4:	2211      	movs	r2, #17
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6838      	ldr	r0, [r7, #0]
 80069ea:	f7fe fd6d 	bl	80054c8 <_SendPacket>
  RECORD_END();
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f383 8811 	msr	BASEPRI, r3
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	200143c4 	.word	0x200143c4

08006a00 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a08:	f3ef 8311 	mrs	r3, BASEPRI
 8006a0c:	f04f 0120 	mov.w	r1, #32
 8006a10:	f381 8811 	msr	BASEPRI, r1
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	4819      	ldr	r0, [pc, #100]	@ (8006a7c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a18:	f7fe fc67 	bl	80052ea <_PreparePacket>
 8006a1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a22:	4b17      	ldr	r3, [pc, #92]	@ (8006a80 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	e00b      	b.n	8006a4e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	1c59      	adds	r1, r3, #1
 8006a3e:	61f9      	str	r1, [r7, #28]
 8006a40:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	09db      	lsrs	r3, r3, #7
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a52:	d8f0      	bhi.n	8006a36 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	61fa      	str	r2, [r7, #28]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a64:	2208      	movs	r2, #8
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	6938      	ldr	r0, [r7, #16]
 8006a6a:	f7fe fd2d 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f383 8811 	msr	BASEPRI, r3
}
 8006a74:	bf00      	nop
 8006a76:	3720      	adds	r7, #32
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	200143c4 	.word	0x200143c4
 8006a80:	20014394 	.word	0x20014394

08006a84 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a90:	f04f 0120 	mov.w	r1, #32
 8006a94:	f381 8811 	msr	BASEPRI, r1
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	4819      	ldr	r0, [pc, #100]	@ (8006b00 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a9c:	f7fe fc25 	bl	80052ea <_PreparePacket>
 8006aa0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006aa6:	4b17      	ldr	r3, [pc, #92]	@ (8006b04 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	61bb      	str	r3, [r7, #24]
 8006ab8:	e00b      	b.n	8006ad2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	1c59      	adds	r1, r3, #1
 8006ac2:	61f9      	str	r1, [r7, #28]
 8006ac4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	09db      	lsrs	r3, r3, #7
 8006ad0:	61bb      	str	r3, [r7, #24]
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ad6:	d8f0      	bhi.n	8006aba <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	61fa      	str	r2, [r7, #28]
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006ae8:	2204      	movs	r2, #4
 8006aea:	68f9      	ldr	r1, [r7, #12]
 8006aec:	6938      	ldr	r0, [r7, #16]
 8006aee:	f7fe fceb 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f383 8811 	msr	BASEPRI, r3
}
 8006af8:	bf00      	nop
 8006afa:	3720      	adds	r7, #32
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	200143c4 	.word	0x200143c4
 8006b04:	20014394 	.word	0x20014394

08006b08 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b10:	f3ef 8311 	mrs	r3, BASEPRI
 8006b14:	f04f 0120 	mov.w	r1, #32
 8006b18:	f381 8811 	msr	BASEPRI, r1
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	4819      	ldr	r0, [pc, #100]	@ (8006b84 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b20:	f7fe fbe3 	bl	80052ea <_PreparePacket>
 8006b24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b2a:	4b17      	ldr	r3, [pc, #92]	@ (8006b88 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	e00b      	b.n	8006b56 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	1c59      	adds	r1, r3, #1
 8006b46:	61f9      	str	r1, [r7, #28]
 8006b48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	09db      	lsrs	r3, r3, #7
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b5a:	d8f0      	bhi.n	8006b3e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	61fa      	str	r2, [r7, #28]
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b6c:	2206      	movs	r2, #6
 8006b6e:	68f9      	ldr	r1, [r7, #12]
 8006b70:	6938      	ldr	r0, [r7, #16]
 8006b72:	f7fe fca9 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f383 8811 	msr	BASEPRI, r3
}
 8006b7c:	bf00      	nop
 8006b7e:	3720      	adds	r7, #32
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	200143c4 	.word	0x200143c4
 8006b88:	20014394 	.word	0x20014394

08006b8c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006b94:	4b04      	ldr	r3, [pc, #16]	@ (8006ba8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	1ad3      	subs	r3, r2, r3
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	20014394 	.word	0x20014394

08006bac <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08c      	sub	sp, #48	@ 0x30
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d06d      	beq.n	8006c9a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006bbe:	4b39      	ldr	r3, [pc, #228]	@ (8006ca4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bc8:	e008      	b.n	8006bdc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd8:	3301      	adds	r3, #1
 8006bda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d3f2      	bcc.n	8006bca <SEGGER_SYSVIEW_SendModule+0x1e>
 8006be4:	e000      	b.n	8006be8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006be6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d055      	beq.n	8006c9a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bee:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf2:	f04f 0120 	mov.w	r1, #32
 8006bf6:	f381 8811 	msr	BASEPRI, r1
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	482a      	ldr	r0, [pc, #168]	@ (8006ca8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006bfe:	f7fe fb74 	bl	80052ea <_PreparePacket>
 8006c02:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	623b      	str	r3, [r7, #32]
 8006c10:	e00b      	b.n	8006c2a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c18:	1c59      	adds	r1, r3, #1
 8006c1a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006c1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	09db      	lsrs	r3, r3, #7
 8006c28:	623b      	str	r3, [r7, #32]
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c2e:	d8f0      	bhi.n	8006c12 <SEGGER_SYSVIEW_SendModule+0x66>
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c36:	6a3a      	ldr	r2, [r7, #32]
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	61fb      	str	r3, [r7, #28]
 8006c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	61bb      	str	r3, [r7, #24]
 8006c4a:	e00b      	b.n	8006c64 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	1c59      	adds	r1, r3, #1
 8006c54:	61f9      	str	r1, [r7, #28]
 8006c56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	09db      	lsrs	r3, r3, #7
 8006c62:	61bb      	str	r3, [r7, #24]
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c68:	d8f0      	bhi.n	8006c4c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	61fa      	str	r2, [r7, #28]
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2280      	movs	r2, #128	@ 0x80
 8006c80:	4619      	mov	r1, r3
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f7fe fae4 	bl	8005250 <_EncodeStr>
 8006c88:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006c8a:	2216      	movs	r2, #22
 8006c8c:	68f9      	ldr	r1, [r7, #12]
 8006c8e:	6938      	ldr	r0, [r7, #16]
 8006c90:	f7fe fc1a 	bl	80054c8 <_SendPacket>
      RECORD_END();
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006c9a:	bf00      	nop
 8006c9c:	3730      	adds	r7, #48	@ 0x30
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	200143bc 	.word	0x200143bc
 8006ca8:	200143c4 	.word	0x200143c4

08006cac <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00f      	beq.n	8006cda <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006cba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1f2      	bne.n	8006cc0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200143bc 	.word	0x200143bc

08006ce8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006cee:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf2:	f04f 0120 	mov.w	r1, #32
 8006cf6:	f381 8811 	msr	BASEPRI, r1
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	4817      	ldr	r0, [pc, #92]	@ (8006d5c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006cfe:	f7fe faf4 	bl	80052ea <_PreparePacket>
 8006d02:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	4b14      	ldr	r3, [pc, #80]	@ (8006d60 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	e00b      	b.n	8006d2c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	1c59      	adds	r1, r3, #1
 8006d1c:	6179      	str	r1, [r7, #20]
 8006d1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	701a      	strb	r2, [r3, #0]
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	09db      	lsrs	r3, r3, #7
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d30:	d8f0      	bhi.n	8006d14 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	617a      	str	r2, [r7, #20]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d42:	221b      	movs	r2, #27
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	68b8      	ldr	r0, [r7, #8]
 8006d48:	f7fe fbbe 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f383 8811 	msr	BASEPRI, r3
}
 8006d52:	bf00      	nop
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	200143c4 	.word	0x200143c4
 8006d60:	200143c0 	.word	0x200143c0

08006d64 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006d64:	b40f      	push	{r0, r1, r2, r3}
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006d6c:	f107 0314 	add.w	r3, r7, #20
 8006d70:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006d72:	1d3b      	adds	r3, r7, #4
 8006d74:	461a      	mov	r2, r3
 8006d76:	2100      	movs	r1, #0
 8006d78:	6938      	ldr	r0, [r7, #16]
 8006d7a:	f7fe fe2d 	bl	80059d8 <_VPrintTarget>
  va_end(ParamList);
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d88:	b004      	add	sp, #16
 8006d8a:	4770      	bx	lr

08006d8c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	@ 0x28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d94:	f3ef 8311 	mrs	r3, BASEPRI
 8006d98:	f04f 0120 	mov.w	r1, #32
 8006d9c:	f381 8811 	msr	BASEPRI, r1
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	4827      	ldr	r0, [pc, #156]	@ (8006e40 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006da4:	f7fe faa1 	bl	80052ea <_PreparePacket>
 8006da8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006daa:	2280      	movs	r2, #128	@ 0x80
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	6938      	ldr	r0, [r7, #16]
 8006db0:	f7fe fa4e 	bl	8005250 <_EncodeStr>
 8006db4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dba:	2301      	movs	r3, #1
 8006dbc:	623b      	str	r3, [r7, #32]
 8006dbe:	e00b      	b.n	8006dd8 <SEGGER_SYSVIEW_Warn+0x4c>
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	1c59      	adds	r1, r3, #1
 8006dc8:	6279      	str	r1, [r7, #36]	@ 0x24
 8006dca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	09db      	lsrs	r3, r3, #7
 8006dd6:	623b      	str	r3, [r7, #32]
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ddc:	d8f0      	bhi.n	8006dc0 <SEGGER_SYSVIEW_Warn+0x34>
 8006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006de4:	6a3a      	ldr	r2, [r7, #32]
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	2300      	movs	r3, #0
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	e00b      	b.n	8006e10 <SEGGER_SYSVIEW_Warn+0x84>
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	1c59      	adds	r1, r3, #1
 8006e00:	61f9      	str	r1, [r7, #28]
 8006e02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	09db      	lsrs	r3, r3, #7
 8006e0e:	61bb      	str	r3, [r7, #24]
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e14:	d8f0      	bhi.n	8006df8 <SEGGER_SYSVIEW_Warn+0x6c>
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	61fa      	str	r2, [r7, #28]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e26:	221a      	movs	r2, #26
 8006e28:	68f9      	ldr	r1, [r7, #12]
 8006e2a:	6938      	ldr	r0, [r7, #16]
 8006e2c:	f7fe fb4c 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f383 8811 	msr	BASEPRI, r3
}
 8006e36:	bf00      	nop
 8006e38:	3728      	adds	r7, #40	@ 0x28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	200143c4 	.word	0x200143c4

08006e44 <memcmp>:
 8006e44:	b510      	push	{r4, lr}
 8006e46:	3901      	subs	r1, #1
 8006e48:	4402      	add	r2, r0
 8006e4a:	4290      	cmp	r0, r2
 8006e4c:	d101      	bne.n	8006e52 <memcmp+0xe>
 8006e4e:	2000      	movs	r0, #0
 8006e50:	e005      	b.n	8006e5e <memcmp+0x1a>
 8006e52:	7803      	ldrb	r3, [r0, #0]
 8006e54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006e58:	42a3      	cmp	r3, r4
 8006e5a:	d001      	beq.n	8006e60 <memcmp+0x1c>
 8006e5c:	1b18      	subs	r0, r3, r4
 8006e5e:	bd10      	pop	{r4, pc}
 8006e60:	3001      	adds	r0, #1
 8006e62:	e7f2      	b.n	8006e4a <memcmp+0x6>

08006e64 <memset>:
 8006e64:	4402      	add	r2, r0
 8006e66:	4603      	mov	r3, r0
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d100      	bne.n	8006e6e <memset+0xa>
 8006e6c:	4770      	bx	lr
 8006e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e72:	e7f9      	b.n	8006e68 <memset+0x4>

08006e74 <__libc_init_array>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	4d0d      	ldr	r5, [pc, #52]	@ (8006eac <__libc_init_array+0x38>)
 8006e78:	4c0d      	ldr	r4, [pc, #52]	@ (8006eb0 <__libc_init_array+0x3c>)
 8006e7a:	1b64      	subs	r4, r4, r5
 8006e7c:	10a4      	asrs	r4, r4, #2
 8006e7e:	2600      	movs	r6, #0
 8006e80:	42a6      	cmp	r6, r4
 8006e82:	d109      	bne.n	8006e98 <__libc_init_array+0x24>
 8006e84:	4d0b      	ldr	r5, [pc, #44]	@ (8006eb4 <__libc_init_array+0x40>)
 8006e86:	4c0c      	ldr	r4, [pc, #48]	@ (8006eb8 <__libc_init_array+0x44>)
 8006e88:	f000 f826 	bl	8006ed8 <_init>
 8006e8c:	1b64      	subs	r4, r4, r5
 8006e8e:	10a4      	asrs	r4, r4, #2
 8006e90:	2600      	movs	r6, #0
 8006e92:	42a6      	cmp	r6, r4
 8006e94:	d105      	bne.n	8006ea2 <__libc_init_array+0x2e>
 8006e96:	bd70      	pop	{r4, r5, r6, pc}
 8006e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9c:	4798      	blx	r3
 8006e9e:	3601      	adds	r6, #1
 8006ea0:	e7ee      	b.n	8006e80 <__libc_init_array+0xc>
 8006ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea6:	4798      	blx	r3
 8006ea8:	3601      	adds	r6, #1
 8006eaa:	e7f2      	b.n	8006e92 <__libc_init_array+0x1e>
 8006eac:	080070c8 	.word	0x080070c8
 8006eb0:	080070c8 	.word	0x080070c8
 8006eb4:	080070c8 	.word	0x080070c8
 8006eb8:	080070cc 	.word	0x080070cc

08006ebc <memcpy>:
 8006ebc:	440a      	add	r2, r1
 8006ebe:	4291      	cmp	r1, r2
 8006ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ec4:	d100      	bne.n	8006ec8 <memcpy+0xc>
 8006ec6:	4770      	bx	lr
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ed2:	4291      	cmp	r1, r2
 8006ed4:	d1f9      	bne.n	8006eca <memcpy+0xe>
 8006ed6:	bd10      	pop	{r4, pc}

08006ed8 <_init>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	bf00      	nop
 8006edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ede:	bc08      	pop	{r3}
 8006ee0:	469e      	mov	lr, r3
 8006ee2:	4770      	bx	lr

08006ee4 <_fini>:
 8006ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee6:	bf00      	nop
 8006ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eea:	bc08      	pop	{r3}
 8006eec:	469e      	mov	lr, r3
 8006eee:	4770      	bx	lr
