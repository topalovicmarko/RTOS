
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d04  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08006ea4  08006ea4  00007ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007080  08007080  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  08007080  08007080  00008080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007088  08007088  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007088  08007088  00008088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800708c  0800708c  0000808c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007090  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014498  20000014  080070a4  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144ac  080070a4  000094ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137aa  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd2  00000000  00000000  0001c7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0001f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ead  00000000  00000000  00020ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b48  00000000  00000000  00021985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153d6  00000000  00000000  0003a4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a2e1  00000000  00000000  0004f8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9b84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fec  00000000  00000000  000e9bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b1  00000000  00000000  000eebb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e8c 	.word	0x08006e8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08006e8c 	.word	0x08006e8c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ed8 	.word	0x20012ed8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fb71 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f899 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f903 	bl	800077c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000576:	4b3d      	ldr	r3, [pc, #244]	@ (800066c <main+0x108>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a3c      	ldr	r2, [pc, #240]	@ (800066c <main+0x108>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000582:	f004 fb33 	bl	8004bec <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000586:	f005 feb7 	bl	80062f8 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler,"LED_green_task",200,NULL,3,&ledg_task_handle);
 800058a:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <main+0x10c>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2303      	movs	r3, #3
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22c8      	movs	r2, #200	@ 0xc8
 8000596:	4937      	ldr	r1, [pc, #220]	@ (8000674 <main+0x110>)
 8000598:	4837      	ldr	r0, [pc, #220]	@ (8000678 <main+0x114>)
 800059a:	f002 f963 	bl	8002864 <xTaskCreate>
 800059e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00b      	beq.n	80005be <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <main+0x56>

  next_task_handle = ledg_task_handle;
 80005be:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <main+0x10c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a2e      	ldr	r2, [pc, #184]	@ (800067c <main+0x118>)
 80005c4:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler,"LED_red_task",200,NULL,1,&ledr_task_handle);
 80005c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000680 <main+0x11c>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	@ 0xc8
 80005d2:	492c      	ldr	r1, [pc, #176]	@ (8000684 <main+0x120>)
 80005d4:	482c      	ldr	r0, [pc, #176]	@ (8000688 <main+0x124>)
 80005d6:	f002 f945 	bl	8002864 <xTaskCreate>
 80005da:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00b      	beq.n	80005fa <main+0x96>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	60fb      	str	r3, [r7, #12]
    }
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x92>

  status = xTaskCreate(led_orange_handler,"LED_orange_task",200,NULL,2,&ledo_task_handle);
 80005fa:	4b24      	ldr	r3, [pc, #144]	@ (800068c <main+0x128>)
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22c8      	movs	r2, #200	@ 0xc8
 8000606:	4922      	ldr	r1, [pc, #136]	@ (8000690 <main+0x12c>)
 8000608:	4822      	ldr	r0, [pc, #136]	@ (8000694 <main+0x130>)
 800060a:	f002 f92b 	bl	8002864 <xTaskCreate>
 800060e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00b      	beq.n	800062e <main+0xca>
        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	60bb      	str	r3, [r7, #8]
    }
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0xc6>

  status = xTaskCreate(button_handler,"Button_task",200,NULL,4,&btn_task_handle);
 800062e:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <main+0x134>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2304      	movs	r3, #4
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22c8      	movs	r2, #200	@ 0xc8
 800063a:	4918      	ldr	r1, [pc, #96]	@ (800069c <main+0x138>)
 800063c:	4818      	ldr	r0, [pc, #96]	@ (80006a0 <main+0x13c>)
 800063e:	f002 f911 	bl	8002864 <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00b      	beq.n	8000662 <main+0xfe>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	607b      	str	r3, [r7, #4]
    }
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0xfa>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000662:	f002 fb73 	bl	8002d4c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000666:	bf00      	nop
 8000668:	e7fd      	b.n	8000666 <main+0x102>
 800066a:	bf00      	nop
 800066c:	e0001000 	.word	0xe0001000
 8000670:	20000030 	.word	0x20000030
 8000674:	08006ea4 	.word	0x08006ea4
 8000678:	08000879 	.word	0x08000879
 800067c:	20000040 	.word	0x20000040
 8000680:	20000038 	.word	0x20000038
 8000684:	08006eb4 	.word	0x08006eb4
 8000688:	08000951 	.word	0x08000951
 800068c:	20000034 	.word	0x20000034
 8000690:	08006ec4 	.word	0x08006ec4
 8000694:	080008e5 	.word	0x080008e5
 8000698:	2000003c 	.word	0x2000003c
 800069c:	08006ed4 	.word	0x08006ed4
 80006a0:	080009c5 	.word	0x080009c5

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	@ 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	@ 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f006 fbb0 	bl	8006e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <SystemClock_Config+0xd0>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a28      	ldr	r2, [pc, #160]	@ (8000774 <SystemClock_Config+0xd0>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d8:	4b26      	ldr	r3, [pc, #152]	@ (8000774 <SystemClock_Config+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <SystemClock_Config+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f0:	4a21      	ldr	r2, [pc, #132]	@ (8000778 <SystemClock_Config+0xd4>)
 80006f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <SystemClock_Config+0xd4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2310      	movs	r3, #16
 800070e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000718:	2310      	movs	r3, #16
 800071a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800071c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000720:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000722:	2304      	movs	r3, #4
 8000724:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000726:	2307      	movs	r3, #7
 8000728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fd82 	bl	8001238 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073a:	f000 f97d 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2102      	movs	r1, #2
 800075a:	4618      	mov	r0, r3
 800075c:	f000 ffe4 	bl	8001728 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000766:	f000 f967 	bl	8000a38 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	@ 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	@ 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b35      	ldr	r3, [pc, #212]	@ (800086c <MX_GPIO_Init+0xf0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a34      	ldr	r2, [pc, #208]	@ (800086c <MX_GPIO_Init+0xf0>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b32      	ldr	r3, [pc, #200]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b2e      	ldr	r3, [pc, #184]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a2d      	ldr	r2, [pc, #180]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b27      	ldr	r3, [pc, #156]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a26      	ldr	r2, [pc, #152]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b24      	ldr	r3, [pc, #144]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b20      	ldr	r3, [pc, #128]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a1f      	ldr	r2, [pc, #124]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	21e0      	movs	r1, #224	@ 0xe0
 8000806:	481a      	ldr	r0, [pc, #104]	@ (8000870 <MX_GPIO_Init+0xf4>)
 8000808:	f000 fce2 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000812:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4814      	ldr	r0, [pc, #80]	@ (8000874 <MX_GPIO_Init+0xf8>)
 8000824:	f000 fb38 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000828:	230c      	movs	r3, #12
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000838:	2307      	movs	r3, #7
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	480b      	ldr	r0, [pc, #44]	@ (8000870 <MX_GPIO_Init+0xf4>)
 8000844:	f000 fb28 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 8000848:	23e0      	movs	r3, #224	@ 0xe0
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_GPIO_Init+0xf4>)
 8000860:	f000 fb1a 	bl	8000e98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	@ 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020000 	.word	0x40020000
 8000874:	40020800 	.word	0x40020800

08000878 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af02      	add	r7, sp, #8
 800087e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000880:	4813      	ldr	r0, [pc, #76]	@ (80008d0 <led_green_handler+0x58>)
 8000882:	f006 fa49 	bl	8006d18 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 8000886:	2120      	movs	r1, #32
 8000888:	4812      	ldr	r0, [pc, #72]	@ (80008d4 <led_green_handler+0x5c>)
 800088a:	f000 fcba 	bl	8001202 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f003 f812 	bl	80038c4 <xTaskGenericNotifyWait>
 80008a0:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d1eb      	bne.n	8000880 <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 80008a8:	f002 fab2 	bl	8002e10 <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <led_green_handler+0x60>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <led_green_handler+0x64>)
 80008b2:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80008b4:	f002 faba 	bl	8002e2c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_PIN, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2120      	movs	r1, #32
 80008bc:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <led_green_handler+0x5c>)
 80008be:	f000 fc87 	bl	80011d0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Green LED Task");
 80008c2:	4807      	ldr	r0, [pc, #28]	@ (80008e0 <led_green_handler+0x68>)
 80008c4:	f006 fa28 	bl	8006d18 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f002 f955 	bl	8002b78 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80008ce:	e7d7      	b.n	8000880 <led_green_handler+0x8>
 80008d0:	08006ee0 	.word	0x08006ee0
 80008d4:	40020000 	.word	0x40020000
 80008d8:	20000034 	.word	0x20000034
 80008dc:	20000040 	.word	0x20000040
 80008e0:	08006ef4 	.word	0x08006ef4

080008e4 <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void* parameters)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80008ec:	4813      	ldr	r0, [pc, #76]	@ (800093c <led_orange_handler+0x58>)
 80008ee:	f006 fa13 	bl	8006d18 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_ORANGE_PIN);
 80008f2:	2180      	movs	r1, #128	@ 0x80
 80008f4:	4812      	ldr	r0, [pc, #72]	@ (8000940 <led_orange_handler+0x5c>)
 80008f6:	f000 fc84 	bl	8001202 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 80008fa:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2300      	movs	r3, #0
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2000      	movs	r0, #0
 8000908:	f002 ffdc 	bl	80038c4 <xTaskGenericNotifyWait>
 800090c:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d1eb      	bne.n	80008ec <led_orange_handler+0x8>
		{
			vTaskSuspendAll();
 8000914:	f002 fa7c 	bl	8002e10 <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8000918:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <led_orange_handler+0x60>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <led_orange_handler+0x64>)
 800091e:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000920:	f002 fa84 	bl	8002e2c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2180      	movs	r1, #128	@ 0x80
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <led_orange_handler+0x5c>)
 800092a:	f000 fc51 	bl	80011d0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Orange LED Task");
 800092e:	4807      	ldr	r0, [pc, #28]	@ (800094c <led_orange_handler+0x68>)
 8000930:	f006 f9f2 	bl	8006d18 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000934:	2000      	movs	r0, #0
 8000936:	f002 f91f 	bl	8002b78 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800093a:	e7d7      	b.n	80008ec <led_orange_handler+0x8>
 800093c:	08006f0c 	.word	0x08006f0c
 8000940:	40020000 	.word	0x40020000
 8000944:	20000038 	.word	0x20000038
 8000948:	20000040 	.word	0x20000040
 800094c:	08006f20 	.word	0x08006f20

08000950 <led_red_handler>:
		}
	}
}

static void led_red_handler(void* parameters)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af02      	add	r7, sp, #8
 8000956:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000958:	4815      	ldr	r0, [pc, #84]	@ (80009b0 <led_red_handler+0x60>)
 800095a:	f006 f9dd 	bl	8006d18 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_RED_PIN);
 800095e:	2140      	movs	r1, #64	@ 0x40
 8000960:	4814      	ldr	r0, [pc, #80]	@ (80009b4 <led_red_handler+0x64>)
 8000962:	f000 fc4e 	bl	8001202 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000966:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2300      	movs	r3, #0
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2000      	movs	r0, #0
 8000974:	f002 ffa6 	bl	80038c4 <xTaskGenericNotifyWait>
 8000978:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d1eb      	bne.n	8000958 <led_red_handler+0x8>
				{
					vTaskSuspendAll();
 8000980:	f002 fa46 	bl	8002e10 <vTaskSuspendAll>
					next_task_handle = NULL;
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <led_red_handler+0x68>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
					xTaskResumeAll();
 800098a:	f002 fa4f 	bl	8002e2c <xTaskResumeAll>
					HAL_GPIO_WritePin(GPIOA, LED_RED_PIN, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2140      	movs	r1, #64	@ 0x40
 8000992:	4808      	ldr	r0, [pc, #32]	@ (80009b4 <led_red_handler+0x64>)
 8000994:	f000 fc1c 	bl	80011d0 <HAL_GPIO_WritePin>
					SEGGER_SYSVIEW_PrintfTarget("Delete Red LED Task");
 8000998:	4808      	ldr	r0, [pc, #32]	@ (80009bc <led_red_handler+0x6c>)
 800099a:	f006 f9bd 	bl	8006d18 <SEGGER_SYSVIEW_PrintfTarget>
					vTaskDelete(btn_task_handle);
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <led_red_handler+0x70>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 f8e8 	bl	8002b78 <vTaskDelete>
					vTaskDelete(NULL);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f002 f8e5 	bl	8002b78 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80009ae:	e7d3      	b.n	8000958 <led_red_handler+0x8>
 80009b0:	08006f38 	.word	0x08006f38
 80009b4:	40020000 	.word	0x40020000
 80009b8:	20000040 	.word	0x20000040
 80009bc:	08006f4c 	.word	0x08006f4c
 80009c0:	2000003c 	.word	0x2000003c

080009c4 <button_handler>:
				}
	}
}

static void button_handler(void* parameters)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	6078      	str	r0, [r7, #4]
    uint8_t btn_read = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73bb      	strb	r3, [r7, #14]
    uint8_t prev_read = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	73fb      	strb	r3, [r7, #15]
    while(1)
    {
        btn_read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80009d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d8:	480c      	ldr	r0, [pc, #48]	@ (8000a0c <button_handler+0x48>)
 80009da:	f000 fbe1 	bl	80011a0 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	73bb      	strb	r3, [r7, #14]

        // Pull down taster (active low)
        if(!btn_read) // taster pritisnut kada je btn_read 0
 80009e2:	7bbb      	ldrb	r3, [r7, #14]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d10b      	bne.n	8000a00 <button_handler+0x3c>
        {
            if(prev_read)
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d008      	beq.n	8000a00 <button_handler+0x3c>
                xTaskNotify(next_task_handle, 0, eNoAction);
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <button_handler+0x4c>)
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	2300      	movs	r3, #0
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2300      	movs	r3, #0
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	f002 ffec 	bl	80039d8 <xTaskGenericNotify>
        }
        prev_read = btn_read;
 8000a00:	7bbb      	ldrb	r3, [r7, #14]
 8000a02:	73fb      	strb	r3, [r7, #15]
        vTaskDelay(pdMS_TO_TICKS(10));
 8000a04:	200a      	movs	r0, #10
 8000a06:	f002 f967 	bl	8002cd8 <vTaskDelay>
        btn_read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000a0a:	e7e3      	b.n	80009d4 <button_handler+0x10>
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	20000040 	.word	0x20000040

08000a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a04      	ldr	r2, [pc, #16]	@ (8000a34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d101      	bne.n	8000a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a26:	f000 f935 	bl	8000c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40000c00 	.word	0x40000c00

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	4a0f      	ldr	r2, [pc, #60]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	4a08      	ldr	r2, [pc, #32]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000a82:	f003 fd23 	bl	80044cc <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	@ 0x38
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	4b33      	ldr	r3, [pc, #204]	@ (8000b78 <HAL_InitTick+0xe4>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aac:	4a32      	ldr	r2, [pc, #200]	@ (8000b78 <HAL_InitTick+0xe4>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab4:	4b30      	ldr	r3, [pc, #192]	@ (8000b78 <HAL_InitTick+0xe4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac0:	f107 0210 	add.w	r2, r7, #16
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 f838 	bl	8001b40 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d103      	bne.n	8000ae2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ada:	f001 f81d 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8000ade:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ae0:	e004      	b.n	8000aec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ae2:	f001 f819 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aee:	4a23      	ldr	r2, [pc, #140]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000af0:	fba2 2303 	umull	r2, r3, r2, r3
 8000af4:	0c9b      	lsrs	r3, r3, #18
 8000af6:	3b01      	subs	r3, #1
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <HAL_InitTick+0xec>)
 8000afc:	4a21      	ldr	r2, [pc, #132]	@ (8000b84 <HAL_InitTick+0xf0>)
 8000afe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <HAL_InitTick+0xec>)
 8000b02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b06:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b08:	4a1d      	ldr	r2, [pc, #116]	@ (8000b80 <HAL_InitTick+0xec>)
 8000b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b0c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <HAL_InitTick+0xec>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <HAL_InitTick+0xec>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <HAL_InitTick+0xec>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b20:	4817      	ldr	r0, [pc, #92]	@ (8000b80 <HAL_InitTick+0xec>)
 8000b22:	f001 f83f 	bl	8001ba4 <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d11b      	bne.n	8000b6c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b34:	4812      	ldr	r0, [pc, #72]	@ (8000b80 <HAL_InitTick+0xec>)
 8000b36:	f001 f88f 	bl	8001c58 <HAL_TIM_Base_Start_IT>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d111      	bne.n	8000b6c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b48:	2032      	movs	r0, #50	@ 0x32
 8000b4a:	f000 f997 	bl	8000e7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d808      	bhi.n	8000b66 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	2032      	movs	r0, #50	@ 0x32
 8000b5a:	f000 f973 	bl	8000e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <HAL_InitTick+0xf4>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	e002      	b.n	8000b6c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3738      	adds	r7, #56	@ 0x38
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	431bde83 	.word	0x431bde83
 8000b80:	20000044 	.word	0x20000044
 8000b84:	40000c00 	.word	0x40000c00
 8000b88:	20000004 	.word	0x20000004

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <NMI_Handler+0x4>

08000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <TIM5_IRQHandler+0x10>)
 8000bca:	f001 f8a7 	bl	8001d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000044 	.word	0x20000044

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c00:	f7ff ffea 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f006 f8fd 	bl	8006e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fc99 	bl	8000564 <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c40:	08007090 	.word	0x08007090
  ldr r2, =_sbss
 8000c44:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c48:	200144ac 	.word	0x200144ac

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f8d8 	bl	8000e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff ff08 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff fede 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	2000008c 	.word	0x2000008c

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000008c 	.word	0x2000008c

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	@ (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	@ (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	@ (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	@ 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4c 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e56:	f7ff ff61 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffb1 	bl	8000dc8 <NVIC_EncodePriority>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff80 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e159      	b.n	8001168 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 8148 	bne.w	8001162 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80a2 	beq.w	8001162 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b57      	ldr	r3, [pc, #348]	@ (8001180 <HAL_GPIO_Init+0x2e8>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a56      	ldr	r2, [pc, #344]	@ (8001180 <HAL_GPIO_Init+0x2e8>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b54      	ldr	r3, [pc, #336]	@ (8001180 <HAL_GPIO_Init+0x2e8>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a52      	ldr	r2, [pc, #328]	@ (8001184 <HAL_GPIO_Init+0x2ec>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a49      	ldr	r2, [pc, #292]	@ (8001188 <HAL_GPIO_Init+0x2f0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d019      	beq.n	800109a <HAL_GPIO_Init+0x202>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a48      	ldr	r2, [pc, #288]	@ (800118c <HAL_GPIO_Init+0x2f4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0x1fe>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a47      	ldr	r2, [pc, #284]	@ (8001190 <HAL_GPIO_Init+0x2f8>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00d      	beq.n	8001092 <HAL_GPIO_Init+0x1fa>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a46      	ldr	r2, [pc, #280]	@ (8001194 <HAL_GPIO_Init+0x2fc>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x1f6>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a45      	ldr	r2, [pc, #276]	@ (8001198 <HAL_GPIO_Init+0x300>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_GPIO_Init+0x1f2>
 8001086:	2304      	movs	r3, #4
 8001088:	e008      	b.n	800109c <HAL_GPIO_Init+0x204>
 800108a:	2307      	movs	r3, #7
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x204>
 800108e:	2303      	movs	r3, #3
 8001090:	e004      	b.n	800109c <HAL_GPIO_Init+0x204>
 8001092:	2302      	movs	r3, #2
 8001094:	e002      	b.n	800109c <HAL_GPIO_Init+0x204>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x204>
 800109a:	2300      	movs	r3, #0
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	f002 0203 	and.w	r2, r2, #3
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	4093      	lsls	r3, r2
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ac:	4935      	ldr	r1, [pc, #212]	@ (8001184 <HAL_GPIO_Init+0x2ec>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ba:	4b38      	ldr	r3, [pc, #224]	@ (800119c <HAL_GPIO_Init+0x304>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010de:	4a2f      	ldr	r2, [pc, #188]	@ (800119c <HAL_GPIO_Init+0x304>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e4:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <HAL_GPIO_Init+0x304>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001108:	4a24      	ldr	r2, [pc, #144]	@ (800119c <HAL_GPIO_Init+0x304>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <HAL_GPIO_Init+0x304>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001132:	4a1a      	ldr	r2, [pc, #104]	@ (800119c <HAL_GPIO_Init+0x304>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001138:	4b18      	ldr	r3, [pc, #96]	@ (800119c <HAL_GPIO_Init+0x304>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115c:	4a0f      	ldr	r2, [pc, #60]	@ (800119c <HAL_GPIO_Init+0x304>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3301      	adds	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	f67f aea2 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3724      	adds	r7, #36	@ 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40013800 	.word	0x40013800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020400 	.word	0x40020400
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40021000 	.word	0x40021000
 800119c:	40013c00 	.word	0x40013c00

080011a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e001      	b.n	80011c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001202:	b480      	push	{r7}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	460b      	mov	r3, r1
 800120c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001214:	887a      	ldrh	r2, [r7, #2]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4013      	ands	r3, r2
 800121a:	041a      	lsls	r2, r3, #16
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43d9      	mvns	r1, r3
 8001220:	887b      	ldrh	r3, [r7, #2]
 8001222:	400b      	ands	r3, r1
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e267      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001256:	4b88      	ldr	r3, [pc, #544]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b04      	cmp	r3, #4
 8001260:	d00c      	beq.n	800127c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001262:	4b85      	ldr	r3, [pc, #532]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800126a:	2b08      	cmp	r3, #8
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b82      	ldr	r3, [pc, #520]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001276:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800127a:	d10b      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4b7e      	ldr	r3, [pc, #504]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d05b      	beq.n	8001340 <HAL_RCC_OscConfig+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d157      	bne.n	8001340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e242      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800129c:	d106      	bne.n	80012ac <HAL_RCC_OscConfig+0x74>
 800129e:	4b76      	ldr	r3, [pc, #472]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a75      	ldr	r2, [pc, #468]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x98>
 80012b6:	4b70      	ldr	r3, [pc, #448]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6f      	ldr	r2, [pc, #444]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6c      	ldr	r2, [pc, #432]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012d0:	4b69      	ldr	r3, [pc, #420]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a68      	ldr	r2, [pc, #416]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b66      	ldr	r3, [pc, #408]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a65      	ldr	r2, [pc, #404]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fce4 	bl	8000cbc <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fce0 	bl	8000cbc <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	@ 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e207      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b5b      	ldr	r3, [pc, #364]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xc0>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fcd0 	bl	8000cbc <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fccc 	bl	8000cbc <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	@ 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1f3      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b51      	ldr	r3, [pc, #324]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0xe8>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800134e:	4b4a      	ldr	r3, [pc, #296]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135a:	4b47      	ldr	r3, [pc, #284]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b44      	ldr	r3, [pc, #272]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b41      	ldr	r3, [pc, #260]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1c7      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b3b      	ldr	r3, [pc, #236]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4937      	ldr	r1, [pc, #220]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b34      	ldr	r3, [pc, #208]	@ (800147c <HAL_RCC_OscConfig+0x244>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fc85 	bl	8000cbc <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fc81 	bl	8000cbc <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e1a8      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b28      	ldr	r3, [pc, #160]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4925      	ldr	r1, [pc, #148]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_RCC_OscConfig+0x244>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc64 	bl	8000cbc <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fc60 	bl	8000cbc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e187      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d036      	beq.n	8001490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <HAL_RCC_OscConfig+0x248>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fc44 	bl	8000cbc <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fc40 	bl	8000cbc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e167      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <HAL_RCC_OscConfig+0x240>)
 800144c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x200>
 8001456:	e01b      	b.n	8001490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_RCC_OscConfig+0x248>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff fc2d 	bl	8000cbc <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	e00e      	b.n	8001484 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fc29 	bl	8000cbc <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d907      	bls.n	8001484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e150      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 8001478:	40023800 	.word	0x40023800
 800147c:	42470000 	.word	0x42470000
 8001480:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b88      	ldr	r3, [pc, #544]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1ea      	bne.n	8001466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 8097 	beq.w	80015cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b81      	ldr	r3, [pc, #516]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b7d      	ldr	r3, [pc, #500]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a7c      	ldr	r2, [pc, #496]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b7a      	ldr	r3, [pc, #488]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b77      	ldr	r3, [pc, #476]	@ (80016ac <HAL_RCC_OscConfig+0x474>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b74      	ldr	r3, [pc, #464]	@ (80016ac <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a73      	ldr	r2, [pc, #460]	@ (80016ac <HAL_RCC_OscConfig+0x474>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fbe9 	bl	8000cbc <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7ff fbe5 	bl	8000cbc <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e10c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4b6a      	ldr	r3, [pc, #424]	@ (80016ac <HAL_RCC_OscConfig+0x474>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x2ea>
 8001514:	4b64      	ldr	r3, [pc, #400]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001518:	4a63      	ldr	r2, [pc, #396]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001520:	e01c      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x30c>
 800152a:	4b5f      	ldr	r3, [pc, #380]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152e:	4a5e      	ldr	r2, [pc, #376]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6713      	str	r3, [r2, #112]	@ 0x70
 8001536:	4b5c      	ldr	r3, [pc, #368]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153a:	4a5b      	ldr	r2, [pc, #364]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6713      	str	r3, [r2, #112]	@ 0x70
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001544:	4b58      	ldr	r3, [pc, #352]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001548:	4a57      	ldr	r2, [pc, #348]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001550:	4b55      	ldr	r3, [pc, #340]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001554:	4a54      	ldr	r2, [pc, #336]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0304 	bic.w	r3, r3, #4
 800155a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d015      	beq.n	8001590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff fbaa 	bl	8000cbc <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff fba6 	bl	8000cbc <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0cb      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	4b49      	ldr	r3, [pc, #292]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0ee      	beq.n	800156c <HAL_RCC_OscConfig+0x334>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fb94 	bl	8000cbc <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fb90 	bl	8000cbc <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0b5      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	4b3e      	ldr	r3, [pc, #248]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ee      	bne.n	8001598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b39      	ldr	r3, [pc, #228]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	4a38      	ldr	r2, [pc, #224]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a1 	beq.w	8001718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d6:	4b34      	ldr	r3, [pc, #208]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d05c      	beq.n	800169c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d141      	bne.n	800166e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <HAL_RCC_OscConfig+0x478>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb64 	bl	8000cbc <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fb60 	bl	8000cbc <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e087      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001624:	019b      	lsls	r3, r3, #6
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	3b01      	subs	r3, #1
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	491b      	ldr	r1, [pc, #108]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fb39 	bl	8000cbc <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fb35 	bl	8000cbc <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e05c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x416>
 800166c:	e054      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb22 	bl	8000cbc <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb1e 	bl	8000cbc <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e045      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x444>
 800169a:	e03d      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e038      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000
 80016b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <HAL_RCC_OscConfig+0x4ec>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d028      	beq.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d121      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d11a      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d111      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	3b01      	subs	r3, #1
 80016fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cc      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b68      	ldr	r3, [pc, #416]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d90c      	bls.n	8001764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b65      	ldr	r3, [pc, #404]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a58      	ldr	r2, [pc, #352]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001786:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a52      	ldr	r2, [pc, #328]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800179e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d044      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3b      	ldr	r3, [pc, #236]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e067      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b37      	ldr	r3, [pc, #220]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4934      	ldr	r1, [pc, #208]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff fa50 	bl	8000cbc <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff fa4c 	bl	8000cbc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d20c      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f821 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f8e0 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08007044 	.word	0x08007044
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f8:	b094      	sub	sp, #80	@ 0x50
 80018fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190c:	4b79      	ldr	r3, [pc, #484]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d00d      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x40>
 8001918:	2b08      	cmp	r3, #8
 800191a:	f200 80e1 	bhi.w	8001ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x34>
 8001922:	2b04      	cmp	r3, #4
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x3a>
 8001926:	e0db      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b73      	ldr	r3, [pc, #460]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x204>)
 800192a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800192c:	e0db      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192e:	4b73      	ldr	r3, [pc, #460]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x208>)
 8001930:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001932:	e0d8      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001934:	4b6f      	ldr	r3, [pc, #444]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800193c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193e:	4b6d      	ldr	r3, [pc, #436]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d063      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194a:	4b6a      	ldr	r3, [pc, #424]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	2200      	movs	r2, #0
 8001952:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001954:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800195c:	633b      	str	r3, [r7, #48]	@ 0x30
 800195e:	2300      	movs	r3, #0
 8001960:	637b      	str	r3, [r7, #52]	@ 0x34
 8001962:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001966:	4622      	mov	r2, r4
 8001968:	462b      	mov	r3, r5
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	0159      	lsls	r1, r3, #5
 8001974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001978:	0150      	lsls	r0, r2, #5
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4621      	mov	r1, r4
 8001980:	1a51      	subs	r1, r2, r1
 8001982:	6139      	str	r1, [r7, #16]
 8001984:	4629      	mov	r1, r5
 8001986:	eb63 0301 	sbc.w	r3, r3, r1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001998:	4659      	mov	r1, fp
 800199a:	018b      	lsls	r3, r1, #6
 800199c:	4651      	mov	r1, sl
 800199e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a2:	4651      	mov	r1, sl
 80019a4:	018a      	lsls	r2, r1, #6
 80019a6:	4651      	mov	r1, sl
 80019a8:	ebb2 0801 	subs.w	r8, r2, r1
 80019ac:	4659      	mov	r1, fp
 80019ae:	eb63 0901 	sbc.w	r9, r3, r1
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019c6:	4690      	mov	r8, r2
 80019c8:	4699      	mov	r9, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	eb18 0303 	adds.w	r3, r8, r3
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	462b      	mov	r3, r5
 80019d4:	eb49 0303 	adc.w	r3, r9, r3
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019e6:	4629      	mov	r1, r5
 80019e8:	024b      	lsls	r3, r1, #9
 80019ea:	4621      	mov	r1, r4
 80019ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f0:	4621      	mov	r1, r4
 80019f2:	024a      	lsls	r2, r1, #9
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019fa:	2200      	movs	r2, #0
 80019fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a04:	f7fe fc36 	bl	8000274 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a10:	e058      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a12:	4b38      	ldr	r3, [pc, #224]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	099b      	lsrs	r3, r3, #6
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a2c:	4642      	mov	r2, r8
 8001a2e:	464b      	mov	r3, r9
 8001a30:	f04f 0000 	mov.w	r0, #0
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	0159      	lsls	r1, r3, #5
 8001a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a3e:	0150      	lsls	r0, r2, #5
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4641      	mov	r1, r8
 8001a46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a64:	ebb2 040a 	subs.w	r4, r2, sl
 8001a68:	eb63 050b 	sbc.w	r5, r3, fp
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	00eb      	lsls	r3, r5, #3
 8001a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7a:	00e2      	lsls	r2, r4, #3
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	4643      	mov	r3, r8
 8001a82:	18e3      	adds	r3, r4, r3
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	464b      	mov	r3, r9
 8001a88:	eb45 0303 	adc.w	r3, r5, r3
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	028b      	lsls	r3, r1, #10
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	028a      	lsls	r2, r1, #10
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	61fa      	str	r2, [r7, #28]
 8001ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab8:	f7fe fbdc 	bl	8000274 <__aeabi_uldivmod>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ad4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3750      	adds	r7, #80	@ 0x50
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	00f42400 	.word	0x00f42400
 8001afc:	007a1200 	.word	0x007a1200

08001b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000000 	.word	0x20000000

08001b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b1c:	f7ff fff0 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	0a9b      	lsrs	r3, r3, #10
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4903      	ldr	r1, [pc, #12]	@ (8001b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	08007054 	.word	0x08007054

08001b40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <HAL_RCC_GetClockConfig+0x60>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0207 	and.w	r2, r3, #7
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	601a      	str	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40023c00 	.word	0x40023c00

08001ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e041      	b.n	8001c3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f839 	bl	8001c42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3304      	adds	r3, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f000 f9b2 	bl	8001f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d001      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e044      	b.n	8001cfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d08 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d018      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c9a:	d013      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d0c <HAL_TIM_Base_Start_IT+0xb4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00e      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a19      	ldr	r2, [pc, #100]	@ (8001d10 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <HAL_TIM_Base_Start_IT+0xbc>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d004      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d111      	bne.n	8001ce8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d010      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce6:	e007      	b.n	8001cf8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40000c00 	.word	0x40000c00
 8001d18:	40014000 	.word	0x40014000

08001d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d020      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01b      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0202 	mvn.w	r2, #2
 8001d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8d2 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8001d6c:	e005      	b.n	8001d7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8c4 	bl	8001efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f8d5 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d020      	beq.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01b      	beq.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0204 	mvn.w	r2, #4
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8ac 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f89e 	bl	8001efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f8af 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d020      	beq.n	8001e18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01b      	beq.n	8001e18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0208 	mvn.w	r2, #8
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2204      	movs	r2, #4
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f886 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f878 	bl	8001efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f889 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d020      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01b      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0210 	mvn.w	r2, #16
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2208      	movs	r2, #8
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f860 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f852 	bl	8001efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f863 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00c      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0201 	mvn.w	r2, #1
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fdc6 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8e6 	bl	8002078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d007      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f834 	bl	8001f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00c      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0220 	mvn.w	r2, #32
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8b8 	bl	8002064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3a      	ldr	r2, [pc, #232]	@ (8002048 <TIM_Base_SetConfig+0xfc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00f      	beq.n	8001f84 <TIM_Base_SetConfig+0x38>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f6a:	d00b      	beq.n	8001f84 <TIM_Base_SetConfig+0x38>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a37      	ldr	r2, [pc, #220]	@ (800204c <TIM_Base_SetConfig+0x100>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d007      	beq.n	8001f84 <TIM_Base_SetConfig+0x38>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a36      	ldr	r2, [pc, #216]	@ (8002050 <TIM_Base_SetConfig+0x104>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <TIM_Base_SetConfig+0x38>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a35      	ldr	r2, [pc, #212]	@ (8002054 <TIM_Base_SetConfig+0x108>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d108      	bne.n	8001f96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2b      	ldr	r2, [pc, #172]	@ (8002048 <TIM_Base_SetConfig+0xfc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01b      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa4:	d017      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a28      	ldr	r2, [pc, #160]	@ (800204c <TIM_Base_SetConfig+0x100>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a27      	ldr	r2, [pc, #156]	@ (8002050 <TIM_Base_SetConfig+0x104>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00f      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a26      	ldr	r2, [pc, #152]	@ (8002054 <TIM_Base_SetConfig+0x108>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00b      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a25      	ldr	r2, [pc, #148]	@ (8002058 <TIM_Base_SetConfig+0x10c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a24      	ldr	r2, [pc, #144]	@ (800205c <TIM_Base_SetConfig+0x110>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d003      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a23      	ldr	r2, [pc, #140]	@ (8002060 <TIM_Base_SetConfig+0x114>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d108      	bne.n	8001fe8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a0e      	ldr	r2, [pc, #56]	@ (8002048 <TIM_Base_SetConfig+0xfc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d103      	bne.n	800201c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d105      	bne.n	800203a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f023 0201 	bic.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	611a      	str	r2, [r3, #16]
  }
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40014000 	.word	0x40014000
 800205c:	40014400 	.word	0x40014400
 8002060:	40014800 	.word	0x40014800

08002064 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f103 0208 	add.w	r2, r3, #8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f103 0208 	add.w	r2, r3, #8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f103 0208 	add.w	r2, r3, #8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002144:	d103      	bne.n	800214e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e00c      	b.n	8002168 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3308      	adds	r3, #8
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e002      	b.n	800215c <vListInsert+0x2e>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	429a      	cmp	r2, r3
 8002166:	d2f6      	bcs.n	8002156 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	601a      	str	r2, [r3, #0]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6892      	ldr	r2, [r2, #8]
 80021b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6852      	ldr	r2, [r2, #4]
 80021c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d103      	bne.n	80021d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	1e5a      	subs	r2, r3, #1
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80021fe:	2301      	movs	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10b      	bne.n	8002224 <xQueueGenericReset+0x30>
        __asm volatile
 800220c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	60fb      	str	r3, [r7, #12]
    }
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d05d      	beq.n	80022e6 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d059      	beq.n	80022e6 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800223a:	2100      	movs	r1, #0
 800223c:	fba3 2302 	umull	r2, r3, r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d000      	beq.n	8002246 <xQueueGenericReset+0x52>
 8002244:	2101      	movs	r1, #1
 8002246:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	d14c      	bne.n	80022e6 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 800224c:	f002 f9be 	bl	80045cc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002258:	6939      	ldr	r1, [r7, #16]
 800225a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	441a      	add	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2200      	movs	r2, #0
 800226a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227c:	3b01      	subs	r3, #1
 800227e:	6939      	ldr	r1, [r7, #16]
 8002280:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	441a      	add	r2, r3
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	22ff      	movs	r2, #255	@ 0xff
 8002290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	22ff      	movs	r2, #255	@ 0xff
 8002298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d114      	bne.n	80022cc <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d01a      	beq.n	80022e0 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	3310      	adds	r3, #16
 80022ae:	4618      	mov	r0, r3
 80022b0:	f001 f8d4 	bl	800345c <xTaskRemoveFromEventList>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d012      	beq.n	80022e0 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <xQueueGenericReset+0x120>)
 80022bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	e009      	b.n	80022e0 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	3310      	adds	r3, #16
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fedb 	bl	800208c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	3324      	adds	r3, #36	@ 0x24
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fed6 	bl	800208c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022e0:	f002 f9a6 	bl	8004630 <vPortExitCritical>
 80022e4:	e001      	b.n	80022ea <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <xQueueGenericReset+0x114>
        __asm volatile
 80022f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	60bb      	str	r3, [r7, #8]
    }
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002308:	697b      	ldr	r3, [r7, #20]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000ed04 	.word	0xe000ed04

08002318 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	@ 0x28
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d02e      	beq.n	800238e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002330:	2100      	movs	r1, #0
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	fba3 2302 	umull	r2, r3, r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d000      	beq.n	8002340 <xQueueGenericCreate+0x28>
 800233e:	2101      	movs	r1, #1
 8002340:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002342:	2b00      	cmp	r3, #0
 8002344:	d123      	bne.n	800238e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800234e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002352:	d81c      	bhi.n	800238e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	3350      	adds	r3, #80	@ 0x50
 8002362:	4618      	mov	r0, r3
 8002364:	f002 fa64 	bl	8004830 <pvPortMalloc>
 8002368:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01d      	beq.n	80023ac <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3350      	adds	r3, #80	@ 0x50
 8002378:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800237a:	79fa      	ldrb	r2, [r7, #7]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f815 	bl	80023b6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800238c:	e00e      	b.n	80023ac <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <xQueueGenericCreate+0x94>
        __asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	613b      	str	r3, [r7, #16]
    }
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023ac:	69fb      	ldr	r3, [r7, #28]
    }
 80023ae:	4618      	mov	r0, r3
 80023b0:	3720      	adds	r7, #32
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e002      	b.n	80023d8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023e4:	2101      	movs	r1, #1
 80023e6:	69b8      	ldr	r0, [r7, #24]
 80023e8:	f7ff ff04 	bl	80021f4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	68f9      	ldr	r1, [r7, #12]
 80023fa:	2073      	movs	r0, #115	@ 0x73
 80023fc:	f003 fe74 	bl	80060e8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b08f      	sub	sp, #60	@ 0x3c
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002414:	2300      	movs	r3, #0
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <xQueueReceive+0x32>
        __asm volatile
 8002422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	623b      	str	r3, [r7, #32]
    }
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	e7fd      	b.n	8002436 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d103      	bne.n	8002448 <xQueueReceive+0x40>
 8002440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <xQueueReceive+0x44>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <xQueueReceive+0x46>
 800244c:	2300      	movs	r3, #0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10b      	bne.n	800246a <xQueueReceive+0x62>
        __asm volatile
 8002452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002456:	f383 8811 	msr	BASEPRI, r3
 800245a:	f3bf 8f6f 	isb	sy
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	61fb      	str	r3, [r7, #28]
    }
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	e7fd      	b.n	8002466 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800246a:	f001 fa0d 	bl	8003888 <xTaskGetSchedulerState>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <xQueueReceive+0x72>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <xQueueReceive+0x76>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <xQueueReceive+0x78>
 800247e:	2300      	movs	r3, #0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10b      	bne.n	800249c <xQueueReceive+0x94>
        __asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	61bb      	str	r3, [r7, #24]
    }
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800249c:	f002 f896 	bl	80045cc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d02f      	beq.n	800250c <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024b0:	f000 f8be 	bl	8002630 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80024b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 fb42 	bl	8006b40 <SEGGER_SYSVIEW_ShrinkId>
 80024bc:	4604      	mov	r4, r0
 80024be:	2000      	movs	r0, #0
 80024c0:	f004 fb3e 	bl	8006b40 <SEGGER_SYSVIEW_ShrinkId>
 80024c4:	4602      	mov	r2, r0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2101      	movs	r1, #1
 80024ca:	9100      	str	r1, [sp, #0]
 80024cc:	4621      	mov	r1, r4
 80024ce:	205c      	movs	r0, #92	@ 0x5c
 80024d0:	f003 fe80 	bl	80061d4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	1e5a      	subs	r2, r3, #1
 80024d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024da:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00f      	beq.n	8002504 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e6:	3310      	adds	r3, #16
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 ffb7 	bl	800345c <xTaskRemoveFromEventList>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024f4:	4b4d      	ldr	r3, [pc, #308]	@ (800262c <xQueueReceive+0x224>)
 80024f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002504:	f002 f894 	bl	8004630 <vPortExitCritical>
                return pdPASS;
 8002508:	2301      	movs	r3, #1
 800250a:	e08a      	b.n	8002622 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d113      	bne.n	800253a <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002512:	f002 f88d 	bl	8004630 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002518:	4618      	mov	r0, r3
 800251a:	f004 fb11 	bl	8006b40 <SEGGER_SYSVIEW_ShrinkId>
 800251e:	4604      	mov	r4, r0
 8002520:	2000      	movs	r0, #0
 8002522:	f004 fb0d 	bl	8006b40 <SEGGER_SYSVIEW_ShrinkId>
 8002526:	4602      	mov	r2, r0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2101      	movs	r1, #1
 800252c:	9100      	str	r1, [sp, #0]
 800252e:	4621      	mov	r1, r4
 8002530:	205c      	movs	r0, #92	@ 0x5c
 8002532:	f003 fe4f 	bl	80061d4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002536:	2300      	movs	r3, #0
 8002538:	e073      	b.n	8002622 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800253a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	4618      	mov	r0, r3
 8002546:	f001 f863 	bl	8003610 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800254a:	2301      	movs	r3, #1
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800254e:	f002 f86f 	bl	8004630 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002552:	f000 fc5d 	bl	8002e10 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002556:	f002 f839 	bl	80045cc <vPortEnterCritical>
 800255a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002560:	b25b      	sxtb	r3, r3
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002566:	d103      	bne.n	8002570 <xQueueReceive+0x168>
 8002568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002572:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002576:	b25b      	sxtb	r3, r3
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d103      	bne.n	8002586 <xQueueReceive+0x17e>
 800257e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002586:	f002 f853 	bl	8004630 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800258a:	1d3a      	adds	r2, r7, #4
 800258c:	f107 0310 	add.w	r3, r7, #16
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f001 f852 	bl	800363c <xTaskCheckForTimeOut>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d124      	bne.n	80025e8 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800259e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025a0:	f000 f8be 	bl	8002720 <prvIsQueueEmpty>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d018      	beq.n	80025dc <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ac:	3324      	adds	r3, #36	@ 0x24
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fee2 	bl	800337c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025ba:	f000 f85f 	bl	800267c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025be:	f000 fc35 	bl	8002e2c <xTaskResumeAll>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f47f af69 	bne.w	800249c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80025ca:	4b18      	ldr	r3, [pc, #96]	@ (800262c <xQueueReceive+0x224>)
 80025cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	e75f      	b.n	800249c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025de:	f000 f84d 	bl	800267c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025e2:	f000 fc23 	bl	8002e2c <xTaskResumeAll>
 80025e6:	e759      	b.n	800249c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025ea:	f000 f847 	bl	800267c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025ee:	f000 fc1d 	bl	8002e2c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025f4:	f000 f894 	bl	8002720 <prvIsQueueEmpty>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f43f af4e 	beq.w	800249c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002602:	4618      	mov	r0, r3
 8002604:	f004 fa9c 	bl	8006b40 <SEGGER_SYSVIEW_ShrinkId>
 8002608:	4604      	mov	r4, r0
 800260a:	2000      	movs	r0, #0
 800260c:	f004 fa98 	bl	8006b40 <SEGGER_SYSVIEW_ShrinkId>
 8002610:	4602      	mov	r2, r0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2101      	movs	r1, #1
 8002616:	9100      	str	r1, [sp, #0]
 8002618:	4621      	mov	r1, r4
 800261a:	205c      	movs	r0, #92	@ 0x5c
 800261c:	f003 fdda 	bl	80061d4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002620:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002622:	4618      	mov	r0, r3
 8002624:	3734      	adds	r7, #52	@ 0x34
 8002626:	46bd      	mov	sp, r7
 8002628:	bd90      	pop	{r4, r7, pc}
 800262a:	bf00      	nop
 800262c:	e000ed04 	.word	0xe000ed04

08002630 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d018      	beq.n	8002674 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	441a      	add	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	429a      	cmp	r2, r3
 800265a:	d303      	bcc.n	8002664 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68d9      	ldr	r1, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	461a      	mov	r2, r3
 800266e:	6838      	ldr	r0, [r7, #0]
 8002670:	f004 fbfe 	bl	8006e70 <memcpy>
    }
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002684:	f001 ffa2 	bl	80045cc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800268e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002690:	e011      	b.n	80026b6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	2b00      	cmp	r3, #0
 8002698:	d012      	beq.n	80026c0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3324      	adds	r3, #36	@ 0x24
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fedc 	bl	800345c <xTaskRemoveFromEventList>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80026aa:	f001 f82f 	bl	800370c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	dce9      	bgt.n	8002692 <prvUnlockQueue+0x16>
 80026be:	e000      	b.n	80026c2 <prvUnlockQueue+0x46>
                    break;
 80026c0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	22ff      	movs	r2, #255	@ 0xff
 80026c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80026ca:	f001 ffb1 	bl	8004630 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026ce:	f001 ff7d 	bl	80045cc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026d8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026da:	e011      	b.n	8002700 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d012      	beq.n	800270a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3310      	adds	r3, #16
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 feb7 	bl	800345c <xTaskRemoveFromEventList>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80026f4:	f001 f80a 	bl	800370c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026f8:	7bbb      	ldrb	r3, [r7, #14]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002704:	2b00      	cmp	r3, #0
 8002706:	dce9      	bgt.n	80026dc <prvUnlockQueue+0x60>
 8002708:	e000      	b.n	800270c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800270a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	22ff      	movs	r2, #255	@ 0xff
 8002710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002714:	f001 ff8c 	bl	8004630 <vPortExitCritical>
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002728:	f001 ff50 	bl	80045cc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002734:	2301      	movs	r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	e001      	b.n	800273e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800273e:	f001 ff77 	bl	8004630 <vPortExitCritical>

    return xReturn;
 8002742:	68fb      	ldr	r3, [r7, #12]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10b      	bne.n	8002778 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	60fb      	str	r3, [r7, #12]
    }
 8002772:	bf00      	nop
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d024      	beq.n	80027c8 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e01e      	b.n	80027c2 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002784:	4a1c      	ldr	r2, [pc, #112]	@ (80027f8 <vQueueAddToRegistry+0xac>)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	d105      	bne.n	80027a0 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4a17      	ldr	r2, [pc, #92]	@ (80027f8 <vQueueAddToRegistry+0xac>)
 800279a:	4413      	add	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
                    break;
 800279e:	e013      	b.n	80027c8 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <vQueueAddToRegistry+0x70>
 80027a6:	4a14      	ldr	r2, [pc, #80]	@ (80027f8 <vQueueAddToRegistry+0xac>)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4a10      	ldr	r2, [pc, #64]	@ (80027f8 <vQueueAddToRegistry+0xac>)
 80027b8:	4413      	add	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	3301      	adds	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b07      	cmp	r3, #7
 80027c6:	d9dd      	bls.n	8002784 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00f      	beq.n	80027ee <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4618      	mov	r0, r3
 80027de:	f004 f9af 	bl	8006b40 <SEGGER_SYSVIEW_ShrinkId>
 80027e2:	4601      	mov	r1, r0
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	2071      	movs	r0, #113	@ 0x71
 80027ea:	f003 fc23 	bl	8006034 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000090 	.word	0x20000090

080027fc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800280c:	f001 fede 	bl	80045cc <vPortEnterCritical>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002816:	b25b      	sxtb	r3, r3
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d103      	bne.n	8002826 <vQueueWaitForMessageRestricted+0x2a>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800282c:	b25b      	sxtb	r3, r3
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d103      	bne.n	800283c <vQueueWaitForMessageRestricted+0x40>
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800283c:	f001 fef8 	bl	8004630 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002844:	2b00      	cmp	r3, #0
 8002846:	d106      	bne.n	8002856 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3324      	adds	r3, #36	@ 0x24
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fdb9 	bl	80033c8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002856:	6978      	ldr	r0, [r7, #20]
 8002858:	f7ff ff10 	bl	800267c <prvUnlockQueue>
    }
 800285c:	bf00      	nop
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	@ 0x30
 8002868:	af04      	add	r7, sp, #16
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4618      	mov	r0, r3
 800287a:	f001 ffd9 	bl	8004830 <pvPortMalloc>
 800287e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d013      	beq.n	80028ae <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002886:	2058      	movs	r0, #88	@ 0x58
 8002888:	f001 ffd2 	bl	8004830 <pvPortMalloc>
 800288c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002894:	2258      	movs	r2, #88	@ 0x58
 8002896:	2100      	movs	r1, #0
 8002898:	69f8      	ldr	r0, [r7, #28]
 800289a:	f004 fabd 	bl	8006e18 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80028a4:	e005      	b.n	80028b2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80028a6:	6978      	ldr	r0, [r7, #20]
 80028a8:	f002 f87e 	bl	80049a8 <vPortFree>
 80028ac:	e001      	b.n	80028b2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028b8:	88fa      	ldrh	r2, [r7, #6]
 80028ba:	2300      	movs	r3, #0
 80028bc:	9303      	str	r3, [sp, #12]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	9302      	str	r3, [sp, #8]
 80028c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f80e 	bl	80028f0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80028d4:	69f8      	ldr	r0, [r7, #28]
 80028d6:	f000 f89b 	bl	8002a10 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80028da:	2301      	movs	r3, #1
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	e002      	b.n	80028e6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80028e6:	69bb      	ldr	r3, [r7, #24]
    }
 80028e8:	4618      	mov	r0, r3
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002900:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	461a      	mov	r2, r3
 8002908:	21a5      	movs	r1, #165	@ 0xa5
 800290a:	f004 fa85 	bl	8006e18 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800290e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002918:	3b01      	subs	r3, #1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f023 0307 	bic.w	r3, r3, #7
 8002926:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	617b      	str	r3, [r7, #20]
    }
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	e7fd      	b.n	8002946 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01e      	beq.n	800298e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	e012      	b.n	800297c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	7819      	ldrb	r1, [r3, #0]
 800295e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4413      	add	r3, r2
 8002964:	3334      	adds	r3, #52	@ 0x34
 8002966:	460a      	mov	r2, r1
 8002968:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3301      	adds	r3, #1
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b09      	cmp	r3, #9
 8002980:	d9e9      	bls.n	8002956 <prvInitialiseNewTask+0x66>
 8002982:	e000      	b.n	8002986 <prvInitialiseNewTask+0x96>
            {
                break;
 8002984:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800298e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002990:	2b04      	cmp	r3, #4
 8002992:	d90b      	bls.n	80029ac <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	613b      	str	r3, [r7, #16]
    }
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d901      	bls.n	80029b6 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029b2:	2304      	movs	r3, #4
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80029b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80029bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029c0:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c4:	3304      	adds	r3, #4
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fb80 	bl	80020cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ce:	3318      	adds	r3, #24
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fb7b 	bl	80020cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029da:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029de:	f1c3 0205 	rsb	r2, r3, #5
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ea:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	68f9      	ldr	r1, [r7, #12]
 80029f0:	69b8      	ldr	r0, [r7, #24]
 80029f2:	f001 fc35 	bl	8004260 <pxPortInitialiseStack>
 80029f6:	4602      	mov	r2, r0
 80029f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fa:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80029fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a06:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a08:	bf00      	nop
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a18:	f001 fdd8 	bl	80045cc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b5c <prvAddNewTaskToReadyList+0x14c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	4a4e      	ldr	r2, [pc, #312]	@ (8002b5c <prvAddNewTaskToReadyList+0x14c>)
 8002a24:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a26:	4b4e      	ldr	r3, [pc, #312]	@ (8002b60 <prvAddNewTaskToReadyList+0x150>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a2e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b60 <prvAddNewTaskToReadyList+0x150>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a34:	4b49      	ldr	r3, [pc, #292]	@ (8002b5c <prvAddNewTaskToReadyList+0x14c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d110      	bne.n	8002a5e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a3c:	f000 fe8a 	bl	8003754 <prvInitialiseTaskLists>
 8002a40:	e00d      	b.n	8002a5e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a42:	4b48      	ldr	r3, [pc, #288]	@ (8002b64 <prvAddNewTaskToReadyList+0x154>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a4a:	4b45      	ldr	r3, [pc, #276]	@ (8002b60 <prvAddNewTaskToReadyList+0x150>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d802      	bhi.n	8002a5e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a58:	4a41      	ldr	r2, [pc, #260]	@ (8002b60 <prvAddNewTaskToReadyList+0x150>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a5e:	4b42      	ldr	r3, [pc, #264]	@ (8002b68 <prvAddNewTaskToReadyList+0x158>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	4a40      	ldr	r2, [pc, #256]	@ (8002b68 <prvAddNewTaskToReadyList+0x158>)
 8002a66:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a68:	4b3f      	ldr	r3, [pc, #252]	@ (8002b68 <prvAddNewTaskToReadyList+0x158>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d016      	beq.n	8002aa4 <prvAddNewTaskToReadyList+0x94>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 ff9b 	bl	80069b4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	461d      	mov	r5, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461c      	mov	r4, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	1ae3      	subs	r3, r4, r3
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	462b      	mov	r3, r5
 8002aa0:	f002 f946 	bl	8004d30 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 f808 	bl	8006abc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b6c <prvAddNewTaskToReadyList+0x15c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	4a2c      	ldr	r2, [pc, #176]	@ (8002b6c <prvAddNewTaskToReadyList+0x15c>)
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac2:	492b      	ldr	r1, [pc, #172]	@ (8002b70 <prvAddNewTaskToReadyList+0x160>)
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	3304      	adds	r3, #4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	609a      	str	r2, [r3, #8]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	3204      	adds	r2, #4
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	1d1a      	adds	r2, r3, #4
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4a1b      	ldr	r2, [pc, #108]	@ (8002b70 <prvAddNewTaskToReadyList+0x160>)
 8002b02:	441a      	add	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	615a      	str	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b0c:	4918      	ldr	r1, [pc, #96]	@ (8002b70 <prvAddNewTaskToReadyList+0x160>)
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	1c59      	adds	r1, r3, #1
 8002b1c:	4814      	ldr	r0, [pc, #80]	@ (8002b70 <prvAddNewTaskToReadyList+0x160>)
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4403      	add	r3, r0
 8002b28:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b2a:	f001 fd81 	bl	8004630 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <prvAddNewTaskToReadyList+0x154>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00e      	beq.n	8002b54 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b36:	4b0a      	ldr	r3, [pc, #40]	@ (8002b60 <prvAddNewTaskToReadyList+0x150>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d207      	bcs.n	8002b54 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <prvAddNewTaskToReadyList+0x164>)
 8002b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5c:	200001a8 	.word	0x200001a8
 8002b60:	200000d0 	.word	0x200000d0
 8002b64:	200001b4 	.word	0x200001b4
 8002b68:	200001c4 	.word	0x200001c4
 8002b6c:	200001b0 	.word	0x200001b0
 8002b70:	200000d4 	.word	0x200000d4
 8002b74:	e000ed04 	.word	0xe000ed04

08002b78 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002b80:	f001 fd24 	bl	80045cc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <vTaskDelete+0x18>
 8002b8a:	4b49      	ldr	r3, [pc, #292]	@ (8002cb0 <vTaskDelete+0x138>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	e000      	b.n	8002b92 <vTaskDelete+0x1a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3304      	adds	r3, #4
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fb01 	bl	80021a0 <uxListRemove>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d115      	bne.n	8002bd0 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba8:	4942      	ldr	r1, [pc, #264]	@ (8002cb4 <vTaskDelete+0x13c>)
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <vTaskDelete+0x58>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8002cb8 <vTaskDelete+0x140>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	4a3a      	ldr	r2, [pc, #232]	@ (8002cb8 <vTaskDelete+0x140>)
 8002bce:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3318      	adds	r3, #24
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fadf 	bl	80021a0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002be2:	4b36      	ldr	r3, [pc, #216]	@ (8002cbc <vTaskDelete+0x144>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3301      	adds	r3, #1
 8002be8:	4a34      	ldr	r2, [pc, #208]	@ (8002cbc <vTaskDelete+0x144>)
 8002bea:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002bec:	4b30      	ldr	r3, [pc, #192]	@ (8002cb0 <vTaskDelete+0x138>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d118      	bne.n	8002c28 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4830      	ldr	r0, [pc, #192]	@ (8002cc0 <vTaskDelete+0x148>)
 8002bfe:	f7ff fa72 	bl	80020e6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002c02:	4b30      	ldr	r3, [pc, #192]	@ (8002cc4 <vTaskDelete+0x14c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	4a2e      	ldr	r2, [pc, #184]	@ (8002cc4 <vTaskDelete+0x14c>)
 8002c0a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f003 ff96 	bl	8006b40 <SEGGER_SYSVIEW_ShrinkId>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4619      	mov	r1, r3
 8002c18:	2022      	movs	r0, #34	@ 0x22
 8002c1a:	f003 f9cf 	bl	8005fbc <SEGGER_SYSVIEW_RecordU32>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f002 f8ed 	bl	8004e00 <SYSVIEW_DeleteTask>
 8002c26:	e013      	b.n	8002c50 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002c28:	4b27      	ldr	r3, [pc, #156]	@ (8002cc8 <vTaskDelete+0x150>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	4a26      	ldr	r2, [pc, #152]	@ (8002cc8 <vTaskDelete+0x150>)
 8002c30:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 ff83 	bl	8006b40 <SEGGER_SYSVIEW_ShrinkId>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	2022      	movs	r0, #34	@ 0x22
 8002c40:	f003 f9bc 	bl	8005fbc <SEGGER_SYSVIEW_RecordU32>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 f8da 	bl	8004e00 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002c4c:	f000 fe00 	bl	8003850 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002c50:	f001 fcee 	bl	8004630 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002c54:	4b16      	ldr	r3, [pc, #88]	@ (8002cb0 <vTaskDelete+0x138>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d002      	beq.n	8002c64 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fde6 	bl	8003830 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002c64:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <vTaskDelete+0x154>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01c      	beq.n	8002ca6 <vTaskDelete+0x12e>
        {
            if( pxTCB == pxCurrentTCB )
 8002c6c:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <vTaskDelete+0x138>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d117      	bne.n	8002ca6 <vTaskDelete+0x12e>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002c76:	4b16      	ldr	r3, [pc, #88]	@ (8002cd0 <vTaskDelete+0x158>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <vTaskDelete+0x11e>
        __asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	60bb      	str	r3, [r7, #8]
    }
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	e7fd      	b.n	8002c92 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002c96:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd4 <vTaskDelete+0x15c>)
 8002c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200000d0 	.word	0x200000d0
 8002cb4:	200000d4 	.word	0x200000d4
 8002cb8:	200001b0 	.word	0x200001b0
 8002cbc:	200001c4 	.word	0x200001c4
 8002cc0:	2000017c 	.word	0x2000017c
 8002cc4:	20000190 	.word	0x20000190
 8002cc8:	200001a8 	.word	0x200001a8
 8002ccc:	200001b4 	.word	0x200001b4
 8002cd0:	200001d0 	.word	0x200001d0
 8002cd4:	e000ed04 	.word	0xe000ed04

08002cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d01c      	beq.n	8002d24 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002cea:	4b16      	ldr	r3, [pc, #88]	@ (8002d44 <vTaskDelay+0x6c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <vTaskDelay+0x32>
        __asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	60bb      	str	r3, [r7, #8]
    }
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	e7fd      	b.n	8002d06 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002d0a:	f000 f881 	bl	8002e10 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	2023      	movs	r0, #35	@ 0x23
 8002d12:	f003 f953 	bl	8005fbc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d16:	2100      	movs	r1, #0
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 ff95 	bl	8003c48 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002d1e:	f000 f885 	bl	8002e2c <xTaskResumeAll>
 8002d22:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d107      	bne.n	8002d3a <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 8002d2a:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <vTaskDelay+0x70>)
 8002d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200001d0 	.word	0x200001d0
 8002d48:	e000ed04 	.word	0xe000ed04

08002d4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002d52:	4b27      	ldr	r3, [pc, #156]	@ (8002df0 <vTaskStartScheduler+0xa4>)
 8002d54:	9301      	str	r3, [sp, #4]
 8002d56:	2300      	movs	r3, #0
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2282      	movs	r2, #130	@ 0x82
 8002d5e:	4925      	ldr	r1, [pc, #148]	@ (8002df4 <vTaskStartScheduler+0xa8>)
 8002d60:	4825      	ldr	r0, [pc, #148]	@ (8002df8 <vTaskStartScheduler+0xac>)
 8002d62:	f7ff fd7f 	bl	8002864 <xTaskCreate>
 8002d66:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d102      	bne.n	8002d74 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002d6e:	f000 ffeb 	bl	8003d48 <xTimerCreateTimerTask>
 8002d72:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d124      	bne.n	8002dc4 <vTaskStartScheduler+0x78>
        __asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	60bb      	str	r3, [r7, #8]
    }
 8002d8c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dfc <vTaskStartScheduler+0xb0>)
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d96:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <vTaskStartScheduler+0xb4>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d9c:	4b19      	ldr	r3, [pc, #100]	@ (8002e04 <vTaskStartScheduler+0xb8>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002da2:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <vTaskStartScheduler+0xbc>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <vTaskStartScheduler+0xa4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d102      	bne.n	8002db4 <vTaskStartScheduler+0x68>
 8002dae:	f003 fde5 	bl	800697c <SEGGER_SYSVIEW_OnIdle>
 8002db2:	e004      	b.n	8002dbe <vTaskStartScheduler+0x72>
 8002db4:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <vTaskStartScheduler+0xbc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fe3d 	bl	8006a38 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002dbe:	f001 fae1 	bl	8004384 <xPortStartScheduler>
 8002dc2:	e00f      	b.n	8002de4 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dca:	d10b      	bne.n	8002de4 <vTaskStartScheduler+0x98>
        __asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	607b      	str	r3, [r7, #4]
    }
 8002dde:	bf00      	nop
 8002de0:	bf00      	nop
 8002de2:	e7fd      	b.n	8002de0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002de4:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <vTaskStartScheduler+0xc0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200001cc 	.word	0x200001cc
 8002df4:	08006f60 	.word	0x08006f60
 8002df8:	08003725 	.word	0x08003725
 8002dfc:	200001c8 	.word	0x200001c8
 8002e00:	200001b4 	.word	0x200001b4
 8002e04:	200001ac 	.word	0x200001ac
 8002e08:	200000d0 	.word	0x200000d0
 8002e0c:	2000000c 	.word	0x2000000c

08002e10 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e14:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <vTaskSuspendAll+0x18>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	4a03      	ldr	r2, [pc, #12]	@ (8002e28 <vTaskSuspendAll+0x18>)
 8002e1c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e1e:	bf00      	nop
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	200001d0 	.word	0x200001d0

08002e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e3a:	4b73      	ldr	r3, [pc, #460]	@ (8003008 <xTaskResumeAll+0x1dc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <xTaskResumeAll+0x2e>
        __asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	607b      	str	r3, [r7, #4]
    }
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	e7fd      	b.n	8002e56 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e5a:	f001 fbb7 	bl	80045cc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003008 <xTaskResumeAll+0x1dc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	4a68      	ldr	r2, [pc, #416]	@ (8003008 <xTaskResumeAll+0x1dc>)
 8002e66:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e68:	4b67      	ldr	r3, [pc, #412]	@ (8003008 <xTaskResumeAll+0x1dc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f040 80c4 	bne.w	8002ffa <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e72:	4b66      	ldr	r3, [pc, #408]	@ (800300c <xTaskResumeAll+0x1e0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80bf 	beq.w	8002ffa <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e7c:	e08e      	b.n	8002f9c <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e7e:	4b64      	ldr	r3, [pc, #400]	@ (8003010 <xTaskResumeAll+0x1e4>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	6a12      	ldr	r2, [r2, #32]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	69d2      	ldr	r2, [r2, #28]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	3318      	adds	r3, #24
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d103      	bne.n	8002eb4 <xTaskResumeAll+0x88>
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	6a1a      	ldr	r2, [r3, #32]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	1e5a      	subs	r2, r3, #1
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	68d2      	ldr	r2, [r2, #12]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	6892      	ldr	r2, [r2, #8]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d103      	bne.n	8002ef2 <xTaskResumeAll+0xc6>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	1e5a      	subs	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fdd9 	bl	8006abc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	2201      	movs	r2, #1
 8002f10:	409a      	lsls	r2, r3
 8002f12:	4b40      	ldr	r3, [pc, #256]	@ (8003014 <xTaskResumeAll+0x1e8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	4a3e      	ldr	r2, [pc, #248]	@ (8003014 <xTaskResumeAll+0x1e8>)
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f20:	493d      	ldr	r1, [pc, #244]	@ (8003018 <xTaskResumeAll+0x1ec>)
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	3204      	adds	r2, #4
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	1d1a      	adds	r2, r3, #4
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8003018 <xTaskResumeAll+0x1ec>)
 8002f60:	441a      	add	r2, r3
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	615a      	str	r2, [r3, #20]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6a:	492b      	ldr	r1, [pc, #172]	@ (8003018 <xTaskResumeAll+0x1ec>)
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	1c59      	adds	r1, r3, #1
 8002f7a:	4827      	ldr	r0, [pc, #156]	@ (8003018 <xTaskResumeAll+0x1ec>)
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4403      	add	r3, r0
 8002f86:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f8c:	4b23      	ldr	r3, [pc, #140]	@ (800301c <xTaskResumeAll+0x1f0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002f96:	4b22      	ldr	r3, [pc, #136]	@ (8003020 <xTaskResumeAll+0x1f4>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003010 <xTaskResumeAll+0x1e4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f47f af6c 	bne.w	8002e7e <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fac:	f000 fc50 	bl	8003850 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003024 <xTaskResumeAll+0x1f8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d010      	beq.n	8002fde <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fbc:	f000 f858 	bl	8003070 <xTaskIncrementTick>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002fc6:	4b16      	ldr	r3, [pc, #88]	@ (8003020 <xTaskResumeAll+0x1f4>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f1      	bne.n	8002fbc <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002fd8:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <xTaskResumeAll+0x1f8>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002fde:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <xTaskResumeAll+0x1f4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002fea:	4b0f      	ldr	r3, [pc, #60]	@ (8003028 <xTaskResumeAll+0x1fc>)
 8002fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ffa:	f001 fb19 	bl	8004630 <vPortExitCritical>

    return xAlreadyYielded;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	200001d0 	.word	0x200001d0
 800300c:	200001a8 	.word	0x200001a8
 8003010:	20000168 	.word	0x20000168
 8003014:	200001b0 	.word	0x200001b0
 8003018:	200000d4 	.word	0x200000d4
 800301c:	200000d0 	.word	0x200000d0
 8003020:	200001bc 	.word	0x200001bc
 8003024:	200001b8 	.word	0x200001b8
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003032:	4b05      	ldr	r3, [pc, #20]	@ (8003048 <xTaskGetTickCount+0x1c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003038:	687b      	ldr	r3, [r7, #4]
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	200001ac 	.word	0x200001ac

0800304c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003052:	f001 fbab 	bl	80047ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800305a:	4b04      	ldr	r3, [pc, #16]	@ (800306c <xTaskGetTickCountFromISR+0x20>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003060:	683b      	ldr	r3, [r7, #0]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200001ac 	.word	0x200001ac

08003070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	@ 0x28
 8003074:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800307a:	4b80      	ldr	r3, [pc, #512]	@ (800327c <xTaskIncrementTick+0x20c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	f040 80f1 	bne.w	8003266 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003084:	4b7e      	ldr	r3, [pc, #504]	@ (8003280 <xTaskIncrementTick+0x210>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3301      	adds	r3, #1
 800308a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800308c:	4a7c      	ldr	r2, [pc, #496]	@ (8003280 <xTaskIncrementTick+0x210>)
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d121      	bne.n	80030dc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003098:	4b7a      	ldr	r3, [pc, #488]	@ (8003284 <xTaskIncrementTick+0x214>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <xTaskIncrementTick+0x4a>
        __asm volatile
 80030a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	607b      	str	r3, [r7, #4]
    }
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	e7fd      	b.n	80030b6 <xTaskIncrementTick+0x46>
 80030ba:	4b72      	ldr	r3, [pc, #456]	@ (8003284 <xTaskIncrementTick+0x214>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	4b71      	ldr	r3, [pc, #452]	@ (8003288 <xTaskIncrementTick+0x218>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a6f      	ldr	r2, [pc, #444]	@ (8003284 <xTaskIncrementTick+0x214>)
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4a6f      	ldr	r2, [pc, #444]	@ (8003288 <xTaskIncrementTick+0x218>)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b6f      	ldr	r3, [pc, #444]	@ (800328c <xTaskIncrementTick+0x21c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	4a6d      	ldr	r2, [pc, #436]	@ (800328c <xTaskIncrementTick+0x21c>)
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	f000 fbba 	bl	8003850 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003290 <xTaskIncrementTick+0x220>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	f0c0 80aa 	bcc.w	800323c <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030e8:	4b66      	ldr	r3, [pc, #408]	@ (8003284 <xTaskIncrementTick+0x214>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d104      	bne.n	80030fc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f2:	4b67      	ldr	r3, [pc, #412]	@ (8003290 <xTaskIncrementTick+0x220>)
 80030f4:	f04f 32ff 	mov.w	r2, #4294967295
 80030f8:	601a      	str	r2, [r3, #0]
                    break;
 80030fa:	e09f      	b.n	800323c <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030fc:	4b61      	ldr	r3, [pc, #388]	@ (8003284 <xTaskIncrementTick+0x214>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	429a      	cmp	r2, r3
 8003112:	d203      	bcs.n	800311c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003114:	4a5e      	ldr	r2, [pc, #376]	@ (8003290 <xTaskIncrementTick+0x220>)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800311a:	e08f      	b.n	800323c <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	68d2      	ldr	r2, [r2, #12]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	6892      	ldr	r2, [r2, #8]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	3304      	adds	r3, #4
 800313e:	429a      	cmp	r2, r3
 8003140:	d103      	bne.n	800314a <xTaskIncrementTick+0xda>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2200      	movs	r2, #0
 800314e:	615a      	str	r2, [r3, #20]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	1e5a      	subs	r2, r3, #1
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01e      	beq.n	80031a0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	6a12      	ldr	r2, [r2, #32]
 8003170:	609a      	str	r2, [r3, #8]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	69d2      	ldr	r2, [r2, #28]
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	3318      	adds	r3, #24
 8003184:	429a      	cmp	r2, r3
 8003186:	d103      	bne.n	8003190 <xTaskIncrementTick+0x120>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6a1a      	ldr	r2, [r3, #32]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2200      	movs	r2, #0
 8003194:	629a      	str	r2, [r3, #40]	@ 0x28
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	1e5a      	subs	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 fc8a 	bl	8006abc <SEGGER_SYSVIEW_OnTaskStartReady>
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	2201      	movs	r2, #1
 80031ae:	409a      	lsls	r2, r3
 80031b0:	4b38      	ldr	r3, [pc, #224]	@ (8003294 <xTaskIncrementTick+0x224>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	4a37      	ldr	r2, [pc, #220]	@ (8003294 <xTaskIncrementTick+0x224>)
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031be:	4936      	ldr	r1, [pc, #216]	@ (8003298 <xTaskIncrementTick+0x228>)
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3304      	adds	r3, #4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	609a      	str	r2, [r3, #8]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	3204      	adds	r2, #4
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	1d1a      	adds	r2, r3, #4
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4a26      	ldr	r2, [pc, #152]	@ (8003298 <xTaskIncrementTick+0x228>)
 80031fe:	441a      	add	r2, r3
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	615a      	str	r2, [r3, #20]
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003208:	4923      	ldr	r1, [pc, #140]	@ (8003298 <xTaskIncrementTick+0x228>)
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	1c59      	adds	r1, r3, #1
 8003218:	481f      	ldr	r0, [pc, #124]	@ (8003298 <xTaskIncrementTick+0x228>)
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4403      	add	r3, r0
 8003224:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322a:	4b1c      	ldr	r3, [pc, #112]	@ (800329c <xTaskIncrementTick+0x22c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003230:	429a      	cmp	r2, r3
 8003232:	f67f af59 	bls.w	80030e8 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8003236:	2301      	movs	r3, #1
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800323a:	e755      	b.n	80030e8 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800323c:	4b17      	ldr	r3, [pc, #92]	@ (800329c <xTaskIncrementTick+0x22c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003242:	4915      	ldr	r1, [pc, #84]	@ (8003298 <xTaskIncrementTick+0x228>)
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d901      	bls.n	8003258 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003254:	2301      	movs	r3, #1
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003258:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <xTaskIncrementTick+0x230>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003260:	2301      	movs	r3, #1
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24
 8003264:	e004      	b.n	8003270 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003266:	4b0f      	ldr	r3, [pc, #60]	@ (80032a4 <xTaskIncrementTick+0x234>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3301      	adds	r3, #1
 800326c:	4a0d      	ldr	r2, [pc, #52]	@ (80032a4 <xTaskIncrementTick+0x234>)
 800326e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003272:	4618      	mov	r0, r3
 8003274:	3728      	adds	r7, #40	@ 0x28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200001d0 	.word	0x200001d0
 8003280:	200001ac 	.word	0x200001ac
 8003284:	20000160 	.word	0x20000160
 8003288:	20000164 	.word	0x20000164
 800328c:	200001c0 	.word	0x200001c0
 8003290:	200001c8 	.word	0x200001c8
 8003294:	200001b0 	.word	0x200001b0
 8003298:	200000d4 	.word	0x200000d4
 800329c:	200000d0 	.word	0x200000d0
 80032a0:	200001bc 	.word	0x200001bc
 80032a4:	200001b8 	.word	0x200001b8

080032a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003364 <vTaskSwitchContext+0xbc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003368 <vTaskSwitchContext+0xc0>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80032bc:	e04e      	b.n	800335c <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80032be:	4b2a      	ldr	r3, [pc, #168]	@ (8003368 <vTaskSwitchContext+0xc0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c4:	4b29      	ldr	r3, [pc, #164]	@ (800336c <vTaskSwitchContext+0xc4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	fab3 f383 	clz	r3, r3
 80032d0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	f1c3 031f 	rsb	r3, r3, #31
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	4925      	ldr	r1, [pc, #148]	@ (8003370 <vTaskSwitchContext+0xc8>)
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10b      	bne.n	8003306 <vTaskSwitchContext+0x5e>
        __asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	607b      	str	r3, [r7, #4]
    }
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	e7fd      	b.n	8003302 <vTaskSwitchContext+0x5a>
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4a17      	ldr	r2, [pc, #92]	@ (8003370 <vTaskSwitchContext+0xc8>)
 8003312:	4413      	add	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	3308      	adds	r3, #8
 8003328:	429a      	cmp	r2, r3
 800332a:	d104      	bne.n	8003336 <vTaskSwitchContext+0x8e>
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a0d      	ldr	r2, [pc, #52]	@ (8003374 <vTaskSwitchContext+0xcc>)
 800333e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003340:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <vTaskSwitchContext+0xcc>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <vTaskSwitchContext+0xd0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d102      	bne.n	8003352 <vTaskSwitchContext+0xaa>
 800334c:	f003 fb16 	bl	800697c <SEGGER_SYSVIEW_OnIdle>
}
 8003350:	e004      	b.n	800335c <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003352:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <vTaskSwitchContext+0xcc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f003 fb6e 	bl	8006a38 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800335c:	bf00      	nop
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	200001d0 	.word	0x200001d0
 8003368:	200001bc 	.word	0x200001bc
 800336c:	200001b0 	.word	0x200001b0
 8003370:	200000d4 	.word	0x200000d4
 8003374:	200000d0 	.word	0x200000d0
 8003378:	200001cc 	.word	0x200001cc

0800337c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	60fb      	str	r3, [r7, #12]
    }
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
 80033a2:	e7fd      	b.n	80033a0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033a4:	4b07      	ldr	r3, [pc, #28]	@ (80033c4 <vTaskPlaceOnEventList+0x48>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3318      	adds	r3, #24
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7fe febe 	bl	800212e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033b2:	2101      	movs	r1, #1
 80033b4:	6838      	ldr	r0, [r7, #0]
 80033b6:	f000 fc47 	bl	8003c48 <prvAddCurrentTaskToDelayedList>
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200000d0 	.word	0x200000d0

080033c8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10b      	bne.n	80033f2 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80033da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	613b      	str	r3, [r7, #16]
    }
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	e7fd      	b.n	80033ee <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <vTaskPlaceOnEventListRestricted+0x90>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	61da      	str	r2, [r3, #28]
 8003400:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <vTaskPlaceOnEventListRestricted+0x90>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	6892      	ldr	r2, [r2, #8]
 8003408:	621a      	str	r2, [r3, #32]
 800340a:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <vTaskPlaceOnEventListRestricted+0x90>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	3218      	adds	r2, #24
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <vTaskPlaceOnEventListRestricted+0x90>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f103 0218 	add.w	r2, r3, #24
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <vTaskPlaceOnEventListRestricted+0x90>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	629a      	str	r2, [r3, #40]	@ 0x28
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800343a:	f04f 33ff 	mov.w	r3, #4294967295
 800343e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003440:	2024      	movs	r0, #36	@ 0x24
 8003442:	f002 fd9d 	bl	8005f80 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	68b8      	ldr	r0, [r7, #8]
 800344a:	f000 fbfd 	bl	8003c48 <prvAddCurrentTaskToDelayedList>
    }
 800344e:	bf00      	nop
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200000d0 	.word	0x200000d0

0800345c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	@ 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	60fb      	str	r3, [r7, #12]
    }
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	e7fd      	b.n	8003486 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	6a3a      	ldr	r2, [r7, #32]
 8003496:	6a12      	ldr	r2, [r2, #32]
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	6a3a      	ldr	r2, [r7, #32]
 80034a0:	69d2      	ldr	r2, [r2, #28]
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	3318      	adds	r3, #24
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d103      	bne.n	80034b8 <xTaskRemoveFromEventList+0x5c>
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	6a1a      	ldr	r2, [r3, #32]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	2200      	movs	r2, #0
 80034bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	1e5a      	subs	r2, r3, #1
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c8:	4b4b      	ldr	r3, [pc, #300]	@ (80035f8 <xTaskRemoveFromEventList+0x19c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d162      	bne.n	8003596 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	6a3a      	ldr	r2, [r7, #32]
 80034dc:	68d2      	ldr	r2, [r2, #12]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	6a3a      	ldr	r2, [r7, #32]
 80034e6:	6892      	ldr	r2, [r2, #8]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	3304      	adds	r3, #4
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d103      	bne.n	80034fe <xTaskRemoveFromEventList+0xa2>
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	2200      	movs	r2, #0
 8003502:	615a      	str	r2, [r3, #20]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	1e5a      	subs	r2, r3, #1
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	4618      	mov	r0, r3
 8003512:	f003 fad3 	bl	8006abc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	2201      	movs	r2, #1
 800351c:	409a      	lsls	r2, r3
 800351e:	4b37      	ldr	r3, [pc, #220]	@ (80035fc <xTaskRemoveFromEventList+0x1a0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	4a35      	ldr	r2, [pc, #212]	@ (80035fc <xTaskRemoveFromEventList+0x1a0>)
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800352c:	4934      	ldr	r1, [pc, #208]	@ (8003600 <xTaskRemoveFromEventList+0x1a4>)
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3304      	adds	r3, #4
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	60da      	str	r2, [r3, #12]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	6a3a      	ldr	r2, [r7, #32]
 8003552:	3204      	adds	r2, #4
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	1d1a      	adds	r2, r3, #4
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4a25      	ldr	r2, [pc, #148]	@ (8003600 <xTaskRemoveFromEventList+0x1a4>)
 800356c:	441a      	add	r2, r3
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	615a      	str	r2, [r3, #20]
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003576:	4922      	ldr	r1, [pc, #136]	@ (8003600 <xTaskRemoveFromEventList+0x1a4>)
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	1c59      	adds	r1, r3, #1
 8003586:	481e      	ldr	r0, [pc, #120]	@ (8003600 <xTaskRemoveFromEventList+0x1a4>)
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4403      	add	r3, r0
 8003592:	6019      	str	r1, [r3, #0]
 8003594:	e01b      	b.n	80035ce <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003596:	4b1b      	ldr	r3, [pc, #108]	@ (8003604 <xTaskRemoveFromEventList+0x1a8>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	61da      	str	r2, [r3, #28]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	621a      	str	r2, [r3, #32]
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	6a3a      	ldr	r2, [r7, #32]
 80035b0:	3218      	adds	r2, #24
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	f103 0218 	add.w	r2, r3, #24
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	4a10      	ldr	r2, [pc, #64]	@ (8003604 <xTaskRemoveFromEventList+0x1a8>)
 80035c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80035c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <xTaskRemoveFromEventList+0x1a8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003604 <xTaskRemoveFromEventList+0x1a8>)
 80035cc:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <xTaskRemoveFromEventList+0x1ac>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	429a      	cmp	r2, r3
 80035da:	d905      	bls.n	80035e8 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035dc:	2301      	movs	r3, #1
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035e0:	4b0a      	ldr	r3, [pc, #40]	@ (800360c <xTaskRemoveFromEventList+0x1b0>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e001      	b.n	80035ec <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3728      	adds	r7, #40	@ 0x28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200001d0 	.word	0x200001d0
 80035fc:	200001b0 	.word	0x200001b0
 8003600:	200000d4 	.word	0x200000d4
 8003604:	20000168 	.word	0x20000168
 8003608:	200000d0 	.word	0x200000d0
 800360c:	200001bc 	.word	0x200001bc

08003610 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <vTaskInternalSetTimeOutState+0x24>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003620:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <vTaskInternalSetTimeOutState+0x28>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	605a      	str	r2, [r3, #4]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	200001c0 	.word	0x200001c0
 8003638:	200001ac 	.word	0x200001ac

0800363c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	613b      	str	r3, [r7, #16]
    }
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	60fb      	str	r3, [r7, #12]
    }
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	e7fd      	b.n	800367e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003682:	f000 ffa3 	bl	80045cc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003686:	4b1f      	ldr	r3, [pc, #124]	@ (8003704 <xTaskCheckForTimeOut+0xc8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369e:	d102      	bne.n	80036a6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	e026      	b.n	80036f4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4b17      	ldr	r3, [pc, #92]	@ (8003708 <xTaskCheckForTimeOut+0xcc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d00a      	beq.n	80036c8 <xTaskCheckForTimeOut+0x8c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d305      	bcc.n	80036c8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036bc:	2301      	movs	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e015      	b.n	80036f4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d20b      	bcs.n	80036ea <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	1ad2      	subs	r2, r2, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ff96 	bl	8003610 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	e004      	b.n	80036f4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036f0:	2301      	movs	r3, #1
 80036f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036f4:	f000 ff9c 	bl	8004630 <vPortExitCritical>

    return xReturn;
 80036f8:	69fb      	ldr	r3, [r7, #28]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	200001ac 	.word	0x200001ac
 8003708:	200001c0 	.word	0x200001c0

0800370c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003710:	4b03      	ldr	r3, [pc, #12]	@ (8003720 <vTaskMissedYield+0x14>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	200001bc 	.word	0x200001bc

08003724 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800372c:	f000 f852 	bl	80037d4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003730:	4b06      	ldr	r3, [pc, #24]	@ (800374c <prvIdleTask+0x28>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d9f9      	bls.n	800372c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003738:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <prvIdleTask+0x2c>)
 800373a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003748:	e7f0      	b.n	800372c <prvIdleTask+0x8>
 800374a:	bf00      	nop
 800374c:	200000d4 	.word	0x200000d4
 8003750:	e000ed04 	.word	0xe000ed04

08003754 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	e00c      	b.n	800377a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4a12      	ldr	r2, [pc, #72]	@ (80037b4 <prvInitialiseTaskLists+0x60>)
 800376c:	4413      	add	r3, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fc8c 	bl	800208c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3301      	adds	r3, #1
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b04      	cmp	r3, #4
 800377e:	d9ef      	bls.n	8003760 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003780:	480d      	ldr	r0, [pc, #52]	@ (80037b8 <prvInitialiseTaskLists+0x64>)
 8003782:	f7fe fc83 	bl	800208c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003786:	480d      	ldr	r0, [pc, #52]	@ (80037bc <prvInitialiseTaskLists+0x68>)
 8003788:	f7fe fc80 	bl	800208c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800378c:	480c      	ldr	r0, [pc, #48]	@ (80037c0 <prvInitialiseTaskLists+0x6c>)
 800378e:	f7fe fc7d 	bl	800208c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003792:	480c      	ldr	r0, [pc, #48]	@ (80037c4 <prvInitialiseTaskLists+0x70>)
 8003794:	f7fe fc7a 	bl	800208c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003798:	480b      	ldr	r0, [pc, #44]	@ (80037c8 <prvInitialiseTaskLists+0x74>)
 800379a:	f7fe fc77 	bl	800208c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800379e:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <prvInitialiseTaskLists+0x78>)
 80037a0:	4a05      	ldr	r2, [pc, #20]	@ (80037b8 <prvInitialiseTaskLists+0x64>)
 80037a2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037a4:	4b0a      	ldr	r3, [pc, #40]	@ (80037d0 <prvInitialiseTaskLists+0x7c>)
 80037a6:	4a05      	ldr	r2, [pc, #20]	@ (80037bc <prvInitialiseTaskLists+0x68>)
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	200000d4 	.word	0x200000d4
 80037b8:	20000138 	.word	0x20000138
 80037bc:	2000014c 	.word	0x2000014c
 80037c0:	20000168 	.word	0x20000168
 80037c4:	2000017c 	.word	0x2000017c
 80037c8:	20000194 	.word	0x20000194
 80037cc:	20000160 	.word	0x20000160
 80037d0:	20000164 	.word	0x20000164

080037d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037da:	e019      	b.n	8003810 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80037dc:	f000 fef6 	bl	80045cc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e0:	4b10      	ldr	r3, [pc, #64]	@ (8003824 <prvCheckTasksWaitingTermination+0x50>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fe fcd7 	bl	80021a0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80037f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003828 <prvCheckTasksWaitingTermination+0x54>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003828 <prvCheckTasksWaitingTermination+0x54>)
 80037fa:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80037fc:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <prvCheckTasksWaitingTermination+0x58>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3b01      	subs	r3, #1
 8003802:	4a0a      	ldr	r2, [pc, #40]	@ (800382c <prvCheckTasksWaitingTermination+0x58>)
 8003804:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003806:	f000 ff13 	bl	8004630 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f810 	bl	8003830 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <prvCheckTasksWaitingTermination+0x58>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e1      	bne.n	80037dc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	2000017c 	.word	0x2000017c
 8003828:	200001a8 	.word	0x200001a8
 800382c:	20000190 	.word	0x20000190

08003830 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	4618      	mov	r0, r3
 800383e:	f001 f8b3 	bl	80049a8 <vPortFree>
            vPortFree( pxTCB );
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f001 f8b0 	bl	80049a8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <prvResetNextTaskUnblockTime+0x30>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d104      	bne.n	8003868 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800385e:	4b09      	ldr	r3, [pc, #36]	@ (8003884 <prvResetNextTaskUnblockTime+0x34>)
 8003860:	f04f 32ff 	mov.w	r2, #4294967295
 8003864:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003866:	e005      	b.n	8003874 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003868:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <prvResetNextTaskUnblockTime+0x30>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <prvResetNextTaskUnblockTime+0x34>)
 8003872:	6013      	str	r3, [r2, #0]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20000160 	.word	0x20000160
 8003884:	200001c8 	.word	0x200001c8

08003888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800388e:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <xTaskGetSchedulerState+0x34>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003896:	2301      	movs	r3, #1
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	e008      	b.n	80038ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800389c:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <xTaskGetSchedulerState+0x38>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80038a4:	2302      	movs	r3, #2
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	e001      	b.n	80038ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80038ae:	687b      	ldr	r3, [r7, #4]
    }
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	200001b4 	.word	0x200001b4
 80038c0:	200001d0 	.word	0x200001d0

080038c4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	613b      	str	r3, [r7, #16]
    }
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
 80038ee:	e7fd      	b.n	80038ec <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80038f0:	f000 fe6c 	bl	80045cc <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80038f4:	4b36      	ldr	r3, [pc, #216]	@ (80039d0 <xTaskGenericNotifyWait+0x10c>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	3354      	adds	r3, #84	@ 0x54
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d022      	beq.n	800394c <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003906:	4b32      	ldr	r3, [pc, #200]	@ (80039d0 <xTaskGenericNotifyWait+0x10c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	3214      	adds	r2, #20
 800390e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	43d2      	mvns	r2, r2
 8003916:	4011      	ands	r1, r2
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	3214      	adds	r2, #20
 800391c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003920:	4b2b      	ldr	r3, [pc, #172]	@ (80039d0 <xTaskGenericNotifyWait+0x10c>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	3354      	adds	r3, #84	@ 0x54
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003934:	2101      	movs	r1, #1
 8003936:	6a38      	ldr	r0, [r7, #32]
 8003938:	f000 f986 	bl	8003c48 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800393c:	4b25      	ldr	r3, [pc, #148]	@ (80039d4 <xTaskGenericNotifyWait+0x110>)
 800393e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800394c:	f000 fe70 	bl	8004630 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003950:	f000 fe3c 	bl	80045cc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	2040      	movs	r0, #64	@ 0x40
 8003962:	f002 fc37 	bl	80061d4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800396c:	4b18      	ldr	r3, [pc, #96]	@ (80039d0 <xTaskGenericNotifyWait+0x10c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	3214      	adds	r2, #20
 8003974:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800397c:	4b14      	ldr	r3, [pc, #80]	@ (80039d0 <xTaskGenericNotifyWait+0x10c>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	3354      	adds	r3, #84	@ 0x54
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d002      	beq.n	8003994 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e00e      	b.n	80039b2 <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003994:	4b0e      	ldr	r3, [pc, #56]	@ (80039d0 <xTaskGenericNotifyWait+0x10c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	3214      	adds	r2, #20
 800399c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	43d2      	mvns	r2, r2
 80039a4:	4011      	ands	r1, r2
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	3214      	adds	r2, #20
 80039aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80039ae:	2301      	movs	r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80039b2:	4b07      	ldr	r3, [pc, #28]	@ (80039d0 <xTaskGenericNotifyWait+0x10c>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4413      	add	r3, r2
 80039ba:	3354      	adds	r3, #84	@ 0x54
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80039c0:	f000 fe36 	bl	8004630 <vPortExitCritical>

        return xReturn;
 80039c4:	697b      	ldr	r3, [r7, #20]
    }
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200000d0 	.word	0x200000d0
 80039d4:	e000ed04 	.word	0xe000ed04

080039d8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b090      	sub	sp, #64	@ 0x40
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80039e6:	2301      	movs	r3, #1
 80039e8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00b      	beq.n	8003a08 <xTaskGenericNotify+0x30>
        __asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	623b      	str	r3, [r7, #32]
    }
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	e7fd      	b.n	8003a04 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10b      	bne.n	8003a26 <xTaskGenericNotify+0x4e>
        __asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	61fb      	str	r3, [r7, #28]
    }
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	e7fd      	b.n	8003a22 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8003a2a:	f000 fdcf 	bl	80045cc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d006      	beq.n	8003a42 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	3214      	adds	r2, #20
 8003a3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a40:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4413      	add	r3, r2
 8003a48:	3354      	adds	r3, #84	@ 0x54
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4413      	add	r3, r2
 8003a56:	3354      	adds	r3, #84	@ 0x54
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d83b      	bhi.n	8003ada <xTaskGenericNotify+0x102>
 8003a62:	a201      	add	r2, pc, #4	@ (adr r2, 8003a68 <xTaskGenericNotify+0x90>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003afb 	.word	0x08003afb
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a99 	.word	0x08003a99
 8003a74:	08003ab1 	.word	0x08003ab1
 8003a78:	08003abf 	.word	0x08003abf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	3214      	adds	r2, #20
 8003a82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	ea42 0103 	orr.w	r1, r2, r3
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	3214      	adds	r2, #20
 8003a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003a96:	e033      	b.n	8003b00 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	3214      	adds	r2, #20
 8003a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa2:	1c59      	adds	r1, r3, #1
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	3214      	adds	r2, #20
 8003aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003aae:	e027      	b.n	8003b00 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	3214      	adds	r2, #20
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003abc:	e020      	b.n	8003b00 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003abe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d006      	beq.n	8003ad4 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	3214      	adds	r2, #20
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003ad2:	e015      	b.n	8003b00 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8003ad8:	e012      	b.n	8003b00 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003ada:	4b56      	ldr	r3, [pc, #344]	@ (8003c34 <xTaskGenericNotify+0x25c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <xTaskGenericNotify+0x126>
        __asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	61bb      	str	r3, [r7, #24]
    }
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	e7fd      	b.n	8003af6 <xTaskGenericNotify+0x11e>
                    break;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <xTaskGenericNotify+0x128>

                    break;
 8003afe:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 f81c 	bl	8006b40 <SEGGER_SYSVIEW_ShrinkId>
 8003b08:	4601      	mov	r1, r0
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	203e      	movs	r0, #62	@ 0x3e
 8003b16:	f002 fb5d 	bl	80061d4 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	f040 8081 	bne.w	8003c26 <xTaskGenericNotify+0x24e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b30:	68d2      	ldr	r2, [r2, #12]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b3a:	6892      	ldr	r2, [r2, #8]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	3304      	adds	r3, #4
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d103      	bne.n	8003b52 <xTaskGenericNotify+0x17a>
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b54:	2200      	movs	r2, #0
 8003b56:	615a      	str	r2, [r3, #20]
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	1e5a      	subs	r2, r3, #1
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b64:	4618      	mov	r0, r3
 8003b66:	f002 ffa9 	bl	8006abc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6e:	2201      	movs	r2, #1
 8003b70:	409a      	lsls	r2, r3
 8003b72:	4b31      	ldr	r3, [pc, #196]	@ (8003c38 <xTaskGenericNotify+0x260>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	4a2f      	ldr	r2, [pc, #188]	@ (8003c38 <xTaskGenericNotify+0x260>)
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b80:	492e      	ldr	r1, [pc, #184]	@ (8003c3c <xTaskGenericNotify+0x264>)
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9e:	60da      	str	r2, [r3, #12]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ba6:	3204      	adds	r2, #4
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bac:	1d1a      	adds	r2, r3, #4
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	609a      	str	r2, [r3, #8]
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003c3c <xTaskGenericNotify+0x264>)
 8003bc0:	441a      	add	r2, r3
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc4:	615a      	str	r2, [r3, #20]
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bca:	491c      	ldr	r1, [pc, #112]	@ (8003c3c <xTaskGenericNotify+0x264>)
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	1c59      	adds	r1, r3, #1
 8003bda:	4818      	ldr	r0, [pc, #96]	@ (8003c3c <xTaskGenericNotify+0x264>)
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4403      	add	r3, r0
 8003be6:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00b      	beq.n	8003c08 <xTaskGenericNotify+0x230>
        __asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	617b      	str	r3, [r7, #20]
    }
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <xTaskGenericNotify+0x22c>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <xTaskGenericNotify+0x268>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d907      	bls.n	8003c26 <xTaskGenericNotify+0x24e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <xTaskGenericNotify+0x26c>)
 8003c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c26:	f000 fd03 	bl	8004630 <vPortExitCritical>

        return xReturn;
 8003c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3738      	adds	r7, #56	@ 0x38
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	200001ac 	.word	0x200001ac
 8003c38:	200001b0 	.word	0x200001b0
 8003c3c:	200000d4 	.word	0x200000d4
 8003c40:	200000d0 	.word	0x200000d0
 8003c44:	e000ed04 	.word	0xe000ed04

08003c48 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c52:	4b36      	ldr	r3, [pc, #216]	@ (8003d2c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c58:	4b35      	ldr	r3, [pc, #212]	@ (8003d30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fa9e 	bl	80021a0 <uxListRemove>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10b      	bne.n	8003c82 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c6a:	4b31      	ldr	r3, [pc, #196]	@ (8003d30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c70:	2201      	movs	r2, #1
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43da      	mvns	r2, r3
 8003c78:	4b2e      	ldr	r3, [pc, #184]	@ (8003d34 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003d34 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c80:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d124      	bne.n	8003cd4 <prvAddCurrentTaskToDelayedList+0x8c>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d021      	beq.n	8003cd4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c90:	4b29      	ldr	r3, [pc, #164]	@ (8003d38 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	4b26      	ldr	r3, [pc, #152]	@ (8003d30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	609a      	str	r2, [r3, #8]
 8003c9e:	4b24      	ldr	r3, [pc, #144]	@ (8003d30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	6892      	ldr	r2, [r2, #8]
 8003ca6:	60da      	str	r2, [r3, #12]
 8003ca8:	4b21      	ldr	r3, [pc, #132]	@ (8003d30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	3204      	adds	r2, #4
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	1d1a      	adds	r2, r3, #4
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003d30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d38 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cc4:	615a      	str	r2, [r3, #20]
 8003cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d38 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8003d38 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003cd2:	e026      	b.n	8003d22 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cdc:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d209      	bcs.n	8003d00 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cec:	4b13      	ldr	r3, [pc, #76]	@ (8003d3c <prvAddCurrentTaskToDelayedList+0xf4>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	f7fe fa18 	bl	800212e <vListInsert>
}
 8003cfe:	e010      	b.n	8003d22 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d00:	4b0f      	ldr	r3, [pc, #60]	@ (8003d40 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4b0a      	ldr	r3, [pc, #40]	@ (8003d30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f7fe fa0e 	bl	800212e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003d12:	4b0c      	ldr	r3, [pc, #48]	@ (8003d44 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d202      	bcs.n	8003d22 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003d1c:	4a09      	ldr	r2, [pc, #36]	@ (8003d44 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6013      	str	r3, [r2, #0]
}
 8003d22:	bf00      	nop
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200001ac 	.word	0x200001ac
 8003d30:	200000d0 	.word	0x200000d0
 8003d34:	200001b0 	.word	0x200001b0
 8003d38:	20000194 	.word	0x20000194
 8003d3c:	20000164 	.word	0x20000164
 8003d40:	20000160 	.word	0x20000160
 8003d44:	200001c8 	.word	0x200001c8

08003d48 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d52:	f000 fa4f 	bl	80041f4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d56:	4b12      	ldr	r3, [pc, #72]	@ (8003da0 <xTimerCreateTimerTask+0x58>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003d5e:	4b11      	ldr	r3, [pc, #68]	@ (8003da4 <xTimerCreateTimerTask+0x5c>)
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	2302      	movs	r3, #2
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	2300      	movs	r3, #0
 8003d68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d6c:	490e      	ldr	r1, [pc, #56]	@ (8003da8 <xTimerCreateTimerTask+0x60>)
 8003d6e:	480f      	ldr	r0, [pc, #60]	@ (8003dac <xTimerCreateTimerTask+0x64>)
 8003d70:	f7fe fd78 	bl	8002864 <xTaskCreate>
 8003d74:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	603b      	str	r3, [r7, #0]
    }
 8003d8e:	bf00      	nop
 8003d90:	bf00      	nop
 8003d92:	e7fd      	b.n	8003d90 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003d94:	687b      	ldr	r3, [r7, #4]
    }
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000204 	.word	0x20000204
 8003da4:	20000208 	.word	0x20000208
 8003da8:	08006f68 	.word	0x08006f68
 8003dac:	08003e55 	.word	0x08003e55

08003db0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003dbc:	e008      	b.n	8003dd0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	18d1      	adds	r1, r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f8df 	bl	8003fa0 <prvInsertTimerInActiveList>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ea      	bne.n	8003dbe <prvReloadTimer+0xe>
        }
    }
 8003de8:	bf00      	nop
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dfe:	4b14      	ldr	r3, [pc, #80]	@ (8003e50 <prvProcessExpiredTimer+0x5c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe f9c7 	bl	80021a0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff ffc3 	bl	8003db0 <prvReloadTimer>
 8003e2a:	e008      	b.n	8003e3e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	4798      	blx	r3
    }
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200001fc 	.word	0x200001fc

08003e54 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e5c:	f107 0308 	add.w	r3, r7, #8
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 f859 	bl	8003f18 <prvGetNextExpireTime>
 8003e66:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f805 	bl	8003e7c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e72:	f000 f8d7 	bl	8004024 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e76:	bf00      	nop
 8003e78:	e7f0      	b.n	8003e5c <prvTimerTask+0x8>
	...

08003e7c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e86:	f7fe ffc3 	bl	8002e10 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e8a:	f107 0308 	add.w	r3, r7, #8
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 f866 	bl	8003f60 <prvSampleTimeNow>
 8003e94:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d130      	bne.n	8003efe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <prvProcessTimerOrBlockTask+0x3c>
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d806      	bhi.n	8003eb8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003eaa:	f7fe ffbf 	bl	8002e2c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff9f 	bl	8003df4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003eb6:	e024      	b.n	8003f02 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ebe:	4b13      	ldr	r3, [pc, #76]	@ (8003f0c <prvProcessTimerOrBlockTask+0x90>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <prvProcessTimerOrBlockTask+0x50>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <prvProcessTimerOrBlockTask+0x52>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <prvProcessTimerOrBlockTask+0x94>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4619      	mov	r1, r3
 8003ede:	f7fe fc8d 	bl	80027fc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003ee2:	f7fe ffa3 	bl	8002e2c <xTaskResumeAll>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003eec:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <prvProcessTimerOrBlockTask+0x98>)
 8003eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	f3bf 8f6f 	isb	sy
    }
 8003efc:	e001      	b.n	8003f02 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003efe:	f7fe ff95 	bl	8002e2c <xTaskResumeAll>
    }
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000200 	.word	0x20000200
 8003f10:	20000204 	.word	0x20000204
 8003f14:	e000ed04 	.word	0xe000ed04

08003f18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f20:	4b0e      	ldr	r3, [pc, #56]	@ (8003f5c <prvGetNextExpireTime+0x44>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <prvGetNextExpireTime+0x16>
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	e000      	b.n	8003f30 <prvGetNextExpireTime+0x18>
 8003f2e:	2200      	movs	r2, #0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d105      	bne.n	8003f48 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f3c:	4b07      	ldr	r3, [pc, #28]	@ (8003f5c <prvGetNextExpireTime+0x44>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	e001      	b.n	8003f4c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
    }
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	200001fc 	.word	0x200001fc

08003f60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003f68:	f7ff f860 	bl	800302c <xTaskGetTickCount>
 8003f6c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <prvSampleTimeNow+0x3c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d205      	bcs.n	8003f84 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003f78:	f000 f916 	bl	80041a8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e002      	b.n	8003f8a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f8a:	4a04      	ldr	r2, [pc, #16]	@ (8003f9c <prvSampleTimeNow+0x3c>)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f90:	68fb      	ldr	r3, [r7, #12]
    }
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000020c 	.word	0x2000020c

08003fa0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d812      	bhi.n	8003fec <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	1ad2      	subs	r2, r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e01b      	b.n	8004012 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fda:	4b10      	ldr	r3, [pc, #64]	@ (800401c <prvInsertTimerInActiveList+0x7c>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	f7fe f8a2 	bl	800212e <vListInsert>
 8003fea:	e012      	b.n	8004012 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d206      	bcs.n	8004002 <prvInsertTimerInActiveList+0x62>
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d302      	bcc.n	8004002 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	e007      	b.n	8004012 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004002:	4b07      	ldr	r3, [pc, #28]	@ (8004020 <prvInsertTimerInActiveList+0x80>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3304      	adds	r3, #4
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f7fe f88e 	bl	800212e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004012:	697b      	ldr	r3, [r7, #20]
    }
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000200 	.word	0x20000200
 8004020:	200001fc 	.word	0x200001fc

08004024 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800402a:	e0a9      	b.n	8004180 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f2c0 80a6 	blt.w	8004180 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	3304      	adds	r3, #4
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe f8ab 	bl	80021a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff ff87 	bl	8003f60 <prvSampleTimeNow>
 8004052:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	3b01      	subs	r3, #1
 8004058:	2b08      	cmp	r3, #8
 800405a:	f200 808e 	bhi.w	800417a <prvProcessReceivedCommands+0x156>
 800405e:	a201      	add	r2, pc, #4	@ (adr r2, 8004064 <prvProcessReceivedCommands+0x40>)
 8004060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004064:	08004089 	.word	0x08004089
 8004068:	08004089 	.word	0x08004089
 800406c:	080040f1 	.word	0x080040f1
 8004070:	08004105 	.word	0x08004105
 8004074:	08004151 	.word	0x08004151
 8004078:	08004089 	.word	0x08004089
 800407c:	08004089 	.word	0x08004089
 8004080:	080040f1 	.word	0x080040f1
 8004084:	08004105 	.word	0x08004105
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	b2da      	uxtb	r2, r3
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	18d1      	adds	r1, r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	69f8      	ldr	r0, [r7, #28]
 80040a8:	f7ff ff7a 	bl	8003fa0 <prvInsertTimerInActiveList>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d065      	beq.n	800417e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d009      	beq.n	80040d4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	4413      	add	r3, r2
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4619      	mov	r1, r3
 80040cc:	69f8      	ldr	r0, [r7, #28]
 80040ce:	f7ff fe6f 	bl	8003db0 <prvReloadTimer>
 80040d2:	e008      	b.n	80040e6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	69f8      	ldr	r0, [r7, #28]
 80040ec:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80040ee:	e046      	b.n	800417e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004102:	e03d      	b.n	8004180 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	b2da      	uxtb	r2, r3
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <prvProcessReceivedCommands+0x118>
        __asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	617b      	str	r3, [r7, #20]
    }
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	18d1      	adds	r1, r2, r3
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	69f8      	ldr	r0, [r7, #28]
 800414a:	f7ff ff29 	bl	8003fa0 <prvInsertTimerInActiveList>
                        break;
 800414e:	e017      	b.n	8004180 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 800415e:	69f8      	ldr	r0, [r7, #28]
 8004160:	f000 fc22 	bl	80049a8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004164:	e00c      	b.n	8004180 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	b2da      	uxtb	r2, r3
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004178:	e002      	b.n	8004180 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800417a:	bf00      	nop
 800417c:	e000      	b.n	8004180 <prvProcessReceivedCommands+0x15c>
                        break;
 800417e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004180:	4b08      	ldr	r3, [pc, #32]	@ (80041a4 <prvProcessReceivedCommands+0x180>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f107 0108 	add.w	r1, r7, #8
 8004188:	2200      	movs	r2, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe f93c 	bl	8002408 <xQueueReceive>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	f47f af4a 	bne.w	800402c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000204 	.word	0x20000204

080041a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041ae:	e009      	b.n	80041c4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041b0:	4b0e      	ldr	r3, [pc, #56]	@ (80041ec <prvSwitchTimerLists+0x44>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80041ba:	f04f 31ff 	mov.w	r1, #4294967295
 80041be:	6838      	ldr	r0, [r7, #0]
 80041c0:	f7ff fe18 	bl	8003df4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041c4:	4b09      	ldr	r3, [pc, #36]	@ (80041ec <prvSwitchTimerLists+0x44>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80041ce:	4b07      	ldr	r3, [pc, #28]	@ (80041ec <prvSwitchTimerLists+0x44>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80041d4:	4b06      	ldr	r3, [pc, #24]	@ (80041f0 <prvSwitchTimerLists+0x48>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a04      	ldr	r2, [pc, #16]	@ (80041ec <prvSwitchTimerLists+0x44>)
 80041da:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80041dc:	4a04      	ldr	r2, [pc, #16]	@ (80041f0 <prvSwitchTimerLists+0x48>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6013      	str	r3, [r2, #0]
    }
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200001fc 	.word	0x200001fc
 80041f0:	20000200 	.word	0x20000200

080041f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80041f8:	f000 f9e8 	bl	80045cc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80041fc:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <prvCheckForValidListAndQueue+0x54>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d11d      	bne.n	8004240 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004204:	4811      	ldr	r0, [pc, #68]	@ (800424c <prvCheckForValidListAndQueue+0x58>)
 8004206:	f7fd ff41 	bl	800208c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800420a:	4811      	ldr	r0, [pc, #68]	@ (8004250 <prvCheckForValidListAndQueue+0x5c>)
 800420c:	f7fd ff3e 	bl	800208c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004210:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <prvCheckForValidListAndQueue+0x60>)
 8004212:	4a0e      	ldr	r2, [pc, #56]	@ (800424c <prvCheckForValidListAndQueue+0x58>)
 8004214:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004216:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <prvCheckForValidListAndQueue+0x64>)
 8004218:	4a0d      	ldr	r2, [pc, #52]	@ (8004250 <prvCheckForValidListAndQueue+0x5c>)
 800421a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800421c:	2200      	movs	r2, #0
 800421e:	210c      	movs	r1, #12
 8004220:	200a      	movs	r0, #10
 8004222:	f7fe f879 	bl	8002318 <xQueueGenericCreate>
 8004226:	4603      	mov	r3, r0
 8004228:	4a07      	ldr	r2, [pc, #28]	@ (8004248 <prvCheckForValidListAndQueue+0x54>)
 800422a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800422c:	4b06      	ldr	r3, [pc, #24]	@ (8004248 <prvCheckForValidListAndQueue+0x54>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004234:	4b04      	ldr	r3, [pc, #16]	@ (8004248 <prvCheckForValidListAndQueue+0x54>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4908      	ldr	r1, [pc, #32]	@ (800425c <prvCheckForValidListAndQueue+0x68>)
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe fa86 	bl	800274c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004240:	f000 f9f6 	bl	8004630 <vPortExitCritical>
    }
 8004244:	bf00      	nop
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000204 	.word	0x20000204
 800424c:	200001d4 	.word	0x200001d4
 8004250:	200001e8 	.word	0x200001e8
 8004254:	200001fc 	.word	0x200001fc
 8004258:	20000200 	.word	0x20000200
 800425c:	08006f70 	.word	0x08006f70

08004260 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3b04      	subs	r3, #4
 8004270:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004278:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3b04      	subs	r3, #4
 800427e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f023 0201 	bic.w	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b04      	subs	r3, #4
 800428e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004290:	4a0c      	ldr	r2, [pc, #48]	@ (80042c4 <pxPortInitialiseStack+0x64>)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3b14      	subs	r3, #20
 800429a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3b04      	subs	r3, #4
 80042a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f06f 0202 	mvn.w	r2, #2
 80042ae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3b20      	subs	r3, #32
 80042b4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80042b6:	68fb      	ldr	r3, [r7, #12]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	080042c9 	.word	0x080042c9

080042c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80042d2:	4b13      	ldr	r3, [pc, #76]	@ (8004320 <prvTaskExitError+0x58>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d00b      	beq.n	80042f4 <prvTaskExitError+0x2c>
        __asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	60fb      	str	r3, [r7, #12]
    }
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	e7fd      	b.n	80042f0 <prvTaskExitError+0x28>
        __asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	60bb      	str	r3, [r7, #8]
    }
 8004306:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004308:	bf00      	nop
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0fc      	beq.n	800430a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000010 	.word	0x20000010
	...

08004330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004330:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <pxCurrentTCBConst2>)
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	6808      	ldr	r0, [r1, #0]
 8004336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433a:	f380 8809 	msr	PSP, r0
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f04f 0000 	mov.w	r0, #0
 8004346:	f380 8811 	msr	BASEPRI, r0
 800434a:	4770      	bx	lr
 800434c:	f3af 8000 	nop.w

08004350 <pxCurrentTCBConst2>:
 8004350:	200000d0 	.word	0x200000d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop

08004358 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004358:	4808      	ldr	r0, [pc, #32]	@ (800437c <prvPortStartFirstTask+0x24>)
 800435a:	6800      	ldr	r0, [r0, #0]
 800435c:	6800      	ldr	r0, [r0, #0]
 800435e:	f380 8808 	msr	MSP, r0
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f380 8814 	msr	CONTROL, r0
 800436a:	b662      	cpsie	i
 800436c:	b661      	cpsie	f
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	df00      	svc	0
 8004378:	bf00      	nop
 800437a:	0000      	.short	0x0000
 800437c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop

08004384 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800438a:	4b47      	ldr	r3, [pc, #284]	@ (80044a8 <xPortStartScheduler+0x124>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a47      	ldr	r2, [pc, #284]	@ (80044ac <xPortStartScheduler+0x128>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10b      	bne.n	80043ac <xPortStartScheduler+0x28>
        __asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	613b      	str	r3, [r7, #16]
    }
 80043a6:	bf00      	nop
 80043a8:	bf00      	nop
 80043aa:	e7fd      	b.n	80043a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043ac:	4b3e      	ldr	r3, [pc, #248]	@ (80044a8 <xPortStartScheduler+0x124>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a3f      	ldr	r2, [pc, #252]	@ (80044b0 <xPortStartScheduler+0x12c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10b      	bne.n	80043ce <xPortStartScheduler+0x4a>
        __asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	60fb      	str	r3, [r7, #12]
    }
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	e7fd      	b.n	80043ca <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043ce:	4b39      	ldr	r3, [pc, #228]	@ (80044b4 <xPortStartScheduler+0x130>)
 80043d0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	22ff      	movs	r2, #255	@ 0xff
 80043de:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	4b31      	ldr	r3, [pc, #196]	@ (80044b8 <xPortStartScheduler+0x134>)
 80043f4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043f6:	4b31      	ldr	r3, [pc, #196]	@ (80044bc <xPortStartScheduler+0x138>)
 80043f8:	2207      	movs	r2, #7
 80043fa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043fc:	e009      	b.n	8004412 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80043fe:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <xPortStartScheduler+0x138>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3b01      	subs	r3, #1
 8004404:	4a2d      	ldr	r2, [pc, #180]	@ (80044bc <xPortStartScheduler+0x138>)
 8004406:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	b2db      	uxtb	r3, r3
 8004410:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441a:	2b80      	cmp	r3, #128	@ 0x80
 800441c:	d0ef      	beq.n	80043fe <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800441e:	4b27      	ldr	r3, [pc, #156]	@ (80044bc <xPortStartScheduler+0x138>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1c3 0307 	rsb	r3, r3, #7
 8004426:	2b04      	cmp	r3, #4
 8004428:	d00b      	beq.n	8004442 <xPortStartScheduler+0xbe>
        __asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	60bb      	str	r3, [r7, #8]
    }
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004442:	4b1e      	ldr	r3, [pc, #120]	@ (80044bc <xPortStartScheduler+0x138>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	4a1c      	ldr	r2, [pc, #112]	@ (80044bc <xPortStartScheduler+0x138>)
 800444a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800444c:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <xPortStartScheduler+0x138>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004454:	4a19      	ldr	r2, [pc, #100]	@ (80044bc <xPortStartScheduler+0x138>)
 8004456:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004460:	4b17      	ldr	r3, [pc, #92]	@ (80044c0 <xPortStartScheduler+0x13c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a16      	ldr	r2, [pc, #88]	@ (80044c0 <xPortStartScheduler+0x13c>)
 8004466:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800446a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800446c:	4b14      	ldr	r3, [pc, #80]	@ (80044c0 <xPortStartScheduler+0x13c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a13      	ldr	r2, [pc, #76]	@ (80044c0 <xPortStartScheduler+0x13c>)
 8004472:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004476:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004478:	f000 f968 	bl	800474c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800447c:	4b11      	ldr	r3, [pc, #68]	@ (80044c4 <xPortStartScheduler+0x140>)
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004482:	f000 f987 	bl	8004794 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004486:	4b10      	ldr	r3, [pc, #64]	@ (80044c8 <xPortStartScheduler+0x144>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a0f      	ldr	r2, [pc, #60]	@ (80044c8 <xPortStartScheduler+0x144>)
 800448c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004490:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004492:	f7ff ff61 	bl	8004358 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004496:	f7fe ff07 	bl	80032a8 <vTaskSwitchContext>
    prvTaskExitError();
 800449a:	f7ff ff15 	bl	80042c8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	e000ed00 	.word	0xe000ed00
 80044ac:	410fc271 	.word	0x410fc271
 80044b0:	410fc270 	.word	0x410fc270
 80044b4:	e000e400 	.word	0xe000e400
 80044b8:	20000210 	.word	0x20000210
 80044bc:	20000214 	.word	0x20000214
 80044c0:	e000ed20 	.word	0xe000ed20
 80044c4:	20000010 	.word	0x20000010
 80044c8:	e000ef34 	.word	0xe000ef34

080044cc <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044d2:	4b38      	ldr	r3, [pc, #224]	@ (80045b4 <vInitPrioGroupValue+0xe8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a38      	ldr	r2, [pc, #224]	@ (80045b8 <vInitPrioGroupValue+0xec>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10b      	bne.n	80044f4 <vInitPrioGroupValue+0x28>
        __asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	613b      	str	r3, [r7, #16]
    }
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
 80044f2:	e7fd      	b.n	80044f0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044f4:	4b2f      	ldr	r3, [pc, #188]	@ (80045b4 <vInitPrioGroupValue+0xe8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a30      	ldr	r2, [pc, #192]	@ (80045bc <vInitPrioGroupValue+0xf0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d10b      	bne.n	8004516 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	60fb      	str	r3, [r7, #12]
    }
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	e7fd      	b.n	8004512 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004516:	4b2a      	ldr	r3, [pc, #168]	@ (80045c0 <vInitPrioGroupValue+0xf4>)
 8004518:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	22ff      	movs	r2, #255	@ 0xff
 8004526:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004538:	b2da      	uxtb	r2, r3
 800453a:	4b22      	ldr	r3, [pc, #136]	@ (80045c4 <vInitPrioGroupValue+0xf8>)
 800453c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800453e:	4b22      	ldr	r3, [pc, #136]	@ (80045c8 <vInitPrioGroupValue+0xfc>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004544:	e009      	b.n	800455a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004546:	4b20      	ldr	r3, [pc, #128]	@ (80045c8 <vInitPrioGroupValue+0xfc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	4a1e      	ldr	r2, [pc, #120]	@ (80045c8 <vInitPrioGroupValue+0xfc>)
 800454e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004562:	2b80      	cmp	r3, #128	@ 0x80
 8004564:	d0ef      	beq.n	8004546 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004566:	4b18      	ldr	r3, [pc, #96]	@ (80045c8 <vInitPrioGroupValue+0xfc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1c3 0307 	rsb	r3, r3, #7
 800456e:	2b04      	cmp	r3, #4
 8004570:	d00b      	beq.n	800458a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	60bb      	str	r3, [r7, #8]
    }
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	e7fd      	b.n	8004586 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800458a:	4b0f      	ldr	r3, [pc, #60]	@ (80045c8 <vInitPrioGroupValue+0xfc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	4a0d      	ldr	r2, [pc, #52]	@ (80045c8 <vInitPrioGroupValue+0xfc>)
 8004592:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004594:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <vInitPrioGroupValue+0xfc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800459c:	4a0a      	ldr	r2, [pc, #40]	@ (80045c8 <vInitPrioGroupValue+0xfc>)
 800459e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80045a8:	bf00      	nop
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	e000ed00 	.word	0xe000ed00
 80045b8:	410fc271 	.word	0x410fc271
 80045bc:	410fc270 	.word	0x410fc270
 80045c0:	e000e400 	.word	0xe000e400
 80045c4:	20000210 	.word	0x20000210
 80045c8:	20000214 	.word	0x20000214

080045cc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
        __asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	607b      	str	r3, [r7, #4]
    }
 80045e4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80045e6:	4b10      	ldr	r3, [pc, #64]	@ (8004628 <vPortEnterCritical+0x5c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3301      	adds	r3, #1
 80045ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004628 <vPortEnterCritical+0x5c>)
 80045ee:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80045f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004628 <vPortEnterCritical+0x5c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d110      	bne.n	800461a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045f8:	4b0c      	ldr	r3, [pc, #48]	@ (800462c <vPortEnterCritical+0x60>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <vPortEnterCritical+0x4e>
        __asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	603b      	str	r3, [r7, #0]
    }
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	e7fd      	b.n	8004616 <vPortEnterCritical+0x4a>
    }
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000010 	.word	0x20000010
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004636:	4b12      	ldr	r3, [pc, #72]	@ (8004680 <vPortExitCritical+0x50>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <vPortExitCritical+0x26>
        __asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
    }
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004656:	4b0a      	ldr	r3, [pc, #40]	@ (8004680 <vPortExitCritical+0x50>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3b01      	subs	r3, #1
 800465c:	4a08      	ldr	r2, [pc, #32]	@ (8004680 <vPortExitCritical+0x50>)
 800465e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004660:	4b07      	ldr	r3, [pc, #28]	@ (8004680 <vPortExitCritical+0x50>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <vPortExitCritical+0x44>
 8004668:	2300      	movs	r3, #0
 800466a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004672:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	20000010 	.word	0x20000010
	...

08004690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004690:	f3ef 8009 	mrs	r0, PSP
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	4b15      	ldr	r3, [pc, #84]	@ (80046f0 <pxCurrentTCBConst>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	f01e 0f10 	tst.w	lr, #16
 80046a0:	bf08      	it	eq
 80046a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046aa:	6010      	str	r0, [r2, #0]
 80046ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80046b4:	f380 8811 	msr	BASEPRI, r0
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f7fe fdf2 	bl	80032a8 <vTaskSwitchContext>
 80046c4:	f04f 0000 	mov.w	r0, #0
 80046c8:	f380 8811 	msr	BASEPRI, r0
 80046cc:	bc09      	pop	{r0, r3}
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	6808      	ldr	r0, [r1, #0]
 80046d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d6:	f01e 0f10 	tst.w	lr, #16
 80046da:	bf08      	it	eq
 80046dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046e0:	f380 8809 	msr	PSP, r0
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	f3af 8000 	nop.w

080046f0 <pxCurrentTCBConst>:
 80046f0:	200000d0 	.word	0x200000d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop

080046f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
        __asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	607b      	str	r3, [r7, #4]
    }
 8004710:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004712:	f002 f8b9 	bl	8006888 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004716:	f7fe fcab 	bl	8003070 <xTaskIncrementTick>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d006      	beq.n	800472e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004720:	f002 f910 	bl	8006944 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004724:	4b08      	ldr	r3, [pc, #32]	@ (8004748 <SysTick_Handler+0x50>)
 8004726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	e001      	b.n	8004732 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800472e:	f002 f8ed 	bl	800690c <SEGGER_SYSVIEW_RecordExitISR>
 8004732:	2300      	movs	r3, #0
 8004734:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f383 8811 	msr	BASEPRI, r3
    }
 800473c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004750:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <vPortSetupTimerInterrupt+0x34>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004756:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <vPortSetupTimerInterrupt+0x38>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800475c:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <vPortSetupTimerInterrupt+0x3c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a0a      	ldr	r2, [pc, #40]	@ (800478c <vPortSetupTimerInterrupt+0x40>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	099b      	lsrs	r3, r3, #6
 8004768:	4a09      	ldr	r2, [pc, #36]	@ (8004790 <vPortSetupTimerInterrupt+0x44>)
 800476a:	3b01      	subs	r3, #1
 800476c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800476e:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <vPortSetupTimerInterrupt+0x34>)
 8004770:	2207      	movs	r2, #7
 8004772:	601a      	str	r2, [r3, #0]
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	e000e010 	.word	0xe000e010
 8004784:	e000e018 	.word	0xe000e018
 8004788:	20000000 	.word	0x20000000
 800478c:	10624dd3 	.word	0x10624dd3
 8004790:	e000e014 	.word	0xe000e014

08004794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004794:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80047a4 <vPortEnableVFP+0x10>
 8004798:	6801      	ldr	r1, [r0, #0]
 800479a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800479e:	6001      	str	r1, [r0, #0]
 80047a0:	4770      	bx	lr
 80047a2:	0000      	.short	0x0000
 80047a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop

080047ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80047b2:	f3ef 8305 	mrs	r3, IPSR
 80047b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b0f      	cmp	r3, #15
 80047bc:	d915      	bls.n	80047ea <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047be:	4a18      	ldr	r2, [pc, #96]	@ (8004820 <vPortValidateInterruptPriority+0x74>)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047c8:	4b16      	ldr	r3, [pc, #88]	@ (8004824 <vPortValidateInterruptPriority+0x78>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	7afa      	ldrb	r2, [r7, #11]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d20b      	bcs.n	80047ea <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	607b      	str	r3, [r7, #4]
    }
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	e7fd      	b.n	80047e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004828 <vPortValidateInterruptPriority+0x7c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80047f2:	4b0e      	ldr	r3, [pc, #56]	@ (800482c <vPortValidateInterruptPriority+0x80>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d90b      	bls.n	8004812 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	603b      	str	r3, [r7, #0]
    }
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	e7fd      	b.n	800480e <vPortValidateInterruptPriority+0x62>
    }
 8004812:	bf00      	nop
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000e3f0 	.word	0xe000e3f0
 8004824:	20000210 	.word	0x20000210
 8004828:	e000ed0c 	.word	0xe000ed0c
 800482c:	20000214 	.word	0x20000214

08004830 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	@ 0x28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800483c:	f7fe fae8 	bl	8002e10 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004840:	4b54      	ldr	r3, [pc, #336]	@ (8004994 <pvPortMalloc+0x164>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004848:	f000 f90c 	bl	8004a64 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d012      	beq.n	8004878 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004852:	2208      	movs	r2, #8
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	3308      	adds	r3, #8
 800485e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	43db      	mvns	r3, r3
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	429a      	cmp	r2, r3
 8004868:	d804      	bhi.n	8004874 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4413      	add	r3, r2
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	e001      	b.n	8004878 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	db71      	blt.n	8004962 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d06e      	beq.n	8004962 <pvPortMalloc+0x132>
 8004884:	4b44      	ldr	r3, [pc, #272]	@ (8004998 <pvPortMalloc+0x168>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	429a      	cmp	r2, r3
 800488c:	d869      	bhi.n	8004962 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800488e:	4b43      	ldr	r3, [pc, #268]	@ (800499c <pvPortMalloc+0x16c>)
 8004890:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004892:	4b42      	ldr	r3, [pc, #264]	@ (800499c <pvPortMalloc+0x16c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004898:	e004      	b.n	80048a4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d903      	bls.n	80048b6 <pvPortMalloc+0x86>
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f1      	bne.n	800489a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80048b6:	4b37      	ldr	r3, [pc, #220]	@ (8004994 <pvPortMalloc+0x164>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048bc:	429a      	cmp	r2, r3
 80048be:	d050      	beq.n	8004962 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2208      	movs	r2, #8
 80048c6:	4413      	add	r3, r2
 80048c8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	1ad2      	subs	r2, r2, r3
 80048da:	2308      	movs	r3, #8
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	429a      	cmp	r2, r3
 80048e0:	d920      	bls.n	8004924 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4413      	add	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00b      	beq.n	800490c <pvPortMalloc+0xdc>
        __asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	613b      	str	r3, [r7, #16]
    }
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800490c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	1ad2      	subs	r2, r2, r3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800491e:	6978      	ldr	r0, [r7, #20]
 8004920:	f000 f8fc 	bl	8004b1c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004924:	4b1c      	ldr	r3, [pc, #112]	@ (8004998 <pvPortMalloc+0x168>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	4a1a      	ldr	r2, [pc, #104]	@ (8004998 <pvPortMalloc+0x168>)
 8004930:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004932:	4b19      	ldr	r3, [pc, #100]	@ (8004998 <pvPortMalloc+0x168>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4b1a      	ldr	r3, [pc, #104]	@ (80049a0 <pvPortMalloc+0x170>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d203      	bcs.n	8004946 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800493e:	4b16      	ldr	r3, [pc, #88]	@ (8004998 <pvPortMalloc+0x168>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a17      	ldr	r2, [pc, #92]	@ (80049a0 <pvPortMalloc+0x170>)
 8004944:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004958:	4b12      	ldr	r3, [pc, #72]	@ (80049a4 <pvPortMalloc+0x174>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3301      	adds	r3, #1
 800495e:	4a11      	ldr	r2, [pc, #68]	@ (80049a4 <pvPortMalloc+0x174>)
 8004960:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004962:	f7fe fa63 	bl	8002e2c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00b      	beq.n	8004988 <pvPortMalloc+0x158>
        __asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	60fb      	str	r3, [r7, #12]
    }
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <pvPortMalloc+0x154>
    return pvReturn;
 8004988:	69fb      	ldr	r3, [r7, #28]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3728      	adds	r7, #40	@ 0x28
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20012e20 	.word	0x20012e20
 8004998:	20012e24 	.word	0x20012e24
 800499c:	20012e18 	.word	0x20012e18
 80049a0:	20012e28 	.word	0x20012e28
 80049a4:	20012e2c 	.word	0x20012e2c

080049a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d04b      	beq.n	8004a52 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80049ba:	2308      	movs	r3, #8
 80049bc:	425b      	negs	r3, r3
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4413      	add	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	db0b      	blt.n	80049e8 <vPortFree+0x40>
        __asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	60fb      	str	r3, [r7, #12]
    }
 80049e2:	bf00      	nop
 80049e4:	bf00      	nop
 80049e6:	e7fd      	b.n	80049e4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <vPortFree+0x60>
        __asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	60bb      	str	r3, [r7, #8]
    }
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	e7fd      	b.n	8004a04 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	0fdb      	lsrs	r3, r3, #31
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01c      	beq.n	8004a52 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d118      	bne.n	8004a52 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004a2c:	f7fe f9f0 	bl	8002e10 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	4b09      	ldr	r3, [pc, #36]	@ (8004a5c <vPortFree+0xb4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4413      	add	r3, r2
 8004a3a:	4a08      	ldr	r2, [pc, #32]	@ (8004a5c <vPortFree+0xb4>)
 8004a3c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a3e:	6938      	ldr	r0, [r7, #16]
 8004a40:	f000 f86c 	bl	8004b1c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004a44:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <vPortFree+0xb8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	4a05      	ldr	r2, [pc, #20]	@ (8004a60 <vPortFree+0xb8>)
 8004a4c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004a4e:	f7fe f9ed 	bl	8002e2c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004a52:	bf00      	nop
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20012e24 	.word	0x20012e24
 8004a60:	20012e30 	.word	0x20012e30

08004a64 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a6a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004a6e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004a70:	4b25      	ldr	r3, [pc, #148]	@ (8004b08 <prvHeapInit+0xa4>)
 8004a72:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3307      	adds	r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0307 	bic.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	4a1d      	ldr	r2, [pc, #116]	@ (8004b08 <prvHeapInit+0xa4>)
 8004a94:	4413      	add	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004b0c <prvHeapInit+0xa8>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b0c <prvHeapInit+0xa8>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4413      	add	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0307 	bic.w	r3, r3, #7
 8004abe:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a13      	ldr	r2, [pc, #76]	@ (8004b10 <prvHeapInit+0xac>)
 8004ac4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004ac6:	4b12      	ldr	r3, [pc, #72]	@ (8004b10 <prvHeapInit+0xac>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004ace:	4b10      	ldr	r3, [pc, #64]	@ (8004b10 <prvHeapInit+0xac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b10 <prvHeapInit+0xac>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a08      	ldr	r2, [pc, #32]	@ (8004b14 <prvHeapInit+0xb0>)
 8004af2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a07      	ldr	r2, [pc, #28]	@ (8004b18 <prvHeapInit+0xb4>)
 8004afa:	6013      	str	r3, [r2, #0]
}
 8004afc:	bf00      	nop
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	20000218 	.word	0x20000218
 8004b0c:	20012e18 	.word	0x20012e18
 8004b10:	20012e20 	.word	0x20012e20
 8004b14:	20012e28 	.word	0x20012e28
 8004b18:	20012e24 	.word	0x20012e24

08004b1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b24:	4b28      	ldr	r3, [pc, #160]	@ (8004bc8 <prvInsertBlockIntoFreeList+0xac>)
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	e002      	b.n	8004b30 <prvInsertBlockIntoFreeList+0x14>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d8f7      	bhi.n	8004b2a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4413      	add	r3, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d108      	bne.n	8004b5e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	441a      	add	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	441a      	add	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d118      	bne.n	8004ba4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b15      	ldr	r3, [pc, #84]	@ (8004bcc <prvInsertBlockIntoFreeList+0xb0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d00d      	beq.n	8004b9a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	441a      	add	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e008      	b.n	8004bac <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bcc <prvInsertBlockIntoFreeList+0xb0>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e003      	b.n	8004bac <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d002      	beq.n	8004bba <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20012e18 	.word	0x20012e18
 8004bcc:	20012e20 	.word	0x20012e20

08004bd0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004bd4:	4803      	ldr	r0, [pc, #12]	@ (8004be4 <_cbSendSystemDesc+0x14>)
 8004bd6:	f001 fe01 	bl	80067dc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004bda:	4803      	ldr	r0, [pc, #12]	@ (8004be8 <_cbSendSystemDesc+0x18>)
 8004bdc:	f001 fdfe 	bl	80067dc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004be0:	bf00      	nop
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	08006f78 	.word	0x08006f78
 8004be8:	08006fbc 	.word	0x08006fbc

08004bec <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004bf0:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <SEGGER_SYSVIEW_Conf+0x20>)
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	4b05      	ldr	r3, [pc, #20]	@ (8004c0c <SEGGER_SYSVIEW_Conf+0x20>)
 8004bf6:	6819      	ldr	r1, [r3, #0]
 8004bf8:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <SEGGER_SYSVIEW_Conf+0x24>)
 8004bfa:	4a06      	ldr	r2, [pc, #24]	@ (8004c14 <SEGGER_SYSVIEW_Conf+0x28>)
 8004bfc:	f001 f96c 	bl	8005ed8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004c00:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004c04:	f001 f9ac 	bl	8005f60 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004c08:	bf00      	nop
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	08004bd1 	.word	0x08004bd1
 8004c14:	0800705c 	.word	0x0800705c

08004c18 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	e033      	b.n	8004c8c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004c24:	491e      	ldr	r1, [pc, #120]	@ (8004ca0 <_cbSendTaskList+0x88>)
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	491a      	ldr	r1, [pc, #104]	@ (8004ca0 <_cbSendTaskList+0x88>)
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	3304      	adds	r3, #4
 8004c44:	6819      	ldr	r1, [r3, #0]
 8004c46:	4c16      	ldr	r4, [pc, #88]	@ (8004ca0 <_cbSendTaskList+0x88>)
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4423      	add	r3, r4
 8004c54:	3308      	adds	r3, #8
 8004c56:	681c      	ldr	r4, [r3, #0]
 8004c58:	4d11      	ldr	r5, [pc, #68]	@ (8004ca0 <_cbSendTaskList+0x88>)
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	442b      	add	r3, r5
 8004c66:	330c      	adds	r3, #12
 8004c68:	681d      	ldr	r5, [r3, #0]
 8004c6a:	4e0d      	ldr	r6, [pc, #52]	@ (8004ca0 <_cbSendTaskList+0x88>)
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4433      	add	r3, r6
 8004c78:	3310      	adds	r3, #16
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	462b      	mov	r3, r5
 8004c80:	4622      	mov	r2, r4
 8004c82:	f000 f979 	bl	8004f78 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	607b      	str	r3, [r7, #4]
 8004c8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ca4 <_cbSendTaskList+0x8c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d3c6      	bcc.n	8004c24 <_cbSendTaskList+0xc>
  }
}
 8004c96:	bf00      	nop
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca0:	20012e34 	.word	0x20012e34
 8004ca4:	20012ed4 	.word	0x20012ed4

08004ca8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004cb0:	f7fe f9cc 	bl	800304c <xTaskGetTickCountFromISR>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	469a      	mov	sl, r3
 8004cba:	4693      	mov	fp, r2
 8004cbc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	f04f 0a00 	mov.w	sl, #0
 8004ccc:	f04f 0b00 	mov.w	fp, #0
 8004cd0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004cd4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004cd8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004cdc:	4652      	mov	r2, sl
 8004cde:	465b      	mov	r3, fp
 8004ce0:	1a14      	subs	r4, r2, r0
 8004ce2:	eb63 0501 	sbc.w	r5, r3, r1
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	00ab      	lsls	r3, r5, #2
 8004cf0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004cf4:	00a2      	lsls	r2, r4, #2
 8004cf6:	4614      	mov	r4, r2
 8004cf8:	461d      	mov	r5, r3
 8004cfa:	eb14 0800 	adds.w	r8, r4, r0
 8004cfe:	eb45 0901 	adc.w	r9, r5, r1
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d16:	4690      	mov	r8, r2
 8004d18:	4699      	mov	r9, r3
 8004d1a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004d30 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004d3e:	2205      	movs	r2, #5
 8004d40:	492b      	ldr	r1, [pc, #172]	@ (8004df0 <SYSVIEW_AddTask+0xc0>)
 8004d42:	68b8      	ldr	r0, [r7, #8]
 8004d44:	f002 f858 	bl	8006df8 <memcmp>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d04b      	beq.n	8004de6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004d4e:	4b29      	ldr	r3, [pc, #164]	@ (8004df4 <SYSVIEW_AddTask+0xc4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b07      	cmp	r3, #7
 8004d54:	d903      	bls.n	8004d5e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004d56:	4828      	ldr	r0, [pc, #160]	@ (8004df8 <SYSVIEW_AddTask+0xc8>)
 8004d58:	f001 fff2 	bl	8006d40 <SEGGER_SYSVIEW_Warn>
    return;
 8004d5c:	e044      	b.n	8004de8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d5e:	4b25      	ldr	r3, [pc, #148]	@ (8004df4 <SYSVIEW_AddTask+0xc4>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4926      	ldr	r1, [pc, #152]	@ (8004dfc <SYSVIEW_AddTask+0xcc>)
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d72:	4b20      	ldr	r3, [pc, #128]	@ (8004df4 <SYSVIEW_AddTask+0xc4>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4921      	ldr	r1, [pc, #132]	@ (8004dfc <SYSVIEW_AddTask+0xcc>)
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	3304      	adds	r3, #4
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d88:	4b1a      	ldr	r3, [pc, #104]	@ (8004df4 <SYSVIEW_AddTask+0xc4>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	491b      	ldr	r1, [pc, #108]	@ (8004dfc <SYSVIEW_AddTask+0xcc>)
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	3308      	adds	r3, #8
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d9e:	4b15      	ldr	r3, [pc, #84]	@ (8004df4 <SYSVIEW_AddTask+0xc4>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4916      	ldr	r1, [pc, #88]	@ (8004dfc <SYSVIEW_AddTask+0xcc>)
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	330c      	adds	r3, #12
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004db4:	4b0f      	ldr	r3, [pc, #60]	@ (8004df4 <SYSVIEW_AddTask+0xc4>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4910      	ldr	r1, [pc, #64]	@ (8004dfc <SYSVIEW_AddTask+0xcc>)
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	3310      	adds	r3, #16
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004dca:	4b0a      	ldr	r3, [pc, #40]	@ (8004df4 <SYSVIEW_AddTask+0xc4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	4a08      	ldr	r2, [pc, #32]	@ (8004df4 <SYSVIEW_AddTask+0xc4>)
 8004dd2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f8ca 	bl	8004f78 <SYSVIEW_SendTaskInfo>
 8004de4:	e000      	b.n	8004de8 <SYSVIEW_AddTask+0xb8>
    return;
 8004de6:	bf00      	nop

}
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	08006fcc 	.word	0x08006fcc
 8004df4:	20012ed4 	.word	0x20012ed4
 8004df8:	08006fd4 	.word	0x08006fd4
 8004dfc:	20012e34 	.word	0x20012e34

08004e00 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004e08:	4b59      	ldr	r3, [pc, #356]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80ab 	beq.w	8004f68 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	e00d      	b.n	8004e34 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004e18:	4956      	ldr	r1, [pc, #344]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d008      	beq.n	8004e40 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3301      	adds	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	4b4e      	ldr	r3, [pc, #312]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d3ec      	bcc.n	8004e18 <SYSVIEW_DeleteTask+0x18>
 8004e3e:	e000      	b.n	8004e42 <SYSVIEW_DeleteTask+0x42>
      break;
 8004e40:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004e42:	4b4b      	ldr	r3, [pc, #300]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d111      	bne.n	8004e72 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4a46      	ldr	r2, [pc, #280]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004e5a:	4413      	add	r3, r2
 8004e5c:	2214      	movs	r2, #20
 8004e5e:	2100      	movs	r1, #0
 8004e60:	4618      	mov	r0, r3
 8004e62:	f001 ffd9 	bl	8006e18 <memset>
    _NumTasks--;
 8004e66:	4b42      	ldr	r3, [pc, #264]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	4a40      	ldr	r2, [pc, #256]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	e07b      	b.n	8004f6a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004e72:	4b3f      	ldr	r3, [pc, #252]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d276      	bcs.n	8004f6a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	1e5a      	subs	r2, r3, #1
 8004e82:	493c      	ldr	r1, [pc, #240]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	4838      	ldr	r0, [pc, #224]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4403      	add	r3, r0
 8004e9e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004ea0:	4b33      	ldr	r3, [pc, #204]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	1e5a      	subs	r2, r3, #1
 8004ea6:	4933      	ldr	r1, [pc, #204]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	6819      	ldr	r1, [r3, #0]
 8004eb6:	482f      	ldr	r0, [pc, #188]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4403      	add	r3, r0
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004ec8:	4b29      	ldr	r3, [pc, #164]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	1e5a      	subs	r2, r3, #1
 8004ece:	4929      	ldr	r1, [pc, #164]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	3308      	adds	r3, #8
 8004edc:	6819      	ldr	r1, [r3, #0]
 8004ede:	4825      	ldr	r0, [pc, #148]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4403      	add	r3, r0
 8004eec:	3308      	adds	r3, #8
 8004eee:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	1e5a      	subs	r2, r3, #1
 8004ef6:	491f      	ldr	r1, [pc, #124]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	330c      	adds	r3, #12
 8004f04:	6819      	ldr	r1, [r3, #0]
 8004f06:	481b      	ldr	r0, [pc, #108]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4403      	add	r3, r0
 8004f14:	330c      	adds	r3, #12
 8004f16:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004f18:	4b15      	ldr	r3, [pc, #84]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	4915      	ldr	r1, [pc, #84]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	3310      	adds	r3, #16
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	4811      	ldr	r0, [pc, #68]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4403      	add	r3, r0
 8004f3c:	3310      	adds	r3, #16
 8004f3e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004f40:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	1e5a      	subs	r2, r3, #1
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4a09      	ldr	r2, [pc, #36]	@ (8004f74 <SYSVIEW_DeleteTask+0x174>)
 8004f50:	4413      	add	r3, r2
 8004f52:	2214      	movs	r2, #20
 8004f54:	2100      	movs	r1, #0
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 ff5e 	bl	8006e18 <memset>
    _NumTasks--;
 8004f5c:	4b04      	ldr	r3, [pc, #16]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	4a03      	ldr	r2, [pc, #12]	@ (8004f70 <SYSVIEW_DeleteTask+0x170>)
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e000      	b.n	8004f6a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8004f68:	bf00      	nop
  }
}
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20012ed4 	.word	0x20012ed4
 8004f74:	20012e34 	.word	0x20012e34

08004f78 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	@ 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	2214      	movs	r2, #20
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f001 ff42 	bl	8006e18 <memset>
  TaskInfo.TaskID     = TaskID;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004fa8:	f107 0314 	add.w	r3, r7, #20
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 fb1d 	bl	80065ec <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004fb2:	bf00      	nop
 8004fb4:	3728      	adds	r7, #40	@ 0x28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004fc2:	4b24      	ldr	r3, [pc, #144]	@ (8005054 <_DoInit+0x98>)
 8004fc4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2203      	movs	r2, #3
 8004fca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2203      	movs	r2, #3
 8004fd0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a20      	ldr	r2, [pc, #128]	@ (8005058 <_DoInit+0x9c>)
 8004fd6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a20      	ldr	r2, [pc, #128]	@ (800505c <_DoInit+0xa0>)
 8004fdc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fe4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a17      	ldr	r2, [pc, #92]	@ (8005058 <_DoInit+0x9c>)
 8004ffc:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a17      	ldr	r2, [pc, #92]	@ (8005060 <_DoInit+0xa4>)
 8005002:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2210      	movs	r2, #16
 8005008:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3307      	adds	r3, #7
 8005020:	4a10      	ldr	r2, [pc, #64]	@ (8005064 <_DoInit+0xa8>)
 8005022:	6810      	ldr	r0, [r2, #0]
 8005024:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005026:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a0e      	ldr	r2, [pc, #56]	@ (8005068 <_DoInit+0xac>)
 800502e:	6810      	ldr	r0, [r2, #0]
 8005030:	6018      	str	r0, [r3, #0]
 8005032:	8891      	ldrh	r1, [r2, #4]
 8005034:	7992      	ldrb	r2, [r2, #6]
 8005036:	8099      	strh	r1, [r3, #4]
 8005038:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800503a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005044:	f3bf 8f5f 	dmb	sy
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	20012ed8 	.word	0x20012ed8
 8005058:	08007024 	.word	0x08007024
 800505c:	20012f80 	.word	0x20012f80
 8005060:	20013380 	.word	0x20013380
 8005064:	08007030 	.word	0x08007030
 8005068:	08007034 	.word	0x08007034

0800506c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b08c      	sub	sp, #48	@ 0x30
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005078:	4b3e      	ldr	r3, [pc, #248]	@ (8005174 <SEGGER_RTT_ReadNoLock+0x108>)
 800507a:	623b      	str	r3, [r7, #32]
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <SEGGER_RTT_ReadNoLock+0x1e>
 8005086:	f7ff ff99 	bl	8004fbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4613      	mov	r3, r2
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	4413      	add	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	3360      	adds	r3, #96	@ 0x60
 8005096:	4a37      	ldr	r2, [pc, #220]	@ (8005174 <SEGGER_RTT_ReadNoLock+0x108>)
 8005098:	4413      	add	r3, r2
 800509a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80050ac:	2300      	movs	r3, #0
 80050ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80050b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d92b      	bls.n	8005110 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4293      	cmp	r3, r2
 80050c8:	bf28      	it	cs
 80050ca:	4613      	movcs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d4:	4413      	add	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	6939      	ldr	r1, [r7, #16]
 80050dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050de:	f001 fec7 	bl	8006e70 <memcpy>
    NumBytesRead += NumBytesRem;
 80050e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4413      	add	r3, r2
 80050e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80050ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	4413      	add	r3, r2
 80050f0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	4413      	add	r3, r2
 8005100:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005108:	429a      	cmp	r2, r3
 800510a:	d101      	bne.n	8005110 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800510c:	2300      	movs	r3, #0
 800510e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4293      	cmp	r3, r2
 800511e:	bf28      	it	cs
 8005120:	4613      	movcs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d019      	beq.n	800515e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005130:	4413      	add	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	6939      	ldr	r1, [r7, #16]
 8005138:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800513a:	f001 fe99 	bl	8006e70 <memcpy>
    NumBytesRead += NumBytesRem;
 800513e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	4413      	add	r3, r2
 8005144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4413      	add	r3, r2
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4413      	add	r3, r2
 800515c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800515e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005168:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800516a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800516c:	4618      	mov	r0, r3
 800516e:	3730      	adds	r7, #48	@ 0x30
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20012ed8 	.word	0x20012ed8

08005178 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005186:	4b3d      	ldr	r3, [pc, #244]	@ (800527c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005194:	f7ff ff12 	bl	8004fbc <_DoInit>
  SEGGER_RTT_LOCK();
 8005198:	f3ef 8311 	mrs	r3, BASEPRI
 800519c:	f04f 0120 	mov.w	r1, #32
 80051a0:	f381 8811 	msr	BASEPRI, r1
 80051a4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051a6:	4b35      	ldr	r3, [pc, #212]	@ (800527c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051a8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80051ae:	6939      	ldr	r1, [r7, #16]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	4613      	mov	r3, r2
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4413      	add	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	440b      	add	r3, r1
 80051be:	3304      	adds	r3, #4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d008      	beq.n	80051d8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	3301      	adds	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	dbeb      	blt.n	80051ae <SEGGER_RTT_AllocUpBuffer+0x36>
 80051d6:	e000      	b.n	80051da <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80051d8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	da3f      	bge.n	8005264 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80051e4:	6939      	ldr	r1, [r7, #16]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	4613      	mov	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4413      	add	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	440b      	add	r3, r1
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80051f8:	6939      	ldr	r1, [r7, #16]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	4613      	mov	r3, r2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	4413      	add	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	440b      	add	r3, r1
 8005208:	3304      	adds	r3, #4
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800520e:	6939      	ldr	r1, [r7, #16]
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	4613      	mov	r3, r2
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	4413      	add	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	440b      	add	r3, r1
 800521c:	3320      	adds	r3, #32
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005222:	6939      	ldr	r1, [r7, #16]
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	4613      	mov	r3, r2
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4413      	add	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	440b      	add	r3, r1
 8005230:	3328      	adds	r3, #40	@ 0x28
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005236:	6939      	ldr	r1, [r7, #16]
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	4613      	mov	r3, r2
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	4413      	add	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	440b      	add	r3, r1
 8005244:	3324      	adds	r3, #36	@ 0x24
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800524a:	6939      	ldr	r1, [r7, #16]
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	4613      	mov	r3, r2
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	4413      	add	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	440b      	add	r3, r1
 8005258:	332c      	adds	r3, #44	@ 0x2c
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800525e:	f3bf 8f5f 	dmb	sy
 8005262:	e002      	b.n	800526a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005264:	f04f 33ff 	mov.w	r3, #4294967295
 8005268:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005270:	69fb      	ldr	r3, [r7, #28]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20012ed8 	.word	0x20012ed8

08005280 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800528e:	4b33      	ldr	r3, [pc, #204]	@ (800535c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800529c:	f7ff fe8e 	bl	8004fbc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052a0:	4b2e      	ldr	r3, [pc, #184]	@ (800535c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80052a2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	461a      	mov	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d24d      	bcs.n	800534c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80052b0:	f3ef 8311 	mrs	r3, BASEPRI
 80052b4:	f04f 0120 	mov.w	r1, #32
 80052b8:	f381 8811 	msr	BASEPRI, r1
 80052bc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d031      	beq.n	8005328 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80052c4:	6979      	ldr	r1, [r7, #20]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4613      	mov	r3, r2
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	4413      	add	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	440b      	add	r3, r1
 80052d2:	3360      	adds	r3, #96	@ 0x60
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80052d8:	6979      	ldr	r1, [r7, #20]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4613      	mov	r3, r2
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	4413      	add	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	440b      	add	r3, r1
 80052e6:	3364      	adds	r3, #100	@ 0x64
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80052ec:	6979      	ldr	r1, [r7, #20]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4613      	mov	r3, r2
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4413      	add	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	440b      	add	r3, r1
 80052fa:	3368      	adds	r3, #104	@ 0x68
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005300:	6979      	ldr	r1, [r7, #20]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4613      	mov	r3, r2
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	4413      	add	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	440b      	add	r3, r1
 800530e:	3370      	adds	r3, #112	@ 0x70
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005314:	6979      	ldr	r1, [r7, #20]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4613      	mov	r3, r2
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	4413      	add	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	440b      	add	r3, r1
 8005322:	336c      	adds	r3, #108	@ 0x6c
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005328:	6979      	ldr	r1, [r7, #20]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4613      	mov	r3, r2
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	4413      	add	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	440b      	add	r3, r1
 8005336:	3374      	adds	r3, #116	@ 0x74
 8005338:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800533a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800533c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	e002      	b.n	8005352 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800534c:	f04f 33ff 	mov.w	r3, #4294967295
 8005350:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005352:	69fb      	ldr	r3, [r7, #28]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3720      	adds	r7, #32
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	20012ed8 	.word	0x20012ed8

08005360 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005370:	e002      	b.n	8005378 <_EncodeStr+0x18>
    Len++;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3301      	adds	r3, #1
 8005376:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4413      	add	r3, r2
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f6      	bne.n	8005372 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	429a      	cmp	r2, r3
 800538a:	d901      	bls.n	8005390 <_EncodeStr+0x30>
    Len = Limit;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2bfe      	cmp	r3, #254	@ 0xfe
 8005394:	d806      	bhi.n	80053a4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	60fa      	str	r2, [r7, #12]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	e011      	b.n	80053c8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	60fa      	str	r2, [r7, #12]
 80053aa:	22ff      	movs	r2, #255	@ 0xff
 80053ac:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	60fa      	str	r2, [r7, #12]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	0a19      	lsrs	r1, r3, #8
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	60fa      	str	r2, [r7, #12]
 80053c4:	b2ca      	uxtb	r2, r1
 80053c6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053cc:	e00a      	b.n	80053e4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	1c53      	adds	r3, r2, #1
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1c59      	adds	r1, r3, #1
 80053d8:	60f9      	str	r1, [r7, #12]
 80053da:	7812      	ldrb	r2, [r2, #0]
 80053dc:	701a      	strb	r2, [r3, #0]
    n++;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	3301      	adds	r3, #1
 80053e2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d3f0      	bcc.n	80053ce <_EncodeStr+0x6e>
  }
  return pPayload;
 80053ec:	68fb      	ldr	r3, [r7, #12]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3304      	adds	r3, #4
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800541a:	4b35      	ldr	r3, [pc, #212]	@ (80054f0 <_HandleIncomingPacket+0xdc>)
 800541c:	7e1b      	ldrb	r3, [r3, #24]
 800541e:	4618      	mov	r0, r3
 8005420:	1cfb      	adds	r3, r7, #3
 8005422:	2201      	movs	r2, #1
 8005424:	4619      	mov	r1, r3
 8005426:	f7ff fe21 	bl	800506c <SEGGER_RTT_ReadNoLock>
 800542a:	4603      	mov	r3, r0
 800542c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	dd59      	ble.n	80054e8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	2b80      	cmp	r3, #128	@ 0x80
 8005438:	d032      	beq.n	80054a0 <_HandleIncomingPacket+0x8c>
 800543a:	2b80      	cmp	r3, #128	@ 0x80
 800543c:	dc42      	bgt.n	80054c4 <_HandleIncomingPacket+0xb0>
 800543e:	2b07      	cmp	r3, #7
 8005440:	dc16      	bgt.n	8005470 <_HandleIncomingPacket+0x5c>
 8005442:	2b00      	cmp	r3, #0
 8005444:	dd3e      	ble.n	80054c4 <_HandleIncomingPacket+0xb0>
 8005446:	3b01      	subs	r3, #1
 8005448:	2b06      	cmp	r3, #6
 800544a:	d83b      	bhi.n	80054c4 <_HandleIncomingPacket+0xb0>
 800544c:	a201      	add	r2, pc, #4	@ (adr r2, 8005454 <_HandleIncomingPacket+0x40>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	08005477 	.word	0x08005477
 8005458:	0800547d 	.word	0x0800547d
 800545c:	08005483 	.word	0x08005483
 8005460:	08005489 	.word	0x08005489
 8005464:	0800548f 	.word	0x0800548f
 8005468:	08005495 	.word	0x08005495
 800546c:	0800549b 	.word	0x0800549b
 8005470:	2b7f      	cmp	r3, #127	@ 0x7f
 8005472:	d034      	beq.n	80054de <_HandleIncomingPacket+0xca>
 8005474:	e026      	b.n	80054c4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005476:	f000 ff3f 	bl	80062f8 <SEGGER_SYSVIEW_Start>
      break;
 800547a:	e035      	b.n	80054e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800547c:	f000 fff6 	bl	800646c <SEGGER_SYSVIEW_Stop>
      break;
 8005480:	e032      	b.n	80054e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005482:	f001 f9cf 	bl	8006824 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005486:	e02f      	b.n	80054e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005488:	f001 f994 	bl	80067b4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800548c:	e02c      	b.n	80054e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800548e:	f001 f813 	bl	80064b8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005492:	e029      	b.n	80054e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005494:	f001 fc02 	bl	8006c9c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005498:	e026      	b.n	80054e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800549a:	f001 fbe1 	bl	8006c60 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800549e:	e023      	b.n	80054e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054a0:	4b13      	ldr	r3, [pc, #76]	@ (80054f0 <_HandleIncomingPacket+0xdc>)
 80054a2:	7e1b      	ldrb	r3, [r3, #24]
 80054a4:	4618      	mov	r0, r3
 80054a6:	1cfb      	adds	r3, r7, #3
 80054a8:	2201      	movs	r2, #1
 80054aa:	4619      	mov	r1, r3
 80054ac:	f7ff fdde 	bl	800506c <SEGGER_RTT_ReadNoLock>
 80054b0:	4603      	mov	r3, r0
 80054b2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	dd13      	ble.n	80054e2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	4618      	mov	r0, r3
 80054be:	f001 fb4f 	bl	8006b60 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80054c2:	e00e      	b.n	80054e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	b25b      	sxtb	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	da0c      	bge.n	80054e6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054cc:	4b08      	ldr	r3, [pc, #32]	@ (80054f0 <_HandleIncomingPacket+0xdc>)
 80054ce:	7e1b      	ldrb	r3, [r3, #24]
 80054d0:	4618      	mov	r0, r3
 80054d2:	1cfb      	adds	r3, r7, #3
 80054d4:	2201      	movs	r2, #1
 80054d6:	4619      	mov	r1, r3
 80054d8:	f7ff fdc8 	bl	800506c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80054dc:	e003      	b.n	80054e6 <_HandleIncomingPacket+0xd2>
      break;
 80054de:	bf00      	nop
 80054e0:	e002      	b.n	80054e8 <_HandleIncomingPacket+0xd4>
      break;
 80054e2:	bf00      	nop
 80054e4:	e000      	b.n	80054e8 <_HandleIncomingPacket+0xd4>
      break;
 80054e6:	bf00      	nop
    }
  }
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	20014398 	.word	0x20014398

080054f4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08c      	sub	sp, #48	@ 0x30
 80054f8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80054fa:	2301      	movs	r3, #1
 80054fc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80054fe:	1d3b      	adds	r3, r7, #4
 8005500:	3301      	adds	r3, #1
 8005502:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005508:	4b31      	ldr	r3, [pc, #196]	@ (80055d0 <_TrySendOverflowPacket+0xdc>)
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800550e:	e00b      	b.n	8005528 <_TrySendOverflowPacket+0x34>
 8005510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005512:	b2da      	uxtb	r2, r3
 8005514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005516:	1c59      	adds	r1, r3, #1
 8005518:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800551a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005524:	09db      	lsrs	r3, r3, #7
 8005526:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552a:	2b7f      	cmp	r3, #127	@ 0x7f
 800552c:	d8f0      	bhi.n	8005510 <_TrySendOverflowPacket+0x1c>
 800552e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800553e:	4b25      	ldr	r3, [pc, #148]	@ (80055d4 <_TrySendOverflowPacket+0xe0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005544:	4b22      	ldr	r3, [pc, #136]	@ (80055d0 <_TrySendOverflowPacket+0xdc>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	623b      	str	r3, [r7, #32]
 8005556:	e00b      	b.n	8005570 <_TrySendOverflowPacket+0x7c>
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	b2da      	uxtb	r2, r3
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	1c59      	adds	r1, r3, #1
 8005560:	6279      	str	r1, [r7, #36]	@ 0x24
 8005562:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	09db      	lsrs	r3, r3, #7
 800556e:	623b      	str	r3, [r7, #32]
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	2b7f      	cmp	r3, #127	@ 0x7f
 8005574:	d8f0      	bhi.n	8005558 <_TrySendOverflowPacket+0x64>
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	627a      	str	r2, [r7, #36]	@ 0x24
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005586:	4b12      	ldr	r3, [pc, #72]	@ (80055d0 <_TrySendOverflowPacket+0xdc>)
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	4618      	mov	r0, r3
 800558c:	1d3b      	adds	r3, r7, #4
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	461a      	mov	r2, r3
 8005594:	1d3b      	adds	r3, r7, #4
 8005596:	4619      	mov	r1, r3
 8005598:	f7fa fe22 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800559c:	4603      	mov	r3, r0
 800559e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80055a6:	4a0a      	ldr	r2, [pc, #40]	@ (80055d0 <_TrySendOverflowPacket+0xdc>)
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80055ac:	4b08      	ldr	r3, [pc, #32]	@ (80055d0 <_TrySendOverflowPacket+0xdc>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <_TrySendOverflowPacket+0xdc>)
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	e004      	b.n	80055c4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80055ba:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <_TrySendOverflowPacket+0xdc>)
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	3301      	adds	r3, #1
 80055c0:	4a03      	ldr	r2, [pc, #12]	@ (80055d0 <_TrySendOverflowPacket+0xdc>)
 80055c2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80055c4:	693b      	ldr	r3, [r7, #16]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3730      	adds	r7, #48	@ 0x30
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20014398 	.word	0x20014398
 80055d4:	e0001004 	.word	0xe0001004

080055d8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	@ 0x28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80055e4:	4b6c      	ldr	r3, [pc, #432]	@ (8005798 <_SendPacket+0x1c0>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d010      	beq.n	800560e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80055ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005798 <_SendPacket+0x1c0>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 80a3 	beq.w	800573c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80055f6:	4b68      	ldr	r3, [pc, #416]	@ (8005798 <_SendPacket+0x1c0>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d109      	bne.n	8005612 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80055fe:	f7ff ff79 	bl	80054f4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005602:	4b65      	ldr	r3, [pc, #404]	@ (8005798 <_SendPacket+0x1c0>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b01      	cmp	r3, #1
 8005608:	f040 809a 	bne.w	8005740 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800560c:	e001      	b.n	8005612 <_SendPacket+0x3a>
    goto Send;
 800560e:	bf00      	nop
 8005610:	e000      	b.n	8005614 <_SendPacket+0x3c>
Send:
 8005612:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b1f      	cmp	r3, #31
 8005618:	d809      	bhi.n	800562e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800561a:	4b5f      	ldr	r3, [pc, #380]	@ (8005798 <_SendPacket+0x1c0>)
 800561c:	69da      	ldr	r2, [r3, #28]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	f040 808b 	bne.w	8005744 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b17      	cmp	r3, #23
 8005632:	d807      	bhi.n	8005644 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3b01      	subs	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	e03d      	b.n	80056c0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005650:	d912      	bls.n	8005678 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	09da      	lsrs	r2, r3, #7
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3b01      	subs	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	3a01      	subs	r2, #1
 800566a:	60fa      	str	r2, [r7, #12]
 800566c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005670:	b2da      	uxtb	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e006      	b.n	8005686 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3b01      	subs	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b7f      	cmp	r3, #127	@ 0x7f
 800568a:	d912      	bls.n	80056b2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	09da      	lsrs	r2, r3, #7
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3b01      	subs	r3, #1
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	3a01      	subs	r2, #1
 80056a4:	60fa      	str	r2, [r7, #12]
 80056a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	701a      	strb	r2, [r3, #0]
 80056b0:	e006      	b.n	80056c0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056c0:	4b36      	ldr	r3, [pc, #216]	@ (800579c <_SendPacket+0x1c4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056c6:	4b34      	ldr	r3, [pc, #208]	@ (8005798 <_SendPacket+0x1c0>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	e00b      	b.n	80056f2 <_SendPacket+0x11a>
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	1c59      	adds	r1, r3, #1
 80056e2:	6279      	str	r1, [r7, #36]	@ 0x24
 80056e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	09db      	lsrs	r3, r3, #7
 80056f0:	623b      	str	r3, [r7, #32]
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80056f6:	d8f0      	bhi.n	80056da <_SendPacket+0x102>
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80056fe:	6a3a      	ldr	r2, [r7, #32]
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005708:	4b23      	ldr	r3, [pc, #140]	@ (8005798 <_SendPacket+0x1c0>)
 800570a:	785b      	ldrb	r3, [r3, #1]
 800570c:	4618      	mov	r0, r3
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	461a      	mov	r2, r3
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	f7fa fd62 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800571c:	4603      	mov	r3, r0
 800571e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005726:	4a1c      	ldr	r2, [pc, #112]	@ (8005798 <_SendPacket+0x1c0>)
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	60d3      	str	r3, [r2, #12]
 800572c:	e00b      	b.n	8005746 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800572e:	4b1a      	ldr	r3, [pc, #104]	@ (8005798 <_SendPacket+0x1c0>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	3301      	adds	r3, #1
 8005734:	b2da      	uxtb	r2, r3
 8005736:	4b18      	ldr	r3, [pc, #96]	@ (8005798 <_SendPacket+0x1c0>)
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	e004      	b.n	8005746 <_SendPacket+0x16e>
    goto SendDone;
 800573c:	bf00      	nop
 800573e:	e002      	b.n	8005746 <_SendPacket+0x16e>
      goto SendDone;
 8005740:	bf00      	nop
 8005742:	e000      	b.n	8005746 <_SendPacket+0x16e>
      goto SendDone;
 8005744:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005746:	4b14      	ldr	r3, [pc, #80]	@ (8005798 <_SendPacket+0x1c0>)
 8005748:	7e1b      	ldrb	r3, [r3, #24]
 800574a:	4619      	mov	r1, r3
 800574c:	4a14      	ldr	r2, [pc, #80]	@ (80057a0 <_SendPacket+0x1c8>)
 800574e:	460b      	mov	r3, r1
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	440b      	add	r3, r1
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	4413      	add	r3, r2
 8005758:	336c      	adds	r3, #108	@ 0x6c
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b0e      	ldr	r3, [pc, #56]	@ (8005798 <_SendPacket+0x1c0>)
 800575e:	7e1b      	ldrb	r3, [r3, #24]
 8005760:	4618      	mov	r0, r3
 8005762:	490f      	ldr	r1, [pc, #60]	@ (80057a0 <_SendPacket+0x1c8>)
 8005764:	4603      	mov	r3, r0
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	4403      	add	r3, r0
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	440b      	add	r3, r1
 800576e:	3370      	adds	r3, #112	@ 0x70
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d00b      	beq.n	800578e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005776:	4b08      	ldr	r3, [pc, #32]	@ (8005798 <_SendPacket+0x1c0>)
 8005778:	789b      	ldrb	r3, [r3, #2]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d107      	bne.n	800578e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800577e:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <_SendPacket+0x1c0>)
 8005780:	2201      	movs	r2, #1
 8005782:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005784:	f7ff fe46 	bl	8005414 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005788:	4b03      	ldr	r3, [pc, #12]	@ (8005798 <_SendPacket+0x1c0>)
 800578a:	2200      	movs	r2, #0
 800578c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800578e:	bf00      	nop
 8005790:	3728      	adds	r7, #40	@ 0x28
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20014398 	.word	0x20014398
 800579c:	e0001004 	.word	0xe0001004
 80057a0:	20012ed8 	.word	0x20012ed8

080057a4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	@ 0x28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	3301      	adds	r3, #1
 80057ba:	2b80      	cmp	r3, #128	@ 0x80
 80057bc:	d80a      	bhi.n	80057d4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	1c59      	adds	r1, r3, #1
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6051      	str	r1, [r2, #4]
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	2b80      	cmp	r3, #128	@ 0x80
 80057da:	d15a      	bne.n	8005892 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	623b      	str	r3, [r7, #32]
 80057fc:	e00b      	b.n	8005816 <_StoreChar+0x72>
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	1c59      	adds	r1, r3, #1
 8005806:	6279      	str	r1, [r7, #36]	@ 0x24
 8005808:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	09db      	lsrs	r3, r3, #7
 8005814:	623b      	str	r3, [r7, #32]
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	2b7f      	cmp	r3, #127	@ 0x7f
 800581a:	d8f0      	bhi.n	80057fe <_StoreChar+0x5a>
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	627a      	str	r2, [r7, #36]	@ 0x24
 8005822:	6a3a      	ldr	r2, [r7, #32]
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	61fb      	str	r3, [r7, #28]
 8005830:	2300      	movs	r3, #0
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	e00b      	b.n	800584e <_StoreChar+0xaa>
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	b2da      	uxtb	r2, r3
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	1c59      	adds	r1, r3, #1
 800583e:	61f9      	str	r1, [r7, #28]
 8005840:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	09db      	lsrs	r3, r3, #7
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b7f      	cmp	r3, #127	@ 0x7f
 8005852:	d8f0      	bhi.n	8005836 <_StoreChar+0x92>
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	61fa      	str	r2, [r7, #28]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	221a      	movs	r2, #26
 800586a:	6939      	ldr	r1, [r7, #16]
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff feb3 	bl	80055d8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fdbf 	bl	80053fa <_PreparePacket>
 800587c:	4602      	mov	r2, r0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	611a      	str	r2, [r3, #16]
  }
}
 8005892:	bf00      	nop
 8005894:	3728      	adds	r7, #40	@ 0x28
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	@ 0x28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80058ae:	2301      	movs	r3, #1
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80058b2:	2301      	movs	r3, #1
 80058b4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058b6:	e007      	b.n	80058c8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80058b8:	6a3a      	ldr	r2, [r7, #32]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c0:	623b      	str	r3, [r7, #32]
    Width++;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3301      	adds	r3, #1
 80058c6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058c8:	6a3a      	ldr	r2, [r7, #32]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d2f3      	bcs.n	80058b8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d901      	bls.n	80058dc <_PrintUnsigned+0x40>
    Width = NumDigits;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80058dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d000      	beq.n	80058e8 <_PrintUnsigned+0x4c>
 80058e6:	e01f      	b.n	8005928 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80058e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01c      	beq.n	8005928 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80058ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <_PrintUnsigned+0x68>
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d102      	bne.n	8005904 <_PrintUnsigned+0x68>
        c = '0';
 80058fe:	2330      	movs	r3, #48	@ 0x30
 8005900:	76fb      	strb	r3, [r7, #27]
 8005902:	e001      	b.n	8005908 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005904:	2320      	movs	r3, #32
 8005906:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005908:	e007      	b.n	800591a <_PrintUnsigned+0x7e>
        FieldWidth--;
 800590a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590c:	3b01      	subs	r3, #1
 800590e:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005910:	7efb      	ldrb	r3, [r7, #27]
 8005912:	4619      	mov	r1, r3
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff ff45 	bl	80057a4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800591a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <_PrintUnsigned+0x8c>
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005924:	429a      	cmp	r2, r3
 8005926:	d3f0      	bcc.n	800590a <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d903      	bls.n	8005936 <_PrintUnsigned+0x9a>
      NumDigits--;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	3b01      	subs	r3, #1
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	e009      	b.n	800594a <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	429a      	cmp	r2, r3
 8005946:	d200      	bcs.n	800594a <_PrintUnsigned+0xae>
        break;
 8005948:	e005      	b.n	8005956 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	fb02 f303 	mul.w	r3, r2, r3
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005954:	e7e8      	b.n	8005928 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595a:	fbb2 f3f3 	udiv	r3, r2, r3
 800595e:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005964:	fb02 f303 	mul.w	r3, r2, r3
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800596e:	4a15      	ldr	r2, [pc, #84]	@ (80059c4 <_PrintUnsigned+0x128>)
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4413      	add	r3, r2
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	4619      	mov	r1, r3
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7ff ff13 	bl	80057a4 <_StoreChar>
    Digit /= Base;
 800597e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	fbb2 f3f3 	udiv	r3, r2, r3
 8005986:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e3      	bne.n	8005956 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800598e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d011      	beq.n	80059bc <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00e      	beq.n	80059bc <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800599e:	e006      	b.n	80059ae <_PrintUnsigned+0x112>
        FieldWidth--;
 80059a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a2:	3b01      	subs	r3, #1
 80059a4:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80059a6:	2120      	movs	r1, #32
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7ff fefb 	bl	80057a4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <_PrintUnsigned+0x120>
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d3f1      	bcc.n	80059a0 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80059bc:	bf00      	nop
 80059be:	3728      	adds	r7, #40	@ 0x28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	08007070 	.word	0x08007070

080059c8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bfb8      	it	lt
 80059dc:	425b      	neglt	r3, r3
 80059de:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80059e0:	2301      	movs	r3, #1
 80059e2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059e4:	e007      	b.n	80059f6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80059ee:	613b      	str	r3, [r7, #16]
    Width++;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	3301      	adds	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	daf3      	bge.n	80059e6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d901      	bls.n	8005a0a <_PrintInt+0x42>
    Width = NumDigits;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <_PrintInt+0x5e>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	db04      	blt.n	8005a20 <_PrintInt+0x58>
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <_PrintInt+0x5e>
    FieldWidth--;
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <_PrintInt+0x6e>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d016      	beq.n	8005a64 <_PrintInt+0x9c>
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d111      	bne.n	8005a64 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00e      	beq.n	8005a64 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a46:	e006      	b.n	8005a56 <_PrintInt+0x8e>
        FieldWidth--;
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005a4e:	2120      	movs	r1, #32
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff fea7 	bl	80057a4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <_PrintInt+0x9c>
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d3f1      	bcc.n	8005a48 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	da07      	bge.n	8005a7a <_PrintInt+0xb2>
    v = -v;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	425b      	negs	r3, r3
 8005a6e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005a70:	212d      	movs	r1, #45	@ 0x2d
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f7ff fe96 	bl	80057a4 <_StoreChar>
 8005a78:	e008      	b.n	8005a8c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005a84:	212b      	movs	r1, #43	@ 0x2b
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7ff fe8c 	bl	80057a4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d019      	beq.n	8005aca <_PrintInt+0x102>
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d114      	bne.n	8005aca <_PrintInt+0x102>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d111      	bne.n	8005aca <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00e      	beq.n	8005aca <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005aac:	e006      	b.n	8005abc <_PrintInt+0xf4>
        FieldWidth--;
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005ab4:	2130      	movs	r1, #48	@ 0x30
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7ff fe74 	bl	80057a4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <_PrintInt+0x102>
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d3f1      	bcc.n	8005aae <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005aca:	68b9      	ldr	r1, [r7, #8]
 8005acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff fedf 	bl	800589c <_PrintUnsigned>
}
 8005ade:	bf00      	nop
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b098      	sub	sp, #96	@ 0x60
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005af4:	f3ef 8311 	mrs	r3, BASEPRI
 8005af8:	f04f 0120 	mov.w	r1, #32
 8005afc:	f381 8811 	msr	BASEPRI, r1
 8005b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b02:	48b7      	ldr	r0, [pc, #732]	@ (8005de0 <_VPrintTarget+0x2f8>)
 8005b04:	f7ff fc79 	bl	80053fa <_PreparePacket>
 8005b08:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005b0a:	4bb5      	ldr	r3, [pc, #724]	@ (8005de0 <_VPrintTarget+0x2f8>)
 8005b0c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b14:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b2e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 8183 	beq.w	8005e3e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005b38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b3c:	2b25      	cmp	r3, #37	@ 0x25
 8005b3e:	f040 8170 	bne.w	8005e22 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005b42:	2300      	movs	r3, #0
 8005b44:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005b46:	2301      	movs	r3, #1
 8005b48:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005b52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b56:	3b23      	subs	r3, #35	@ 0x23
 8005b58:	2b0d      	cmp	r3, #13
 8005b5a:	d83f      	bhi.n	8005bdc <_VPrintTarget+0xf4>
 8005b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b64 <_VPrintTarget+0x7c>)
 8005b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b62:	bf00      	nop
 8005b64:	08005bcd 	.word	0x08005bcd
 8005b68:	08005bdd 	.word	0x08005bdd
 8005b6c:	08005bdd 	.word	0x08005bdd
 8005b70:	08005bdd 	.word	0x08005bdd
 8005b74:	08005bdd 	.word	0x08005bdd
 8005b78:	08005bdd 	.word	0x08005bdd
 8005b7c:	08005bdd 	.word	0x08005bdd
 8005b80:	08005bdd 	.word	0x08005bdd
 8005b84:	08005bbd 	.word	0x08005bbd
 8005b88:	08005bdd 	.word	0x08005bdd
 8005b8c:	08005b9d 	.word	0x08005b9d
 8005b90:	08005bdd 	.word	0x08005bdd
 8005b94:	08005bdd 	.word	0x08005bdd
 8005b98:	08005bad 	.word	0x08005bad
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
 8005ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	e01a      	b.n	8005be2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bae:	f043 0302 	orr.w	r3, r3, #2
 8005bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e012      	b.n	8005be2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bbe:	f043 0304 	orr.w	r3, r3, #4
 8005bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	e00a      	b.n	8005be2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bce:	f043 0308 	orr.w	r3, r3, #8
 8005bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	e002      	b.n	8005be2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8005be0:	bf00      	nop
        }
      } while (v);
 8005be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1b0      	bne.n	8005b4a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005be8:	2300      	movs	r3, #0
 8005bea:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bf8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005bfa:	d912      	bls.n	8005c22 <_VPrintTarget+0x13a>
 8005bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c00:	2b39      	cmp	r3, #57	@ 0x39
 8005c02:	d80e      	bhi.n	8005c22 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3301      	adds	r3, #1
 8005c08:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	461a      	mov	r2, r3
 8005c16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c1a:	4413      	add	r3, r2
 8005c1c:	3b30      	subs	r3, #48	@ 0x30
 8005c1e:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005c20:	e7e4      	b.n	8005bec <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c22:	2300      	movs	r3, #0
 8005c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005c2e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c32:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c34:	d11d      	bne.n	8005c72 <_VPrintTarget+0x18a>
        sFormat++;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005c44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c48:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c4a:	d912      	bls.n	8005c72 <_VPrintTarget+0x18a>
 8005c4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c50:	2b39      	cmp	r3, #57	@ 0x39
 8005c52:	d80e      	bhi.n	8005c72 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3301      	adds	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005c5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	461a      	mov	r2, r3
 8005c66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c6a:	4413      	add	r3, r2
 8005c6c:	3b30      	subs	r3, #48	@ 0x30
 8005c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005c70:	e7e4      	b.n	8005c3c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005c7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c7e:	2b6c      	cmp	r3, #108	@ 0x6c
 8005c80:	d003      	beq.n	8005c8a <_VPrintTarget+0x1a2>
 8005c82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c86:	2b68      	cmp	r3, #104	@ 0x68
 8005c88:	d107      	bne.n	8005c9a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005c98:	e7ef      	b.n	8005c7a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005c9a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c9e:	2b25      	cmp	r3, #37	@ 0x25
 8005ca0:	f000 80b3 	beq.w	8005e0a <_VPrintTarget+0x322>
 8005ca4:	2b25      	cmp	r3, #37	@ 0x25
 8005ca6:	f2c0 80b7 	blt.w	8005e18 <_VPrintTarget+0x330>
 8005caa:	2b78      	cmp	r3, #120	@ 0x78
 8005cac:	f300 80b4 	bgt.w	8005e18 <_VPrintTarget+0x330>
 8005cb0:	2b58      	cmp	r3, #88	@ 0x58
 8005cb2:	f2c0 80b1 	blt.w	8005e18 <_VPrintTarget+0x330>
 8005cb6:	3b58      	subs	r3, #88	@ 0x58
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	f200 80ad 	bhi.w	8005e18 <_VPrintTarget+0x330>
 8005cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <_VPrintTarget+0x1dc>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005dbb 	.word	0x08005dbb
 8005cc8:	08005e19 	.word	0x08005e19
 8005ccc:	08005e19 	.word	0x08005e19
 8005cd0:	08005e19 	.word	0x08005e19
 8005cd4:	08005e19 	.word	0x08005e19
 8005cd8:	08005e19 	.word	0x08005e19
 8005cdc:	08005e19 	.word	0x08005e19
 8005ce0:	08005e19 	.word	0x08005e19
 8005ce4:	08005e19 	.word	0x08005e19
 8005ce8:	08005e19 	.word	0x08005e19
 8005cec:	08005e19 	.word	0x08005e19
 8005cf0:	08005d49 	.word	0x08005d49
 8005cf4:	08005d6f 	.word	0x08005d6f
 8005cf8:	08005e19 	.word	0x08005e19
 8005cfc:	08005e19 	.word	0x08005e19
 8005d00:	08005e19 	.word	0x08005e19
 8005d04:	08005e19 	.word	0x08005e19
 8005d08:	08005e19 	.word	0x08005e19
 8005d0c:	08005e19 	.word	0x08005e19
 8005d10:	08005e19 	.word	0x08005e19
 8005d14:	08005e19 	.word	0x08005e19
 8005d18:	08005e19 	.word	0x08005e19
 8005d1c:	08005e19 	.word	0x08005e19
 8005d20:	08005e19 	.word	0x08005e19
 8005d24:	08005de5 	.word	0x08005de5
 8005d28:	08005e19 	.word	0x08005e19
 8005d2c:	08005e19 	.word	0x08005e19
 8005d30:	08005e19 	.word	0x08005e19
 8005d34:	08005e19 	.word	0x08005e19
 8005d38:	08005d95 	.word	0x08005d95
 8005d3c:	08005e19 	.word	0x08005e19
 8005d40:	08005e19 	.word	0x08005e19
 8005d44:	08005dbb 	.word	0x08005dbb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	1d19      	adds	r1, r3, #4
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6011      	str	r1, [r2, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8005d5c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005d60:	f107 0314 	add.w	r3, r7, #20
 8005d64:	4611      	mov	r1, r2
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff fd1c 	bl	80057a4 <_StoreChar>
        break;
 8005d6c:	e055      	b.n	8005e1a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	1d19      	adds	r1, r3, #4
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6011      	str	r1, [r2, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005d7c:	f107 0014 	add.w	r0, r7, #20
 8005d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d8a:	220a      	movs	r2, #10
 8005d8c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d8e:	f7ff fe1b 	bl	80059c8 <_PrintInt>
        break;
 8005d92:	e042      	b.n	8005e1a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	1d19      	adds	r1, r3, #4
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005da2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005da4:	f107 0014 	add.w	r0, r7, #20
 8005da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005daa:	9301      	str	r3, [sp, #4]
 8005dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005db2:	220a      	movs	r2, #10
 8005db4:	f7ff fd72 	bl	800589c <_PrintUnsigned>
        break;
 8005db8:	e02f      	b.n	8005e1a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	1d19      	adds	r1, r3, #4
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6011      	str	r1, [r2, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005dc8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005dca:	f107 0014 	add.w	r0, r7, #20
 8005dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dd8:	2210      	movs	r2, #16
 8005dda:	f7ff fd5f 	bl	800589c <_PrintUnsigned>
        break;
 8005dde:	e01c      	b.n	8005e1a <_VPrintTarget+0x332>
 8005de0:	200143c8 	.word	0x200143c8
      case 'p':
        v = va_arg(*pParamList, int);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	1d19      	adds	r1, r3, #4
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6011      	str	r1, [r2, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005df2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005df4:	f107 0014 	add.w	r0, r7, #20
 8005df8:	2300      	movs	r3, #0
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	2308      	movs	r3, #8
 8005e02:	2210      	movs	r2, #16
 8005e04:	f7ff fd4a 	bl	800589c <_PrintUnsigned>
        break;
 8005e08:	e007      	b.n	8005e1a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005e0a:	f107 0314 	add.w	r3, r7, #20
 8005e0e:	2125      	movs	r1, #37	@ 0x25
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff fcc7 	bl	80057a4 <_StoreChar>
        break;
 8005e16:	e000      	b.n	8005e1a <_VPrintTarget+0x332>
      default:
        break;
 8005e18:	bf00      	nop
      }
      sFormat++;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e007      	b.n	8005e32 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005e22:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005e26:	f107 0314 	add.w	r3, r7, #20
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff fcb9 	bl	80057a4 <_StoreChar>
    }
  } while (*sFormat);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f47f ae72 	bne.w	8005b20 <_VPrintTarget+0x38>
 8005e3c:	e000      	b.n	8005e40 <_VPrintTarget+0x358>
      break;
 8005e3e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d041      	beq.n	8005eca <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e56:	e00b      	b.n	8005e70 <_VPrintTarget+0x388>
 8005e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e5e:	1c59      	adds	r1, r3, #1
 8005e60:	6439      	str	r1, [r7, #64]	@ 0x40
 8005e62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e6c:	09db      	lsrs	r3, r3, #7
 8005e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e72:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e74:	d8f0      	bhi.n	8005e58 <_VPrintTarget+0x370>
 8005e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e84:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e8e:	e00b      	b.n	8005ea8 <_VPrintTarget+0x3c0>
 8005e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e96:	1c59      	adds	r1, r3, #1
 8005e98:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea4:	09db      	lsrs	r3, r3, #7
 8005ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eac:	d8f0      	bhi.n	8005e90 <_VPrintTarget+0x3a8>
 8005eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005eb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ebc:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	69b9      	ldr	r1, [r7, #24]
 8005ec2:	221a      	movs	r2, #26
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff fb87 	bl	80055d8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005ed0:	bf00      	nop
 8005ed2:	3758      	adds	r7, #88	@ 0x58
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005eec:	4917      	ldr	r1, [pc, #92]	@ (8005f4c <SEGGER_SYSVIEW_Init+0x74>)
 8005eee:	4818      	ldr	r0, [pc, #96]	@ (8005f50 <SEGGER_SYSVIEW_Init+0x78>)
 8005ef0:	f7ff f942 	bl	8005178 <SEGGER_RTT_AllocUpBuffer>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	4b16      	ldr	r3, [pc, #88]	@ (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005efa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005efc:	4b15      	ldr	r3, [pc, #84]	@ (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005efe:	785a      	ldrb	r2, [r3, #1]
 8005f00:	4b14      	ldr	r3, [pc, #80]	@ (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f02:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f04:	4b13      	ldr	r3, [pc, #76]	@ (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f06:	7e1b      	ldrb	r3, [r3, #24]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	2308      	movs	r3, #8
 8005f10:	4a11      	ldr	r2, [pc, #68]	@ (8005f58 <SEGGER_SYSVIEW_Init+0x80>)
 8005f12:	490f      	ldr	r1, [pc, #60]	@ (8005f50 <SEGGER_SYSVIEW_Init+0x78>)
 8005f14:	f7ff f9b4 	bl	8005280 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f18:	4b0e      	ldr	r3, [pc, #56]	@ (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8005f5c <SEGGER_SYSVIEW_Init+0x84>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a0c      	ldr	r2, [pc, #48]	@ (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f24:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f26:	4a0b      	ldr	r2, [pc, #44]	@ (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f2c:	4a09      	ldr	r2, [pc, #36]	@ (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f32:	4a08      	ldr	r2, [pc, #32]	@ (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f38:	4a06      	ldr	r2, [pc, #24]	@ (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f3e:	4b05      	ldr	r3, [pc, #20]	@ (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f44:	bf00      	nop
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20013390 	.word	0x20013390
 8005f50:	0800703c 	.word	0x0800703c
 8005f54:	20014398 	.word	0x20014398
 8005f58:	20014390 	.word	0x20014390
 8005f5c:	e0001004 	.word	0xe0001004

08005f60 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005f68:	4a04      	ldr	r2, [pc, #16]	@ (8005f7c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6113      	str	r3, [r2, #16]
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20014398 	.word	0x20014398

08005f80 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f88:	f3ef 8311 	mrs	r3, BASEPRI
 8005f8c:	f04f 0120 	mov.w	r1, #32
 8005f90:	f381 8811 	msr	BASEPRI, r1
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	4808      	ldr	r0, [pc, #32]	@ (8005fb8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005f98:	f7ff fa2f 	bl	80053fa <_PreparePacket>
 8005f9c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	68b8      	ldr	r0, [r7, #8]
 8005fa4:	f7ff fb18 	bl	80055d8 <_SendPacket>
  RECORD_END();
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f383 8811 	msr	BASEPRI, r3
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	200143c8 	.word	0x200143c8

08005fbc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fca:	f04f 0120 	mov.w	r1, #32
 8005fce:	f381 8811 	msr	BASEPRI, r1
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	4816      	ldr	r0, [pc, #88]	@ (8006030 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005fd6:	f7ff fa10 	bl	80053fa <_PreparePacket>
 8005fda:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e00b      	b.n	8006002 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	61f9      	str	r1, [r7, #28]
 8005ff4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	09db      	lsrs	r3, r3, #7
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b7f      	cmp	r3, #127	@ 0x7f
 8006006:	d8f0      	bhi.n	8005fea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	61fa      	str	r2, [r7, #28]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	68f9      	ldr	r1, [r7, #12]
 800601c:	6938      	ldr	r0, [r7, #16]
 800601e:	f7ff fadb 	bl	80055d8 <_SendPacket>
  RECORD_END();
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f383 8811 	msr	BASEPRI, r3
}
 8006028:	bf00      	nop
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	200143c8 	.word	0x200143c8

08006034 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b08c      	sub	sp, #48	@ 0x30
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006040:	f3ef 8311 	mrs	r3, BASEPRI
 8006044:	f04f 0120 	mov.w	r1, #32
 8006048:	f381 8811 	msr	BASEPRI, r1
 800604c:	61fb      	str	r3, [r7, #28]
 800604e:	4825      	ldr	r0, [pc, #148]	@ (80060e4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006050:	f7ff f9d3 	bl	80053fa <_PreparePacket>
 8006054:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006062:	e00b      	b.n	800607c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006066:	b2da      	uxtb	r2, r3
 8006068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606a:	1c59      	adds	r1, r3, #1
 800606c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800606e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006078:	09db      	lsrs	r3, r3, #7
 800607a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800607c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006080:	d8f0      	bhi.n	8006064 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006088:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006090:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	627b      	str	r3, [r7, #36]	@ 0x24
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	623b      	str	r3, [r7, #32]
 800609a:	e00b      	b.n	80060b4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a2:	1c59      	adds	r1, r3, #1
 80060a4:	6279      	str	r1, [r7, #36]	@ 0x24
 80060a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	09db      	lsrs	r3, r3, #7
 80060b2:	623b      	str	r3, [r7, #32]
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80060b8:	d8f0      	bhi.n	800609c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	627a      	str	r2, [r7, #36]	@ 0x24
 80060c0:	6a3a      	ldr	r2, [r7, #32]
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	6979      	ldr	r1, [r7, #20]
 80060ce:	69b8      	ldr	r0, [r7, #24]
 80060d0:	f7ff fa82 	bl	80055d8 <_SendPacket>
  RECORD_END();
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f383 8811 	msr	BASEPRI, r3
}
 80060da:	bf00      	nop
 80060dc:	3730      	adds	r7, #48	@ 0x30
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	200143c8 	.word	0x200143c8

080060e8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08e      	sub	sp, #56	@ 0x38
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80060f6:	f3ef 8311 	mrs	r3, BASEPRI
 80060fa:	f04f 0120 	mov.w	r1, #32
 80060fe:	f381 8811 	msr	BASEPRI, r1
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	4832      	ldr	r0, [pc, #200]	@ (80061d0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006106:	f7ff f978 	bl	80053fa <_PreparePacket>
 800610a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	637b      	str	r3, [r7, #52]	@ 0x34
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	633b      	str	r3, [r7, #48]	@ 0x30
 8006118:	e00b      	b.n	8006132 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	b2da      	uxtb	r2, r3
 800611e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006120:	1c59      	adds	r1, r3, #1
 8006122:	6379      	str	r1, [r7, #52]	@ 0x34
 8006124:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612e:	09db      	lsrs	r3, r3, #7
 8006130:	633b      	str	r3, [r7, #48]	@ 0x30
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	2b7f      	cmp	r3, #127	@ 0x7f
 8006136:	d8f0      	bhi.n	800611a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	637a      	str	r2, [r7, #52]	@ 0x34
 800613e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006146:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006150:	e00b      	b.n	800616a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006154:	b2da      	uxtb	r2, r3
 8006156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006158:	1c59      	adds	r1, r3, #1
 800615a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800615c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006166:	09db      	lsrs	r3, r3, #7
 8006168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800616a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616c:	2b7f      	cmp	r3, #127	@ 0x7f
 800616e:	d8f0      	bhi.n	8006152 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	627b      	str	r3, [r7, #36]	@ 0x24
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	623b      	str	r3, [r7, #32]
 8006188:	e00b      	b.n	80061a2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	b2da      	uxtb	r2, r3
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	1c59      	adds	r1, r3, #1
 8006192:	6279      	str	r1, [r7, #36]	@ 0x24
 8006194:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	09db      	lsrs	r3, r3, #7
 80061a0:	623b      	str	r3, [r7, #32]
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80061a6:	d8f0      	bhi.n	800618a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80061ae:	6a3a      	ldr	r2, [r7, #32]
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	6979      	ldr	r1, [r7, #20]
 80061bc:	69b8      	ldr	r0, [r7, #24]
 80061be:	f7ff fa0b 	bl	80055d8 <_SendPacket>
  RECORD_END();
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f383 8811 	msr	BASEPRI, r3
}
 80061c8:	bf00      	nop
 80061ca:	3738      	adds	r7, #56	@ 0x38
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	200143c8 	.word	0x200143c8

080061d4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b090      	sub	sp, #64	@ 0x40
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061e2:	f3ef 8311 	mrs	r3, BASEPRI
 80061e6:	f04f 0120 	mov.w	r1, #32
 80061ea:	f381 8811 	msr	BASEPRI, r1
 80061ee:	61fb      	str	r3, [r7, #28]
 80061f0:	4840      	ldr	r0, [pc, #256]	@ (80062f4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80061f2:	f7ff f902 	bl	80053fa <_PreparePacket>
 80061f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006204:	e00b      	b.n	800621e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006208:	b2da      	uxtb	r2, r3
 800620a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800620c:	1c59      	adds	r1, r3, #1
 800620e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006210:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621a:	09db      	lsrs	r3, r3, #7
 800621c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	2b7f      	cmp	r3, #127	@ 0x7f
 8006222:	d8f0      	bhi.n	8006206 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800622a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006232:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	637b      	str	r3, [r7, #52]	@ 0x34
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	633b      	str	r3, [r7, #48]	@ 0x30
 800623c:	e00b      	b.n	8006256 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	b2da      	uxtb	r2, r3
 8006242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006244:	1c59      	adds	r1, r3, #1
 8006246:	6379      	str	r1, [r7, #52]	@ 0x34
 8006248:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006252:	09db      	lsrs	r3, r3, #7
 8006254:	633b      	str	r3, [r7, #48]	@ 0x30
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	2b7f      	cmp	r3, #127	@ 0x7f
 800625a:	d8f0      	bhi.n	800623e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800625c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	637a      	str	r2, [r7, #52]	@ 0x34
 8006262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006274:	e00b      	b.n	800628e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006278:	b2da      	uxtb	r2, r3
 800627a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627c:	1c59      	adds	r1, r3, #1
 800627e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006280:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628a:	09db      	lsrs	r3, r3, #7
 800628c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800628e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006290:	2b7f      	cmp	r3, #127	@ 0x7f
 8006292:	d8f0      	bhi.n	8006276 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800629a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80062a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062aa:	623b      	str	r3, [r7, #32]
 80062ac:	e00b      	b.n	80062c6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	1c59      	adds	r1, r3, #1
 80062b6:	6279      	str	r1, [r7, #36]	@ 0x24
 80062b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	09db      	lsrs	r3, r3, #7
 80062c4:	623b      	str	r3, [r7, #32]
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80062ca:	d8f0      	bhi.n	80062ae <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80062d2:	6a3a      	ldr	r2, [r7, #32]
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	6979      	ldr	r1, [r7, #20]
 80062e0:	69b8      	ldr	r0, [r7, #24]
 80062e2:	f7ff f979 	bl	80055d8 <_SendPacket>
  RECORD_END();
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f383 8811 	msr	BASEPRI, r3
}
 80062ec:	bf00      	nop
 80062ee:	3740      	adds	r7, #64	@ 0x40
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	200143c8 	.word	0x200143c8

080062f8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08c      	sub	sp, #48	@ 0x30
 80062fc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80062fe:	4b58      	ldr	r3, [pc, #352]	@ (8006460 <SEGGER_SYSVIEW_Start+0x168>)
 8006300:	2201      	movs	r2, #1
 8006302:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006304:	f3ef 8311 	mrs	r3, BASEPRI
 8006308:	f04f 0120 	mov.w	r1, #32
 800630c:	f381 8811 	msr	BASEPRI, r1
 8006310:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006312:	4b53      	ldr	r3, [pc, #332]	@ (8006460 <SEGGER_SYSVIEW_Start+0x168>)
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	220a      	movs	r2, #10
 8006318:	4952      	ldr	r1, [pc, #328]	@ (8006464 <SEGGER_SYSVIEW_Start+0x16c>)
 800631a:	4618      	mov	r0, r3
 800631c:	f7f9 ff60 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006326:	200a      	movs	r0, #10
 8006328:	f7ff fe2a 	bl	8005f80 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800632c:	f3ef 8311 	mrs	r3, BASEPRI
 8006330:	f04f 0120 	mov.w	r1, #32
 8006334:	f381 8811 	msr	BASEPRI, r1
 8006338:	60bb      	str	r3, [r7, #8]
 800633a:	484b      	ldr	r0, [pc, #300]	@ (8006468 <SEGGER_SYSVIEW_Start+0x170>)
 800633c:	f7ff f85d 	bl	80053fa <_PreparePacket>
 8006340:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800634a:	4b45      	ldr	r3, [pc, #276]	@ (8006460 <SEGGER_SYSVIEW_Start+0x168>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006350:	e00b      	b.n	800636a <SEGGER_SYSVIEW_Start+0x72>
 8006352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006354:	b2da      	uxtb	r2, r3
 8006356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006358:	1c59      	adds	r1, r3, #1
 800635a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800635c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006366:	09db      	lsrs	r3, r3, #7
 8006368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	2b7f      	cmp	r3, #127	@ 0x7f
 800636e:	d8f0      	bhi.n	8006352 <SEGGER_SYSVIEW_Start+0x5a>
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
 8006384:	4b36      	ldr	r3, [pc, #216]	@ (8006460 <SEGGER_SYSVIEW_Start+0x168>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	623b      	str	r3, [r7, #32]
 800638a:	e00b      	b.n	80063a4 <SEGGER_SYSVIEW_Start+0xac>
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	b2da      	uxtb	r2, r3
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	1c59      	adds	r1, r3, #1
 8006394:	6279      	str	r1, [r7, #36]	@ 0x24
 8006396:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	09db      	lsrs	r3, r3, #7
 80063a2:	623b      	str	r3, [r7, #32]
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80063a8:	d8f0      	bhi.n	800638c <SEGGER_SYSVIEW_Start+0x94>
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80063b0:	6a3a      	ldr	r2, [r7, #32]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	61fb      	str	r3, [r7, #28]
 80063be:	4b28      	ldr	r3, [pc, #160]	@ (8006460 <SEGGER_SYSVIEW_Start+0x168>)
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	e00b      	b.n	80063de <SEGGER_SYSVIEW_Start+0xe6>
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	1c59      	adds	r1, r3, #1
 80063ce:	61f9      	str	r1, [r7, #28]
 80063d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	09db      	lsrs	r3, r3, #7
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80063e2:	d8f0      	bhi.n	80063c6 <SEGGER_SYSVIEW_Start+0xce>
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	61fa      	str	r2, [r7, #28]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	2300      	movs	r3, #0
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	e00b      	b.n	8006416 <SEGGER_SYSVIEW_Start+0x11e>
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	b2da      	uxtb	r2, r3
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	1c59      	adds	r1, r3, #1
 8006406:	6179      	str	r1, [r7, #20]
 8006408:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	09db      	lsrs	r3, r3, #7
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b7f      	cmp	r3, #127	@ 0x7f
 800641a:	d8f0      	bhi.n	80063fe <SEGGER_SYSVIEW_Start+0x106>
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	617a      	str	r2, [r7, #20]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800642c:	2218      	movs	r2, #24
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff f8d1 	bl	80055d8 <_SendPacket>
      RECORD_END();
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800643c:	4b08      	ldr	r3, [pc, #32]	@ (8006460 <SEGGER_SYSVIEW_Start+0x168>)
 800643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006444:	4b06      	ldr	r3, [pc, #24]	@ (8006460 <SEGGER_SYSVIEW_Start+0x168>)
 8006446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006448:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800644a:	f000 f9eb 	bl	8006824 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800644e:	f000 f9b1 	bl	80067b4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006452:	f000 fc23 	bl	8006c9c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006456:	bf00      	nop
 8006458:	3730      	adds	r7, #48	@ 0x30
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20014398 	.word	0x20014398
 8006464:	08007064 	.word	0x08007064
 8006468:	200143c8 	.word	0x200143c8

0800646c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006472:	f3ef 8311 	mrs	r3, BASEPRI
 8006476:	f04f 0120 	mov.w	r1, #32
 800647a:	f381 8811 	msr	BASEPRI, r1
 800647e:	607b      	str	r3, [r7, #4]
 8006480:	480b      	ldr	r0, [pc, #44]	@ (80064b0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006482:	f7fe ffba 	bl	80053fa <_PreparePacket>
 8006486:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006488:	4b0a      	ldr	r3, [pc, #40]	@ (80064b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006490:	220b      	movs	r2, #11
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6838      	ldr	r0, [r7, #0]
 8006496:	f7ff f89f 	bl	80055d8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800649a:	4b06      	ldr	r3, [pc, #24]	@ (80064b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f383 8811 	msr	BASEPRI, r3
}
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	200143c8 	.word	0x200143c8
 80064b4:	20014398 	.word	0x20014398

080064b8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08c      	sub	sp, #48	@ 0x30
 80064bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064be:	f3ef 8311 	mrs	r3, BASEPRI
 80064c2:	f04f 0120 	mov.w	r1, #32
 80064c6:	f381 8811 	msr	BASEPRI, r1
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	4845      	ldr	r0, [pc, #276]	@ (80065e4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80064ce:	f7fe ff94 	bl	80053fa <_PreparePacket>
 80064d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064dc:	4b42      	ldr	r3, [pc, #264]	@ (80065e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064e2:	e00b      	b.n	80064fc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80064e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ea:	1c59      	adds	r1, r3, #1
 80064ec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80064ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f8:	09db      	lsrs	r3, r3, #7
 80064fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006500:	d8f0      	bhi.n	80064e4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006510:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
 8006516:	4b34      	ldr	r3, [pc, #208]	@ (80065e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	623b      	str	r3, [r7, #32]
 800651c:	e00b      	b.n	8006536 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	b2da      	uxtb	r2, r3
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	1c59      	adds	r1, r3, #1
 8006526:	6279      	str	r1, [r7, #36]	@ 0x24
 8006528:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	09db      	lsrs	r3, r3, #7
 8006534:	623b      	str	r3, [r7, #32]
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	2b7f      	cmp	r3, #127	@ 0x7f
 800653a:	d8f0      	bhi.n	800651e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	627a      	str	r2, [r7, #36]	@ 0x24
 8006542:	6a3a      	ldr	r2, [r7, #32]
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	61fb      	str	r3, [r7, #28]
 8006550:	4b25      	ldr	r3, [pc, #148]	@ (80065e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	e00b      	b.n	8006570 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	b2da      	uxtb	r2, r3
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	1c59      	adds	r1, r3, #1
 8006560:	61f9      	str	r1, [r7, #28]
 8006562:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	09db      	lsrs	r3, r3, #7
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b7f      	cmp	r3, #127	@ 0x7f
 8006574:	d8f0      	bhi.n	8006558 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	61fa      	str	r2, [r7, #28]
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	2300      	movs	r3, #0
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	e00b      	b.n	80065a8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	6179      	str	r1, [r7, #20]
 800659a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	09db      	lsrs	r3, r3, #7
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80065ac:	d8f0      	bhi.n	8006590 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	617a      	str	r2, [r7, #20]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065be:	2218      	movs	r2, #24
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	68b8      	ldr	r0, [r7, #8]
 80065c4:	f7ff f808 	bl	80055d8 <_SendPacket>
  RECORD_END();
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065ce:	4b06      	ldr	r3, [pc, #24]	@ (80065e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80065d6:	4b04      	ldr	r3, [pc, #16]	@ (80065e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065da:	4798      	blx	r3
  }
}
 80065dc:	bf00      	nop
 80065de:	3730      	adds	r7, #48	@ 0x30
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200143c8 	.word	0x200143c8
 80065e8:	20014398 	.word	0x20014398

080065ec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b092      	sub	sp, #72	@ 0x48
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80065f4:	f3ef 8311 	mrs	r3, BASEPRI
 80065f8:	f04f 0120 	mov.w	r1, #32
 80065fc:	f381 8811 	msr	BASEPRI, r1
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	486a      	ldr	r0, [pc, #424]	@ (80067ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006604:	f7fe fef9 	bl	80053fa <_PreparePacket>
 8006608:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	647b      	str	r3, [r7, #68]	@ 0x44
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4b66      	ldr	r3, [pc, #408]	@ (80067b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	643b      	str	r3, [r7, #64]	@ 0x40
 800661e:	e00b      	b.n	8006638 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006622:	b2da      	uxtb	r2, r3
 8006624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006626:	1c59      	adds	r1, r3, #1
 8006628:	6479      	str	r1, [r7, #68]	@ 0x44
 800662a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006634:	09db      	lsrs	r3, r3, #7
 8006636:	643b      	str	r3, [r7, #64]	@ 0x40
 8006638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800663a:	2b7f      	cmp	r3, #127	@ 0x7f
 800663c:	d8f0      	bhi.n	8006620 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800663e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	647a      	str	r2, [r7, #68]	@ 0x44
 8006644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800664c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006658:	e00b      	b.n	8006672 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665c:	b2da      	uxtb	r2, r3
 800665e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006660:	1c59      	adds	r1, r3, #1
 8006662:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006664:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666e:	09db      	lsrs	r3, r3, #7
 8006670:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006674:	2b7f      	cmp	r3, #127	@ 0x7f
 8006676:	d8f0      	bhi.n	800665a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800667e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006686:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	4619      	mov	r1, r3
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f7fe fe65 	bl	8005360 <_EncodeStr>
 8006696:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006698:	2209      	movs	r2, #9
 800669a:	68f9      	ldr	r1, [r7, #12]
 800669c:	6938      	ldr	r0, [r7, #16]
 800669e:	f7fe ff9b 	bl	80055d8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	4b40      	ldr	r3, [pc, #256]	@ (80067b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066b6:	e00b      	b.n	80066d0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066be:	1c59      	adds	r1, r3, #1
 80066c0:	6379      	str	r1, [r7, #52]	@ 0x34
 80066c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	09db      	lsrs	r3, r3, #7
 80066ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80066d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80066d4:	d8f0      	bhi.n	80066b8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80066d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	637a      	str	r2, [r7, #52]	@ 0x34
 80066dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066f0:	e00b      	b.n	800670a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80066f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	1c59      	adds	r1, r3, #1
 80066fa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80066fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	701a      	strb	r2, [r3, #0]
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	09db      	lsrs	r3, r3, #7
 8006708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800670a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670c:	2b7f      	cmp	r3, #127	@ 0x7f
 800670e:	d8f0      	bhi.n	80066f2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006716:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	627b      	str	r3, [r7, #36]	@ 0x24
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	623b      	str	r3, [r7, #32]
 800672a:	e00b      	b.n	8006744 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	1c59      	adds	r1, r3, #1
 8006734:	6279      	str	r1, [r7, #36]	@ 0x24
 8006736:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	09db      	lsrs	r3, r3, #7
 8006742:	623b      	str	r3, [r7, #32]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	2b7f      	cmp	r3, #127	@ 0x7f
 8006748:	d8f0      	bhi.n	800672c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006750:	6a3a      	ldr	r2, [r7, #32]
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	61fb      	str	r3, [r7, #28]
 800675e:	2300      	movs	r3, #0
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	e00b      	b.n	800677c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	1c59      	adds	r1, r3, #1
 800676c:	61f9      	str	r1, [r7, #28]
 800676e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	09db      	lsrs	r3, r3, #7
 800677a:	61bb      	str	r3, [r7, #24]
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006780:	d8f0      	bhi.n	8006764 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	61fa      	str	r2, [r7, #28]
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006792:	2215      	movs	r2, #21
 8006794:	68f9      	ldr	r1, [r7, #12]
 8006796:	6938      	ldr	r0, [r7, #16]
 8006798:	f7fe ff1e 	bl	80055d8 <_SendPacket>
  RECORD_END();
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f383 8811 	msr	BASEPRI, r3
}
 80067a2:	bf00      	nop
 80067a4:	3748      	adds	r7, #72	@ 0x48
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	200143c8 	.word	0x200143c8
 80067b0:	20014398 	.word	0x20014398

080067b4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80067b8:	4b07      	ldr	r3, [pc, #28]	@ (80067d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d008      	beq.n	80067d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067c0:	4b05      	ldr	r3, [pc, #20]	@ (80067d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80067ca:	4b03      	ldr	r3, [pc, #12]	@ (80067d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	4798      	blx	r3
  }
}
 80067d2:	bf00      	nop
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20014398 	.word	0x20014398

080067dc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067e4:	f3ef 8311 	mrs	r3, BASEPRI
 80067e8:	f04f 0120 	mov.w	r1, #32
 80067ec:	f381 8811 	msr	BASEPRI, r1
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	480b      	ldr	r0, [pc, #44]	@ (8006820 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80067f4:	f7fe fe01 	bl	80053fa <_PreparePacket>
 80067f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067fa:	2280      	movs	r2, #128	@ 0x80
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	6938      	ldr	r0, [r7, #16]
 8006800:	f7fe fdae 	bl	8005360 <_EncodeStr>
 8006804:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006806:	220e      	movs	r2, #14
 8006808:	68f9      	ldr	r1, [r7, #12]
 800680a:	6938      	ldr	r0, [r7, #16]
 800680c:	f7fe fee4 	bl	80055d8 <_SendPacket>
  RECORD_END();
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f383 8811 	msr	BASEPRI, r3
}
 8006816:	bf00      	nop
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	200143c8 	.word	0x200143c8

08006824 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006824:	b590      	push	{r4, r7, lr}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800682a:	4b15      	ldr	r3, [pc, #84]	@ (8006880 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01a      	beq.n	8006868 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006832:	4b13      	ldr	r3, [pc, #76]	@ (8006880 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d015      	beq.n	8006868 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800683c:	4b10      	ldr	r3, [pc, #64]	@ (8006880 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4798      	blx	r3
 8006844:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006848:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800684a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	000a      	movs	r2, r1
 8006858:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800685a:	4613      	mov	r3, r2
 800685c:	461a      	mov	r2, r3
 800685e:	4621      	mov	r1, r4
 8006860:	200d      	movs	r0, #13
 8006862:	f7ff fbe7 	bl	8006034 <SEGGER_SYSVIEW_RecordU32x2>
 8006866:	e006      	b.n	8006876 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006868:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4619      	mov	r1, r3
 800686e:	200c      	movs	r0, #12
 8006870:	f7ff fba4 	bl	8005fbc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	bd90      	pop	{r4, r7, pc}
 800687e:	bf00      	nop
 8006880:	20014398 	.word	0x20014398
 8006884:	e0001004 	.word	0xe0001004

08006888 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800688e:	f3ef 8311 	mrs	r3, BASEPRI
 8006892:	f04f 0120 	mov.w	r1, #32
 8006896:	f381 8811 	msr	BASEPRI, r1
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	4819      	ldr	r0, [pc, #100]	@ (8006904 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800689e:	f7fe fdac 	bl	80053fa <_PreparePacket>
 80068a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80068a8:	4b17      	ldr	r3, [pc, #92]	@ (8006908 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	e00b      	b.n	80068d4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	1c59      	adds	r1, r3, #1
 80068c4:	6179      	str	r1, [r7, #20]
 80068c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	09db      	lsrs	r3, r3, #7
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80068d8:	d8f0      	bhi.n	80068bc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	617a      	str	r2, [r7, #20]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80068ea:	2202      	movs	r2, #2
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	68b8      	ldr	r0, [r7, #8]
 80068f0:	f7fe fe72 	bl	80055d8 <_SendPacket>
  RECORD_END();
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f383 8811 	msr	BASEPRI, r3
}
 80068fa:	bf00      	nop
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	200143c8 	.word	0x200143c8
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006912:	f3ef 8311 	mrs	r3, BASEPRI
 8006916:	f04f 0120 	mov.w	r1, #32
 800691a:	f381 8811 	msr	BASEPRI, r1
 800691e:	607b      	str	r3, [r7, #4]
 8006920:	4807      	ldr	r0, [pc, #28]	@ (8006940 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006922:	f7fe fd6a 	bl	80053fa <_PreparePacket>
 8006926:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006928:	2203      	movs	r2, #3
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6838      	ldr	r0, [r7, #0]
 800692e:	f7fe fe53 	bl	80055d8 <_SendPacket>
  RECORD_END();
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f383 8811 	msr	BASEPRI, r3
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	200143c8 	.word	0x200143c8

08006944 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800694a:	f3ef 8311 	mrs	r3, BASEPRI
 800694e:	f04f 0120 	mov.w	r1, #32
 8006952:	f381 8811 	msr	BASEPRI, r1
 8006956:	607b      	str	r3, [r7, #4]
 8006958:	4807      	ldr	r0, [pc, #28]	@ (8006978 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800695a:	f7fe fd4e 	bl	80053fa <_PreparePacket>
 800695e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006960:	2212      	movs	r2, #18
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6838      	ldr	r0, [r7, #0]
 8006966:	f7fe fe37 	bl	80055d8 <_SendPacket>
  RECORD_END();
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f383 8811 	msr	BASEPRI, r3
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	200143c8 	.word	0x200143c8

0800697c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006982:	f3ef 8311 	mrs	r3, BASEPRI
 8006986:	f04f 0120 	mov.w	r1, #32
 800698a:	f381 8811 	msr	BASEPRI, r1
 800698e:	607b      	str	r3, [r7, #4]
 8006990:	4807      	ldr	r0, [pc, #28]	@ (80069b0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006992:	f7fe fd32 	bl	80053fa <_PreparePacket>
 8006996:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006998:	2211      	movs	r2, #17
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6838      	ldr	r0, [r7, #0]
 800699e:	f7fe fe1b 	bl	80055d8 <_SendPacket>
  RECORD_END();
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f383 8811 	msr	BASEPRI, r3
}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	200143c8 	.word	0x200143c8

080069b4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069bc:	f3ef 8311 	mrs	r3, BASEPRI
 80069c0:	f04f 0120 	mov.w	r1, #32
 80069c4:	f381 8811 	msr	BASEPRI, r1
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	4819      	ldr	r0, [pc, #100]	@ (8006a30 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80069cc:	f7fe fd15 	bl	80053fa <_PreparePacket>
 80069d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069d6:	4b17      	ldr	r3, [pc, #92]	@ (8006a34 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	e00b      	b.n	8006a02 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	1c59      	adds	r1, r3, #1
 80069f2:	61f9      	str	r1, [r7, #28]
 80069f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	09db      	lsrs	r3, r3, #7
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a06:	d8f0      	bhi.n	80069ea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	61fa      	str	r2, [r7, #28]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a18:	2208      	movs	r2, #8
 8006a1a:	68f9      	ldr	r1, [r7, #12]
 8006a1c:	6938      	ldr	r0, [r7, #16]
 8006a1e:	f7fe fddb 	bl	80055d8 <_SendPacket>
  RECORD_END();
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f383 8811 	msr	BASEPRI, r3
}
 8006a28:	bf00      	nop
 8006a2a:	3720      	adds	r7, #32
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	200143c8 	.word	0x200143c8
 8006a34:	20014398 	.word	0x20014398

08006a38 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a40:	f3ef 8311 	mrs	r3, BASEPRI
 8006a44:	f04f 0120 	mov.w	r1, #32
 8006a48:	f381 8811 	msr	BASEPRI, r1
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	4819      	ldr	r0, [pc, #100]	@ (8006ab4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a50:	f7fe fcd3 	bl	80053fa <_PreparePacket>
 8006a54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a5a:	4b17      	ldr	r3, [pc, #92]	@ (8006ab8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	61bb      	str	r3, [r7, #24]
 8006a6c:	e00b      	b.n	8006a86 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	1c59      	adds	r1, r3, #1
 8006a76:	61f9      	str	r1, [r7, #28]
 8006a78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	09db      	lsrs	r3, r3, #7
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a8a:	d8f0      	bhi.n	8006a6e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	61fa      	str	r2, [r7, #28]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	6938      	ldr	r0, [r7, #16]
 8006aa2:	f7fe fd99 	bl	80055d8 <_SendPacket>
  RECORD_END();
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f383 8811 	msr	BASEPRI, r3
}
 8006aac:	bf00      	nop
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	200143c8 	.word	0x200143c8
 8006ab8:	20014398 	.word	0x20014398

08006abc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac8:	f04f 0120 	mov.w	r1, #32
 8006acc:	f381 8811 	msr	BASEPRI, r1
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	4819      	ldr	r0, [pc, #100]	@ (8006b38 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ad4:	f7fe fc91 	bl	80053fa <_PreparePacket>
 8006ad8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ade:	4b17      	ldr	r3, [pc, #92]	@ (8006b3c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	e00b      	b.n	8006b0a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	1c59      	adds	r1, r3, #1
 8006afa:	61f9      	str	r1, [r7, #28]
 8006afc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	09db      	lsrs	r3, r3, #7
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b0e:	d8f0      	bhi.n	8006af2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	61fa      	str	r2, [r7, #28]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b20:	2206      	movs	r2, #6
 8006b22:	68f9      	ldr	r1, [r7, #12]
 8006b24:	6938      	ldr	r0, [r7, #16]
 8006b26:	f7fe fd57 	bl	80055d8 <_SendPacket>
  RECORD_END();
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f383 8811 	msr	BASEPRI, r3
}
 8006b30:	bf00      	nop
 8006b32:	3720      	adds	r7, #32
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	200143c8 	.word	0x200143c8
 8006b3c:	20014398 	.word	0x20014398

08006b40 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006b48:	4b04      	ldr	r3, [pc, #16]	@ (8006b5c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	1ad3      	subs	r3, r2, r3
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	20014398 	.word	0x20014398

08006b60 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08c      	sub	sp, #48	@ 0x30
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	4603      	mov	r3, r0
 8006b68:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c58 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d06d      	beq.n	8006c4e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006b72:	4b39      	ldr	r3, [pc, #228]	@ (8006c58 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006b78:	2300      	movs	r3, #0
 8006b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b7c:	e008      	b.n	8006b90 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d007      	beq.n	8006b9a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d3f2      	bcc.n	8006b7e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006b98:	e000      	b.n	8006b9c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006b9a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d055      	beq.n	8006c4e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba6:	f04f 0120 	mov.w	r1, #32
 8006baa:	f381 8811 	msr	BASEPRI, r1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	482a      	ldr	r0, [pc, #168]	@ (8006c5c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006bb2:	f7fe fc22 	bl	80053fa <_PreparePacket>
 8006bb6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	623b      	str	r3, [r7, #32]
 8006bc4:	e00b      	b.n	8006bde <SEGGER_SYSVIEW_SendModule+0x7e>
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	1c59      	adds	r1, r3, #1
 8006bce:	6279      	str	r1, [r7, #36]	@ 0x24
 8006bd0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	09db      	lsrs	r3, r3, #7
 8006bdc:	623b      	str	r3, [r7, #32]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006be2:	d8f0      	bhi.n	8006bc6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006bea:	6a3a      	ldr	r2, [r7, #32]
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	e00b      	b.n	8006c18 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	1c59      	adds	r1, r3, #1
 8006c08:	61f9      	str	r1, [r7, #28]
 8006c0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	09db      	lsrs	r3, r3, #7
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c1c:	d8f0      	bhi.n	8006c00 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	61fa      	str	r2, [r7, #28]
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2280      	movs	r2, #128	@ 0x80
 8006c34:	4619      	mov	r1, r3
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f7fe fb92 	bl	8005360 <_EncodeStr>
 8006c3c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006c3e:	2216      	movs	r2, #22
 8006c40:	68f9      	ldr	r1, [r7, #12]
 8006c42:	6938      	ldr	r0, [r7, #16]
 8006c44:	f7fe fcc8 	bl	80055d8 <_SendPacket>
      RECORD_END();
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006c4e:	bf00      	nop
 8006c50:	3730      	adds	r7, #48	@ 0x30
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	200143c0 	.word	0x200143c0
 8006c5c:	200143c8 	.word	0x200143c8

08006c60 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006c66:	4b0c      	ldr	r3, [pc, #48]	@ (8006c98 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00f      	beq.n	8006c8e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1f2      	bne.n	8006c74 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	200143c0 	.word	0x200143c0

08006c9c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006ca2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ca6:	f04f 0120 	mov.w	r1, #32
 8006caa:	f381 8811 	msr	BASEPRI, r1
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	4817      	ldr	r0, [pc, #92]	@ (8006d10 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006cb2:	f7fe fba2 	bl	80053fa <_PreparePacket>
 8006cb6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	4b14      	ldr	r3, [pc, #80]	@ (8006d14 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	e00b      	b.n	8006ce0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	1c59      	adds	r1, r3, #1
 8006cd0:	6179      	str	r1, [r7, #20]
 8006cd2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	09db      	lsrs	r3, r3, #7
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ce4:	d8f0      	bhi.n	8006cc8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	617a      	str	r2, [r7, #20]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006cf6:	221b      	movs	r2, #27
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	68b8      	ldr	r0, [r7, #8]
 8006cfc:	f7fe fc6c 	bl	80055d8 <_SendPacket>
  RECORD_END();
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f383 8811 	msr	BASEPRI, r3
}
 8006d06:	bf00      	nop
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	200143c8 	.word	0x200143c8
 8006d14:	200143c4 	.word	0x200143c4

08006d18 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006d18:	b40f      	push	{r0, r1, r2, r3}
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006d20:	f107 0314 	add.w	r3, r7, #20
 8006d24:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006d26:	1d3b      	adds	r3, r7, #4
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	6938      	ldr	r0, [r7, #16]
 8006d2e:	f7fe fedb 	bl	8005ae8 <_VPrintTarget>
  va_end(ParamList);
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d3c:	b004      	add	sp, #16
 8006d3e:	4770      	bx	lr

08006d40 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b08a      	sub	sp, #40	@ 0x28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d48:	f3ef 8311 	mrs	r3, BASEPRI
 8006d4c:	f04f 0120 	mov.w	r1, #32
 8006d50:	f381 8811 	msr	BASEPRI, r1
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	4827      	ldr	r0, [pc, #156]	@ (8006df4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d58:	f7fe fb4f 	bl	80053fa <_PreparePacket>
 8006d5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d5e:	2280      	movs	r2, #128	@ 0x80
 8006d60:	6879      	ldr	r1, [r7, #4]
 8006d62:	6938      	ldr	r0, [r7, #16]
 8006d64:	f7fe fafc 	bl	8005360 <_EncodeStr>
 8006d68:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d6e:	2301      	movs	r3, #1
 8006d70:	623b      	str	r3, [r7, #32]
 8006d72:	e00b      	b.n	8006d8c <SEGGER_SYSVIEW_Warn+0x4c>
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7a:	1c59      	adds	r1, r3, #1
 8006d7c:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	09db      	lsrs	r3, r3, #7
 8006d8a:	623b      	str	r3, [r7, #32]
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d90:	d8f0      	bhi.n	8006d74 <SEGGER_SYSVIEW_Warn+0x34>
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d98:	6a3a      	ldr	r2, [r7, #32]
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	2300      	movs	r3, #0
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	e00b      	b.n	8006dc4 <SEGGER_SYSVIEW_Warn+0x84>
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	1c59      	adds	r1, r3, #1
 8006db4:	61f9      	str	r1, [r7, #28]
 8006db6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	09db      	lsrs	r3, r3, #7
 8006dc2:	61bb      	str	r3, [r7, #24]
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dc8:	d8f0      	bhi.n	8006dac <SEGGER_SYSVIEW_Warn+0x6c>
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	61fa      	str	r2, [r7, #28]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006dda:	221a      	movs	r2, #26
 8006ddc:	68f9      	ldr	r1, [r7, #12]
 8006dde:	6938      	ldr	r0, [r7, #16]
 8006de0:	f7fe fbfa 	bl	80055d8 <_SendPacket>
  RECORD_END();
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f383 8811 	msr	BASEPRI, r3
}
 8006dea:	bf00      	nop
 8006dec:	3728      	adds	r7, #40	@ 0x28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	200143c8 	.word	0x200143c8

08006df8 <memcmp>:
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	3901      	subs	r1, #1
 8006dfc:	4402      	add	r2, r0
 8006dfe:	4290      	cmp	r0, r2
 8006e00:	d101      	bne.n	8006e06 <memcmp+0xe>
 8006e02:	2000      	movs	r0, #0
 8006e04:	e005      	b.n	8006e12 <memcmp+0x1a>
 8006e06:	7803      	ldrb	r3, [r0, #0]
 8006e08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	d001      	beq.n	8006e14 <memcmp+0x1c>
 8006e10:	1b18      	subs	r0, r3, r4
 8006e12:	bd10      	pop	{r4, pc}
 8006e14:	3001      	adds	r0, #1
 8006e16:	e7f2      	b.n	8006dfe <memcmp+0x6>

08006e18 <memset>:
 8006e18:	4402      	add	r2, r0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d100      	bne.n	8006e22 <memset+0xa>
 8006e20:	4770      	bx	lr
 8006e22:	f803 1b01 	strb.w	r1, [r3], #1
 8006e26:	e7f9      	b.n	8006e1c <memset+0x4>

08006e28 <__libc_init_array>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4d0d      	ldr	r5, [pc, #52]	@ (8006e60 <__libc_init_array+0x38>)
 8006e2c:	4c0d      	ldr	r4, [pc, #52]	@ (8006e64 <__libc_init_array+0x3c>)
 8006e2e:	1b64      	subs	r4, r4, r5
 8006e30:	10a4      	asrs	r4, r4, #2
 8006e32:	2600      	movs	r6, #0
 8006e34:	42a6      	cmp	r6, r4
 8006e36:	d109      	bne.n	8006e4c <__libc_init_array+0x24>
 8006e38:	4d0b      	ldr	r5, [pc, #44]	@ (8006e68 <__libc_init_array+0x40>)
 8006e3a:	4c0c      	ldr	r4, [pc, #48]	@ (8006e6c <__libc_init_array+0x44>)
 8006e3c:	f000 f826 	bl	8006e8c <_init>
 8006e40:	1b64      	subs	r4, r4, r5
 8006e42:	10a4      	asrs	r4, r4, #2
 8006e44:	2600      	movs	r6, #0
 8006e46:	42a6      	cmp	r6, r4
 8006e48:	d105      	bne.n	8006e56 <__libc_init_array+0x2e>
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e50:	4798      	blx	r3
 8006e52:	3601      	adds	r6, #1
 8006e54:	e7ee      	b.n	8006e34 <__libc_init_array+0xc>
 8006e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5a:	4798      	blx	r3
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	e7f2      	b.n	8006e46 <__libc_init_array+0x1e>
 8006e60:	08007088 	.word	0x08007088
 8006e64:	08007088 	.word	0x08007088
 8006e68:	08007088 	.word	0x08007088
 8006e6c:	0800708c 	.word	0x0800708c

08006e70 <memcpy>:
 8006e70:	440a      	add	r2, r1
 8006e72:	4291      	cmp	r1, r2
 8006e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e78:	d100      	bne.n	8006e7c <memcpy+0xc>
 8006e7a:	4770      	bx	lr
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e86:	4291      	cmp	r1, r2
 8006e88:	d1f9      	bne.n	8006e7e <memcpy+0xe>
 8006e8a:	bd10      	pop	{r4, pc}

08006e8c <_init>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	bf00      	nop
 8006e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e92:	bc08      	pop	{r3}
 8006e94:	469e      	mov	lr, r3
 8006e96:	4770      	bx	lr

08006e98 <_fini>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	bf00      	nop
 8006e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9e:	bc08      	pop	{r3}
 8006ea0:	469e      	mov	lr, r3
 8006ea2:	4770      	bx	lr
