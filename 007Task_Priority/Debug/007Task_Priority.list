
007Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006340  08006340  00007340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006460  08006460  00008018  2**0
                  CONTENTS
  4 .ARM          00000008  08006460  08006460  00007460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006468  08006468  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006468  08006468  00007468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800646c  0800646c  0000746c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08006470  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014484  20000018  08006488  00008018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001449c  08006488  0000849c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a1c  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300a  00000000  00000000  0001ba64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  0001ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec2  00000000  00000000  0001fda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018026  00000000  00000000  00020c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150fa  00000000  00000000  00038c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099d3e  00000000  00000000  0004dd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7ac0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005058  00000000  00000000  000e7b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  000ecb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006328 	.word	0x08006328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	08006328 	.word	0x08006328

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ec8 	.word	0x20012ec8

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b96a 	b.w	8000570 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	460c      	mov	r4, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14e      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c0:	4694      	mov	ip, r2
 80002c2:	458c      	cmp	ip, r1
 80002c4:	4686      	mov	lr, r0
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	d962      	bls.n	8000392 <__udivmoddi4+0xde>
 80002cc:	b14a      	cbz	r2, 80002e2 <__udivmoddi4+0x2e>
 80002ce:	f1c2 0320 	rsb	r3, r2, #32
 80002d2:	4091      	lsls	r1, r2
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002dc:	4319      	orrs	r1, r3
 80002de:	fa00 fe02 	lsl.w	lr, r0, r2
 80002e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e6:	fa1f f68c 	uxth.w	r6, ip
 80002ea:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb07 1114 	mls	r1, r7, r4, r1
 80002f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002fa:	fb04 f106 	mul.w	r1, r4, r6
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f104 30ff 	add.w	r0, r4, #4294967295
 800030a:	f080 8112 	bcs.w	8000532 <__udivmoddi4+0x27e>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 810f 	bls.w	8000532 <__udivmoddi4+0x27e>
 8000314:	3c02      	subs	r4, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a59      	subs	r1, r3, r1
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000322:	fb07 1110 	mls	r1, r7, r0, r1
 8000326:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032a:	fb00 f606 	mul.w	r6, r0, r6
 800032e:	429e      	cmp	r6, r3
 8000330:	d90a      	bls.n	8000348 <__udivmoddi4+0x94>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 31ff 	add.w	r1, r0, #4294967295
 800033a:	f080 80fc 	bcs.w	8000536 <__udivmoddi4+0x282>
 800033e:	429e      	cmp	r6, r3
 8000340:	f240 80f9 	bls.w	8000536 <__udivmoddi4+0x282>
 8000344:	4463      	add	r3, ip
 8000346:	3802      	subs	r0, #2
 8000348:	1b9b      	subs	r3, r3, r6
 800034a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa6>
 8000352:	40d3      	lsrs	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	e9c5 3200 	strd	r3, r2, [r5]
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xba>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb4>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa6>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d146      	bne.n	8000404 <__udivmoddi4+0x150>
 8000376:	42a3      	cmp	r3, r4
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xcc>
 800037a:	4290      	cmp	r0, r2
 800037c:	f0c0 80f0 	bcc.w	8000560 <__udivmoddi4+0x2ac>
 8000380:	1a86      	subs	r6, r0, r2
 8000382:	eb64 0303 	sbc.w	r3, r4, r3
 8000386:	2001      	movs	r0, #1
 8000388:	2d00      	cmp	r5, #0
 800038a:	d0e6      	beq.n	800035a <__udivmoddi4+0xa6>
 800038c:	e9c5 6300 	strd	r6, r3, [r5]
 8000390:	e7e3      	b.n	800035a <__udivmoddi4+0xa6>
 8000392:	2a00      	cmp	r2, #0
 8000394:	f040 8090 	bne.w	80004b8 <__udivmoddi4+0x204>
 8000398:	eba1 040c 	sub.w	r4, r1, ip
 800039c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a0:	fa1f f78c 	uxth.w	r7, ip
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb08 4416 	mls	r4, r8, r6, r4
 80003b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b6:	fb07 f006 	mul.w	r0, r7, r6
 80003ba:	4298      	cmp	r0, r3
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x11c>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x11a>
 80003c8:	4298      	cmp	r0, r3
 80003ca:	f200 80cd 	bhi.w	8000568 <__udivmoddi4+0x2b4>
 80003ce:	4626      	mov	r6, r4
 80003d0:	1a1c      	subs	r4, r3, r0
 80003d2:	fa1f f38e 	uxth.w	r3, lr
 80003d6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003da:	fb08 4410 	mls	r4, r8, r0, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb00 f707 	mul.w	r7, r0, r7
 80003e6:	429f      	cmp	r7, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x148>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x146>
 80003f4:	429f      	cmp	r7, r3
 80003f6:	f200 80b0 	bhi.w	800055a <__udivmoddi4+0x2a6>
 80003fa:	4620      	mov	r0, r4
 80003fc:	1bdb      	subs	r3, r3, r7
 80003fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0x9c>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa22 f706 	lsr.w	r7, r2, r6
 800040e:	431f      	orrs	r7, r3
 8000410:	fa20 fc06 	lsr.w	ip, r0, r6
 8000414:	fa04 f301 	lsl.w	r3, r4, r1
 8000418:	ea43 030c 	orr.w	r3, r3, ip
 800041c:	40f4      	lsrs	r4, r6
 800041e:	fa00 f801 	lsl.w	r8, r0, r1
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000428:	fbb4 fef0 	udiv	lr, r4, r0
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fb00 441e 	mls	r4, r0, lr, r4
 8000434:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000438:	fb0e f90c 	mul.w	r9, lr, ip
 800043c:	45a1      	cmp	r9, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	d90a      	bls.n	800045a <__udivmoddi4+0x1a6>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f10e 3aff 	add.w	sl, lr, #4294967295
 800044a:	f080 8084 	bcs.w	8000556 <__udivmoddi4+0x2a2>
 800044e:	45a1      	cmp	r9, r4
 8000450:	f240 8081 	bls.w	8000556 <__udivmoddi4+0x2a2>
 8000454:	f1ae 0e02 	sub.w	lr, lr, #2
 8000458:	443c      	add	r4, r7
 800045a:	eba4 0409 	sub.w	r4, r4, r9
 800045e:	fa1f f983 	uxth.w	r9, r3
 8000462:	fbb4 f3f0 	udiv	r3, r4, r0
 8000466:	fb00 4413 	mls	r4, r0, r3, r4
 800046a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	45a4      	cmp	ip, r4
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1d2>
 8000476:	193c      	adds	r4, r7, r4
 8000478:	f103 30ff 	add.w	r0, r3, #4294967295
 800047c:	d267      	bcs.n	800054e <__udivmoddi4+0x29a>
 800047e:	45a4      	cmp	ip, r4
 8000480:	d965      	bls.n	800054e <__udivmoddi4+0x29a>
 8000482:	3b02      	subs	r3, #2
 8000484:	443c      	add	r4, r7
 8000486:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800048a:	fba0 9302 	umull	r9, r3, r0, r2
 800048e:	eba4 040c 	sub.w	r4, r4, ip
 8000492:	429c      	cmp	r4, r3
 8000494:	46ce      	mov	lr, r9
 8000496:	469c      	mov	ip, r3
 8000498:	d351      	bcc.n	800053e <__udivmoddi4+0x28a>
 800049a:	d04e      	beq.n	800053a <__udivmoddi4+0x286>
 800049c:	b155      	cbz	r5, 80004b4 <__udivmoddi4+0x200>
 800049e:	ebb8 030e 	subs.w	r3, r8, lr
 80004a2:	eb64 040c 	sbc.w	r4, r4, ip
 80004a6:	fa04 f606 	lsl.w	r6, r4, r6
 80004aa:	40cb      	lsrs	r3, r1
 80004ac:	431e      	orrs	r6, r3
 80004ae:	40cc      	lsrs	r4, r1
 80004b0:	e9c5 6400 	strd	r6, r4, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	e750      	b.n	800035a <__udivmoddi4+0xa6>
 80004b8:	f1c2 0320 	rsb	r3, r2, #32
 80004bc:	fa20 f103 	lsr.w	r1, r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa24 f303 	lsr.w	r3, r4, r3
 80004c8:	4094      	lsls	r4, r2
 80004ca:	430c      	orrs	r4, r1
 80004cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d4:	fa1f f78c 	uxth.w	r7, ip
 80004d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004dc:	fb08 3110 	mls	r1, r8, r0, r3
 80004e0:	0c23      	lsrs	r3, r4, #16
 80004e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e6:	fb00 f107 	mul.w	r1, r0, r7
 80004ea:	4299      	cmp	r1, r3
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x24c>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f6:	d22c      	bcs.n	8000552 <__udivmoddi4+0x29e>
 80004f8:	4299      	cmp	r1, r3
 80004fa:	d92a      	bls.n	8000552 <__udivmoddi4+0x29e>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1a5b      	subs	r3, r3, r1
 8000502:	b2a4      	uxth	r4, r4
 8000504:	fbb3 f1f8 	udiv	r1, r3, r8
 8000508:	fb08 3311 	mls	r3, r8, r1, r3
 800050c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000510:	fb01 f307 	mul.w	r3, r1, r7
 8000514:	42a3      	cmp	r3, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x276>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000520:	d213      	bcs.n	800054a <__udivmoddi4+0x296>
 8000522:	42a3      	cmp	r3, r4
 8000524:	d911      	bls.n	800054a <__udivmoddi4+0x296>
 8000526:	3902      	subs	r1, #2
 8000528:	4464      	add	r4, ip
 800052a:	1ae4      	subs	r4, r4, r3
 800052c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000530:	e739      	b.n	80003a6 <__udivmoddi4+0xf2>
 8000532:	4604      	mov	r4, r0
 8000534:	e6f0      	b.n	8000318 <__udivmoddi4+0x64>
 8000536:	4608      	mov	r0, r1
 8000538:	e706      	b.n	8000348 <__udivmoddi4+0x94>
 800053a:	45c8      	cmp	r8, r9
 800053c:	d2ae      	bcs.n	800049c <__udivmoddi4+0x1e8>
 800053e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000542:	eb63 0c07 	sbc.w	ip, r3, r7
 8000546:	3801      	subs	r0, #1
 8000548:	e7a8      	b.n	800049c <__udivmoddi4+0x1e8>
 800054a:	4631      	mov	r1, r6
 800054c:	e7ed      	b.n	800052a <__udivmoddi4+0x276>
 800054e:	4603      	mov	r3, r0
 8000550:	e799      	b.n	8000486 <__udivmoddi4+0x1d2>
 8000552:	4630      	mov	r0, r6
 8000554:	e7d4      	b.n	8000500 <__udivmoddi4+0x24c>
 8000556:	46d6      	mov	lr, sl
 8000558:	e77f      	b.n	800045a <__udivmoddi4+0x1a6>
 800055a:	4463      	add	r3, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e74d      	b.n	80003fc <__udivmoddi4+0x148>
 8000560:	4606      	mov	r6, r0
 8000562:	4623      	mov	r3, r4
 8000564:	4608      	mov	r0, r1
 8000566:	e70f      	b.n	8000388 <__udivmoddi4+0xd4>
 8000568:	3e02      	subs	r6, #2
 800056a:	4463      	add	r3, ip
 800056c:	e730      	b.n	80003d0 <__udivmoddi4+0x11c>
 800056e:	bf00      	nop

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fae5 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f84f 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8b9 	bl	80006f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000586:	4b21      	ldr	r3, [pc, #132]	@ (800060c <main+0x98>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a20      	ldr	r2, [pc, #128]	@ (800060c <main+0x98>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000592:	f004 f973 	bl	800487c <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000596:	f005 f911 	bl	80057bc <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 800059a:	f107 0308 	add.w	r3, r7, #8
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	2302      	movs	r3, #2
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2300      	movs	r3, #0
 80005a6:	22c8      	movs	r2, #200	@ 0xc8
 80005a8:	4919      	ldr	r1, [pc, #100]	@ (8000610 <main+0x9c>)
 80005aa:	481a      	ldr	r0, [pc, #104]	@ (8000614 <main+0xa0>)
 80005ac:	f002 f8e2 	bl	8002774 <xTaskCreate>
 80005b0:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d00b      	beq.n	80005d0 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005bc:	f383 8811 	msr	BASEPRI, r3
 80005c0:	f3bf 8f6f 	isb	sy
 80005c4:	f3bf 8f4f 	dsb	sy
 80005c8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, NULL, 3, &task2_handle);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2303      	movs	r3, #3
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	22c8      	movs	r2, #200	@ 0xc8
 80005dc:	490e      	ldr	r1, [pc, #56]	@ (8000618 <main+0xa4>)
 80005de:	480f      	ldr	r0, [pc, #60]	@ (800061c <main+0xa8>)
 80005e0:	f002 f8c8 	bl	8002774 <xTaskCreate>
 80005e4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00b      	beq.n	8000604 <main+0x90>
        __asm volatile
 80005ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005f0:	f383 8811 	msr	BASEPRI, r3
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	60fb      	str	r3, [r7, #12]
    }
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <main+0x8c>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000604:	f002 fb48 	bl	8002c98 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <main+0x94>
 800060c:	e0001000 	.word	0xe0001000
 8000610:	08006340 	.word	0x08006340
 8000614:	08000895 	.word	0x08000895
 8000618:	08006348 	.word	0x08006348
 800061c:	080008b9 	.word	0x080008b9

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	@ 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 fe40 	bl	80062b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <SystemClock_Config+0xd0>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a28      	ldr	r2, [pc, #160]	@ (80006f0 <SystemClock_Config+0xd0>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <SystemClock_Config+0xd4>)
 800066e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000694:	2310      	movs	r3, #16
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000698:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800069c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069e:	2304      	movs	r3, #4
 80006a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a2:	2307      	movs	r3, #7
 80006a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fd70 	bl	8001190 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006b6:	f000 f931 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 ffd2 	bl	8001680 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006e2:	f000 f91b 	bl	800091c <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	@ 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b39      	ldr	r3, [pc, #228]	@ (80007f8 <MX_GPIO_Init+0x100>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a38      	ldr	r2, [pc, #224]	@ (80007f8 <MX_GPIO_Init+0x100>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b36      	ldr	r3, [pc, #216]	@ (80007f8 <MX_GPIO_Init+0x100>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b32      	ldr	r3, [pc, #200]	@ (80007f8 <MX_GPIO_Init+0x100>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a31      	ldr	r2, [pc, #196]	@ (80007f8 <MX_GPIO_Init+0x100>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b2f      	ldr	r3, [pc, #188]	@ (80007f8 <MX_GPIO_Init+0x100>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <MX_GPIO_Init+0x100>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a2a      	ldr	r2, [pc, #168]	@ (80007f8 <MX_GPIO_Init+0x100>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <MX_GPIO_Init+0x100>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <MX_GPIO_Init+0x100>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a23      	ldr	r2, [pc, #140]	@ (80007f8 <MX_GPIO_Init+0x100>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <MX_GPIO_Init+0x100>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	21e0      	movs	r1, #224	@ 0xe0
 8000782:	481e      	ldr	r0, [pc, #120]	@ (80007fc <MX_GPIO_Init+0x104>)
 8000784:	f000 fcac 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000788:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4818      	ldr	r0, [pc, #96]	@ (8000800 <MX_GPIO_Init+0x108>)
 80007a0:	f000 fb1a 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007a4:	230c      	movs	r3, #12
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b4:	2307      	movs	r3, #7
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	480f      	ldr	r0, [pc, #60]	@ (80007fc <MX_GPIO_Init+0x104>)
 80007c0:	f000 fb0a 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 80007c4:	23e0      	movs	r3, #224	@ 0xe0
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4808      	ldr	r0, [pc, #32]	@ (80007fc <MX_GPIO_Init+0x104>)
 80007dc:	f000 fafc 	bl	8000dd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2028      	movs	r0, #40	@ 0x28
 80007e6:	f000 facd 	bl	8000d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ea:	2028      	movs	r0, #40	@ 0x28
 80007ec:	f000 fae6 	bl	8000dbc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	@ 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020800 	.word	0x40020800

08000804 <switch_priority>:

/* USER CODE BEGIN 4 */
void switch_priority(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 800080e:	f003 fd25 	bl	800425c <vPortEnterCritical>
	if(status_button){
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <switch_priority+0x84>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <switch_priority+0x20>
		status_button = 0;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <switch_priority+0x84>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8000824:	f003 fd4c 	bl	80042c0 <vPortExitCritical>

	if(switch_priority){
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d027      	beq.n	800087e <switch_priority+0x7a>
		t1 = xTaskGetHandle("Task-1");
 800082e:	4817      	ldr	r0, [pc, #92]	@ (800088c <switch_priority+0x88>)
 8000830:	f002 fc32 	bl	8003098 <xTaskGetHandle>
 8000834:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("Task-2");
 8000836:	4816      	ldr	r0, [pc, #88]	@ (8000890 <switch_priority+0x8c>)
 8000838:	f002 fc2e 	bl	8003098 <xTaskGetHandle>
 800083c:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 800083e:	6938      	ldr	r0, [r7, #16]
 8000840:	f002 f922 	bl	8002a88 <uxTaskPriorityGet>
 8000844:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f002 f91e 	bl	8002a88 <uxTaskPriorityGet>
 800084c:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 800084e:	f003 f895 	bl	800397c <xTaskGetCurrentTaskHandle>
 8000852:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8000854:	683a      	ldr	r2, [r7, #0]
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	429a      	cmp	r2, r3
 800085a:	d108      	bne.n	800086e <switch_priority+0x6a>
			vTaskPrioritySet(t1,p2);
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	6938      	ldr	r0, [r7, #16]
 8000860:	f002 f92c 	bl	8002abc <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f002 f928 	bl	8002abc <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}

}
 800086c:	e007      	b.n	800087e <switch_priority+0x7a>
			vTaskPrioritySet(t2,p1);
 800086e:	68b9      	ldr	r1, [r7, #8]
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	f002 f923 	bl	8002abc <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	6938      	ldr	r0, [r7, #16]
 800087a:	f002 f91f 	bl	8002abc <vTaskPrioritySet>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000034 	.word	0x20000034
 800088c:	08006340 	.word	0x08006340
 8000890:	08006348 	.word	0x08006348

08000894 <task1_handler>:

static void task1_handler(void* parameters)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, LED_ORANGE_PIN );
 800089c:	2180      	movs	r1, #128	@ 0x80
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <task1_handler+0x20>)
 80008a0:	f000 fc37 	bl	8001112 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80008a4:	2064      	movs	r0, #100	@ 0x64
 80008a6:	f000 f991 	bl	8000bcc <HAL_Delay>
		switch_priority();
 80008aa:	f7ff ffab 	bl	8000804 <switch_priority>
		HAL_GPIO_TogglePin(GPIOA, LED_ORANGE_PIN );
 80008ae:	bf00      	nop
 80008b0:	e7f4      	b.n	800089c <task1_handler+0x8>
 80008b2:	bf00      	nop
 80008b4:	40020000 	.word	0x40020000

080008b8 <task2_handler>:
	}
}


static void task2_handler(void* parameters)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, LED_RED_PIN);
 80008c0:	2140      	movs	r1, #64	@ 0x40
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <task2_handler+0x20>)
 80008c4:	f000 fc25 	bl	8001112 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80008c8:	2064      	movs	r0, #100	@ 0x64
 80008ca:	f000 f97f 	bl	8000bcc <HAL_Delay>
		switch_priority();
 80008ce:	f7ff ff99 	bl	8000804 <switch_priority>
		HAL_GPIO_TogglePin(GPIOA, LED_RED_PIN);
 80008d2:	bf00      	nop
 80008d4:	e7f4      	b.n	80008c0 <task2_handler+0x8>
 80008d6:	bf00      	nop
 80008d8:	40020000 	.word	0x40020000

080008dc <button_interrupt_handler>:
	}
}

void button_interrupt_handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 80008e0:	f005 fa34 	bl	8005d4c <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 80008e4:	4b03      	ldr	r3, [pc, #12]	@ (80008f4 <button_interrupt_handler+0x18>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 80008ea:	f005 fa71 	bl	8005dd0 <SEGGER_SYSVIEW_RecordExitISR>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000034 	.word	0x20000034

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a04      	ldr	r2, [pc, #16]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d101      	bne.n	800090e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090a:	f000 f93f 	bl	8000b8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40000c00 	.word	0x40000c00

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	@ (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800093c:	6453      	str	r3, [r2, #68]	@ 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	@ 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	@ 0x38
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	4b33      	ldr	r3, [pc, #204]	@ (8000a5c <HAL_InitTick+0xe4>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	4a32      	ldr	r2, [pc, #200]	@ (8000a5c <HAL_InitTick+0xe4>)
 8000992:	f043 0308 	orr.w	r3, r3, #8
 8000996:	6413      	str	r3, [r2, #64]	@ 0x40
 8000998:	4b30      	ldr	r3, [pc, #192]	@ (8000a5c <HAL_InitTick+0xe4>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	f003 0308 	and.w	r3, r3, #8
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a4:	f107 0210 	add.w	r2, r7, #16
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f872 	bl	8001a98 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009b4:	6a3b      	ldr	r3, [r7, #32]
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009be:	f001 f857 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 80009c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80009c4:	e004      	b.n	80009d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009c6:	f001 f853 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 80009ca:	4603      	mov	r3, r0
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009d2:	4a23      	ldr	r2, [pc, #140]	@ (8000a60 <HAL_InitTick+0xe8>)
 80009d4:	fba2 2303 	umull	r2, r3, r2, r3
 80009d8:	0c9b      	lsrs	r3, r3, #18
 80009da:	3b01      	subs	r3, #1
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009de:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <HAL_InitTick+0xec>)
 80009e0:	4a21      	ldr	r2, [pc, #132]	@ (8000a68 <HAL_InitTick+0xf0>)
 80009e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a64 <HAL_InitTick+0xec>)
 80009e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009ea:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80009ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000a64 <HAL_InitTick+0xec>)
 80009ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <HAL_InitTick+0xec>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <HAL_InitTick+0xec>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <HAL_InitTick+0xec>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000a04:	4817      	ldr	r0, [pc, #92]	@ (8000a64 <HAL_InitTick+0xec>)
 8000a06:	f001 f879 	bl	8001afc <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d11b      	bne.n	8000a50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000a18:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <HAL_InitTick+0xec>)
 8000a1a:	f001 f8c9 	bl	8001bb0 <HAL_TIM_Base_Start_IT>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d111      	bne.n	8000a50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a2c:	2032      	movs	r0, #50	@ 0x32
 8000a2e:	f000 f9c5 	bl	8000dbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b0f      	cmp	r3, #15
 8000a36:	d808      	bhi.n	8000a4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	2032      	movs	r0, #50	@ 0x32
 8000a3e:	f000 f9a1 	bl	8000d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <HAL_InitTick+0xf4>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	e002      	b.n	8000a50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3738      	adds	r7, #56	@ 0x38
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	431bde83 	.word	0x431bde83
 8000a64:	20000038 	.word	0x20000038
 8000a68:	40000c00 	.word	0x40000c00
 8000a6c:	20000004 	.word	0x20000004

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <NMI_Handler+0x4>

08000a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <MemManage_Handler+0x4>

08000a88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	button_interrupt_handler();
 8000aaa:	f7ff ff17 	bl	80008dc <button_interrupt_handler>

	//clear EXTI 13 pending bit in the exti pending register
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000aae:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ab2:	f000 fb49 	bl	8001148 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ac0:	4802      	ldr	r0, [pc, #8]	@ (8000acc <TIM5_IRQHandler+0x10>)
 8000ac2:	f001 f8d7 	bl	8001c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000038 	.word	0x20000038

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000af8:	f7ff ffea 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000afc:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000afe:	490d      	ldr	r1, [pc, #52]	@ (8000b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b00:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b14:	4c0a      	ldr	r4, [pc, #40]	@ (8000b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f005 fbcf 	bl	80062c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fd25 	bl	8000574 <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b38:	08006470 	.word	0x08006470
  ldr r2, =_sbss
 8000b3c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b40:	2001449c 	.word	0x2001449c

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f8fc 	bl	8000d6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff fefe 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fed4 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000080 	.word	0x20000080

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000080 	.word	0x20000080

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	@ (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	@ (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	@ 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ff4c 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d96:	f7ff ff61 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000d9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	6978      	ldr	r0, [r7, #20]
 8000da2:	f7ff ffb1 	bl	8000d08 <NVIC_EncodePriority>
 8000da6:	4602      	mov	r2, r0
 8000da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff80 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff54 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	@ 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	e159      	b.n	80010a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	f040 8148 	bne.w	80010a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d130      	bne.n	8000e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 0201 	and.w	r2, r3, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d017      	beq.n	8000ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d123      	bne.n	8000f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	69b9      	ldr	r1, [r7, #24]
 8000f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0203 	and.w	r2, r3, #3
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80a2 	beq.w	80010a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b57      	ldr	r3, [pc, #348]	@ (80010c0 <HAL_GPIO_Init+0x2e8>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	4a56      	ldr	r2, [pc, #344]	@ (80010c0 <HAL_GPIO_Init+0x2e8>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6e:	4b54      	ldr	r3, [pc, #336]	@ (80010c0 <HAL_GPIO_Init+0x2e8>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7a:	4a52      	ldr	r2, [pc, #328]	@ (80010c4 <HAL_GPIO_Init+0x2ec>)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a49      	ldr	r2, [pc, #292]	@ (80010c8 <HAL_GPIO_Init+0x2f0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d019      	beq.n	8000fda <HAL_GPIO_Init+0x202>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a48      	ldr	r2, [pc, #288]	@ (80010cc <HAL_GPIO_Init+0x2f4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0x1fe>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a47      	ldr	r2, [pc, #284]	@ (80010d0 <HAL_GPIO_Init+0x2f8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d00d      	beq.n	8000fd2 <HAL_GPIO_Init+0x1fa>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a46      	ldr	r2, [pc, #280]	@ (80010d4 <HAL_GPIO_Init+0x2fc>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d007      	beq.n	8000fce <HAL_GPIO_Init+0x1f6>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a45      	ldr	r2, [pc, #276]	@ (80010d8 <HAL_GPIO_Init+0x300>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_GPIO_Init+0x1f2>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	e008      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fca:	2307      	movs	r3, #7
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e004      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	f002 0203 	and.w	r2, r2, #3
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fec:	4935      	ldr	r1, [pc, #212]	@ (80010c4 <HAL_GPIO_Init+0x2ec>)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffa:	4b38      	ldr	r3, [pc, #224]	@ (80010dc <HAL_GPIO_Init+0x304>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101e:	4a2f      	ldr	r2, [pc, #188]	@ (80010dc <HAL_GPIO_Init+0x304>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001024:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <HAL_GPIO_Init+0x304>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001048:	4a24      	ldr	r2, [pc, #144]	@ (80010dc <HAL_GPIO_Init+0x304>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800104e:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <HAL_GPIO_Init+0x304>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001072:	4a1a      	ldr	r2, [pc, #104]	@ (80010dc <HAL_GPIO_Init+0x304>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <HAL_GPIO_Init+0x304>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109c:	4a0f      	ldr	r2, [pc, #60]	@ (80010dc <HAL_GPIO_Init+0x304>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3301      	adds	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	f67f aea2 	bls.w	8000df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3724      	adds	r7, #36	@ 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40013800 	.word	0x40013800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020c00 	.word	0x40020c00
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010fc:	e003      	b.n	8001106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001124:	887a      	ldrh	r2, [r7, #2]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4013      	ands	r3, r2
 800112a:	041a      	lsls	r2, r3, #16
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43d9      	mvns	r1, r3
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	400b      	ands	r3, r1
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001154:	695a      	ldr	r2, [r3, #20]
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800115e:	4a05      	ldr	r2, [pc, #20]	@ (8001174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f806 	bl	8001178 <HAL_GPIO_EXTI_Callback>
  }
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40013c00 	.word	0x40013c00

08001178 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e267      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d075      	beq.n	800129a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ae:	4b88      	ldr	r3, [pc, #544]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d00c      	beq.n	80011d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ba:	4b85      	ldr	r3, [pc, #532]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d112      	bne.n	80011ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c6:	4b82      	ldr	r3, [pc, #520]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011d2:	d10b      	bne.n	80011ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	4b7e      	ldr	r3, [pc, #504]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d05b      	beq.n	8001298 <HAL_RCC_OscConfig+0x108>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d157      	bne.n	8001298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e242      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011f4:	d106      	bne.n	8001204 <HAL_RCC_OscConfig+0x74>
 80011f6:	4b76      	ldr	r3, [pc, #472]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a75      	ldr	r2, [pc, #468]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e01d      	b.n	8001240 <HAL_RCC_OscConfig+0xb0>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x98>
 800120e:	4b70      	ldr	r3, [pc, #448]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6f      	ldr	r2, [pc, #444]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b6d      	ldr	r3, [pc, #436]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a6c      	ldr	r2, [pc, #432]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e00b      	b.n	8001240 <HAL_RCC_OscConfig+0xb0>
 8001228:	4b69      	ldr	r3, [pc, #420]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a68      	ldr	r2, [pc, #416]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800122e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b66      	ldr	r3, [pc, #408]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a65      	ldr	r2, [pc, #404]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d013      	beq.n	8001270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fcb4 	bl	8000bb4 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fcb0 	bl	8000bb4 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	@ 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e207      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b5b      	ldr	r3, [pc, #364]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0xc0>
 800126e:	e014      	b.n	800129a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fca0 	bl	8000bb4 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fc9c 	bl	8000bb4 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	@ 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e1f3      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	4b51      	ldr	r3, [pc, #324]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0xe8>
 8001296:	e000      	b.n	800129a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d063      	beq.n	800136e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012a6:	4b4a      	ldr	r3, [pc, #296]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00b      	beq.n	80012ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b2:	4b47      	ldr	r3, [pc, #284]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d11c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012be:	4b44      	ldr	r3, [pc, #272]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d116      	bne.n	80012f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ca:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <HAL_RCC_OscConfig+0x152>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e1c7      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e2:	4b3b      	ldr	r3, [pc, #236]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4937      	ldr	r1, [pc, #220]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f6:	e03a      	b.n	800136e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d020      	beq.n	8001342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001300:	4b34      	ldr	r3, [pc, #208]	@ (80013d4 <HAL_RCC_OscConfig+0x244>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001306:	f7ff fc55 	bl	8000bb4 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff fc51 	bl	8000bb4 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e1a8      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132c:	4b28      	ldr	r3, [pc, #160]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4925      	ldr	r1, [pc, #148]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
 8001340:	e015      	b.n	800136e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <HAL_RCC_OscConfig+0x244>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fc34 	bl	8000bb4 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff fc30 	bl	8000bb4 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e187      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d036      	beq.n	80013e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d016      	beq.n	80013b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <HAL_RCC_OscConfig+0x248>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001388:	f7ff fc14 	bl	8000bb4 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff fc10 	bl	8000bb4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e167      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80013a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x200>
 80013ae:	e01b      	b.n	80013e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <HAL_RCC_OscConfig+0x248>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fbfd 	bl	8000bb4 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	e00e      	b.n	80013dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013be:	f7ff fbf9 	bl	8000bb4 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d907      	bls.n	80013dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e150      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
 80013d0:	40023800 	.word	0x40023800
 80013d4:	42470000 	.word	0x42470000
 80013d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	4b88      	ldr	r3, [pc, #544]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80013de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ea      	bne.n	80013be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 8097 	beq.w	8001524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fa:	4b81      	ldr	r3, [pc, #516]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10f      	bne.n	8001426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b7d      	ldr	r3, [pc, #500]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	4a7c      	ldr	r2, [pc, #496]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	@ 0x40
 8001416:	4b7a      	ldr	r3, [pc, #488]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001422:	2301      	movs	r3, #1
 8001424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001426:	4b77      	ldr	r3, [pc, #476]	@ (8001604 <HAL_RCC_OscConfig+0x474>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142e:	2b00      	cmp	r3, #0
 8001430:	d118      	bne.n	8001464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001432:	4b74      	ldr	r3, [pc, #464]	@ (8001604 <HAL_RCC_OscConfig+0x474>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a73      	ldr	r2, [pc, #460]	@ (8001604 <HAL_RCC_OscConfig+0x474>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143e:	f7ff fbb9 	bl	8000bb4 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001446:	f7ff fbb5 	bl	8000bb4 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e10c      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001458:	4b6a      	ldr	r3, [pc, #424]	@ (8001604 <HAL_RCC_OscConfig+0x474>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x2ea>
 800146c:	4b64      	ldr	r3, [pc, #400]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001470:	4a63      	ldr	r2, [pc, #396]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6713      	str	r3, [r2, #112]	@ 0x70
 8001478:	e01c      	b.n	80014b4 <HAL_RCC_OscConfig+0x324>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b05      	cmp	r3, #5
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x30c>
 8001482:	4b5f      	ldr	r3, [pc, #380]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001486:	4a5e      	ldr	r2, [pc, #376]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6713      	str	r3, [r2, #112]	@ 0x70
 800148e:	4b5c      	ldr	r3, [pc, #368]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001492:	4a5b      	ldr	r2, [pc, #364]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6713      	str	r3, [r2, #112]	@ 0x70
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0x324>
 800149c:	4b58      	ldr	r3, [pc, #352]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a0:	4a57      	ldr	r2, [pc, #348]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014a8:	4b55      	ldr	r3, [pc, #340]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ac:	4a54      	ldr	r2, [pc, #336]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80014ae:	f023 0304 	bic.w	r3, r3, #4
 80014b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d015      	beq.n	80014e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fb7a 	bl	8000bb4 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c2:	e00a      	b.n	80014da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c4:	f7ff fb76 	bl	8000bb4 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e0cb      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014da:	4b49      	ldr	r3, [pc, #292]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0ee      	beq.n	80014c4 <HAL_RCC_OscConfig+0x334>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff fb64 	bl	8000bb4 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f0:	f7ff fb60 	bl	8000bb4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e0b5      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001506:	4b3e      	ldr	r3, [pc, #248]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1ee      	bne.n	80014f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001518:	4b39      	ldr	r3, [pc, #228]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	4a38      	ldr	r2, [pc, #224]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001522:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80a1 	beq.w	8001670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800152e:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b08      	cmp	r3, #8
 8001538:	d05c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d141      	bne.n	80015c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001542:	4b31      	ldr	r3, [pc, #196]	@ (8001608 <HAL_RCC_OscConfig+0x478>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fb34 	bl	8000bb4 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff fb30 	bl	8000bb4 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e087      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001562:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69da      	ldr	r2, [r3, #28]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157c:	019b      	lsls	r3, r3, #6
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	3b01      	subs	r3, #1
 8001588:	041b      	lsls	r3, r3, #16
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001590:	061b      	lsls	r3, r3, #24
 8001592:	491b      	ldr	r1, [pc, #108]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <HAL_RCC_OscConfig+0x478>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff fb09 	bl	8000bb4 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff fb05 	bl	8000bb4 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e05c      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x416>
 80015c4:	e054      	b.n	8001670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_RCC_OscConfig+0x478>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff faf2 	bl	8000bb4 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff faee 	bl	8000bb4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e045      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x444>
 80015f2:	e03d      	b.n	8001670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d107      	bne.n	800160c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e038      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000
 8001608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <HAL_RCC_OscConfig+0x4ec>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d028      	beq.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001624:	429a      	cmp	r2, r3
 8001626:	d121      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	429a      	cmp	r2, r3
 8001634:	d11a      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800163c:	4013      	ands	r3, r2
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001644:	4293      	cmp	r3, r2
 8001646:	d111      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	3b01      	subs	r3, #1
 8001656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0cc      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b68      	ldr	r3, [pc, #416]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d90c      	bls.n	80016bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b65      	ldr	r3, [pc, #404]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b63      	ldr	r3, [pc, #396]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0b8      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d4:	4b59      	ldr	r3, [pc, #356]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a58      	ldr	r2, [pc, #352]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ec:	4b53      	ldr	r3, [pc, #332]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a52      	ldr	r2, [pc, #328]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b50      	ldr	r3, [pc, #320]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	494d      	ldr	r1, [pc, #308]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d044      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b47      	ldr	r3, [pc, #284]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d119      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e07f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d003      	beq.n	800173e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173a:	2b03      	cmp	r3, #3
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	4b3f      	ldr	r3, [pc, #252]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e06f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4b3b      	ldr	r3, [pc, #236]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e067      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b37      	ldr	r3, [pc, #220]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4934      	ldr	r1, [pc, #208]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff fa20 	bl	8000bb4 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff fa1c 	bl	8000bb4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e04f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a0:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d20c      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e032      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4916      	ldr	r1, [pc, #88]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	490e      	ldr	r1, [pc, #56]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001806:	f000 f821 	bl	800184c <HAL_RCC_GetSysClockFreq>
 800180a:	4602      	mov	r2, r0
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	490a      	ldr	r1, [pc, #40]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	5ccb      	ldrb	r3, [r1, r3]
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	4a09      	ldr	r2, [pc, #36]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f8a6 	bl	8000978 <HAL_InitTick>

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00
 800183c:	40023800 	.word	0x40023800
 8001840:	08006434 	.word	0x08006434
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800184c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001850:	b094      	sub	sp, #80	@ 0x50
 8001852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001864:	4b79      	ldr	r3, [pc, #484]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b08      	cmp	r3, #8
 800186e:	d00d      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x40>
 8001870:	2b08      	cmp	r3, #8
 8001872:	f200 80e1 	bhi.w	8001a38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x34>
 800187a:	2b04      	cmp	r3, #4
 800187c:	d003      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x3a>
 800187e:	e0db      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001880:	4b73      	ldr	r3, [pc, #460]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001882:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001884:	e0db      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001886:	4b73      	ldr	r3, [pc, #460]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001888:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800188a:	e0d8      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800188c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001894:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001896:	4b6d      	ldr	r3, [pc, #436]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d063      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	099b      	lsrs	r3, r3, #6
 80018a8:	2200      	movs	r2, #0
 80018aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018be:	4622      	mov	r2, r4
 80018c0:	462b      	mov	r3, r5
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	0159      	lsls	r1, r3, #5
 80018cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d0:	0150      	lsls	r0, r2, #5
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4621      	mov	r1, r4
 80018d8:	1a51      	subs	r1, r2, r1
 80018da:	6139      	str	r1, [r7, #16]
 80018dc:	4629      	mov	r1, r5
 80018de:	eb63 0301 	sbc.w	r3, r3, r1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018f0:	4659      	mov	r1, fp
 80018f2:	018b      	lsls	r3, r1, #6
 80018f4:	4651      	mov	r1, sl
 80018f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fa:	4651      	mov	r1, sl
 80018fc:	018a      	lsls	r2, r1, #6
 80018fe:	4651      	mov	r1, sl
 8001900:	ebb2 0801 	subs.w	r8, r2, r1
 8001904:	4659      	mov	r1, fp
 8001906:	eb63 0901 	sbc.w	r9, r3, r1
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800191a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800191e:	4690      	mov	r8, r2
 8001920:	4699      	mov	r9, r3
 8001922:	4623      	mov	r3, r4
 8001924:	eb18 0303 	adds.w	r3, r8, r3
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	462b      	mov	r3, r5
 800192c:	eb49 0303 	adc.w	r3, r9, r3
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800193e:	4629      	mov	r1, r5
 8001940:	024b      	lsls	r3, r1, #9
 8001942:	4621      	mov	r1, r4
 8001944:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001948:	4621      	mov	r1, r4
 800194a:	024a      	lsls	r2, r1, #9
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001952:	2200      	movs	r2, #0
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001956:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800195c:	f7fe fc92 	bl	8000284 <__aeabi_uldivmod>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4613      	mov	r3, r2
 8001966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001968:	e058      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196a:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	099b      	lsrs	r3, r3, #6
 8001970:	2200      	movs	r2, #0
 8001972:	4618      	mov	r0, r3
 8001974:	4611      	mov	r1, r2
 8001976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001984:	4642      	mov	r2, r8
 8001986:	464b      	mov	r3, r9
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	0159      	lsls	r1, r3, #5
 8001992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001996:	0150      	lsls	r0, r2, #5
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4641      	mov	r1, r8
 800199e:	ebb2 0a01 	subs.w	sl, r2, r1
 80019a2:	4649      	mov	r1, r9
 80019a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019bc:	ebb2 040a 	subs.w	r4, r2, sl
 80019c0:	eb63 050b 	sbc.w	r5, r3, fp
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	00eb      	lsls	r3, r5, #3
 80019ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019d2:	00e2      	lsls	r2, r4, #3
 80019d4:	4614      	mov	r4, r2
 80019d6:	461d      	mov	r5, r3
 80019d8:	4643      	mov	r3, r8
 80019da:	18e3      	adds	r3, r4, r3
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	464b      	mov	r3, r9
 80019e0:	eb45 0303 	adc.w	r3, r5, r3
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019f2:	4629      	mov	r1, r5
 80019f4:	028b      	lsls	r3, r1, #10
 80019f6:	4621      	mov	r1, r4
 80019f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019fc:	4621      	mov	r1, r4
 80019fe:	028a      	lsls	r2, r1, #10
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a06:	2200      	movs	r2, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	61fa      	str	r2, [r7, #28]
 8001a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a10:	f7fe fc38 	bl	8000284 <__aeabi_uldivmod>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4613      	mov	r3, r2
 8001a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	3301      	adds	r3, #1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a36:	e002      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a38:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3750      	adds	r7, #80	@ 0x50
 8001a44:	46bd      	mov	sp, r7
 8001a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	00f42400 	.word	0x00f42400
 8001a54:	007a1200 	.word	0x007a1200

08001a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000000 	.word	0x20000000

08001a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a74:	f7ff fff0 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	0a9b      	lsrs	r3, r3, #10
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	4903      	ldr	r1, [pc, #12]	@ (8001a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	08006444 	.word	0x08006444

08001a98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aa8:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0203 	and.w	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ada:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <HAL_RCC_GetClockConfig+0x60>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0207 	and.w	r2, r3, #7
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	601a      	str	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40023c00 	.word	0x40023c00

08001afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e041      	b.n	8001b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f839 	bl	8001b9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3304      	adds	r3, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	f000 f9b2 	bl	8001ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d001      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e044      	b.n	8001c52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c60 <HAL_TIM_Base_Start_IT+0xb0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d018      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x6c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf2:	d013      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x6c>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00e      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x6c>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a19      	ldr	r2, [pc, #100]	@ (8001c68 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d009      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x6c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a17      	ldr	r2, [pc, #92]	@ (8001c6c <HAL_TIM_Base_Start_IT+0xbc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d004      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x6c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a16      	ldr	r2, [pc, #88]	@ (8001c70 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d111      	bne.n	8001c40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d010      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3e:	e007      	b.n	8001c50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40010000 	.word	0x40010000
 8001c64:	40000400 	.word	0x40000400
 8001c68:	40000800 	.word	0x40000800
 8001c6c:	40000c00 	.word	0x40000c00
 8001c70:	40014000 	.word	0x40014000

08001c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d020      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01b      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0202 	mvn.w	r2, #2
 8001ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8d2 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001cc4:	e005      	b.n	8001cd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f8c4 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f8d5 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d020      	beq.n	8001d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01b      	beq.n	8001d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0204 	mvn.w	r2, #4
 8001cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8ac 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001d10:	e005      	b.n	8001d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f89e 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f8af 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d020      	beq.n	8001d70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d01b      	beq.n	8001d70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0208 	mvn.w	r2, #8
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2204      	movs	r2, #4
 8001d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f886 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f878 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f889 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d020      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01b      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0210 	mvn.w	r2, #16
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2208      	movs	r2, #8
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f860 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f852 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f863 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0201 	mvn.w	r2, #1
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7fe fd8c 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00c      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8e6 	bl	8001fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00c      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f834 	bl	8001e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 0320 	and.w	r3, r3, #32
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0220 	mvn.w	r2, #32
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8b8 	bl	8001fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3a      	ldr	r2, [pc, #232]	@ (8001fa0 <TIM_Base_SetConfig+0xfc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00f      	beq.n	8001edc <TIM_Base_SetConfig+0x38>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec2:	d00b      	beq.n	8001edc <TIM_Base_SetConfig+0x38>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a37      	ldr	r2, [pc, #220]	@ (8001fa4 <TIM_Base_SetConfig+0x100>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <TIM_Base_SetConfig+0x38>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a36      	ldr	r2, [pc, #216]	@ (8001fa8 <TIM_Base_SetConfig+0x104>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d003      	beq.n	8001edc <TIM_Base_SetConfig+0x38>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a35      	ldr	r2, [pc, #212]	@ (8001fac <TIM_Base_SetConfig+0x108>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d108      	bne.n	8001eee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa0 <TIM_Base_SetConfig+0xfc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01b      	beq.n	8001f2e <TIM_Base_SetConfig+0x8a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001efc:	d017      	beq.n	8001f2e <TIM_Base_SetConfig+0x8a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a28      	ldr	r2, [pc, #160]	@ (8001fa4 <TIM_Base_SetConfig+0x100>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <TIM_Base_SetConfig+0x8a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a27      	ldr	r2, [pc, #156]	@ (8001fa8 <TIM_Base_SetConfig+0x104>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00f      	beq.n	8001f2e <TIM_Base_SetConfig+0x8a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a26      	ldr	r2, [pc, #152]	@ (8001fac <TIM_Base_SetConfig+0x108>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00b      	beq.n	8001f2e <TIM_Base_SetConfig+0x8a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a25      	ldr	r2, [pc, #148]	@ (8001fb0 <TIM_Base_SetConfig+0x10c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <TIM_Base_SetConfig+0x8a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a24      	ldr	r2, [pc, #144]	@ (8001fb4 <TIM_Base_SetConfig+0x110>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d003      	beq.n	8001f2e <TIM_Base_SetConfig+0x8a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a23      	ldr	r2, [pc, #140]	@ (8001fb8 <TIM_Base_SetConfig+0x114>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d108      	bne.n	8001f40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa0 <TIM_Base_SetConfig+0xfc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d103      	bne.n	8001f74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f023 0201 	bic.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	611a      	str	r2, [r3, #16]
  }
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40000800 	.word	0x40000800
 8001fac:	40000c00 	.word	0x40000c00
 8001fb0:	40014000 	.word	0x40014000
 8001fb4:	40014400 	.word	0x40014400
 8001fb8:	40014800 	.word	0x40014800

08001fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f103 0208 	add.w	r2, r3, #8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f103 0208 	add.w	r2, r3, #8
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f103 0208 	add.w	r2, r3, #8
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d103      	bne.n	800205e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	e00c      	b.n	8002078 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3308      	adds	r3, #8
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e002      	b.n	800206c <vListInsert+0x2e>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	429a      	cmp	r2, r3
 8002076:	d2f6      	bcs.n	8002066 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	601a      	str	r2, [r3, #0]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6892      	ldr	r2, [r2, #8]
 80020c6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6852      	ldr	r2, [r2, #4]
 80020d0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d103      	bne.n	80020e4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	1e5a      	subs	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800210e:	2301      	movs	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10b      	bne.n	8002134 <xQueueGenericReset+0x30>
        __asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	60fb      	str	r3, [r7, #12]
    }
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d05d      	beq.n	80021f6 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800213e:	2b00      	cmp	r3, #0
 8002140:	d059      	beq.n	80021f6 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214a:	2100      	movs	r1, #0
 800214c:	fba3 2302 	umull	r2, r3, r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d000      	beq.n	8002156 <xQueueGenericReset+0x52>
 8002154:	2101      	movs	r1, #1
 8002156:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	d14c      	bne.n	80021f6 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 800215c:	f002 f87e 	bl	800425c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	6939      	ldr	r1, [r7, #16]
 800216a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	441a      	add	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2200      	movs	r2, #0
 800217a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218c:	3b01      	subs	r3, #1
 800218e:	6939      	ldr	r1, [r7, #16]
 8002190:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	441a      	add	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	22ff      	movs	r2, #255	@ 0xff
 80021a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	22ff      	movs	r2, #255	@ 0xff
 80021a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d114      	bne.n	80021dc <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01a      	beq.n	80021f0 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	3310      	adds	r3, #16
 80021be:	4618      	mov	r0, r3
 80021c0:	f001 f9c6 	bl	8003550 <xTaskRemoveFromEventList>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d012      	beq.n	80021f0 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80021ca:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <xQueueGenericReset+0x120>)
 80021cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	e009      	b.n	80021f0 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	3310      	adds	r3, #16
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff feff 	bl	8001fe4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	3324      	adds	r3, #36	@ 0x24
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fefa 	bl	8001fe4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80021f0:	f002 f866 	bl	80042c0 <vPortExitCritical>
 80021f4:	e001      	b.n	80021fa <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10b      	bne.n	8002218 <xQueueGenericReset+0x114>
        __asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	60bb      	str	r3, [r7, #8]
    }
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002218:	697b      	ldr	r3, [r7, #20]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000ed04 	.word	0xe000ed04

08002228 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	4613      	mov	r3, r2
 8002234:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d02e      	beq.n	800229e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002240:	2100      	movs	r1, #0
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	fba3 2302 	umull	r2, r3, r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d000      	beq.n	8002250 <xQueueGenericCreate+0x28>
 800224e:	2101      	movs	r1, #1
 8002250:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002252:	2b00      	cmp	r3, #0
 8002254:	d123      	bne.n	800229e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800225e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002262:	d81c      	bhi.n	800229e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	3350      	adds	r3, #80	@ 0x50
 8002272:	4618      	mov	r0, r3
 8002274:	f002 f924 	bl	80044c0 <pvPortMalloc>
 8002278:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01d      	beq.n	80022bc <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3350      	adds	r3, #80	@ 0x50
 8002288:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800228a:	79fa      	ldrb	r2, [r7, #7]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f815 	bl	80022c6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800229c:	e00e      	b.n	80022bc <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10b      	bne.n	80022bc <xQueueGenericCreate+0x94>
        __asm volatile
 80022a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	613b      	str	r3, [r7, #16]
    }
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80022bc:	69fb      	ldr	r3, [r7, #28]
    }
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e002      	b.n	80022e8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022f4:	2101      	movs	r1, #1
 80022f6:	69b8      	ldr	r0, [r7, #24]
 80022f8:	f7ff ff04 	bl	8002104 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	68f9      	ldr	r1, [r7, #12]
 800230a:	2073      	movs	r0, #115	@ 0x73
 800230c:	f003 f94e 	bl	80055ac <SEGGER_SYSVIEW_RecordU32x3>
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b08f      	sub	sp, #60	@ 0x3c
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800232c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <xQueueReceive+0x32>
        __asm volatile
 8002332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	623b      	str	r3, [r7, #32]
    }
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	e7fd      	b.n	8002346 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <xQueueReceive+0x40>
 8002350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <xQueueReceive+0x44>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <xQueueReceive+0x46>
 800235c:	2300      	movs	r3, #0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10b      	bne.n	800237a <xQueueReceive+0x62>
        __asm volatile
 8002362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002366:	f383 8811 	msr	BASEPRI, r3
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	61fb      	str	r3, [r7, #28]
    }
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	e7fd      	b.n	8002376 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800237a:	f001 fb0f 	bl	800399c <xTaskGetSchedulerState>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <xQueueReceive+0x72>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <xQueueReceive+0x76>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <xQueueReceive+0x78>
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <xQueueReceive+0x94>
        __asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	61bb      	str	r3, [r7, #24]
    }
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80023ac:	f001 ff56 	bl	800425c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d02f      	beq.n	800241c <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023c0:	f000 f8be 	bl	8002540 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80023c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c6:	4618      	mov	r0, r3
 80023c8:	f003 fe1c 	bl	8006004 <SEGGER_SYSVIEW_ShrinkId>
 80023cc:	4604      	mov	r4, r0
 80023ce:	2000      	movs	r0, #0
 80023d0:	f003 fe18 	bl	8006004 <SEGGER_SYSVIEW_ShrinkId>
 80023d4:	4602      	mov	r2, r0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2101      	movs	r1, #1
 80023da:	9100      	str	r1, [sp, #0]
 80023dc:	4621      	mov	r1, r4
 80023de:	205c      	movs	r0, #92	@ 0x5c
 80023e0:	f003 f95a 	bl	8005698 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	1e5a      	subs	r2, r3, #1
 80023e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ea:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00f      	beq.n	8002414 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f6:	3310      	adds	r3, #16
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 f8a9 	bl	8003550 <xTaskRemoveFromEventList>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002404:	4b4d      	ldr	r3, [pc, #308]	@ (800253c <xQueueReceive+0x224>)
 8002406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002414:	f001 ff54 	bl	80042c0 <vPortExitCritical>
                return pdPASS;
 8002418:	2301      	movs	r3, #1
 800241a:	e08a      	b.n	8002532 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d113      	bne.n	800244a <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002422:	f001 ff4d 	bl	80042c0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002428:	4618      	mov	r0, r3
 800242a:	f003 fdeb 	bl	8006004 <SEGGER_SYSVIEW_ShrinkId>
 800242e:	4604      	mov	r4, r0
 8002430:	2000      	movs	r0, #0
 8002432:	f003 fde7 	bl	8006004 <SEGGER_SYSVIEW_ShrinkId>
 8002436:	4602      	mov	r2, r0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2101      	movs	r1, #1
 800243c:	9100      	str	r1, [sp, #0]
 800243e:	4621      	mov	r1, r4
 8002440:	205c      	movs	r0, #92	@ 0x5c
 8002442:	f003 f929 	bl	8005698 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002446:	2300      	movs	r3, #0
 8002448:	e073      	b.n	8002532 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800244a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d106      	bne.n	800245e <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	4618      	mov	r0, r3
 8002456:	f001 f955 	bl	8003704 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800245a:	2301      	movs	r3, #1
 800245c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800245e:	f001 ff2f 	bl	80042c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002462:	f000 fc7b 	bl	8002d5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002466:	f001 fef9 	bl	800425c <vPortEnterCritical>
 800246a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002470:	b25b      	sxtb	r3, r3
 8002472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002476:	d103      	bne.n	8002480 <xQueueReceive+0x168>
 8002478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002482:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002486:	b25b      	sxtb	r3, r3
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d103      	bne.n	8002496 <xQueueReceive+0x17e>
 800248e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002496:	f001 ff13 	bl	80042c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800249a:	1d3a      	adds	r2, r7, #4
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 f944 	bl	8003730 <xTaskCheckForTimeOut>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d124      	bne.n	80024f8 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024b0:	f000 f8be 	bl	8002630 <prvIsQueueEmpty>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d018      	beq.n	80024ec <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	3324      	adds	r3, #36	@ 0x24
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 ffd4 	bl	8003470 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80024c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024ca:	f000 f85f 	bl	800258c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80024ce:	f000 fc53 	bl	8002d78 <xTaskResumeAll>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f47f af69 	bne.w	80023ac <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80024da:	4b18      	ldr	r3, [pc, #96]	@ (800253c <xQueueReceive+0x224>)
 80024dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	f3bf 8f6f 	isb	sy
 80024ea:	e75f      	b.n	80023ac <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80024ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024ee:	f000 f84d 	bl	800258c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80024f2:	f000 fc41 	bl	8002d78 <xTaskResumeAll>
 80024f6:	e759      	b.n	80023ac <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80024f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024fa:	f000 f847 	bl	800258c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80024fe:	f000 fc3b 	bl	8002d78 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002504:	f000 f894 	bl	8002630 <prvIsQueueEmpty>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	f43f af4e 	beq.w	80023ac <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fd76 	bl	8006004 <SEGGER_SYSVIEW_ShrinkId>
 8002518:	4604      	mov	r4, r0
 800251a:	2000      	movs	r0, #0
 800251c:	f003 fd72 	bl	8006004 <SEGGER_SYSVIEW_ShrinkId>
 8002520:	4602      	mov	r2, r0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2101      	movs	r1, #1
 8002526:	9100      	str	r1, [sp, #0]
 8002528:	4621      	mov	r1, r4
 800252a:	205c      	movs	r0, #92	@ 0x5c
 800252c:	f003 f8b4 	bl	8005698 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002530:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002532:	4618      	mov	r0, r3
 8002534:	3734      	adds	r7, #52	@ 0x34
 8002536:	46bd      	mov	sp, r7
 8002538:	bd90      	pop	{r4, r7, pc}
 800253a:	bf00      	nop
 800253c:	e000ed04 	.word	0xe000ed04

08002540 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d018      	beq.n	8002584 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	441a      	add	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	429a      	cmp	r2, r3
 800256a:	d303      	bcc.n	8002574 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68d9      	ldr	r1, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	461a      	mov	r2, r3
 800257e:	6838      	ldr	r0, [r7, #0]
 8002580:	f003 fec4 	bl	800630c <memcpy>
    }
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002594:	f001 fe62 	bl	800425c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800259e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025a0:	e011      	b.n	80025c6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d012      	beq.n	80025d0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3324      	adds	r3, #36	@ 0x24
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 ffce 	bl	8003550 <xTaskRemoveFromEventList>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80025ba:	f001 f921 	bl	8003800 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	dce9      	bgt.n	80025a2 <prvUnlockQueue+0x16>
 80025ce:	e000      	b.n	80025d2 <prvUnlockQueue+0x46>
                    break;
 80025d0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	22ff      	movs	r2, #255	@ 0xff
 80025d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80025da:	f001 fe71 	bl	80042c0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80025de:	f001 fe3d 	bl	800425c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025e8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80025ea:	e011      	b.n	8002610 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d012      	beq.n	800261a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3310      	adds	r3, #16
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 ffa9 	bl	8003550 <xTaskRemoveFromEventList>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002604:	f001 f8fc 	bl	8003800 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002608:	7bbb      	ldrb	r3, [r7, #14]
 800260a:	3b01      	subs	r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002614:	2b00      	cmp	r3, #0
 8002616:	dce9      	bgt.n	80025ec <prvUnlockQueue+0x60>
 8002618:	e000      	b.n	800261c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800261a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	22ff      	movs	r2, #255	@ 0xff
 8002620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002624:	f001 fe4c 	bl	80042c0 <vPortExitCritical>
}
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002638:	f001 fe10 	bl	800425c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002644:	2301      	movs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	e001      	b.n	800264e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800264e:	f001 fe37 	bl	80042c0 <vPortExitCritical>

    return xReturn;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10b      	bne.n	8002688 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	60fb      	str	r3, [r7, #12]
    }
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d024      	beq.n	80026d8 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e01e      	b.n	80026d2 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002694:	4a1c      	ldr	r2, [pc, #112]	@ (8002708 <vQueueAddToRegistry+0xac>)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d105      	bne.n	80026b0 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4a17      	ldr	r2, [pc, #92]	@ (8002708 <vQueueAddToRegistry+0xac>)
 80026aa:	4413      	add	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
                    break;
 80026ae:	e013      	b.n	80026d8 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10a      	bne.n	80026cc <vQueueAddToRegistry+0x70>
 80026b6:	4a14      	ldr	r2, [pc, #80]	@ (8002708 <vQueueAddToRegistry+0xac>)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d104      	bne.n	80026cc <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4a10      	ldr	r2, [pc, #64]	@ (8002708 <vQueueAddToRegistry+0xac>)
 80026c8:	4413      	add	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3301      	adds	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b07      	cmp	r3, #7
 80026d6:	d9dd      	bls.n	8002694 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00f      	beq.n	80026fe <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f003 fc89 	bl	8006004 <SEGGER_SYSVIEW_ShrinkId>
 80026f2:	4601      	mov	r1, r0
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	2071      	movs	r0, #113	@ 0x71
 80026fa:	f002 fefd 	bl	80054f8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000084 	.word	0x20000084

0800270c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800271c:	f001 fd9e 	bl	800425c <vPortEnterCritical>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002726:	b25b      	sxtb	r3, r3
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d103      	bne.n	8002736 <vQueueWaitForMessageRestricted+0x2a>
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800273c:	b25b      	sxtb	r3, r3
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002742:	d103      	bne.n	800274c <vQueueWaitForMessageRestricted+0x40>
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800274c:	f001 fdb8 	bl	80042c0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3324      	adds	r3, #36	@ 0x24
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 feab 	bl	80034bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ff10 	bl	800258c <prvUnlockQueue>
    }
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002774:	b580      	push	{r7, lr}
 8002776:	b08c      	sub	sp, #48	@ 0x30
 8002778:	af04      	add	r7, sp, #16
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4618      	mov	r0, r3
 800278a:	f001 fe99 	bl	80044c0 <pvPortMalloc>
 800278e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d013      	beq.n	80027be <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002796:	2058      	movs	r0, #88	@ 0x58
 8002798:	f001 fe92 	bl	80044c0 <pvPortMalloc>
 800279c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80027a4:	2258      	movs	r2, #88	@ 0x58
 80027a6:	2100      	movs	r1, #0
 80027a8:	69f8      	ldr	r0, [r7, #28]
 80027aa:	f003 fd83 	bl	80062b4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027b4:	e005      	b.n	80027c2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80027b6:	6978      	ldr	r0, [r7, #20]
 80027b8:	f001 ff3e 	bl	8004638 <vPortFree>
 80027bc:	e001      	b.n	80027c2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d013      	beq.n	80027f0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027c8:	88fa      	ldrh	r2, [r7, #6]
 80027ca:	2300      	movs	r3, #0
 80027cc:	9303      	str	r3, [sp, #12]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	9302      	str	r3, [sp, #8]
 80027d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f80e 	bl	8002800 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80027e4:	69f8      	ldr	r0, [r7, #28]
 80027e6:	f000 f89b 	bl	8002920 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	e002      	b.n	80027f6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295
 80027f4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80027f6:	69bb      	ldr	r3, [r7, #24]
    }
 80027f8:	4618      	mov	r0, r3
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800280e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002810:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	461a      	mov	r2, r3
 8002818:	21a5      	movs	r1, #165	@ 0xa5
 800281a:	f003 fd4b 	bl	80062b4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800281e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002828:	3b01      	subs	r3, #1
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f023 0307 	bic.w	r3, r3, #7
 8002836:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	617b      	str	r3, [r7, #20]
    }
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	e7fd      	b.n	8002856 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01e      	beq.n	800289e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	e012      	b.n	800288c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4413      	add	r3, r2
 800286c:	7819      	ldrb	r1, [r3, #0]
 800286e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	3334      	adds	r3, #52	@ 0x34
 8002876:	460a      	mov	r2, r1
 8002878:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d006      	beq.n	8002894 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3301      	adds	r3, #1
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b09      	cmp	r3, #9
 8002890:	d9e9      	bls.n	8002866 <prvInitialiseNewTask+0x66>
 8002892:	e000      	b.n	8002896 <prvInitialiseNewTask+0x96>
            {
                break;
 8002894:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800289e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d90b      	bls.n	80028bc <prvInitialiseNewTask+0xbc>
        __asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	613b      	str	r3, [r7, #16]
    }
 80028b6:	bf00      	nop
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d901      	bls.n	80028c6 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028c2:	2304      	movs	r3, #4
 80028c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80028c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028d0:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d4:	3304      	adds	r3, #4
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fba4 	bl	8002024 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028de:	3318      	adds	r3, #24
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fb9f 	bl	8002024 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ea:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ee:	f1c3 0205 	rsb	r2, r3, #5
 80028f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028fa:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	68f9      	ldr	r1, [r7, #12]
 8002900:	69b8      	ldr	r0, [r7, #24]
 8002902:	f001 fb75 	bl	8003ff0 <pxPortInitialiseStack>
 8002906:	4602      	mov	r2, r0
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800290c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002916:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002918:	bf00      	nop
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af02      	add	r7, sp, #8
 8002926:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002928:	f001 fc98 	bl	800425c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800292c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a6c <prvAddNewTaskToReadyList+0x14c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	4a4e      	ldr	r2, [pc, #312]	@ (8002a6c <prvAddNewTaskToReadyList+0x14c>)
 8002934:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002936:	4b4e      	ldr	r3, [pc, #312]	@ (8002a70 <prvAddNewTaskToReadyList+0x150>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800293e:	4a4c      	ldr	r2, [pc, #304]	@ (8002a70 <prvAddNewTaskToReadyList+0x150>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002944:	4b49      	ldr	r3, [pc, #292]	@ (8002a6c <prvAddNewTaskToReadyList+0x14c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d110      	bne.n	800296e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800294c:	f000 ff7c 	bl	8003848 <prvInitialiseTaskLists>
 8002950:	e00d      	b.n	800296e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002952:	4b48      	ldr	r3, [pc, #288]	@ (8002a74 <prvAddNewTaskToReadyList+0x154>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800295a:	4b45      	ldr	r3, [pc, #276]	@ (8002a70 <prvAddNewTaskToReadyList+0x150>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002964:	429a      	cmp	r2, r3
 8002966:	d802      	bhi.n	800296e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002968:	4a41      	ldr	r2, [pc, #260]	@ (8002a70 <prvAddNewTaskToReadyList+0x150>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800296e:	4b42      	ldr	r3, [pc, #264]	@ (8002a78 <prvAddNewTaskToReadyList+0x158>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3301      	adds	r3, #1
 8002974:	4a40      	ldr	r2, [pc, #256]	@ (8002a78 <prvAddNewTaskToReadyList+0x158>)
 8002976:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002978:	4b3f      	ldr	r3, [pc, #252]	@ (8002a78 <prvAddNewTaskToReadyList+0x158>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <prvAddNewTaskToReadyList+0x94>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	f003 fa75 	bl	8005e78 <SEGGER_SYSVIEW_OnTaskCreate>
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	461d      	mov	r5, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461c      	mov	r4, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	1ae3      	subs	r3, r4, r3
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	462b      	mov	r3, r5
 80029b0:	f002 f806 	bl	80049c0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 fae2 	bl	8005f80 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	2201      	movs	r2, #1
 80029c2:	409a      	lsls	r2, r3
 80029c4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a7c <prvAddNewTaskToReadyList+0x15c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	4a2c      	ldr	r2, [pc, #176]	@ (8002a7c <prvAddNewTaskToReadyList+0x15c>)
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d2:	492b      	ldr	r1, [pc, #172]	@ (8002a80 <prvAddNewTaskToReadyList+0x160>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3304      	adds	r3, #4
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	3204      	adds	r2, #4
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	1d1a      	adds	r2, r3, #4
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4a1b      	ldr	r2, [pc, #108]	@ (8002a80 <prvAddNewTaskToReadyList+0x160>)
 8002a12:	441a      	add	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	615a      	str	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a1c:	4918      	ldr	r1, [pc, #96]	@ (8002a80 <prvAddNewTaskToReadyList+0x160>)
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	1c59      	adds	r1, r3, #1
 8002a2c:	4814      	ldr	r0, [pc, #80]	@ (8002a80 <prvAddNewTaskToReadyList+0x160>)
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4403      	add	r3, r0
 8002a38:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a3a:	f001 fc41 	bl	80042c0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <prvAddNewTaskToReadyList+0x154>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00e      	beq.n	8002a64 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a46:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <prvAddNewTaskToReadyList+0x150>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d207      	bcs.n	8002a64 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <prvAddNewTaskToReadyList+0x164>)
 8002a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a6c:	2000019c 	.word	0x2000019c
 8002a70:	200000c4 	.word	0x200000c4
 8002a74:	200001a8 	.word	0x200001a8
 8002a78:	200001b8 	.word	0x200001b8
 8002a7c:	200001a4 	.word	0x200001a4
 8002a80:	200000c8 	.word	0x200000c8
 8002a84:	e000ed04 	.word	0xe000ed04

08002a88 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002a90:	f001 fbe4 	bl	800425c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <uxTaskPriorityGet+0x18>
 8002a9a:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <uxTaskPriorityGet+0x30>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	e000      	b.n	8002aa2 <uxTaskPriorityGet+0x1a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002aaa:	f001 fc09 	bl	80042c0 <vPortExitCritical>

        return uxReturn;
 8002aae:	68bb      	ldr	r3, [r7, #8]
    }
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	200000c4 	.word	0x200000c4

08002abc <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	@ 0x28
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d90b      	bls.n	8002ae8 <vTaskPrioritySet+0x2c>
        __asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	60bb      	str	r3, [r7, #8]
    }
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d901      	bls.n	8002af2 <vTaskPrioritySet+0x36>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002aee:	2304      	movs	r3, #4
 8002af0:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002af2:	f001 fbb3 	bl	800425c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <vTaskPrioritySet+0x46>
 8002afc:	4b62      	ldr	r3, [pc, #392]	@ (8002c88 <vTaskPrioritySet+0x1cc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	e000      	b.n	8002b04 <vTaskPrioritySet+0x48>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f003 fa7b 	bl	8006004 <SEGGER_SYSVIEW_ShrinkId>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	4619      	mov	r1, r3
 8002b14:	2028      	movs	r0, #40	@ 0x28
 8002b16:	f002 fcef 	bl	80054f8 <SEGGER_SYSVIEW_RecordU32x2>
 8002b1a:	69b8      	ldr	r0, [r7, #24]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	461a      	mov	r2, r3
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	f001 ffae 	bl	8004a90 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b38:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	f000 809c 	beq.w	8002c7c <vTaskPrioritySet+0x1c0>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d90d      	bls.n	8002b68 <vTaskPrioritySet+0xac>
                {
                    if( pxTCB != pxCurrentTCB )
 8002b4c:	4b4e      	ldr	r3, [pc, #312]	@ (8002c88 <vTaskPrioritySet+0x1cc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d00f      	beq.n	8002b76 <vTaskPrioritySet+0xba>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002b56:	4b4c      	ldr	r3, [pc, #304]	@ (8002c88 <vTaskPrioritySet+0x1cc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d309      	bcc.n	8002b76 <vTaskPrioritySet+0xba>
                        {
                            xYieldRequired = pdTRUE;
 8002b62:	2301      	movs	r3, #1
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	e006      	b.n	8002b76 <vTaskPrioritySet+0xba>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002b68:	4b47      	ldr	r3, [pc, #284]	@ (8002c88 <vTaskPrioritySet+0x1cc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d101      	bne.n	8002b76 <vTaskPrioritySet+0xba>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7a:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d102      	bne.n	8002b8e <vTaskPrioritySet+0xd2>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	649a      	str	r2, [r3, #72]	@ 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db04      	blt.n	8002ba6 <vTaskPrioritySet+0xea>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f1c3 0205 	rsb	r2, r3, #5
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	6959      	ldr	r1, [r3, #20]
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4a35      	ldr	r2, [pc, #212]	@ (8002c8c <vTaskPrioritySet+0x1d0>)
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4299      	cmp	r1, r3
 8002bba:	d154      	bne.n	8002c66 <vTaskPrioritySet+0x1aa>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fa75 	bl	80020b0 <uxListRemove>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <vTaskPrioritySet+0x124>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002bcc:	2201      	movs	r2, #1
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43da      	mvns	r2, r3
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8002c90 <vTaskPrioritySet+0x1d4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8002c90 <vTaskPrioritySet+0x1d4>)
 8002bde:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 f9cc 	bl	8005f80 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bec:	2201      	movs	r2, #1
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	4b27      	ldr	r3, [pc, #156]	@ (8002c90 <vTaskPrioritySet+0x1d4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	4a26      	ldr	r2, [pc, #152]	@ (8002c90 <vTaskPrioritySet+0x1d4>)
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bfe:	4923      	ldr	r1, [pc, #140]	@ (8002c8c <vTaskPrioritySet+0x1d0>)
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	3204      	adds	r2, #4
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	1d1a      	adds	r2, r3, #4
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4a13      	ldr	r2, [pc, #76]	@ (8002c8c <vTaskPrioritySet+0x1d0>)
 8002c3e:	441a      	add	r2, r3
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	615a      	str	r2, [r3, #20]
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c48:	4910      	ldr	r1, [pc, #64]	@ (8002c8c <vTaskPrioritySet+0x1d0>)
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	1c59      	adds	r1, r3, #1
 8002c58:	480c      	ldr	r0, [pc, #48]	@ (8002c8c <vTaskPrioritySet+0x1d0>)
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4403      	add	r3, r0
 8002c64:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <vTaskPrioritySet+0x1c0>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <vTaskPrioritySet+0x1d8>)
 8002c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002c7c:	f001 fb20 	bl	80042c0 <vPortExitCritical>
    }
 8002c80:	bf00      	nop
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200000c4 	.word	0x200000c4
 8002c8c:	200000c8 	.word	0x200000c8
 8002c90:	200001a4 	.word	0x200001a4
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002c9e:	4b27      	ldr	r3, [pc, #156]	@ (8002d3c <vTaskStartScheduler+0xa4>)
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2282      	movs	r2, #130	@ 0x82
 8002caa:	4925      	ldr	r1, [pc, #148]	@ (8002d40 <vTaskStartScheduler+0xa8>)
 8002cac:	4825      	ldr	r0, [pc, #148]	@ (8002d44 <vTaskStartScheduler+0xac>)
 8002cae:	f7ff fd61 	bl	8002774 <xTaskCreate>
 8002cb2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002cba:	f000 ff0d 	bl	8003ad8 <xTimerCreateTimerTask>
 8002cbe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d124      	bne.n	8002d10 <vTaskStartScheduler+0x78>
        __asm volatile
 8002cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	60bb      	str	r3, [r7, #8]
    }
 8002cd8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cda:	4b1b      	ldr	r3, [pc, #108]	@ (8002d48 <vTaskStartScheduler+0xb0>)
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d4c <vTaskStartScheduler+0xb4>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ce8:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <vTaskStartScheduler+0xb8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002cee:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <vTaskStartScheduler+0xbc>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <vTaskStartScheduler+0xa4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d102      	bne.n	8002d00 <vTaskStartScheduler+0x68>
 8002cfa:	f003 f8a1 	bl	8005e40 <SEGGER_SYSVIEW_OnIdle>
 8002cfe:	e004      	b.n	8002d0a <vTaskStartScheduler+0x72>
 8002d00:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <vTaskStartScheduler+0xbc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 f8f9 	bl	8005efc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002d0a:	f001 fa03 	bl	8004114 <xPortStartScheduler>
 8002d0e:	e00f      	b.n	8002d30 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d16:	d10b      	bne.n	8002d30 <vTaskStartScheduler+0x98>
        __asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	607b      	str	r3, [r7, #4]
    }
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d30:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <vTaskStartScheduler+0xc0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200001c0 	.word	0x200001c0
 8002d40:	08006350 	.word	0x08006350
 8002d44:	08003819 	.word	0x08003819
 8002d48:	200001bc 	.word	0x200001bc
 8002d4c:	200001a8 	.word	0x200001a8
 8002d50:	200001a0 	.word	0x200001a0
 8002d54:	200000c4 	.word	0x200000c4
 8002d58:	2000000c 	.word	0x2000000c

08002d5c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d60:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <vTaskSuspendAll+0x18>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3301      	adds	r3, #1
 8002d66:	4a03      	ldr	r2, [pc, #12]	@ (8002d74 <vTaskSuspendAll+0x18>)
 8002d68:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	200001c4 	.word	0x200001c4

08002d78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d86:	4b73      	ldr	r3, [pc, #460]	@ (8002f54 <xTaskResumeAll+0x1dc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10b      	bne.n	8002da6 <xTaskResumeAll+0x2e>
        __asm volatile
 8002d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	607b      	str	r3, [r7, #4]
    }
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	e7fd      	b.n	8002da2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002da6:	f001 fa59 	bl	800425c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002daa:	4b6a      	ldr	r3, [pc, #424]	@ (8002f54 <xTaskResumeAll+0x1dc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	4a68      	ldr	r2, [pc, #416]	@ (8002f54 <xTaskResumeAll+0x1dc>)
 8002db2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002db4:	4b67      	ldr	r3, [pc, #412]	@ (8002f54 <xTaskResumeAll+0x1dc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 80c4 	bne.w	8002f46 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dbe:	4b66      	ldr	r3, [pc, #408]	@ (8002f58 <xTaskResumeAll+0x1e0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80bf 	beq.w	8002f46 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dc8:	e08e      	b.n	8002ee8 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dca:	4b64      	ldr	r3, [pc, #400]	@ (8002f5c <xTaskResumeAll+0x1e4>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	6a12      	ldr	r2, [r2, #32]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	69d2      	ldr	r2, [r2, #28]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3318      	adds	r3, #24
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d103      	bne.n	8002e00 <xTaskResumeAll+0x88>
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2200      	movs	r2, #0
 8002e04:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	1e5a      	subs	r2, r3, #1
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	68d2      	ldr	r2, [r2, #12]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	6892      	ldr	r2, [r2, #8]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3304      	adds	r3, #4
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d103      	bne.n	8002e3e <xTaskResumeAll+0xc6>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	1e5a      	subs	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 f895 	bl	8005f80 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	4b40      	ldr	r3, [pc, #256]	@ (8002f60 <xTaskResumeAll+0x1e8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	4a3e      	ldr	r2, [pc, #248]	@ (8002f60 <xTaskResumeAll+0x1e8>)
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e6c:	493d      	ldr	r1, [pc, #244]	@ (8002f64 <xTaskResumeAll+0x1ec>)
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	3304      	adds	r3, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	60da      	str	r2, [r3, #12]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	3204      	adds	r2, #4
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	1d1a      	adds	r2, r3, #4
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8002f64 <xTaskResumeAll+0x1ec>)
 8002eac:	441a      	add	r2, r3
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	615a      	str	r2, [r3, #20]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb6:	492b      	ldr	r1, [pc, #172]	@ (8002f64 <xTaskResumeAll+0x1ec>)
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1c59      	adds	r1, r3, #1
 8002ec6:	4827      	ldr	r0, [pc, #156]	@ (8002f64 <xTaskResumeAll+0x1ec>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4403      	add	r3, r0
 8002ed2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed8:	4b23      	ldr	r3, [pc, #140]	@ (8002f68 <xTaskResumeAll+0x1f0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002ee2:	4b22      	ldr	r3, [pc, #136]	@ (8002f6c <xTaskResumeAll+0x1f4>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f5c <xTaskResumeAll+0x1e4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f af6c 	bne.w	8002dca <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ef8:	f000 fd24 	bl	8003944 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002efc:	4b1c      	ldr	r3, [pc, #112]	@ (8002f70 <xTaskResumeAll+0x1f8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f08:	f000 f92c 	bl	8003164 <xTaskIncrementTick>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002f12:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <xTaskResumeAll+0x1f4>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f1      	bne.n	8002f08 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002f24:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <xTaskResumeAll+0x1f8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f2a:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <xTaskResumeAll+0x1f4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002f32:	2301      	movs	r3, #1
 8002f34:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f36:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <xTaskResumeAll+0x1fc>)
 8002f38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f46:	f001 f9bb 	bl	80042c0 <vPortExitCritical>

    return xAlreadyYielded;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	200001c4 	.word	0x200001c4
 8002f58:	2000019c 	.word	0x2000019c
 8002f5c:	2000015c 	.word	0x2000015c
 8002f60:	200001a4 	.word	0x200001a4
 8002f64:	200000c8 	.word	0x200000c8
 8002f68:	200000c4 	.word	0x200000c4
 8002f6c:	200001b0 	.word	0x200001b0
 8002f70:	200001ac 	.word	0x200001ac
 8002f74:	e000ed04 	.word	0xe000ed04

08002f78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f7e:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <xTaskGetTickCount+0x1c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f84:	687b      	ldr	r3, [r7, #4]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	200001a0 	.word	0x200001a0

08002f98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f9e:	f001 fa4d 	bl	800443c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002fa6:	4b04      	ldr	r3, [pc, #16]	@ (8002fb8 <xTaskGetTickCountFromISR+0x20>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002fac:	683b      	ldr	r3, [r7, #0]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200001a0 	.word	0x200001a0

08002fbc <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8002fbc:	b480      	push	{r7}
 8002fbe:	b08b      	sub	sp, #44	@ 0x2c
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB;
        TCB_t * pxFirstTCB;
        TCB_t * pxReturn = NULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d05b      	beq.n	800308a <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d104      	bne.n	8002ff6 <prvSearchForNameWithinSingleList+0x3a>
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	3308      	adds	r3, #8
 8003014:	429a      	cmp	r2, r3
 8003016:	d104      	bne.n	8003022 <prvSearchForNameWithinSingleList+0x66>
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
 8003032:	e01c      	b.n	800306e <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	4413      	add	r3, r2
 800303a:	3334      	adds	r3, #52	@ 0x34
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	4413      	add	r3, r2
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	7afa      	ldrb	r2, [r7, #11]
 800304a:	429a      	cmp	r2, r3
 800304c:	d002      	beq.n	8003054 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 800304e:	2301      	movs	r3, #1
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	e006      	b.n	8003062 <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8003054:	7afb      	ldrb	r3, [r7, #11]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
                        xBreakLoop = pdTRUE;
 800305e:	2301      	movs	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d106      	bne.n	8003076 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	3301      	adds	r3, #1
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	2b09      	cmp	r3, #9
 8003072:	d9df      	bls.n	8003034 <prvSearchForNameWithinSingleList+0x78>
 8003074:	e000      	b.n	8003078 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8003076:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	2b00      	cmp	r3, #0
 800307c:	d104      	bne.n	8003088 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	429a      	cmp	r2, r3
 8003084:	d1bb      	bne.n	8002ffe <prvSearchForNameWithinSingleList+0x42>
 8003086:	e000      	b.n	800308a <prvSearchForNameWithinSingleList+0xce>
                    break;
 8003088:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800308c:	4618      	mov	r0, r3
 800308e:	372c      	adds	r7, #44	@ 0x2c
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 80030a0:	2305      	movs	r3, #5
 80030a2:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7fd f8e5 	bl	8000274 <strlen>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b09      	cmp	r3, #9
 80030ae:	d90b      	bls.n	80030c8 <xTaskGetHandle+0x30>
        __asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	60fb      	str	r3, [r7, #12]
    }
 80030c2:	bf00      	nop
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 80030c8:	f7ff fe48 	bl	8002d5c <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003150 <xTaskGetHandle+0xb8>)
 80030de:	4413      	add	r3, r2
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff6a 	bl	8002fbc <prvSearchForNameWithinSingleList>
 80030e8:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d103      	bne.n	80030f8 <xTaskGetHandle+0x60>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1ea      	bne.n	80030cc <xTaskGetHandle+0x34>
 80030f6:	e000      	b.n	80030fa <xTaskGetHandle+0x62>
                    break;
 80030f8:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <xTaskGetHandle+0x76>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8003100:	4b14      	ldr	r3, [pc, #80]	@ (8003154 <xTaskGetHandle+0xbc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff ff58 	bl	8002fbc <prvSearchForNameWithinSingleList>
 800310c:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <xTaskGetHandle+0x8a>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8003114:	4b10      	ldr	r3, [pc, #64]	@ (8003158 <xTaskGetHandle+0xc0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff4e 	bl	8002fbc <prvSearchForNameWithinSingleList>
 8003120:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
            {
                if( pxTCB == NULL )
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <xTaskGetHandle+0x9a>
                {
                    /* Search the suspended list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	480c      	ldr	r0, [pc, #48]	@ (800315c <xTaskGetHandle+0xc4>)
 800312c:	f7ff ff46 	bl	8002fbc <prvSearchForNameWithinSingleList>
 8003130:	6138      	str	r0, [r7, #16]
            }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
            {
                if( pxTCB == NULL )
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d104      	bne.n	8003142 <xTaskGetHandle+0xaa>
                {
                    /* Search the deleted list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4809      	ldr	r0, [pc, #36]	@ (8003160 <xTaskGetHandle+0xc8>)
 800313c:	f7ff ff3e 	bl	8002fbc <prvSearchForNameWithinSingleList>
 8003140:	6138      	str	r0, [r7, #16]
                }
            }
            #endif
        }
        ( void ) xTaskResumeAll();
 8003142:	f7ff fe19 	bl	8002d78 <xTaskResumeAll>

        return pxTCB;
 8003146:	693b      	ldr	r3, [r7, #16]
    }
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	200000c8 	.word	0x200000c8
 8003154:	20000154 	.word	0x20000154
 8003158:	20000158 	.word	0x20000158
 800315c:	20000188 	.word	0x20000188
 8003160:	20000170 	.word	0x20000170

08003164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	@ 0x28
 8003168:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800316e:	4b80      	ldr	r3, [pc, #512]	@ (8003370 <xTaskIncrementTick+0x20c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 80f1 	bne.w	800335a <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003178:	4b7e      	ldr	r3, [pc, #504]	@ (8003374 <xTaskIncrementTick+0x210>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003180:	4a7c      	ldr	r2, [pc, #496]	@ (8003374 <xTaskIncrementTick+0x210>)
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d121      	bne.n	80031d0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800318c:	4b7a      	ldr	r3, [pc, #488]	@ (8003378 <xTaskIncrementTick+0x214>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <xTaskIncrementTick+0x4a>
        __asm volatile
 8003196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	607b      	str	r3, [r7, #4]
    }
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	e7fd      	b.n	80031aa <xTaskIncrementTick+0x46>
 80031ae:	4b72      	ldr	r3, [pc, #456]	@ (8003378 <xTaskIncrementTick+0x214>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	4b71      	ldr	r3, [pc, #452]	@ (800337c <xTaskIncrementTick+0x218>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a6f      	ldr	r2, [pc, #444]	@ (8003378 <xTaskIncrementTick+0x214>)
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4a6f      	ldr	r2, [pc, #444]	@ (800337c <xTaskIncrementTick+0x218>)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003380 <xTaskIncrementTick+0x21c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3301      	adds	r3, #1
 80031c8:	4a6d      	ldr	r2, [pc, #436]	@ (8003380 <xTaskIncrementTick+0x21c>)
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	f000 fbba 	bl	8003944 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80031d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003384 <xTaskIncrementTick+0x220>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	f0c0 80aa 	bcc.w	8003330 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031dc:	4b66      	ldr	r3, [pc, #408]	@ (8003378 <xTaskIncrementTick+0x214>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d104      	bne.n	80031f0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e6:	4b67      	ldr	r3, [pc, #412]	@ (8003384 <xTaskIncrementTick+0x220>)
 80031e8:	f04f 32ff 	mov.w	r2, #4294967295
 80031ec:	601a      	str	r2, [r3, #0]
                    break;
 80031ee:	e09f      	b.n	8003330 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f0:	4b61      	ldr	r3, [pc, #388]	@ (8003378 <xTaskIncrementTick+0x214>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	429a      	cmp	r2, r3
 8003206:	d203      	bcs.n	8003210 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003208:	4a5e      	ldr	r2, [pc, #376]	@ (8003384 <xTaskIncrementTick+0x220>)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800320e:	e08f      	b.n	8003330 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	68d2      	ldr	r2, [r2, #12]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	6892      	ldr	r2, [r2, #8]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	3304      	adds	r3, #4
 8003232:	429a      	cmp	r2, r3
 8003234:	d103      	bne.n	800323e <xTaskIncrementTick+0xda>
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	1e5a      	subs	r2, r3, #1
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01e      	beq.n	8003294 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	6a12      	ldr	r2, [r2, #32]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	69d2      	ldr	r2, [r2, #28]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	3318      	adds	r3, #24
 8003278:	429a      	cmp	r2, r3
 800327a:	d103      	bne.n	8003284 <xTaskIncrementTick+0x120>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	6a1a      	ldr	r2, [r3, #32]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2200      	movs	r2, #0
 8003288:	629a      	str	r2, [r3, #40]	@ 0x28
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	1e5a      	subs	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4618      	mov	r0, r3
 8003298:	f002 fe72 	bl	8005f80 <SEGGER_SYSVIEW_OnTaskStartReady>
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	2201      	movs	r2, #1
 80032a2:	409a      	lsls	r2, r3
 80032a4:	4b38      	ldr	r3, [pc, #224]	@ (8003388 <xTaskIncrementTick+0x224>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	4a37      	ldr	r2, [pc, #220]	@ (8003388 <xTaskIncrementTick+0x224>)
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b2:	4936      	ldr	r1, [pc, #216]	@ (800338c <xTaskIncrementTick+0x228>)
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3304      	adds	r3, #4
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	3204      	adds	r2, #4
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	1d1a      	adds	r2, r3, #4
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4a26      	ldr	r2, [pc, #152]	@ (800338c <xTaskIncrementTick+0x228>)
 80032f2:	441a      	add	r2, r3
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	615a      	str	r2, [r3, #20]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032fc:	4923      	ldr	r1, [pc, #140]	@ (800338c <xTaskIncrementTick+0x228>)
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	1c59      	adds	r1, r3, #1
 800330c:	481f      	ldr	r0, [pc, #124]	@ (800338c <xTaskIncrementTick+0x228>)
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4403      	add	r3, r0
 8003318:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800331e:	4b1c      	ldr	r3, [pc, #112]	@ (8003390 <xTaskIncrementTick+0x22c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	429a      	cmp	r2, r3
 8003326:	f67f af59 	bls.w	80031dc <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800332a:	2301      	movs	r3, #1
 800332c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800332e:	e755      	b.n	80031dc <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003330:	4b17      	ldr	r3, [pc, #92]	@ (8003390 <xTaskIncrementTick+0x22c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003336:	4915      	ldr	r1, [pc, #84]	@ (800338c <xTaskIncrementTick+0x228>)
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d901      	bls.n	800334c <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003348:	2301      	movs	r3, #1
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800334c:	4b11      	ldr	r3, [pc, #68]	@ (8003394 <xTaskIncrementTick+0x230>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003354:	2301      	movs	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
 8003358:	e004      	b.n	8003364 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800335a:	4b0f      	ldr	r3, [pc, #60]	@ (8003398 <xTaskIncrementTick+0x234>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3301      	adds	r3, #1
 8003360:	4a0d      	ldr	r2, [pc, #52]	@ (8003398 <xTaskIncrementTick+0x234>)
 8003362:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003366:	4618      	mov	r0, r3
 8003368:	3728      	adds	r7, #40	@ 0x28
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200001c4 	.word	0x200001c4
 8003374:	200001a0 	.word	0x200001a0
 8003378:	20000154 	.word	0x20000154
 800337c:	20000158 	.word	0x20000158
 8003380:	200001b4 	.word	0x200001b4
 8003384:	200001bc 	.word	0x200001bc
 8003388:	200001a4 	.word	0x200001a4
 800338c:	200000c8 	.word	0x200000c8
 8003390:	200000c4 	.word	0x200000c4
 8003394:	200001b0 	.word	0x200001b0
 8003398:	200001ac 	.word	0x200001ac

0800339c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003458 <vTaskSwitchContext+0xbc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80033aa:	4b2c      	ldr	r3, [pc, #176]	@ (800345c <vTaskSwitchContext+0xc0>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80033b0:	e04e      	b.n	8003450 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80033b2:	4b2a      	ldr	r3, [pc, #168]	@ (800345c <vTaskSwitchContext+0xc0>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b8:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <vTaskSwitchContext+0xc4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80033c6:	7afb      	ldrb	r3, [r7, #11]
 80033c8:	f1c3 031f 	rsb	r3, r3, #31
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	4925      	ldr	r1, [pc, #148]	@ (8003464 <vTaskSwitchContext+0xc8>)
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <vTaskSwitchContext+0x5e>
        __asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	607b      	str	r3, [r7, #4]
    }
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	e7fd      	b.n	80033f6 <vTaskSwitchContext+0x5a>
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4a17      	ldr	r2, [pc, #92]	@ (8003464 <vTaskSwitchContext+0xc8>)
 8003406:	4413      	add	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	3308      	adds	r3, #8
 800341c:	429a      	cmp	r2, r3
 800341e:	d104      	bne.n	800342a <vTaskSwitchContext+0x8e>
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a0d      	ldr	r2, [pc, #52]	@ (8003468 <vTaskSwitchContext+0xcc>)
 8003432:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003434:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <vTaskSwitchContext+0xcc>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <vTaskSwitchContext+0xd0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d102      	bne.n	8003446 <vTaskSwitchContext+0xaa>
 8003440:	f002 fcfe 	bl	8005e40 <SEGGER_SYSVIEW_OnIdle>
}
 8003444:	e004      	b.n	8003450 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003446:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <vTaskSwitchContext+0xcc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f002 fd56 	bl	8005efc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003450:	bf00      	nop
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	200001c4 	.word	0x200001c4
 800345c:	200001b0 	.word	0x200001b0
 8003460:	200001a4 	.word	0x200001a4
 8003464:	200000c8 	.word	0x200000c8
 8003468:	200000c4 	.word	0x200000c4
 800346c:	200001c0 	.word	0x200001c0

08003470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	60fb      	str	r3, [r7, #12]
    }
 8003492:	bf00      	nop
 8003494:	bf00      	nop
 8003496:	e7fd      	b.n	8003494 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003498:	4b07      	ldr	r3, [pc, #28]	@ (80034b8 <vTaskPlaceOnEventList+0x48>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3318      	adds	r3, #24
 800349e:	4619      	mov	r1, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7fe fdcc 	bl	800203e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034a6:	2101      	movs	r1, #1
 80034a8:	6838      	ldr	r0, [r7, #0]
 80034aa:	f000 fa95 	bl	80039d8 <prvAddCurrentTaskToDelayedList>
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200000c4 	.word	0x200000c4

080034bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	613b      	str	r3, [r7, #16]
    }
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	e7fd      	b.n	80034e2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	4b17      	ldr	r3, [pc, #92]	@ (800354c <vTaskPlaceOnEventListRestricted+0x90>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	61da      	str	r2, [r3, #28]
 80034f4:	4b15      	ldr	r3, [pc, #84]	@ (800354c <vTaskPlaceOnEventListRestricted+0x90>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	6892      	ldr	r2, [r2, #8]
 80034fc:	621a      	str	r2, [r3, #32]
 80034fe:	4b13      	ldr	r3, [pc, #76]	@ (800354c <vTaskPlaceOnEventListRestricted+0x90>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	3218      	adds	r2, #24
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	4b10      	ldr	r3, [pc, #64]	@ (800354c <vTaskPlaceOnEventListRestricted+0x90>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f103 0218 	add.w	r2, r3, #24
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <vTaskPlaceOnEventListRestricted+0x90>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	629a      	str	r2, [r3, #40]	@ 0x28
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
 8003532:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003534:	2024      	movs	r0, #36	@ 0x24
 8003536:	f001 ff85 	bl	8005444 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	68b8      	ldr	r0, [r7, #8]
 800353e:	f000 fa4b 	bl	80039d8 <prvAddCurrentTaskToDelayedList>
    }
 8003542:	bf00      	nop
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200000c4 	.word	0x200000c4

08003550 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	@ 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	60fb      	str	r3, [r7, #12]
    }
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	e7fd      	b.n	800357a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	6a3a      	ldr	r2, [r7, #32]
 800358a:	6a12      	ldr	r2, [r2, #32]
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	6a3a      	ldr	r2, [r7, #32]
 8003594:	69d2      	ldr	r2, [r2, #28]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	3318      	adds	r3, #24
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d103      	bne.n	80035ac <xTaskRemoveFromEventList+0x5c>
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	6a1a      	ldr	r2, [r3, #32]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	2200      	movs	r2, #0
 80035b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	1e5a      	subs	r2, r3, #1
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035bc:	4b4b      	ldr	r3, [pc, #300]	@ (80036ec <xTaskRemoveFromEventList+0x19c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d162      	bne.n	800368a <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	6a3a      	ldr	r2, [r7, #32]
 80035d0:	68d2      	ldr	r2, [r2, #12]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	6a3a      	ldr	r2, [r7, #32]
 80035da:	6892      	ldr	r2, [r2, #8]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	3304      	adds	r3, #4
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d103      	bne.n	80035f2 <xTaskRemoveFromEventList+0xa2>
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	2200      	movs	r2, #0
 80035f6:	615a      	str	r2, [r3, #20]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	1e5a      	subs	r2, r3, #1
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	4618      	mov	r0, r3
 8003606:	f002 fcbb 	bl	8005f80 <SEGGER_SYSVIEW_OnTaskStartReady>
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	2201      	movs	r2, #1
 8003610:	409a      	lsls	r2, r3
 8003612:	4b37      	ldr	r3, [pc, #220]	@ (80036f0 <xTaskRemoveFromEventList+0x1a0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4313      	orrs	r3, r2
 8003618:	4a35      	ldr	r2, [pc, #212]	@ (80036f0 <xTaskRemoveFromEventList+0x1a0>)
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003620:	4934      	ldr	r1, [pc, #208]	@ (80036f4 <xTaskRemoveFromEventList+0x1a4>)
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3304      	adds	r3, #4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	60da      	str	r2, [r3, #12]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	3204      	adds	r2, #4
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	1d1a      	adds	r2, r3, #4
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	609a      	str	r2, [r3, #8]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4a25      	ldr	r2, [pc, #148]	@ (80036f4 <xTaskRemoveFromEventList+0x1a4>)
 8003660:	441a      	add	r2, r3
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	615a      	str	r2, [r3, #20]
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800366a:	4922      	ldr	r1, [pc, #136]	@ (80036f4 <xTaskRemoveFromEventList+0x1a4>)
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1c59      	adds	r1, r3, #1
 800367a:	481e      	ldr	r0, [pc, #120]	@ (80036f4 <xTaskRemoveFromEventList+0x1a4>)
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4403      	add	r3, r0
 8003686:	6019      	str	r1, [r3, #0]
 8003688:	e01b      	b.n	80036c2 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800368a:	4b1b      	ldr	r3, [pc, #108]	@ (80036f8 <xTaskRemoveFromEventList+0x1a8>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	61da      	str	r2, [r3, #28]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	621a      	str	r2, [r3, #32]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	6a3a      	ldr	r2, [r7, #32]
 80036a4:	3218      	adds	r2, #24
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	f103 0218 	add.w	r2, r3, #24
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	609a      	str	r2, [r3, #8]
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	4a10      	ldr	r2, [pc, #64]	@ (80036f8 <xTaskRemoveFromEventList+0x1a8>)
 80036b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80036b8:	4b0f      	ldr	r3, [pc, #60]	@ (80036f8 <xTaskRemoveFromEventList+0x1a8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	4a0e      	ldr	r2, [pc, #56]	@ (80036f8 <xTaskRemoveFromEventList+0x1a8>)
 80036c0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <xTaskRemoveFromEventList+0x1ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d905      	bls.n	80036dc <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80036d0:	2301      	movs	r3, #1
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80036d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003700 <xTaskRemoveFromEventList+0x1b0>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e001      	b.n	80036e0 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 80036dc:	2300      	movs	r3, #0
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3728      	adds	r7, #40	@ 0x28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200001c4 	.word	0x200001c4
 80036f0:	200001a4 	.word	0x200001a4
 80036f4:	200000c8 	.word	0x200000c8
 80036f8:	2000015c 	.word	0x2000015c
 80036fc:	200000c4 	.word	0x200000c4
 8003700:	200001b0 	.word	0x200001b0

08003704 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800370c:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <vTaskInternalSetTimeOutState+0x24>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003714:	4b05      	ldr	r3, [pc, #20]	@ (800372c <vTaskInternalSetTimeOutState+0x28>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	605a      	str	r2, [r3, #4]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	200001b4 	.word	0x200001b4
 800372c:	200001a0 	.word	0x200001a0

08003730 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10b      	bne.n	8003758 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	613b      	str	r3, [r7, #16]
    }
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	e7fd      	b.n	8003754 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	60fb      	str	r3, [r7, #12]
    }
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	e7fd      	b.n	8003772 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003776:	f000 fd71 	bl	800425c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800377a:	4b1f      	ldr	r3, [pc, #124]	@ (80037f8 <xTaskCheckForTimeOut+0xc8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	d102      	bne.n	800379a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	e026      	b.n	80037e8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <xTaskCheckForTimeOut+0xcc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d00a      	beq.n	80037bc <xTaskCheckForTimeOut+0x8c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d305      	bcc.n	80037bc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80037b0:	2301      	movs	r3, #1
 80037b2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e015      	b.n	80037e8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d20b      	bcs.n	80037de <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	1ad2      	subs	r2, r2, r3
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff ff96 	bl	8003704 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	e004      	b.n	80037e8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80037e8:	f000 fd6a 	bl	80042c0 <vPortExitCritical>

    return xReturn;
 80037ec:	69fb      	ldr	r3, [r7, #28]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	200001a0 	.word	0x200001a0
 80037fc:	200001b4 	.word	0x200001b4

08003800 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003804:	4b03      	ldr	r3, [pc, #12]	@ (8003814 <vTaskMissedYield+0x14>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]
}
 800380a:	bf00      	nop
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	200001b0 	.word	0x200001b0

08003818 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003820:	f000 f852 	bl	80038c8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003824:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <prvIdleTask+0x28>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d9f9      	bls.n	8003820 <prvIdleTask+0x8>
            {
                taskYIELD();
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <prvIdleTask+0x2c>)
 800382e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800383c:	e7f0      	b.n	8003820 <prvIdleTask+0x8>
 800383e:	bf00      	nop
 8003840:	200000c8 	.word	0x200000c8
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	e00c      	b.n	800386e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4a12      	ldr	r2, [pc, #72]	@ (80038a8 <prvInitialiseTaskLists+0x60>)
 8003860:	4413      	add	r3, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fbbe 	bl	8001fe4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3301      	adds	r3, #1
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d9ef      	bls.n	8003854 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003874:	480d      	ldr	r0, [pc, #52]	@ (80038ac <prvInitialiseTaskLists+0x64>)
 8003876:	f7fe fbb5 	bl	8001fe4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800387a:	480d      	ldr	r0, [pc, #52]	@ (80038b0 <prvInitialiseTaskLists+0x68>)
 800387c:	f7fe fbb2 	bl	8001fe4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003880:	480c      	ldr	r0, [pc, #48]	@ (80038b4 <prvInitialiseTaskLists+0x6c>)
 8003882:	f7fe fbaf 	bl	8001fe4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003886:	480c      	ldr	r0, [pc, #48]	@ (80038b8 <prvInitialiseTaskLists+0x70>)
 8003888:	f7fe fbac 	bl	8001fe4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800388c:	480b      	ldr	r0, [pc, #44]	@ (80038bc <prvInitialiseTaskLists+0x74>)
 800388e:	f7fe fba9 	bl	8001fe4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003892:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <prvInitialiseTaskLists+0x78>)
 8003894:	4a05      	ldr	r2, [pc, #20]	@ (80038ac <prvInitialiseTaskLists+0x64>)
 8003896:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003898:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <prvInitialiseTaskLists+0x7c>)
 800389a:	4a05      	ldr	r2, [pc, #20]	@ (80038b0 <prvInitialiseTaskLists+0x68>)
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	200000c8 	.word	0x200000c8
 80038ac:	2000012c 	.word	0x2000012c
 80038b0:	20000140 	.word	0x20000140
 80038b4:	2000015c 	.word	0x2000015c
 80038b8:	20000170 	.word	0x20000170
 80038bc:	20000188 	.word	0x20000188
 80038c0:	20000154 	.word	0x20000154
 80038c4:	20000158 	.word	0x20000158

080038c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038ce:	e019      	b.n	8003904 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80038d0:	f000 fcc4 	bl	800425c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d4:	4b10      	ldr	r3, [pc, #64]	@ (8003918 <prvCheckTasksWaitingTermination+0x50>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe fbe5 	bl	80020b0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80038e6:	4b0d      	ldr	r3, [pc, #52]	@ (800391c <prvCheckTasksWaitingTermination+0x54>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	4a0b      	ldr	r2, [pc, #44]	@ (800391c <prvCheckTasksWaitingTermination+0x54>)
 80038ee:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80038f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003920 <prvCheckTasksWaitingTermination+0x58>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003920 <prvCheckTasksWaitingTermination+0x58>)
 80038f8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80038fa:	f000 fce1 	bl	80042c0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f810 	bl	8003924 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003904:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <prvCheckTasksWaitingTermination+0x58>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e1      	bne.n	80038d0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000170 	.word	0x20000170
 800391c:	2000019c 	.word	0x2000019c
 8003920:	20000184 	.word	0x20000184

08003924 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fe81 	bl	8004638 <vPortFree>
            vPortFree( pxTCB );
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fe7e 	bl	8004638 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003948:	4b0a      	ldr	r3, [pc, #40]	@ (8003974 <prvResetNextTaskUnblockTime+0x30>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003952:	4b09      	ldr	r3, [pc, #36]	@ (8003978 <prvResetNextTaskUnblockTime+0x34>)
 8003954:	f04f 32ff 	mov.w	r2, #4294967295
 8003958:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800395a:	e005      	b.n	8003968 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800395c:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <prvResetNextTaskUnblockTime+0x30>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a04      	ldr	r2, [pc, #16]	@ (8003978 <prvResetNextTaskUnblockTime+0x34>)
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000154 	.word	0x20000154
 8003978:	200001bc 	.word	0x200001bc

0800397c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003982:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <xTaskGetCurrentTaskHandle+0x1c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003988:	687b      	ldr	r3, [r7, #4]
    }
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	200000c4 	.word	0x200000c4

0800399c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80039a2:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <xTaskGetSchedulerState+0x34>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d102      	bne.n	80039b0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039aa:	2301      	movs	r3, #1
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	e008      	b.n	80039c2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b0:	4b08      	ldr	r3, [pc, #32]	@ (80039d4 <xTaskGetSchedulerState+0x38>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d102      	bne.n	80039be <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80039b8:	2302      	movs	r3, #2
 80039ba:	607b      	str	r3, [r7, #4]
 80039bc:	e001      	b.n	80039c2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80039c2:	687b      	ldr	r3, [r7, #4]
    }
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	200001a8 	.word	0x200001a8
 80039d4:	200001c4 	.word	0x200001c4

080039d8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80039e2:	4b36      	ldr	r3, [pc, #216]	@ (8003abc <prvAddCurrentTaskToDelayedList+0xe4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039e8:	4b35      	ldr	r3, [pc, #212]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fb5e 	bl	80020b0 <uxListRemove>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10b      	bne.n	8003a12 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80039fa:	4b31      	ldr	r3, [pc, #196]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a00:	2201      	movs	r2, #1
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43da      	mvns	r2, r3
 8003a08:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a10:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d124      	bne.n	8003a64 <prvAddCurrentTaskToDelayedList+0x8c>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d021      	beq.n	8003a64 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a20:	4b29      	ldr	r3, [pc, #164]	@ (8003ac8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	4b26      	ldr	r3, [pc, #152]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	4b24      	ldr	r3, [pc, #144]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	6892      	ldr	r2, [r2, #8]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	4b21      	ldr	r3, [pc, #132]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	3204      	adds	r2, #4
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	1d1a      	adds	r2, r3, #4
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a54:	615a      	str	r2, [r3, #20]
 8003a56:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ac8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a62:	e026      	b.n	8003ab2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d209      	bcs.n	8003a90 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a7c:	4b13      	ldr	r3, [pc, #76]	@ (8003acc <prvAddCurrentTaskToDelayedList+0xf4>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3304      	adds	r3, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f7fe fad8 	bl	800203e <vListInsert>
}
 8003a8e:	e010      	b.n	8003ab2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a90:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f7fe face 	bl	800203e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d202      	bcs.n	8003ab2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003aac:	4a09      	ldr	r2, [pc, #36]	@ (8003ad4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6013      	str	r3, [r2, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200001a0 	.word	0x200001a0
 8003ac0:	200000c4 	.word	0x200000c4
 8003ac4:	200001a4 	.word	0x200001a4
 8003ac8:	20000188 	.word	0x20000188
 8003acc:	20000158 	.word	0x20000158
 8003ad0:	20000154 	.word	0x20000154
 8003ad4:	200001bc 	.word	0x200001bc

08003ad8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003ae2:	f000 fa4f 	bl	8003f84 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003ae6:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <xTimerCreateTimerTask+0x58>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003aee:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <xTimerCreateTimerTask+0x5c>)
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	2302      	movs	r3, #2
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	2300      	movs	r3, #0
 8003af8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003afc:	490e      	ldr	r1, [pc, #56]	@ (8003b38 <xTimerCreateTimerTask+0x60>)
 8003afe:	480f      	ldr	r0, [pc, #60]	@ (8003b3c <xTimerCreateTimerTask+0x64>)
 8003b00:	f7fe fe38 	bl	8002774 <xTaskCreate>
 8003b04:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10b      	bne.n	8003b24 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	603b      	str	r3, [r7, #0]
    }
 8003b1e:	bf00      	nop
 8003b20:	bf00      	nop
 8003b22:	e7fd      	b.n	8003b20 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003b24:	687b      	ldr	r3, [r7, #4]
    }
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200001f8 	.word	0x200001f8
 8003b34:	200001fc 	.word	0x200001fc
 8003b38:	08006358 	.word	0x08006358
 8003b3c:	08003be5 	.word	0x08003be5

08003b40 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003b4c:	e008      	b.n	8003b60 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	4413      	add	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	18d1      	adds	r1, r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f8df 	bl	8003d30 <prvInsertTimerInActiveList>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1ea      	bne.n	8003b4e <prvReloadTimer+0xe>
        }
    }
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b8e:	4b14      	ldr	r3, [pc, #80]	@ (8003be0 <prvProcessExpiredTimer+0x5c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe fa87 	bl	80020b0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7ff ffc3 	bl	8003b40 <prvReloadTimer>
 8003bba:	e008      	b.n	8003bce <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	4798      	blx	r3
    }
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200001f0 	.word	0x200001f0

08003be4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bec:	f107 0308 	add.w	r3, r7, #8
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f859 	bl	8003ca8 <prvGetNextExpireTime>
 8003bf6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f805 	bl	8003c0c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c02:	f000 f8d7 	bl	8003db4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c06:	bf00      	nop
 8003c08:	e7f0      	b.n	8003bec <prvTimerTask+0x8>
	...

08003c0c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c16:	f7ff f8a1 	bl	8002d5c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c1a:	f107 0308 	add.w	r3, r7, #8
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f866 	bl	8003cf0 <prvSampleTimeNow>
 8003c24:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d130      	bne.n	8003c8e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <prvProcessTimerOrBlockTask+0x3c>
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d806      	bhi.n	8003c48 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c3a:	f7ff f89d 	bl	8002d78 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff9f 	bl	8003b84 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c46:	e024      	b.n	8003c92 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c4e:	4b13      	ldr	r3, [pc, #76]	@ (8003c9c <prvProcessTimerOrBlockTask+0x90>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <prvProcessTimerOrBlockTask+0x50>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <prvProcessTimerOrBlockTask+0x52>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca0 <prvProcessTimerOrBlockTask+0x94>)
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f7fe fd4d 	bl	800270c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c72:	f7ff f881 	bl	8002d78 <xTaskResumeAll>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c7c:	4b09      	ldr	r3, [pc, #36]	@ (8003ca4 <prvProcessTimerOrBlockTask+0x98>)
 8003c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	f3bf 8f6f 	isb	sy
    }
 8003c8c:	e001      	b.n	8003c92 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c8e:	f7ff f873 	bl	8002d78 <xTaskResumeAll>
    }
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	200001f4 	.word	0x200001f4
 8003ca0:	200001f8 	.word	0x200001f8
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003cec <prvGetNextExpireTime+0x44>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <prvGetNextExpireTime+0x16>
 8003cba:	2201      	movs	r2, #1
 8003cbc:	e000      	b.n	8003cc0 <prvGetNextExpireTime+0x18>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ccc:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <prvGetNextExpireTime+0x44>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e001      	b.n	8003cdc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
    }
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	200001f0 	.word	0x200001f0

08003cf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003cf8:	f7ff f93e 	bl	8002f78 <xTaskGetTickCount>
 8003cfc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <prvSampleTimeNow+0x3c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d205      	bcs.n	8003d14 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d08:	f000 f916 	bl	8003f38 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	e002      	b.n	8003d1a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d1a:	4a04      	ldr	r2, [pc, #16]	@ (8003d2c <prvSampleTimeNow+0x3c>)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d20:	68fb      	ldr	r3, [r7, #12]
    }
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000200 	.word	0x20000200

08003d30 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d812      	bhi.n	8003d7c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	1ad2      	subs	r2, r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d302      	bcc.n	8003d6a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d64:	2301      	movs	r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	e01b      	b.n	8003da2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d6a:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <prvInsertTimerInActiveList+0x7c>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3304      	adds	r3, #4
 8003d72:	4619      	mov	r1, r3
 8003d74:	4610      	mov	r0, r2
 8003d76:	f7fe f962 	bl	800203e <vListInsert>
 8003d7a:	e012      	b.n	8003da2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d206      	bcs.n	8003d92 <prvInsertTimerInActiveList+0x62>
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d302      	bcc.n	8003d92 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e007      	b.n	8003da2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d92:	4b07      	ldr	r3, [pc, #28]	@ (8003db0 <prvInsertTimerInActiveList+0x80>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f7fe f94e 	bl	800203e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003da2:	697b      	ldr	r3, [r7, #20]
    }
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	200001f4 	.word	0x200001f4
 8003db0:	200001f0 	.word	0x200001f0

08003db4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dba:	e0a9      	b.n	8003f10 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f2c0 80a6 	blt.w	8003f10 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe f96b 	bl	80020b0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dda:	1d3b      	adds	r3, r7, #4
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff87 	bl	8003cf0 <prvSampleTimeNow>
 8003de2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	f200 808e 	bhi.w	8003f0a <prvProcessReceivedCommands+0x156>
 8003dee:	a201      	add	r2, pc, #4	@ (adr r2, 8003df4 <prvProcessReceivedCommands+0x40>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e19 	.word	0x08003e19
 8003dfc:	08003e81 	.word	0x08003e81
 8003e00:	08003e95 	.word	0x08003e95
 8003e04:	08003ee1 	.word	0x08003ee1
 8003e08:	08003e19 	.word	0x08003e19
 8003e0c:	08003e19 	.word	0x08003e19
 8003e10:	08003e81 	.word	0x08003e81
 8003e14:	08003e95 	.word	0x08003e95
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	18d1      	adds	r1, r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	69f8      	ldr	r0, [r7, #28]
 8003e38:	f7ff ff7a 	bl	8003d30 <prvInsertTimerInActiveList>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d065      	beq.n	8003f0e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d009      	beq.n	8003e64 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	4413      	add	r3, r2
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	69f8      	ldr	r0, [r7, #28]
 8003e5e:	f7ff fe6f 	bl	8003b40 <prvReloadTimer>
 8003e62:	e008      	b.n	8003e76 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	69f8      	ldr	r0, [r7, #28]
 8003e7c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003e7e:	e046      	b.n	8003f0e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003e92:	e03d      	b.n	8003f10 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	617b      	str	r3, [r7, #20]
    }
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	699a      	ldr	r2, [r3, #24]
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	18d1      	adds	r1, r2, r3
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	69f8      	ldr	r0, [r7, #28]
 8003eda:	f7ff ff29 	bl	8003d30 <prvInsertTimerInActiveList>
                        break;
 8003ede:	e017      	b.n	8003f10 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d103      	bne.n	8003ef6 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003eee:	69f8      	ldr	r0, [r7, #28]
 8003ef0:	f000 fba2 	bl	8004638 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ef4:	e00c      	b.n	8003f10 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003f08:	e002      	b.n	8003f10 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003f0a:	bf00      	nop
 8003f0c:	e000      	b.n	8003f10 <prvProcessReceivedCommands+0x15c>
                        break;
 8003f0e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f10:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <prvProcessReceivedCommands+0x180>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f107 0108 	add.w	r1, r7, #8
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe f9fc 	bl	8002318 <xQueueReceive>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f47f af4a 	bne.w	8003dbc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	200001f8 	.word	0x200001f8

08003f38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f3e:	e009      	b.n	8003f54 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f40:	4b0e      	ldr	r3, [pc, #56]	@ (8003f7c <prvSwitchTimerLists+0x44>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003f4a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f4e:	6838      	ldr	r0, [r7, #0]
 8003f50:	f7ff fe18 	bl	8003b84 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f54:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <prvSwitchTimerLists+0x44>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003f5e:	4b07      	ldr	r3, [pc, #28]	@ (8003f7c <prvSwitchTimerLists+0x44>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f64:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <prvSwitchTimerLists+0x48>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a04      	ldr	r2, [pc, #16]	@ (8003f7c <prvSwitchTimerLists+0x44>)
 8003f6a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f6c:	4a04      	ldr	r2, [pc, #16]	@ (8003f80 <prvSwitchTimerLists+0x48>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6013      	str	r3, [r2, #0]
    }
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200001f0 	.word	0x200001f0
 8003f80:	200001f4 	.word	0x200001f4

08003f84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f88:	f000 f968 	bl	800425c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f8c:	4b12      	ldr	r3, [pc, #72]	@ (8003fd8 <prvCheckForValidListAndQueue+0x54>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11d      	bne.n	8003fd0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f94:	4811      	ldr	r0, [pc, #68]	@ (8003fdc <prvCheckForValidListAndQueue+0x58>)
 8003f96:	f7fe f825 	bl	8001fe4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f9a:	4811      	ldr	r0, [pc, #68]	@ (8003fe0 <prvCheckForValidListAndQueue+0x5c>)
 8003f9c:	f7fe f822 	bl	8001fe4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003fa0:	4b10      	ldr	r3, [pc, #64]	@ (8003fe4 <prvCheckForValidListAndQueue+0x60>)
 8003fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8003fdc <prvCheckForValidListAndQueue+0x58>)
 8003fa4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <prvCheckForValidListAndQueue+0x64>)
 8003fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe0 <prvCheckForValidListAndQueue+0x5c>)
 8003faa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003fac:	2200      	movs	r2, #0
 8003fae:	210c      	movs	r1, #12
 8003fb0:	200a      	movs	r0, #10
 8003fb2:	f7fe f939 	bl	8002228 <xQueueGenericCreate>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4a07      	ldr	r2, [pc, #28]	@ (8003fd8 <prvCheckForValidListAndQueue+0x54>)
 8003fba:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003fbc:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <prvCheckForValidListAndQueue+0x54>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fc4:	4b04      	ldr	r3, [pc, #16]	@ (8003fd8 <prvCheckForValidListAndQueue+0x54>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4908      	ldr	r1, [pc, #32]	@ (8003fec <prvCheckForValidListAndQueue+0x68>)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fb46 	bl	800265c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fd0:	f000 f976 	bl	80042c0 <vPortExitCritical>
    }
 8003fd4:	bf00      	nop
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	200001f8 	.word	0x200001f8
 8003fdc:	200001c8 	.word	0x200001c8
 8003fe0:	200001dc 	.word	0x200001dc
 8003fe4:	200001f0 	.word	0x200001f0
 8003fe8:	200001f4 	.word	0x200001f4
 8003fec:	08006360 	.word	0x08006360

08003ff0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3b04      	subs	r3, #4
 8004000:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004008:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3b04      	subs	r3, #4
 800400e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f023 0201 	bic.w	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3b04      	subs	r3, #4
 800401e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004020:	4a0c      	ldr	r2, [pc, #48]	@ (8004054 <pxPortInitialiseStack+0x64>)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b14      	subs	r3, #20
 800402a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b04      	subs	r3, #4
 8004036:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f06f 0202 	mvn.w	r2, #2
 800403e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3b20      	subs	r3, #32
 8004044:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004046:	68fb      	ldr	r3, [r7, #12]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	08004059 	.word	0x08004059

08004058 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004062:	4b13      	ldr	r3, [pc, #76]	@ (80040b0 <prvTaskExitError+0x58>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406a:	d00b      	beq.n	8004084 <prvTaskExitError+0x2c>
        __asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60fb      	str	r3, [r7, #12]
    }
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	e7fd      	b.n	8004080 <prvTaskExitError+0x28>
        __asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	60bb      	str	r3, [r7, #8]
    }
 8004096:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004098:	bf00      	nop
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0fc      	beq.n	800409a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000010 	.word	0x20000010
	...

080040c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040c0:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <pxCurrentTCBConst2>)
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	6808      	ldr	r0, [r1, #0]
 80040c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	f380 8809 	msr	PSP, r0
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8811 	msr	BASEPRI, r0
 80040da:	4770      	bx	lr
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst2>:
 80040e0:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80040e8:	4808      	ldr	r0, [pc, #32]	@ (800410c <prvPortStartFirstTask+0x24>)
 80040ea:	6800      	ldr	r0, [r0, #0]
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	f380 8808 	msr	MSP, r0
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8814 	msr	CONTROL, r0
 80040fa:	b662      	cpsie	i
 80040fc:	b661      	cpsie	f
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	df00      	svc	0
 8004108:	bf00      	nop
 800410a:	0000      	.short	0x0000
 800410c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop

08004114 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800411a:	4b47      	ldr	r3, [pc, #284]	@ (8004238 <xPortStartScheduler+0x124>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a47      	ldr	r2, [pc, #284]	@ (800423c <xPortStartScheduler+0x128>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10b      	bne.n	800413c <xPortStartScheduler+0x28>
        __asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	613b      	str	r3, [r7, #16]
    }
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800413c:	4b3e      	ldr	r3, [pc, #248]	@ (8004238 <xPortStartScheduler+0x124>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a3f      	ldr	r2, [pc, #252]	@ (8004240 <xPortStartScheduler+0x12c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10b      	bne.n	800415e <xPortStartScheduler+0x4a>
        __asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60fb      	str	r3, [r7, #12]
    }
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800415e:	4b39      	ldr	r3, [pc, #228]	@ (8004244 <xPortStartScheduler+0x130>)
 8004160:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	22ff      	movs	r2, #255	@ 0xff
 800416e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004180:	b2da      	uxtb	r2, r3
 8004182:	4b31      	ldr	r3, [pc, #196]	@ (8004248 <xPortStartScheduler+0x134>)
 8004184:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004186:	4b31      	ldr	r3, [pc, #196]	@ (800424c <xPortStartScheduler+0x138>)
 8004188:	2207      	movs	r2, #7
 800418a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800418c:	e009      	b.n	80041a2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800418e:	4b2f      	ldr	r3, [pc, #188]	@ (800424c <xPortStartScheduler+0x138>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3b01      	subs	r3, #1
 8004194:	4a2d      	ldr	r2, [pc, #180]	@ (800424c <xPortStartScheduler+0x138>)
 8004196:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041aa:	2b80      	cmp	r3, #128	@ 0x80
 80041ac:	d0ef      	beq.n	800418e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041ae:	4b27      	ldr	r3, [pc, #156]	@ (800424c <xPortStartScheduler+0x138>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1c3 0307 	rsb	r3, r3, #7
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d00b      	beq.n	80041d2 <xPortStartScheduler+0xbe>
        __asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	60bb      	str	r3, [r7, #8]
    }
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	e7fd      	b.n	80041ce <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041d2:	4b1e      	ldr	r3, [pc, #120]	@ (800424c <xPortStartScheduler+0x138>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	4a1c      	ldr	r2, [pc, #112]	@ (800424c <xPortStartScheduler+0x138>)
 80041da:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041dc:	4b1b      	ldr	r3, [pc, #108]	@ (800424c <xPortStartScheduler+0x138>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041e4:	4a19      	ldr	r2, [pc, #100]	@ (800424c <xPortStartScheduler+0x138>)
 80041e6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041f0:	4b17      	ldr	r3, [pc, #92]	@ (8004250 <xPortStartScheduler+0x13c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a16      	ldr	r2, [pc, #88]	@ (8004250 <xPortStartScheduler+0x13c>)
 80041f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041fc:	4b14      	ldr	r3, [pc, #80]	@ (8004250 <xPortStartScheduler+0x13c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a13      	ldr	r2, [pc, #76]	@ (8004250 <xPortStartScheduler+0x13c>)
 8004202:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004206:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004208:	f000 f8e8 	bl	80043dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800420c:	4b11      	ldr	r3, [pc, #68]	@ (8004254 <xPortStartScheduler+0x140>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004212:	f000 f907 	bl	8004424 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004216:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <xPortStartScheduler+0x144>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a0f      	ldr	r2, [pc, #60]	@ (8004258 <xPortStartScheduler+0x144>)
 800421c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004220:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004222:	f7ff ff61 	bl	80040e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004226:	f7ff f8b9 	bl	800339c <vTaskSwitchContext>
    prvTaskExitError();
 800422a:	f7ff ff15 	bl	8004058 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	e000ed00 	.word	0xe000ed00
 800423c:	410fc271 	.word	0x410fc271
 8004240:	410fc270 	.word	0x410fc270
 8004244:	e000e400 	.word	0xe000e400
 8004248:	20000204 	.word	0x20000204
 800424c:	20000014 	.word	0x20000014
 8004250:	e000ed20 	.word	0xe000ed20
 8004254:	20000010 	.word	0x20000010
 8004258:	e000ef34 	.word	0xe000ef34

0800425c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
        __asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	607b      	str	r3, [r7, #4]
    }
 8004274:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004276:	4b10      	ldr	r3, [pc, #64]	@ (80042b8 <vPortEnterCritical+0x5c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3301      	adds	r3, #1
 800427c:	4a0e      	ldr	r2, [pc, #56]	@ (80042b8 <vPortEnterCritical+0x5c>)
 800427e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004280:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <vPortEnterCritical+0x5c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d110      	bne.n	80042aa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004288:	4b0c      	ldr	r3, [pc, #48]	@ (80042bc <vPortEnterCritical+0x60>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00b      	beq.n	80042aa <vPortEnterCritical+0x4e>
        __asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	603b      	str	r3, [r7, #0]
    }
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	e7fd      	b.n	80042a6 <vPortEnterCritical+0x4a>
    }
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000010 	.word	0x20000010
 80042bc:	e000ed04 	.word	0xe000ed04

080042c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80042c6:	4b12      	ldr	r3, [pc, #72]	@ (8004310 <vPortExitCritical+0x50>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10b      	bne.n	80042e6 <vPortExitCritical+0x26>
        __asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	607b      	str	r3, [r7, #4]
    }
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	e7fd      	b.n	80042e2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80042e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <vPortExitCritical+0x50>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	4a08      	ldr	r2, [pc, #32]	@ (8004310 <vPortExitCritical+0x50>)
 80042ee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80042f0:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <vPortExitCritical+0x50>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <vPortExitCritical+0x44>
 80042f8:	2300      	movs	r3, #0
 80042fa:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004302:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	20000010 	.word	0x20000010
	...

08004320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004320:	f3ef 8009 	mrs	r0, PSP
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	4b15      	ldr	r3, [pc, #84]	@ (8004380 <pxCurrentTCBConst>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	f01e 0f10 	tst.w	lr, #16
 8004330:	bf08      	it	eq
 8004332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433a:	6010      	str	r0, [r2, #0]
 800433c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004344:	f380 8811 	msr	BASEPRI, r0
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f7ff f824 	bl	800339c <vTaskSwitchContext>
 8004354:	f04f 0000 	mov.w	r0, #0
 8004358:	f380 8811 	msr	BASEPRI, r0
 800435c:	bc09      	pop	{r0, r3}
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	6808      	ldr	r0, [r1, #0]
 8004362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004366:	f01e 0f10 	tst.w	lr, #16
 800436a:	bf08      	it	eq
 800436c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004370:	f380 8809 	msr	PSP, r0
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	f3af 8000 	nop.w

08004380 <pxCurrentTCBConst>:
 8004380:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop

08004388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
        __asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	607b      	str	r3, [r7, #4]
    }
 80043a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80043a2:	f001 fcd3 	bl	8005d4c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80043a6:	f7fe fedd 	bl	8003164 <xTaskIncrementTick>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80043b0:	f001 fd2a 	bl	8005e08 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043b4:	4b08      	ldr	r3, [pc, #32]	@ (80043d8 <SysTick_Handler+0x50>)
 80043b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e001      	b.n	80043c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80043be:	f001 fd07 	bl	8005dd0 <SEGGER_SYSVIEW_RecordExitISR>
 80043c2:	2300      	movs	r3, #0
 80043c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f383 8811 	msr	BASEPRI, r3
    }
 80043cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	e000ed04 	.word	0xe000ed04

080043dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004410 <vPortSetupTimerInterrupt+0x34>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <vPortSetupTimerInterrupt+0x38>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <vPortSetupTimerInterrupt+0x3c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a0a      	ldr	r2, [pc, #40]	@ (800441c <vPortSetupTimerInterrupt+0x40>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	099b      	lsrs	r3, r3, #6
 80043f8:	4a09      	ldr	r2, [pc, #36]	@ (8004420 <vPortSetupTimerInterrupt+0x44>)
 80043fa:	3b01      	subs	r3, #1
 80043fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043fe:	4b04      	ldr	r3, [pc, #16]	@ (8004410 <vPortSetupTimerInterrupt+0x34>)
 8004400:	2207      	movs	r2, #7
 8004402:	601a      	str	r2, [r3, #0]
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	e000e010 	.word	0xe000e010
 8004414:	e000e018 	.word	0xe000e018
 8004418:	20000000 	.word	0x20000000
 800441c:	10624dd3 	.word	0x10624dd3
 8004420:	e000e014 	.word	0xe000e014

08004424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004424:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004434 <vPortEnableVFP+0x10>
 8004428:	6801      	ldr	r1, [r0, #0]
 800442a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800442e:	6001      	str	r1, [r0, #0]
 8004430:	4770      	bx	lr
 8004432:	0000      	.short	0x0000
 8004434:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop

0800443c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004442:	f3ef 8305 	mrs	r3, IPSR
 8004446:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b0f      	cmp	r3, #15
 800444c:	d915      	bls.n	800447a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800444e:	4a18      	ldr	r2, [pc, #96]	@ (80044b0 <vPortValidateInterruptPriority+0x74>)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4413      	add	r3, r2
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004458:	4b16      	ldr	r3, [pc, #88]	@ (80044b4 <vPortValidateInterruptPriority+0x78>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	7afa      	ldrb	r2, [r7, #11]
 800445e:	429a      	cmp	r2, r3
 8004460:	d20b      	bcs.n	800447a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	607b      	str	r3, [r7, #4]
    }
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800447a:	4b0f      	ldr	r3, [pc, #60]	@ (80044b8 <vPortValidateInterruptPriority+0x7c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004482:	4b0e      	ldr	r3, [pc, #56]	@ (80044bc <vPortValidateInterruptPriority+0x80>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d90b      	bls.n	80044a2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	603b      	str	r3, [r7, #0]
    }
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	e7fd      	b.n	800449e <vPortValidateInterruptPriority+0x62>
    }
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000e3f0 	.word	0xe000e3f0
 80044b4:	20000204 	.word	0x20000204
 80044b8:	e000ed0c 	.word	0xe000ed0c
 80044bc:	20000014 	.word	0x20000014

080044c0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	@ 0x28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80044cc:	f7fe fc46 	bl	8002d5c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80044d0:	4b54      	ldr	r3, [pc, #336]	@ (8004624 <pvPortMalloc+0x164>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80044d8:	f000 f90c 	bl	80046f4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80044e2:	2208      	movs	r2, #8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	3308      	adds	r3, #8
 80044ee:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d804      	bhi.n	8004504 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	4413      	add	r3, r2
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	e001      	b.n	8004508 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	db71      	blt.n	80045f2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d06e      	beq.n	80045f2 <pvPortMalloc+0x132>
 8004514:	4b44      	ldr	r3, [pc, #272]	@ (8004628 <pvPortMalloc+0x168>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	429a      	cmp	r2, r3
 800451c:	d869      	bhi.n	80045f2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800451e:	4b43      	ldr	r3, [pc, #268]	@ (800462c <pvPortMalloc+0x16c>)
 8004520:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004522:	4b42      	ldr	r3, [pc, #264]	@ (800462c <pvPortMalloc+0x16c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004528:	e004      	b.n	8004534 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	429a      	cmp	r2, r3
 800453c:	d903      	bls.n	8004546 <pvPortMalloc+0x86>
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f1      	bne.n	800452a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004546:	4b37      	ldr	r3, [pc, #220]	@ (8004624 <pvPortMalloc+0x164>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800454c:	429a      	cmp	r2, r3
 800454e:	d050      	beq.n	80045f2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2208      	movs	r2, #8
 8004556:	4413      	add	r3, r2
 8004558:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	1ad2      	subs	r2, r2, r3
 800456a:	2308      	movs	r3, #8
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	429a      	cmp	r2, r3
 8004570:	d920      	bls.n	80045b4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4413      	add	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <pvPortMalloc+0xdc>
        __asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	613b      	str	r3, [r7, #16]
    }
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	1ad2      	subs	r2, r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045ae:	6978      	ldr	r0, [r7, #20]
 80045b0:	f000 f8fc 	bl	80047ac <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004628 <pvPortMalloc+0x168>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	4a1a      	ldr	r2, [pc, #104]	@ (8004628 <pvPortMalloc+0x168>)
 80045c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045c2:	4b19      	ldr	r3, [pc, #100]	@ (8004628 <pvPortMalloc+0x168>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004630 <pvPortMalloc+0x170>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d203      	bcs.n	80045d6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045ce:	4b16      	ldr	r3, [pc, #88]	@ (8004628 <pvPortMalloc+0x168>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a17      	ldr	r2, [pc, #92]	@ (8004630 <pvPortMalloc+0x170>)
 80045d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80045e8:	4b12      	ldr	r3, [pc, #72]	@ (8004634 <pvPortMalloc+0x174>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	4a11      	ldr	r2, [pc, #68]	@ (8004634 <pvPortMalloc+0x174>)
 80045f0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80045f2:	f7fe fbc1 	bl	8002d78 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <pvPortMalloc+0x158>
        __asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	60fb      	str	r3, [r7, #12]
    }
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <pvPortMalloc+0x154>
    return pvReturn;
 8004618:	69fb      	ldr	r3, [r7, #28]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3728      	adds	r7, #40	@ 0x28
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20012e10 	.word	0x20012e10
 8004628:	20012e14 	.word	0x20012e14
 800462c:	20012e08 	.word	0x20012e08
 8004630:	20012e18 	.word	0x20012e18
 8004634:	20012e1c 	.word	0x20012e1c

08004638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d04b      	beq.n	80046e2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800464a:	2308      	movs	r3, #8
 800464c:	425b      	negs	r3, r3
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4413      	add	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	db0b      	blt.n	8004678 <vPortFree+0x40>
        __asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	60fb      	str	r3, [r7, #12]
    }
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	e7fd      	b.n	8004674 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <vPortFree+0x60>
        __asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	60bb      	str	r3, [r7, #8]
    }
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	0fdb      	lsrs	r3, r3, #31
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01c      	beq.n	80046e2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d118      	bne.n	80046e2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80046bc:	f7fe fb4e 	bl	8002d5c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <vPortFree+0xb4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	4a08      	ldr	r2, [pc, #32]	@ (80046ec <vPortFree+0xb4>)
 80046cc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046ce:	6938      	ldr	r0, [r7, #16]
 80046d0:	f000 f86c 	bl	80047ac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80046d4:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <vPortFree+0xb8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3301      	adds	r3, #1
 80046da:	4a05      	ldr	r2, [pc, #20]	@ (80046f0 <vPortFree+0xb8>)
 80046dc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80046de:	f7fe fb4b 	bl	8002d78 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80046e2:	bf00      	nop
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20012e14 	.word	0x20012e14
 80046f0:	20012e20 	.word	0x20012e20

080046f4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046fa:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80046fe:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004700:	4b25      	ldr	r3, [pc, #148]	@ (8004798 <prvHeapInit+0xa4>)
 8004702:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00c      	beq.n	8004728 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3307      	adds	r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0307 	bic.w	r3, r3, #7
 800471a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	4a1d      	ldr	r2, [pc, #116]	@ (8004798 <prvHeapInit+0xa4>)
 8004724:	4413      	add	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800472c:	4a1b      	ldr	r2, [pc, #108]	@ (800479c <prvHeapInit+0xa8>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004732:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <prvHeapInit+0xa8>)
 8004734:	2200      	movs	r2, #0
 8004736:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	4413      	add	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004740:	2208      	movs	r2, #8
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0307 	bic.w	r3, r3, #7
 800474e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a13      	ldr	r2, [pc, #76]	@ (80047a0 <prvHeapInit+0xac>)
 8004754:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004756:	4b12      	ldr	r3, [pc, #72]	@ (80047a0 <prvHeapInit+0xac>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2200      	movs	r2, #0
 800475c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800475e:	4b10      	ldr	r3, [pc, #64]	@ (80047a0 <prvHeapInit+0xac>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004774:	4b0a      	ldr	r3, [pc, #40]	@ (80047a0 <prvHeapInit+0xac>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4a08      	ldr	r2, [pc, #32]	@ (80047a4 <prvHeapInit+0xb0>)
 8004782:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4a07      	ldr	r2, [pc, #28]	@ (80047a8 <prvHeapInit+0xb4>)
 800478a:	6013      	str	r3, [r2, #0]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	20000208 	.word	0x20000208
 800479c:	20012e08 	.word	0x20012e08
 80047a0:	20012e10 	.word	0x20012e10
 80047a4:	20012e18 	.word	0x20012e18
 80047a8:	20012e14 	.word	0x20012e14

080047ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047b4:	4b28      	ldr	r3, [pc, #160]	@ (8004858 <prvInsertBlockIntoFreeList+0xac>)
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e002      	b.n	80047c0 <prvInsertBlockIntoFreeList+0x14>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d8f7      	bhi.n	80047ba <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	4413      	add	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d108      	bne.n	80047ee <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	441a      	add	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	441a      	add	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d118      	bne.n	8004834 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b15      	ldr	r3, [pc, #84]	@ (800485c <prvInsertBlockIntoFreeList+0xb0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d00d      	beq.n	800482a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e008      	b.n	800483c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800482a:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <prvInsertBlockIntoFreeList+0xb0>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e003      	b.n	800483c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d002      	beq.n	800484a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20012e08 	.word	0x20012e08
 800485c:	20012e10 	.word	0x20012e10

08004860 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004864:	4803      	ldr	r0, [pc, #12]	@ (8004874 <_cbSendSystemDesc+0x14>)
 8004866:	f001 fa1b 	bl	8005ca0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800486a:	4803      	ldr	r0, [pc, #12]	@ (8004878 <_cbSendSystemDesc+0x18>)
 800486c:	f001 fa18 	bl	8005ca0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004870:	bf00      	nop
 8004872:	bd80      	pop	{r7, pc}
 8004874:	08006368 	.word	0x08006368
 8004878:	080063ac 	.word	0x080063ac

0800487c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004880:	4b06      	ldr	r3, [pc, #24]	@ (800489c <SEGGER_SYSVIEW_Conf+0x20>)
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	4b05      	ldr	r3, [pc, #20]	@ (800489c <SEGGER_SYSVIEW_Conf+0x20>)
 8004886:	6819      	ldr	r1, [r3, #0]
 8004888:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <SEGGER_SYSVIEW_Conf+0x24>)
 800488a:	4a06      	ldr	r2, [pc, #24]	@ (80048a4 <SEGGER_SYSVIEW_Conf+0x28>)
 800488c:	f000 fd86 	bl	800539c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004890:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004894:	f000 fdc6 	bl	8005424 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004898:	bf00      	nop
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20000000 	.word	0x20000000
 80048a0:	08004861 	.word	0x08004861
 80048a4:	0800644c 	.word	0x0800644c

080048a8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80048a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80048ae:	2300      	movs	r3, #0
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	e033      	b.n	800491c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80048b4:	491e      	ldr	r1, [pc, #120]	@ (8004930 <_cbSendTaskList+0x88>)
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	491a      	ldr	r1, [pc, #104]	@ (8004930 <_cbSendTaskList+0x88>)
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	3304      	adds	r3, #4
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	4c16      	ldr	r4, [pc, #88]	@ (8004930 <_cbSendTaskList+0x88>)
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4423      	add	r3, r4
 80048e4:	3308      	adds	r3, #8
 80048e6:	681c      	ldr	r4, [r3, #0]
 80048e8:	4d11      	ldr	r5, [pc, #68]	@ (8004930 <_cbSendTaskList+0x88>)
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	442b      	add	r3, r5
 80048f6:	330c      	adds	r3, #12
 80048f8:	681d      	ldr	r5, [r3, #0]
 80048fa:	4e0d      	ldr	r6, [pc, #52]	@ (8004930 <_cbSendTaskList+0x88>)
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4433      	add	r3, r6
 8004908:	3310      	adds	r3, #16
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	462b      	mov	r3, r5
 8004910:	4622      	mov	r2, r4
 8004912:	f000 f92d 	bl	8004b70 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3301      	adds	r3, #1
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	4b05      	ldr	r3, [pc, #20]	@ (8004934 <_cbSendTaskList+0x8c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d3c6      	bcc.n	80048b4 <_cbSendTaskList+0xc>
  }
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004930:	20012e24 	.word	0x20012e24
 8004934:	20012ec4 	.word	0x20012ec4

08004938 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004940:	f7fe fb2a 	bl	8002f98 <xTaskGetTickCountFromISR>
 8004944:	4603      	mov	r3, r0
 8004946:	2200      	movs	r2, #0
 8004948:	469a      	mov	sl, r3
 800494a:	4693      	mov	fp, r2
 800494c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	f04f 0a00 	mov.w	sl, #0
 800495c:	f04f 0b00 	mov.w	fp, #0
 8004960:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004964:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004968:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800496c:	4652      	mov	r2, sl
 800496e:	465b      	mov	r3, fp
 8004970:	1a14      	subs	r4, r2, r0
 8004972:	eb63 0501 	sbc.w	r5, r3, r1
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	00ab      	lsls	r3, r5, #2
 8004980:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004984:	00a2      	lsls	r2, r4, #2
 8004986:	4614      	mov	r4, r2
 8004988:	461d      	mov	r5, r3
 800498a:	eb14 0800 	adds.w	r8, r4, r0
 800498e:	eb45 0901 	adc.w	r9, r5, r1
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800499e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049a6:	4690      	mov	r8, r2
 80049a8:	4699      	mov	r9, r3
 80049aa:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80049ae:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80049b2:	4610      	mov	r0, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080049c0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80049ce:	2205      	movs	r2, #5
 80049d0:	492b      	ldr	r1, [pc, #172]	@ (8004a80 <SYSVIEW_AddTask+0xc0>)
 80049d2:	68b8      	ldr	r0, [r7, #8]
 80049d4:	f001 fc5e 	bl	8006294 <memcmp>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d04b      	beq.n	8004a76 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80049de:	4b29      	ldr	r3, [pc, #164]	@ (8004a84 <SYSVIEW_AddTask+0xc4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b07      	cmp	r3, #7
 80049e4:	d903      	bls.n	80049ee <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80049e6:	4828      	ldr	r0, [pc, #160]	@ (8004a88 <SYSVIEW_AddTask+0xc8>)
 80049e8:	f001 fbf8 	bl	80061dc <SEGGER_SYSVIEW_Warn>
    return;
 80049ec:	e044      	b.n	8004a78 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80049ee:	4b25      	ldr	r3, [pc, #148]	@ (8004a84 <SYSVIEW_AddTask+0xc4>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4926      	ldr	r1, [pc, #152]	@ (8004a8c <SYSVIEW_AddTask+0xcc>)
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004a02:	4b20      	ldr	r3, [pc, #128]	@ (8004a84 <SYSVIEW_AddTask+0xc4>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4921      	ldr	r1, [pc, #132]	@ (8004a8c <SYSVIEW_AddTask+0xcc>)
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	3304      	adds	r3, #4
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004a18:	4b1a      	ldr	r3, [pc, #104]	@ (8004a84 <SYSVIEW_AddTask+0xc4>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	491b      	ldr	r1, [pc, #108]	@ (8004a8c <SYSVIEW_AddTask+0xcc>)
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	3308      	adds	r3, #8
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004a2e:	4b15      	ldr	r3, [pc, #84]	@ (8004a84 <SYSVIEW_AddTask+0xc4>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4916      	ldr	r1, [pc, #88]	@ (8004a8c <SYSVIEW_AddTask+0xcc>)
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	330c      	adds	r3, #12
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004a44:	4b0f      	ldr	r3, [pc, #60]	@ (8004a84 <SYSVIEW_AddTask+0xc4>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4910      	ldr	r1, [pc, #64]	@ (8004a8c <SYSVIEW_AddTask+0xcc>)
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3310      	adds	r3, #16
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a84 <SYSVIEW_AddTask+0xc4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	4a08      	ldr	r2, [pc, #32]	@ (8004a84 <SYSVIEW_AddTask+0xc4>)
 8004a62:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f87e 	bl	8004b70 <SYSVIEW_SendTaskInfo>
 8004a74:	e000      	b.n	8004a78 <SYSVIEW_AddTask+0xb8>
    return;
 8004a76:	bf00      	nop

}
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	080063bc 	.word	0x080063bc
 8004a84:	20012ec4 	.word	0x20012ec4
 8004a88:	080063c4 	.word	0x080063c4
 8004a8c:	20012e24 	.word	0x20012e24

08004a90 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004a9e:	2205      	movs	r2, #5
 8004aa0:	4930      	ldr	r1, [pc, #192]	@ (8004b64 <SYSVIEW_UpdateTask+0xd4>)
 8004aa2:	68b8      	ldr	r0, [r7, #8]
 8004aa4:	f001 fbf6 	bl	8006294 <memcmp>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d056      	beq.n	8004b5c <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e00d      	b.n	8004ad0 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8004ab4:	492c      	ldr	r1, [pc, #176]	@ (8004b68 <SYSVIEW_UpdateTask+0xd8>)
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d008      	beq.n	8004adc <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	3301      	adds	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	4b26      	ldr	r3, [pc, #152]	@ (8004b6c <SYSVIEW_UpdateTask+0xdc>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d3ec      	bcc.n	8004ab4 <SYSVIEW_UpdateTask+0x24>
 8004ada:	e000      	b.n	8004ade <SYSVIEW_UpdateTask+0x4e>
      break;
 8004adc:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8004ade:	4b23      	ldr	r3, [pc, #140]	@ (8004b6c <SYSVIEW_UpdateTask+0xdc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d230      	bcs.n	8004b4a <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8004ae8:	491f      	ldr	r1, [pc, #124]	@ (8004b68 <SYSVIEW_UpdateTask+0xd8>)
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	3304      	adds	r3, #4
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8004afc:	491a      	ldr	r1, [pc, #104]	@ (8004b68 <SYSVIEW_UpdateTask+0xd8>)
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004b10:	4915      	ldr	r1, [pc, #84]	@ (8004b68 <SYSVIEW_UpdateTask+0xd8>)
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	330c      	adds	r3, #12
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8004b24:	4910      	ldr	r1, [pc, #64]	@ (8004b68 <SYSVIEW_UpdateTask+0xd8>)
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	3310      	adds	r3, #16
 8004b34:	6a3a      	ldr	r2, [r7, #32]
 8004b36:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f814 	bl	8004b70 <SYSVIEW_SendTaskInfo>
 8004b48:	e009      	b.n	8004b5e <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7ff ff33 	bl	80049c0 <SYSVIEW_AddTask>
 8004b5a:	e000      	b.n	8004b5e <SYSVIEW_UpdateTask+0xce>
    return;
 8004b5c:	bf00      	nop
  }
}
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	080063bc 	.word	0x080063bc
 8004b68:	20012e24 	.word	0x20012e24
 8004b6c:	20012ec4 	.word	0x20012ec4

08004b70 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	@ 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	2214      	movs	r2, #20
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f001 fb94 	bl	80062b4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 ff83 	bl	8005ab0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004baa:	bf00      	nop
 8004bac:	3728      	adds	r7, #40	@ 0x28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004bba:	4b24      	ldr	r3, [pc, #144]	@ (8004c4c <_DoInit+0x98>)
 8004bbc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a20      	ldr	r2, [pc, #128]	@ (8004c50 <_DoInit+0x9c>)
 8004bce:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a20      	ldr	r2, [pc, #128]	@ (8004c54 <_DoInit+0xa0>)
 8004bd4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bdc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a17      	ldr	r2, [pc, #92]	@ (8004c50 <_DoInit+0x9c>)
 8004bf4:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a17      	ldr	r2, [pc, #92]	@ (8004c58 <_DoInit+0xa4>)
 8004bfa:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2210      	movs	r2, #16
 8004c00:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3307      	adds	r3, #7
 8004c18:	4a10      	ldr	r2, [pc, #64]	@ (8004c5c <_DoInit+0xa8>)
 8004c1a:	6810      	ldr	r0, [r2, #0]
 8004c1c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c1e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a0e      	ldr	r2, [pc, #56]	@ (8004c60 <_DoInit+0xac>)
 8004c26:	6810      	ldr	r0, [r2, #0]
 8004c28:	6018      	str	r0, [r3, #0]
 8004c2a:	8891      	ldrh	r1, [r2, #4]
 8004c2c:	7992      	ldrb	r2, [r2, #6]
 8004c2e:	8099      	strh	r1, [r3, #4]
 8004c30:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c32:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c3c:	f3bf 8f5f 	dmb	sy
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20012ec8 	.word	0x20012ec8
 8004c50:	08006414 	.word	0x08006414
 8004c54:	20012f70 	.word	0x20012f70
 8004c58:	20013370 	.word	0x20013370
 8004c5c:	08006420 	.word	0x08006420
 8004c60:	08006424 	.word	0x08006424

08004c64 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	@ 0x30
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004c70:	4b3e      	ldr	r3, [pc, #248]	@ (8004d6c <SEGGER_RTT_ReadNoLock+0x108>)
 8004c72:	623b      	str	r3, [r7, #32]
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <SEGGER_RTT_ReadNoLock+0x1e>
 8004c7e:	f7ff ff99 	bl	8004bb4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4613      	mov	r3, r2
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	3360      	adds	r3, #96	@ 0x60
 8004c8e:	4a37      	ldr	r2, [pc, #220]	@ (8004d6c <SEGGER_RTT_ReadNoLock+0x108>)
 8004c90:	4413      	add	r3, r2
 8004c92:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ca8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d92b      	bls.n	8004d08 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	bf28      	it	cs
 8004cc2:	4613      	movcs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ccc:	4413      	add	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	6939      	ldr	r1, [r7, #16]
 8004cd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cd6:	f001 fb19 	bl	800630c <memcpy>
    NumBytesRead += NumBytesRem;
 8004cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	4413      	add	r3, r2
 8004ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004cf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d101      	bne.n	8004d08 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004d04:	2300      	movs	r3, #0
 8004d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4293      	cmp	r3, r2
 8004d16:	bf28      	it	cs
 8004d18:	4613      	movcs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d019      	beq.n	8004d56 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d28:	4413      	add	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	6939      	ldr	r1, [r7, #16]
 8004d30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d32:	f001 faeb 	bl	800630c <memcpy>
    NumBytesRead += NumBytesRem;
 8004d36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4413      	add	r3, r2
 8004d44:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	4413      	add	r3, r2
 8004d54:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d60:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3730      	adds	r7, #48	@ 0x30
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	20012ec8 	.word	0x20012ec8

08004d70 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e74 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004d8c:	f7ff ff12 	bl	8004bb4 <_DoInit>
  SEGGER_RTT_LOCK();
 8004d90:	f3ef 8311 	mrs	r3, BASEPRI
 8004d94:	f04f 0120 	mov.w	r1, #32
 8004d98:	f381 8811 	msr	BASEPRI, r1
 8004d9c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d9e:	4b35      	ldr	r3, [pc, #212]	@ (8004e74 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004da0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004da6:	6939      	ldr	r1, [r7, #16]
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	4613      	mov	r3, r2
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	4413      	add	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	440b      	add	r3, r1
 8004db6:	3304      	adds	r3, #4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	dbeb      	blt.n	8004da6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004dce:	e000      	b.n	8004dd2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004dd0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	da3f      	bge.n	8004e5c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004ddc:	6939      	ldr	r1, [r7, #16]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	440b      	add	r3, r1
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004df0:	6939      	ldr	r1, [r7, #16]
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	4613      	mov	r3, r2
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	4413      	add	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	440b      	add	r3, r1
 8004e00:	3304      	adds	r3, #4
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004e06:	6939      	ldr	r1, [r7, #16]
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	440b      	add	r3, r1
 8004e14:	3320      	adds	r3, #32
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004e1a:	6939      	ldr	r1, [r7, #16]
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	4413      	add	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	440b      	add	r3, r1
 8004e28:	3328      	adds	r3, #40	@ 0x28
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004e2e:	6939      	ldr	r1, [r7, #16]
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	4613      	mov	r3, r2
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	4413      	add	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	440b      	add	r3, r1
 8004e3c:	3324      	adds	r3, #36	@ 0x24
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004e42:	6939      	ldr	r1, [r7, #16]
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	4613      	mov	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4413      	add	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	440b      	add	r3, r1
 8004e50:	332c      	adds	r3, #44	@ 0x2c
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e56:	f3bf 8f5f 	dmb	sy
 8004e5a:	e002      	b.n	8004e62 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e60:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004e68:	69fb      	ldr	r3, [r7, #28]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20012ec8 	.word	0x20012ec8

08004e78 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004e86:	4b33      	ldr	r3, [pc, #204]	@ (8004f54 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004e94:	f7ff fe8e 	bl	8004bb4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e98:	4b2e      	ldr	r3, [pc, #184]	@ (8004f54 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004e9a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d24d      	bcs.n	8004f44 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004ea8:	f3ef 8311 	mrs	r3, BASEPRI
 8004eac:	f04f 0120 	mov.w	r1, #32
 8004eb0:	f381 8811 	msr	BASEPRI, r1
 8004eb4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d031      	beq.n	8004f20 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004ebc:	6979      	ldr	r1, [r7, #20]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	440b      	add	r3, r1
 8004eca:	3360      	adds	r3, #96	@ 0x60
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004ed0:	6979      	ldr	r1, [r7, #20]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	4413      	add	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	440b      	add	r3, r1
 8004ede:	3364      	adds	r3, #100	@ 0x64
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004ee4:	6979      	ldr	r1, [r7, #20]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	4413      	add	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3368      	adds	r3, #104	@ 0x68
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004ef8:	6979      	ldr	r1, [r7, #20]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4613      	mov	r3, r2
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	4413      	add	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	440b      	add	r3, r1
 8004f06:	3370      	adds	r3, #112	@ 0x70
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004f0c:	6979      	ldr	r1, [r7, #20]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4613      	mov	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	440b      	add	r3, r1
 8004f1a:	336c      	adds	r3, #108	@ 0x6c
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004f20:	6979      	ldr	r1, [r7, #20]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4613      	mov	r3, r2
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	4413      	add	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	440b      	add	r3, r1
 8004f2e:	3374      	adds	r3, #116	@ 0x74
 8004f30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f32:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f34:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	e002      	b.n	8004f4a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004f44:	f04f 33ff 	mov.w	r3, #4294967295
 8004f48:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20012ec8 	.word	0x20012ec8

08004f58 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004f68:	e002      	b.n	8004f70 <_EncodeStr+0x18>
    Len++;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4413      	add	r3, r2
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f6      	bne.n	8004f6a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d901      	bls.n	8004f88 <_EncodeStr+0x30>
    Len = Limit;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2bfe      	cmp	r3, #254	@ 0xfe
 8004f8c:	d806      	bhi.n	8004f9c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	60fa      	str	r2, [r7, #12]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e011      	b.n	8004fc0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	60fa      	str	r2, [r7, #12]
 8004fa2:	22ff      	movs	r2, #255	@ 0xff
 8004fa4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	60fa      	str	r2, [r7, #12]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	0a19      	lsrs	r1, r3, #8
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	60fa      	str	r2, [r7, #12]
 8004fbc:	b2ca      	uxtb	r2, r1
 8004fbe:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004fc4:	e00a      	b.n	8004fdc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	1c53      	adds	r3, r2, #1
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1c59      	adds	r1, r3, #1
 8004fd0:	60f9      	str	r1, [r7, #12]
 8004fd2:	7812      	ldrb	r2, [r2, #0]
 8004fd4:	701a      	strb	r2, [r3, #0]
    n++;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d3f0      	bcc.n	8004fc6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005012:	4b35      	ldr	r3, [pc, #212]	@ (80050e8 <_HandleIncomingPacket+0xdc>)
 8005014:	7e1b      	ldrb	r3, [r3, #24]
 8005016:	4618      	mov	r0, r3
 8005018:	1cfb      	adds	r3, r7, #3
 800501a:	2201      	movs	r2, #1
 800501c:	4619      	mov	r1, r3
 800501e:	f7ff fe21 	bl	8004c64 <SEGGER_RTT_ReadNoLock>
 8005022:	4603      	mov	r3, r0
 8005024:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	dd59      	ble.n	80050e0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	2b80      	cmp	r3, #128	@ 0x80
 8005030:	d032      	beq.n	8005098 <_HandleIncomingPacket+0x8c>
 8005032:	2b80      	cmp	r3, #128	@ 0x80
 8005034:	dc42      	bgt.n	80050bc <_HandleIncomingPacket+0xb0>
 8005036:	2b07      	cmp	r3, #7
 8005038:	dc16      	bgt.n	8005068 <_HandleIncomingPacket+0x5c>
 800503a:	2b00      	cmp	r3, #0
 800503c:	dd3e      	ble.n	80050bc <_HandleIncomingPacket+0xb0>
 800503e:	3b01      	subs	r3, #1
 8005040:	2b06      	cmp	r3, #6
 8005042:	d83b      	bhi.n	80050bc <_HandleIncomingPacket+0xb0>
 8005044:	a201      	add	r2, pc, #4	@ (adr r2, 800504c <_HandleIncomingPacket+0x40>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	0800506f 	.word	0x0800506f
 8005050:	08005075 	.word	0x08005075
 8005054:	0800507b 	.word	0x0800507b
 8005058:	08005081 	.word	0x08005081
 800505c:	08005087 	.word	0x08005087
 8005060:	0800508d 	.word	0x0800508d
 8005064:	08005093 	.word	0x08005093
 8005068:	2b7f      	cmp	r3, #127	@ 0x7f
 800506a:	d034      	beq.n	80050d6 <_HandleIncomingPacket+0xca>
 800506c:	e026      	b.n	80050bc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800506e:	f000 fba5 	bl	80057bc <SEGGER_SYSVIEW_Start>
      break;
 8005072:	e035      	b.n	80050e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005074:	f000 fc5c 	bl	8005930 <SEGGER_SYSVIEW_Stop>
      break;
 8005078:	e032      	b.n	80050e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800507a:	f000 fe35 	bl	8005ce8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800507e:	e02f      	b.n	80050e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005080:	f000 fdfa 	bl	8005c78 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005084:	e02c      	b.n	80050e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005086:	f000 fc79 	bl	800597c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800508a:	e029      	b.n	80050e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800508c:	f001 f868 	bl	8006160 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005090:	e026      	b.n	80050e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005092:	f001 f847 	bl	8006124 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005096:	e023      	b.n	80050e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005098:	4b13      	ldr	r3, [pc, #76]	@ (80050e8 <_HandleIncomingPacket+0xdc>)
 800509a:	7e1b      	ldrb	r3, [r3, #24]
 800509c:	4618      	mov	r0, r3
 800509e:	1cfb      	adds	r3, r7, #3
 80050a0:	2201      	movs	r2, #1
 80050a2:	4619      	mov	r1, r3
 80050a4:	f7ff fdde 	bl	8004c64 <SEGGER_RTT_ReadNoLock>
 80050a8:	4603      	mov	r3, r0
 80050aa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	dd13      	ble.n	80050da <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 ffb5 	bl	8006024 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80050ba:	e00e      	b.n	80050da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	b25b      	sxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	da0c      	bge.n	80050de <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050c4:	4b08      	ldr	r3, [pc, #32]	@ (80050e8 <_HandleIncomingPacket+0xdc>)
 80050c6:	7e1b      	ldrb	r3, [r3, #24]
 80050c8:	4618      	mov	r0, r3
 80050ca:	1cfb      	adds	r3, r7, #3
 80050cc:	2201      	movs	r2, #1
 80050ce:	4619      	mov	r1, r3
 80050d0:	f7ff fdc8 	bl	8004c64 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80050d4:	e003      	b.n	80050de <_HandleIncomingPacket+0xd2>
      break;
 80050d6:	bf00      	nop
 80050d8:	e002      	b.n	80050e0 <_HandleIncomingPacket+0xd4>
      break;
 80050da:	bf00      	nop
 80050dc:	e000      	b.n	80050e0 <_HandleIncomingPacket+0xd4>
      break;
 80050de:	bf00      	nop
    }
  }
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20014388 	.word	0x20014388

080050ec <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08c      	sub	sp, #48	@ 0x30
 80050f0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80050f2:	2301      	movs	r3, #1
 80050f4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	3301      	adds	r3, #1
 80050fa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005100:	4b31      	ldr	r3, [pc, #196]	@ (80051c8 <_TrySendOverflowPacket+0xdc>)
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005106:	e00b      	b.n	8005120 <_TrySendOverflowPacket+0x34>
 8005108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510a:	b2da      	uxtb	r2, r3
 800510c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510e:	1c59      	adds	r1, r3, #1
 8005110:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005112:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511c:	09db      	lsrs	r3, r3, #7
 800511e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005122:	2b7f      	cmp	r3, #127	@ 0x7f
 8005124:	d8f0      	bhi.n	8005108 <_TrySendOverflowPacket+0x1c>
 8005126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800512c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005134:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005136:	4b25      	ldr	r3, [pc, #148]	@ (80051cc <_TrySendOverflowPacket+0xe0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800513c:	4b22      	ldr	r3, [pc, #136]	@ (80051c8 <_TrySendOverflowPacket+0xdc>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	627b      	str	r3, [r7, #36]	@ 0x24
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	e00b      	b.n	8005168 <_TrySendOverflowPacket+0x7c>
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	b2da      	uxtb	r2, r3
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	1c59      	adds	r1, r3, #1
 8005158:	6279      	str	r1, [r7, #36]	@ 0x24
 800515a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	09db      	lsrs	r3, r3, #7
 8005166:	623b      	str	r3, [r7, #32]
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	2b7f      	cmp	r3, #127	@ 0x7f
 800516c:	d8f0      	bhi.n	8005150 <_TrySendOverflowPacket+0x64>
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	627a      	str	r2, [r7, #36]	@ 0x24
 8005174:	6a3a      	ldr	r2, [r7, #32]
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800517e:	4b12      	ldr	r3, [pc, #72]	@ (80051c8 <_TrySendOverflowPacket+0xdc>)
 8005180:	785b      	ldrb	r3, [r3, #1]
 8005182:	4618      	mov	r0, r3
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	461a      	mov	r2, r3
 800518c:	1d3b      	adds	r3, r7, #4
 800518e:	4619      	mov	r1, r3
 8005190:	f7fb f826 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005194:	4603      	mov	r3, r0
 8005196:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800519e:	4a0a      	ldr	r2, [pc, #40]	@ (80051c8 <_TrySendOverflowPacket+0xdc>)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80051a4:	4b08      	ldr	r3, [pc, #32]	@ (80051c8 <_TrySendOverflowPacket+0xdc>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	4b06      	ldr	r3, [pc, #24]	@ (80051c8 <_TrySendOverflowPacket+0xdc>)
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e004      	b.n	80051bc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80051b2:	4b05      	ldr	r3, [pc, #20]	@ (80051c8 <_TrySendOverflowPacket+0xdc>)
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	3301      	adds	r3, #1
 80051b8:	4a03      	ldr	r2, [pc, #12]	@ (80051c8 <_TrySendOverflowPacket+0xdc>)
 80051ba:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80051bc:	693b      	ldr	r3, [r7, #16]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3730      	adds	r7, #48	@ 0x30
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20014388 	.word	0x20014388
 80051cc:	e0001004 	.word	0xe0001004

080051d0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	@ 0x28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80051dc:	4b6c      	ldr	r3, [pc, #432]	@ (8005390 <_SendPacket+0x1c0>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d010      	beq.n	8005206 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80051e4:	4b6a      	ldr	r3, [pc, #424]	@ (8005390 <_SendPacket+0x1c0>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80a3 	beq.w	8005334 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80051ee:	4b68      	ldr	r3, [pc, #416]	@ (8005390 <_SendPacket+0x1c0>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d109      	bne.n	800520a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80051f6:	f7ff ff79 	bl	80050ec <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80051fa:	4b65      	ldr	r3, [pc, #404]	@ (8005390 <_SendPacket+0x1c0>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	f040 809a 	bne.w	8005338 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005204:	e001      	b.n	800520a <_SendPacket+0x3a>
    goto Send;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <_SendPacket+0x3c>
Send:
 800520a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b1f      	cmp	r3, #31
 8005210:	d809      	bhi.n	8005226 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005212:	4b5f      	ldr	r3, [pc, #380]	@ (8005390 <_SendPacket+0x1c0>)
 8005214:	69da      	ldr	r2, [r3, #28]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 808b 	bne.w	800533c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b17      	cmp	r3, #23
 800522a:	d807      	bhi.n	800523c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3b01      	subs	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	e03d      	b.n	80052b8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	2b7f      	cmp	r3, #127	@ 0x7f
 8005248:	d912      	bls.n	8005270 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	09da      	lsrs	r2, r3, #7
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3b01      	subs	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	3a01      	subs	r2, #1
 8005262:	60fa      	str	r2, [r7, #12]
 8005264:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005268:	b2da      	uxtb	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e006      	b.n	800527e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3b01      	subs	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b7f      	cmp	r3, #127	@ 0x7f
 8005282:	d912      	bls.n	80052aa <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	09da      	lsrs	r2, r3, #7
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3b01      	subs	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	3a01      	subs	r2, #1
 800529c:	60fa      	str	r2, [r7, #12]
 800529e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	e006      	b.n	80052b8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052b8:	4b36      	ldr	r3, [pc, #216]	@ (8005394 <_SendPacket+0x1c4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052be:	4b34      	ldr	r3, [pc, #208]	@ (8005390 <_SendPacket+0x1c0>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	e00b      	b.n	80052ea <_SendPacket+0x11a>
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	1c59      	adds	r1, r3, #1
 80052da:	6279      	str	r1, [r7, #36]	@ 0x24
 80052dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	09db      	lsrs	r3, r3, #7
 80052e8:	623b      	str	r3, [r7, #32]
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80052ee:	d8f0      	bhi.n	80052d2 <_SendPacket+0x102>
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80052f6:	6a3a      	ldr	r2, [r7, #32]
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005300:	4b23      	ldr	r3, [pc, #140]	@ (8005390 <_SendPacket+0x1c0>)
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	4618      	mov	r0, r3
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	461a      	mov	r2, r3
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	f7fa ff66 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005314:	4603      	mov	r3, r0
 8005316:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800531e:	4a1c      	ldr	r2, [pc, #112]	@ (8005390 <_SendPacket+0x1c0>)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	60d3      	str	r3, [r2, #12]
 8005324:	e00b      	b.n	800533e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005326:	4b1a      	ldr	r3, [pc, #104]	@ (8005390 <_SendPacket+0x1c0>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	3301      	adds	r3, #1
 800532c:	b2da      	uxtb	r2, r3
 800532e:	4b18      	ldr	r3, [pc, #96]	@ (8005390 <_SendPacket+0x1c0>)
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e004      	b.n	800533e <_SendPacket+0x16e>
    goto SendDone;
 8005334:	bf00      	nop
 8005336:	e002      	b.n	800533e <_SendPacket+0x16e>
      goto SendDone;
 8005338:	bf00      	nop
 800533a:	e000      	b.n	800533e <_SendPacket+0x16e>
      goto SendDone;
 800533c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800533e:	4b14      	ldr	r3, [pc, #80]	@ (8005390 <_SendPacket+0x1c0>)
 8005340:	7e1b      	ldrb	r3, [r3, #24]
 8005342:	4619      	mov	r1, r3
 8005344:	4a14      	ldr	r2, [pc, #80]	@ (8005398 <_SendPacket+0x1c8>)
 8005346:	460b      	mov	r3, r1
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	440b      	add	r3, r1
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	4413      	add	r3, r2
 8005350:	336c      	adds	r3, #108	@ 0x6c
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	4b0e      	ldr	r3, [pc, #56]	@ (8005390 <_SendPacket+0x1c0>)
 8005356:	7e1b      	ldrb	r3, [r3, #24]
 8005358:	4618      	mov	r0, r3
 800535a:	490f      	ldr	r1, [pc, #60]	@ (8005398 <_SendPacket+0x1c8>)
 800535c:	4603      	mov	r3, r0
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	4403      	add	r3, r0
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	440b      	add	r3, r1
 8005366:	3370      	adds	r3, #112	@ 0x70
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d00b      	beq.n	8005386 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800536e:	4b08      	ldr	r3, [pc, #32]	@ (8005390 <_SendPacket+0x1c0>)
 8005370:	789b      	ldrb	r3, [r3, #2]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d107      	bne.n	8005386 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005376:	4b06      	ldr	r3, [pc, #24]	@ (8005390 <_SendPacket+0x1c0>)
 8005378:	2201      	movs	r2, #1
 800537a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800537c:	f7ff fe46 	bl	800500c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005380:	4b03      	ldr	r3, [pc, #12]	@ (8005390 <_SendPacket+0x1c0>)
 8005382:	2200      	movs	r2, #0
 8005384:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005386:	bf00      	nop
 8005388:	3728      	adds	r7, #40	@ 0x28
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20014388 	.word	0x20014388
 8005394:	e0001004 	.word	0xe0001004
 8005398:	20012ec8 	.word	0x20012ec8

0800539c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80053aa:	2300      	movs	r3, #0
 80053ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80053b0:	4917      	ldr	r1, [pc, #92]	@ (8005410 <SEGGER_SYSVIEW_Init+0x74>)
 80053b2:	4818      	ldr	r0, [pc, #96]	@ (8005414 <SEGGER_SYSVIEW_Init+0x78>)
 80053b4:	f7ff fcdc 	bl	8004d70 <SEGGER_RTT_AllocUpBuffer>
 80053b8:	4603      	mov	r3, r0
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	4b16      	ldr	r3, [pc, #88]	@ (8005418 <SEGGER_SYSVIEW_Init+0x7c>)
 80053be:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80053c0:	4b15      	ldr	r3, [pc, #84]	@ (8005418 <SEGGER_SYSVIEW_Init+0x7c>)
 80053c2:	785a      	ldrb	r2, [r3, #1]
 80053c4:	4b14      	ldr	r3, [pc, #80]	@ (8005418 <SEGGER_SYSVIEW_Init+0x7c>)
 80053c6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80053c8:	4b13      	ldr	r3, [pc, #76]	@ (8005418 <SEGGER_SYSVIEW_Init+0x7c>)
 80053ca:	7e1b      	ldrb	r3, [r3, #24]
 80053cc:	4618      	mov	r0, r3
 80053ce:	2300      	movs	r3, #0
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	2308      	movs	r3, #8
 80053d4:	4a11      	ldr	r2, [pc, #68]	@ (800541c <SEGGER_SYSVIEW_Init+0x80>)
 80053d6:	490f      	ldr	r1, [pc, #60]	@ (8005414 <SEGGER_SYSVIEW_Init+0x78>)
 80053d8:	f7ff fd4e 	bl	8004e78 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80053dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005418 <SEGGER_SYSVIEW_Init+0x7c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80053e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005420 <SEGGER_SYSVIEW_Init+0x84>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005418 <SEGGER_SYSVIEW_Init+0x7c>)
 80053e8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80053ea:	4a0b      	ldr	r2, [pc, #44]	@ (8005418 <SEGGER_SYSVIEW_Init+0x7c>)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80053f0:	4a09      	ldr	r2, [pc, #36]	@ (8005418 <SEGGER_SYSVIEW_Init+0x7c>)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80053f6:	4a08      	ldr	r2, [pc, #32]	@ (8005418 <SEGGER_SYSVIEW_Init+0x7c>)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80053fc:	4a06      	ldr	r2, [pc, #24]	@ (8005418 <SEGGER_SYSVIEW_Init+0x7c>)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005402:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <SEGGER_SYSVIEW_Init+0x7c>)
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005408:	bf00      	nop
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20013380 	.word	0x20013380
 8005414:	0800642c 	.word	0x0800642c
 8005418:	20014388 	.word	0x20014388
 800541c:	20014380 	.word	0x20014380
 8005420:	e0001004 	.word	0xe0001004

08005424 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800542c:	4a04      	ldr	r2, [pc, #16]	@ (8005440 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6113      	str	r3, [r2, #16]
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20014388 	.word	0x20014388

08005444 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800544c:	f3ef 8311 	mrs	r3, BASEPRI
 8005450:	f04f 0120 	mov.w	r1, #32
 8005454:	f381 8811 	msr	BASEPRI, r1
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	4808      	ldr	r0, [pc, #32]	@ (800547c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800545c:	f7ff fdc9 	bl	8004ff2 <_PreparePacket>
 8005460:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	68b8      	ldr	r0, [r7, #8]
 8005468:	f7ff feb2 	bl	80051d0 <_SendPacket>
  RECORD_END();
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f383 8811 	msr	BASEPRI, r3
}
 8005472:	bf00      	nop
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	200143b8 	.word	0x200143b8

08005480 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800548a:	f3ef 8311 	mrs	r3, BASEPRI
 800548e:	f04f 0120 	mov.w	r1, #32
 8005492:	f381 8811 	msr	BASEPRI, r1
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	4816      	ldr	r0, [pc, #88]	@ (80054f4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800549a:	f7ff fdaa 	bl	8004ff2 <_PreparePacket>
 800549e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	e00b      	b.n	80054c6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	1c59      	adds	r1, r3, #1
 80054b6:	61f9      	str	r1, [r7, #28]
 80054b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	09db      	lsrs	r3, r3, #7
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80054ca:	d8f0      	bhi.n	80054ae <SEGGER_SYSVIEW_RecordU32+0x2e>
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	61fa      	str	r2, [r7, #28]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	68f9      	ldr	r1, [r7, #12]
 80054e0:	6938      	ldr	r0, [r7, #16]
 80054e2:	f7ff fe75 	bl	80051d0 <_SendPacket>
  RECORD_END();
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f383 8811 	msr	BASEPRI, r3
}
 80054ec:	bf00      	nop
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	200143b8 	.word	0x200143b8

080054f8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08c      	sub	sp, #48	@ 0x30
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005504:	f3ef 8311 	mrs	r3, BASEPRI
 8005508:	f04f 0120 	mov.w	r1, #32
 800550c:	f381 8811 	msr	BASEPRI, r1
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	4825      	ldr	r0, [pc, #148]	@ (80055a8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005514:	f7ff fd6d 	bl	8004ff2 <_PreparePacket>
 8005518:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005526:	e00b      	b.n	8005540 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552a:	b2da      	uxtb	r2, r3
 800552c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552e:	1c59      	adds	r1, r3, #1
 8005530:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005532:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553c:	09db      	lsrs	r3, r3, #7
 800553e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005542:	2b7f      	cmp	r3, #127	@ 0x7f
 8005544:	d8f0      	bhi.n	8005528 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800554c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]
 8005552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005554:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	e00b      	b.n	8005578 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	b2da      	uxtb	r2, r3
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	1c59      	adds	r1, r3, #1
 8005568:	6279      	str	r1, [r7, #36]	@ 0x24
 800556a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	09db      	lsrs	r3, r3, #7
 8005576:	623b      	str	r3, [r7, #32]
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	2b7f      	cmp	r3, #127	@ 0x7f
 800557c:	d8f0      	bhi.n	8005560 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	627a      	str	r2, [r7, #36]	@ 0x24
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	6979      	ldr	r1, [r7, #20]
 8005592:	69b8      	ldr	r0, [r7, #24]
 8005594:	f7ff fe1c 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f383 8811 	msr	BASEPRI, r3
}
 800559e:	bf00      	nop
 80055a0:	3730      	adds	r7, #48	@ 0x30
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200143b8 	.word	0x200143b8

080055ac <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08e      	sub	sp, #56	@ 0x38
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80055ba:	f3ef 8311 	mrs	r3, BASEPRI
 80055be:	f04f 0120 	mov.w	r1, #32
 80055c2:	f381 8811 	msr	BASEPRI, r1
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	4832      	ldr	r0, [pc, #200]	@ (8005694 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80055ca:	f7ff fd12 	bl	8004ff2 <_PreparePacket>
 80055ce:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	633b      	str	r3, [r7, #48]	@ 0x30
 80055dc:	e00b      	b.n	80055f6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80055de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e4:	1c59      	adds	r1, r3, #1
 80055e6:	6379      	str	r1, [r7, #52]	@ 0x34
 80055e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f2:	09db      	lsrs	r3, r3, #7
 80055f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80055fa:	d8f0      	bhi.n	80055de <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80055fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	637a      	str	r2, [r7, #52]	@ 0x34
 8005602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005614:	e00b      	b.n	800562e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005618:	b2da      	uxtb	r2, r3
 800561a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561c:	1c59      	adds	r1, r3, #1
 800561e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005620:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	701a      	strb	r2, [r3, #0]
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562a:	09db      	lsrs	r3, r3, #7
 800562c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800562e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005630:	2b7f      	cmp	r3, #127	@ 0x7f
 8005632:	d8f0      	bhi.n	8005616 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800563a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	701a      	strb	r2, [r3, #0]
 8005640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005642:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	627b      	str	r3, [r7, #36]	@ 0x24
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	e00b      	b.n	8005666 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	1c59      	adds	r1, r3, #1
 8005656:	6279      	str	r1, [r7, #36]	@ 0x24
 8005658:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	09db      	lsrs	r3, r3, #7
 8005664:	623b      	str	r3, [r7, #32]
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	2b7f      	cmp	r3, #127	@ 0x7f
 800566a:	d8f0      	bhi.n	800564e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	627a      	str	r2, [r7, #36]	@ 0x24
 8005672:	6a3a      	ldr	r2, [r7, #32]
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	6979      	ldr	r1, [r7, #20]
 8005680:	69b8      	ldr	r0, [r7, #24]
 8005682:	f7ff fda5 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f383 8811 	msr	BASEPRI, r3
}
 800568c:	bf00      	nop
 800568e:	3738      	adds	r7, #56	@ 0x38
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	200143b8 	.word	0x200143b8

08005698 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005698:	b580      	push	{r7, lr}
 800569a:	b090      	sub	sp, #64	@ 0x40
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80056a6:	f3ef 8311 	mrs	r3, BASEPRI
 80056aa:	f04f 0120 	mov.w	r1, #32
 80056ae:	f381 8811 	msr	BASEPRI, r1
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	4840      	ldr	r0, [pc, #256]	@ (80057b8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80056b6:	f7ff fc9c 	bl	8004ff2 <_PreparePacket>
 80056ba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056c8:	e00b      	b.n	80056e2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80056ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d0:	1c59      	adds	r1, r3, #1
 80056d2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80056d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056de:	09db      	lsrs	r3, r3, #7
 80056e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80056e6:	d8f0      	bhi.n	80056ca <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80056e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	701a      	strb	r2, [r3, #0]
 80056f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005700:	e00b      	b.n	800571a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	b2da      	uxtb	r2, r3
 8005706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005708:	1c59      	adds	r1, r3, #1
 800570a:	6379      	str	r1, [r7, #52]	@ 0x34
 800570c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005716:	09db      	lsrs	r3, r3, #7
 8005718:	633b      	str	r3, [r7, #48]	@ 0x30
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	2b7f      	cmp	r3, #127	@ 0x7f
 800571e:	d8f0      	bhi.n	8005702 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	637a      	str	r2, [r7, #52]	@ 0x34
 8005726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005738:	e00b      	b.n	8005752 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800573a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573c:	b2da      	uxtb	r2, r3
 800573e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005740:	1c59      	adds	r1, r3, #1
 8005742:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005744:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574e:	09db      	lsrs	r3, r3, #7
 8005750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005754:	2b7f      	cmp	r3, #127	@ 0x7f
 8005756:	d8f0      	bhi.n	800573a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800575e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005766:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	627b      	str	r3, [r7, #36]	@ 0x24
 800576c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800576e:	623b      	str	r3, [r7, #32]
 8005770:	e00b      	b.n	800578a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	b2da      	uxtb	r2, r3
 8005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005778:	1c59      	adds	r1, r3, #1
 800577a:	6279      	str	r1, [r7, #36]	@ 0x24
 800577c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	09db      	lsrs	r3, r3, #7
 8005788:	623b      	str	r3, [r7, #32]
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	2b7f      	cmp	r3, #127	@ 0x7f
 800578e:	d8f0      	bhi.n	8005772 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	627a      	str	r2, [r7, #36]	@ 0x24
 8005796:	6a3a      	ldr	r2, [r7, #32]
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	6979      	ldr	r1, [r7, #20]
 80057a4:	69b8      	ldr	r0, [r7, #24]
 80057a6:	f7ff fd13 	bl	80051d0 <_SendPacket>
  RECORD_END();
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f383 8811 	msr	BASEPRI, r3
}
 80057b0:	bf00      	nop
 80057b2:	3740      	adds	r7, #64	@ 0x40
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	200143b8 	.word	0x200143b8

080057bc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08c      	sub	sp, #48	@ 0x30
 80057c0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80057c2:	4b58      	ldr	r3, [pc, #352]	@ (8005924 <SEGGER_SYSVIEW_Start+0x168>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80057c8:	f3ef 8311 	mrs	r3, BASEPRI
 80057cc:	f04f 0120 	mov.w	r1, #32
 80057d0:	f381 8811 	msr	BASEPRI, r1
 80057d4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80057d6:	4b53      	ldr	r3, [pc, #332]	@ (8005924 <SEGGER_SYSVIEW_Start+0x168>)
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	220a      	movs	r2, #10
 80057dc:	4952      	ldr	r1, [pc, #328]	@ (8005928 <SEGGER_SYSVIEW_Start+0x16c>)
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fa fcfe 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80057ea:	200a      	movs	r0, #10
 80057ec:	f7ff fe2a 	bl	8005444 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80057f0:	f3ef 8311 	mrs	r3, BASEPRI
 80057f4:	f04f 0120 	mov.w	r1, #32
 80057f8:	f381 8811 	msr	BASEPRI, r1
 80057fc:	60bb      	str	r3, [r7, #8]
 80057fe:	484b      	ldr	r0, [pc, #300]	@ (800592c <SEGGER_SYSVIEW_Start+0x170>)
 8005800:	f7ff fbf7 	bl	8004ff2 <_PreparePacket>
 8005804:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800580e:	4b45      	ldr	r3, [pc, #276]	@ (8005924 <SEGGER_SYSVIEW_Start+0x168>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005814:	e00b      	b.n	800582e <SEGGER_SYSVIEW_Start+0x72>
 8005816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005818:	b2da      	uxtb	r2, r3
 800581a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581c:	1c59      	adds	r1, r3, #1
 800581e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005820:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582a:	09db      	lsrs	r3, r3, #7
 800582c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005830:	2b7f      	cmp	r3, #127	@ 0x7f
 8005832:	d8f0      	bhi.n	8005816 <SEGGER_SYSVIEW_Start+0x5a>
 8005834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800583a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005842:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	627b      	str	r3, [r7, #36]	@ 0x24
 8005848:	4b36      	ldr	r3, [pc, #216]	@ (8005924 <SEGGER_SYSVIEW_Start+0x168>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	623b      	str	r3, [r7, #32]
 800584e:	e00b      	b.n	8005868 <SEGGER_SYSVIEW_Start+0xac>
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	b2da      	uxtb	r2, r3
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	1c59      	adds	r1, r3, #1
 8005858:	6279      	str	r1, [r7, #36]	@ 0x24
 800585a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	09db      	lsrs	r3, r3, #7
 8005866:	623b      	str	r3, [r7, #32]
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	2b7f      	cmp	r3, #127	@ 0x7f
 800586c:	d8f0      	bhi.n	8005850 <SEGGER_SYSVIEW_Start+0x94>
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	627a      	str	r2, [r7, #36]	@ 0x24
 8005874:	6a3a      	ldr	r2, [r7, #32]
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	4b28      	ldr	r3, [pc, #160]	@ (8005924 <SEGGER_SYSVIEW_Start+0x168>)
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	e00b      	b.n	80058a2 <SEGGER_SYSVIEW_Start+0xe6>
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	1c59      	adds	r1, r3, #1
 8005892:	61f9      	str	r1, [r7, #28]
 8005894:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	09db      	lsrs	r3, r3, #7
 80058a0:	61bb      	str	r3, [r7, #24]
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80058a6:	d8f0      	bhi.n	800588a <SEGGER_SYSVIEW_Start+0xce>
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	61fa      	str	r2, [r7, #28]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	e00b      	b.n	80058da <SEGGER_SYSVIEW_Start+0x11e>
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	1c59      	adds	r1, r3, #1
 80058ca:	6179      	str	r1, [r7, #20]
 80058cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	09db      	lsrs	r3, r3, #7
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80058de:	d8f0      	bhi.n	80058c2 <SEGGER_SYSVIEW_Start+0x106>
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	617a      	str	r2, [r7, #20]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80058f0:	2218      	movs	r2, #24
 80058f2:	6839      	ldr	r1, [r7, #0]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff fc6b 	bl	80051d0 <_SendPacket>
      RECORD_END();
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005900:	4b08      	ldr	r3, [pc, #32]	@ (8005924 <SEGGER_SYSVIEW_Start+0x168>)
 8005902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005908:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <SEGGER_SYSVIEW_Start+0x168>)
 800590a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800590e:	f000 f9eb 	bl	8005ce8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005912:	f000 f9b1 	bl	8005c78 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005916:	f000 fc23 	bl	8006160 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800591a:	bf00      	nop
 800591c:	3730      	adds	r7, #48	@ 0x30
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20014388 	.word	0x20014388
 8005928:	08006454 	.word	0x08006454
 800592c:	200143b8 	.word	0x200143b8

08005930 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005936:	f3ef 8311 	mrs	r3, BASEPRI
 800593a:	f04f 0120 	mov.w	r1, #32
 800593e:	f381 8811 	msr	BASEPRI, r1
 8005942:	607b      	str	r3, [r7, #4]
 8005944:	480b      	ldr	r0, [pc, #44]	@ (8005974 <SEGGER_SYSVIEW_Stop+0x44>)
 8005946:	f7ff fb54 	bl	8004ff2 <_PreparePacket>
 800594a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800594c:	4b0a      	ldr	r3, [pc, #40]	@ (8005978 <SEGGER_SYSVIEW_Stop+0x48>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d007      	beq.n	8005964 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005954:	220b      	movs	r2, #11
 8005956:	6839      	ldr	r1, [r7, #0]
 8005958:	6838      	ldr	r0, [r7, #0]
 800595a:	f7ff fc39 	bl	80051d0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800595e:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <SEGGER_SYSVIEW_Stop+0x48>)
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f383 8811 	msr	BASEPRI, r3
}
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	200143b8 	.word	0x200143b8
 8005978:	20014388 	.word	0x20014388

0800597c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b08c      	sub	sp, #48	@ 0x30
 8005980:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005982:	f3ef 8311 	mrs	r3, BASEPRI
 8005986:	f04f 0120 	mov.w	r1, #32
 800598a:	f381 8811 	msr	BASEPRI, r1
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	4845      	ldr	r0, [pc, #276]	@ (8005aa8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005992:	f7ff fb2e 	bl	8004ff2 <_PreparePacket>
 8005996:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059a0:	4b42      	ldr	r3, [pc, #264]	@ (8005aac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059a6:	e00b      	b.n	80059c0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80059a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ae:	1c59      	adds	r1, r3, #1
 80059b0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80059b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059bc:	09db      	lsrs	r3, r3, #7
 80059be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80059c4:	d8f0      	bhi.n	80059a8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80059c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059da:	4b34      	ldr	r3, [pc, #208]	@ (8005aac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	623b      	str	r3, [r7, #32]
 80059e0:	e00b      	b.n	80059fa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e8:	1c59      	adds	r1, r3, #1
 80059ea:	6279      	str	r1, [r7, #36]	@ 0x24
 80059ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	09db      	lsrs	r3, r3, #7
 80059f8:	623b      	str	r3, [r7, #32]
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80059fe:	d8f0      	bhi.n	80059e2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a06:	6a3a      	ldr	r2, [r7, #32]
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	4b25      	ldr	r3, [pc, #148]	@ (8005aac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	e00b      	b.n	8005a34 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	1c59      	adds	r1, r3, #1
 8005a24:	61f9      	str	r1, [r7, #28]
 8005a26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	09db      	lsrs	r3, r3, #7
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a38:	d8f0      	bhi.n	8005a1c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	61fa      	str	r2, [r7, #28]
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	e00b      	b.n	8005a6c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	1c59      	adds	r1, r3, #1
 8005a5c:	6179      	str	r1, [r7, #20]
 8005a5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	09db      	lsrs	r3, r3, #7
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a70:	d8f0      	bhi.n	8005a54 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	617a      	str	r2, [r7, #20]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a82:	2218      	movs	r2, #24
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	68b8      	ldr	r0, [r7, #8]
 8005a88:	f7ff fba2 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a92:	4b06      	ldr	r3, [pc, #24]	@ (8005aac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005a9a:	4b04      	ldr	r3, [pc, #16]	@ (8005aac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9e:	4798      	blx	r3
  }
}
 8005aa0:	bf00      	nop
 8005aa2:	3730      	adds	r7, #48	@ 0x30
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	200143b8 	.word	0x200143b8
 8005aac:	20014388 	.word	0x20014388

08005ab0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b092      	sub	sp, #72	@ 0x48
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ab8:	f3ef 8311 	mrs	r3, BASEPRI
 8005abc:	f04f 0120 	mov.w	r1, #32
 8005ac0:	f381 8811 	msr	BASEPRI, r1
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	486a      	ldr	r0, [pc, #424]	@ (8005c70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005ac8:	f7ff fa93 	bl	8004ff2 <_PreparePacket>
 8005acc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4b66      	ldr	r3, [pc, #408]	@ (8005c74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ae2:	e00b      	b.n	8005afc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aea:	1c59      	adds	r1, r3, #1
 8005aec:	6479      	str	r1, [r7, #68]	@ 0x44
 8005aee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af8:	09db      	lsrs	r3, r3, #7
 8005afa:	643b      	str	r3, [r7, #64]	@ 0x40
 8005afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005afe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b00:	d8f0      	bhi.n	8005ae4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b1c:	e00b      	b.n	8005b36 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b24:	1c59      	adds	r1, r3, #1
 8005b26:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005b28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b32:	09db      	lsrs	r3, r3, #7
 8005b34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b38:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b3a:	d8f0      	bhi.n	8005b1e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b4a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	4619      	mov	r1, r3
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7ff f9ff 	bl	8004f58 <_EncodeStr>
 8005b5a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005b5c:	2209      	movs	r2, #9
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	6938      	ldr	r0, [r7, #16]
 8005b62:	f7ff fb35 	bl	80051d0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b40      	ldr	r3, [pc, #256]	@ (8005c74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b7a:	e00b      	b.n	8005b94 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	1c59      	adds	r1, r3, #1
 8005b84:	6379      	str	r1, [r7, #52]	@ 0x34
 8005b86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b90:	09db      	lsrs	r3, r3, #7
 8005b92:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b98:	d8f0      	bhi.n	8005b7c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bb4:	e00b      	b.n	8005bce <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbc:	1c59      	adds	r1, r3, #1
 8005bbe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005bc0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bca:	09db      	lsrs	r3, r3, #7
 8005bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bd2:	d8f0      	bhi.n	8005bb6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	623b      	str	r3, [r7, #32]
 8005bee:	e00b      	b.n	8005c08 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	1c59      	adds	r1, r3, #1
 8005bf8:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bfa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	09db      	lsrs	r3, r3, #7
 8005c06:	623b      	str	r3, [r7, #32]
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c0c:	d8f0      	bhi.n	8005bf0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c14:	6a3a      	ldr	r2, [r7, #32]
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	2300      	movs	r3, #0
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	e00b      	b.n	8005c40 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	1c59      	adds	r1, r3, #1
 8005c30:	61f9      	str	r1, [r7, #28]
 8005c32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	09db      	lsrs	r3, r3, #7
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c44:	d8f0      	bhi.n	8005c28 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	61fa      	str	r2, [r7, #28]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005c56:	2215      	movs	r2, #21
 8005c58:	68f9      	ldr	r1, [r7, #12]
 8005c5a:	6938      	ldr	r0, [r7, #16]
 8005c5c:	f7ff fab8 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f383 8811 	msr	BASEPRI, r3
}
 8005c66:	bf00      	nop
 8005c68:	3748      	adds	r7, #72	@ 0x48
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	200143b8 	.word	0x200143b8
 8005c74:	20014388 	.word	0x20014388

08005c78 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005c7c:	4b07      	ldr	r3, [pc, #28]	@ (8005c9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005c84:	4b05      	ldr	r3, [pc, #20]	@ (8005c9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005c8e:	4b03      	ldr	r3, [pc, #12]	@ (8005c9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4798      	blx	r3
  }
}
 8005c96:	bf00      	nop
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20014388 	.word	0x20014388

08005ca0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ca8:	f3ef 8311 	mrs	r3, BASEPRI
 8005cac:	f04f 0120 	mov.w	r1, #32
 8005cb0:	f381 8811 	msr	BASEPRI, r1
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	480b      	ldr	r0, [pc, #44]	@ (8005ce4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005cb8:	f7ff f99b 	bl	8004ff2 <_PreparePacket>
 8005cbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cbe:	2280      	movs	r2, #128	@ 0x80
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	6938      	ldr	r0, [r7, #16]
 8005cc4:	f7ff f948 	bl	8004f58 <_EncodeStr>
 8005cc8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005cca:	220e      	movs	r2, #14
 8005ccc:	68f9      	ldr	r1, [r7, #12]
 8005cce:	6938      	ldr	r0, [r7, #16]
 8005cd0:	f7ff fa7e 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f383 8811 	msr	BASEPRI, r3
}
 8005cda:	bf00      	nop
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200143b8 	.word	0x200143b8

08005ce8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005ce8:	b590      	push	{r4, r7, lr}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005cee:	4b15      	ldr	r3, [pc, #84]	@ (8005d44 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01a      	beq.n	8005d2c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005cf6:	4b13      	ldr	r3, [pc, #76]	@ (8005d44 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d015      	beq.n	8005d2c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005d00:	4b10      	ldr	r3, [pc, #64]	@ (8005d44 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4798      	blx	r3
 8005d08:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d0c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	f04f 0300 	mov.w	r3, #0
 8005d1a:	000a      	movs	r2, r1
 8005d1c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d1e:	4613      	mov	r3, r2
 8005d20:	461a      	mov	r2, r3
 8005d22:	4621      	mov	r1, r4
 8005d24:	200d      	movs	r0, #13
 8005d26:	f7ff fbe7 	bl	80054f8 <SEGGER_SYSVIEW_RecordU32x2>
 8005d2a:	e006      	b.n	8005d3a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005d2c:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4619      	mov	r1, r3
 8005d32:	200c      	movs	r0, #12
 8005d34:	f7ff fba4 	bl	8005480 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd90      	pop	{r4, r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20014388 	.word	0x20014388
 8005d48:	e0001004 	.word	0xe0001004

08005d4c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d52:	f3ef 8311 	mrs	r3, BASEPRI
 8005d56:	f04f 0120 	mov.w	r1, #32
 8005d5a:	f381 8811 	msr	BASEPRI, r1
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	4819      	ldr	r0, [pc, #100]	@ (8005dc8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005d62:	f7ff f946 	bl	8004ff2 <_PreparePacket>
 8005d66:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005d6c:	4b17      	ldr	r3, [pc, #92]	@ (8005dcc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d74:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	e00b      	b.n	8005d98 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	1c59      	adds	r1, r3, #1
 8005d88:	6179      	str	r1, [r7, #20]
 8005d8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	09db      	lsrs	r3, r3, #7
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d9c:	d8f0      	bhi.n	8005d80 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	617a      	str	r2, [r7, #20]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005dae:	2202      	movs	r2, #2
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	68b8      	ldr	r0, [r7, #8]
 8005db4:	f7ff fa0c 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f383 8811 	msr	BASEPRI, r3
}
 8005dbe:	bf00      	nop
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	200143b8 	.word	0x200143b8
 8005dcc:	e000ed04 	.word	0xe000ed04

08005dd0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dda:	f04f 0120 	mov.w	r1, #32
 8005dde:	f381 8811 	msr	BASEPRI, r1
 8005de2:	607b      	str	r3, [r7, #4]
 8005de4:	4807      	ldr	r0, [pc, #28]	@ (8005e04 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005de6:	f7ff f904 	bl	8004ff2 <_PreparePacket>
 8005dea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005dec:	2203      	movs	r2, #3
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	6838      	ldr	r0, [r7, #0]
 8005df2:	f7ff f9ed 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f383 8811 	msr	BASEPRI, r3
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	200143b8 	.word	0x200143b8

08005e08 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e12:	f04f 0120 	mov.w	r1, #32
 8005e16:	f381 8811 	msr	BASEPRI, r1
 8005e1a:	607b      	str	r3, [r7, #4]
 8005e1c:	4807      	ldr	r0, [pc, #28]	@ (8005e3c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005e1e:	f7ff f8e8 	bl	8004ff2 <_PreparePacket>
 8005e22:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005e24:	2212      	movs	r2, #18
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	6838      	ldr	r0, [r7, #0]
 8005e2a:	f7ff f9d1 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f383 8811 	msr	BASEPRI, r3
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	200143b8 	.word	0x200143b8

08005e40 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e46:	f3ef 8311 	mrs	r3, BASEPRI
 8005e4a:	f04f 0120 	mov.w	r1, #32
 8005e4e:	f381 8811 	msr	BASEPRI, r1
 8005e52:	607b      	str	r3, [r7, #4]
 8005e54:	4807      	ldr	r0, [pc, #28]	@ (8005e74 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005e56:	f7ff f8cc 	bl	8004ff2 <_PreparePacket>
 8005e5a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005e5c:	2211      	movs	r2, #17
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6838      	ldr	r0, [r7, #0]
 8005e62:	f7ff f9b5 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f383 8811 	msr	BASEPRI, r3
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	200143b8 	.word	0x200143b8

08005e78 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e80:	f3ef 8311 	mrs	r3, BASEPRI
 8005e84:	f04f 0120 	mov.w	r1, #32
 8005e88:	f381 8811 	msr	BASEPRI, r1
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	4819      	ldr	r0, [pc, #100]	@ (8005ef4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005e90:	f7ff f8af 	bl	8004ff2 <_PreparePacket>
 8005e94:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e9a:	4b17      	ldr	r3, [pc, #92]	@ (8005ef8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	e00b      	b.n	8005ec6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	1c59      	adds	r1, r3, #1
 8005eb6:	61f9      	str	r1, [r7, #28]
 8005eb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	09db      	lsrs	r3, r3, #7
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eca:	d8f0      	bhi.n	8005eae <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	61fa      	str	r2, [r7, #28]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005edc:	2208      	movs	r2, #8
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	6938      	ldr	r0, [r7, #16]
 8005ee2:	f7ff f975 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f383 8811 	msr	BASEPRI, r3
}
 8005eec:	bf00      	nop
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	200143b8 	.word	0x200143b8
 8005ef8:	20014388 	.word	0x20014388

08005efc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f04:	f3ef 8311 	mrs	r3, BASEPRI
 8005f08:	f04f 0120 	mov.w	r1, #32
 8005f0c:	f381 8811 	msr	BASEPRI, r1
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	4819      	ldr	r0, [pc, #100]	@ (8005f78 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005f14:	f7ff f86d 	bl	8004ff2 <_PreparePacket>
 8005f18:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f1e:	4b17      	ldr	r3, [pc, #92]	@ (8005f7c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	61fb      	str	r3, [r7, #28]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	61bb      	str	r3, [r7, #24]
 8005f30:	e00b      	b.n	8005f4a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	1c59      	adds	r1, r3, #1
 8005f3a:	61f9      	str	r1, [r7, #28]
 8005f3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	09db      	lsrs	r3, r3, #7
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f4e:	d8f0      	bhi.n	8005f32 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	61fa      	str	r2, [r7, #28]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005f60:	2204      	movs	r2, #4
 8005f62:	68f9      	ldr	r1, [r7, #12]
 8005f64:	6938      	ldr	r0, [r7, #16]
 8005f66:	f7ff f933 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f383 8811 	msr	BASEPRI, r3
}
 8005f70:	bf00      	nop
 8005f72:	3720      	adds	r7, #32
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	200143b8 	.word	0x200143b8
 8005f7c:	20014388 	.word	0x20014388

08005f80 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f88:	f3ef 8311 	mrs	r3, BASEPRI
 8005f8c:	f04f 0120 	mov.w	r1, #32
 8005f90:	f381 8811 	msr	BASEPRI, r1
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	4819      	ldr	r0, [pc, #100]	@ (8005ffc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005f98:	f7ff f82b 	bl	8004ff2 <_PreparePacket>
 8005f9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fa2:	4b17      	ldr	r3, [pc, #92]	@ (8006000 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	61fb      	str	r3, [r7, #28]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	61bb      	str	r3, [r7, #24]
 8005fb4:	e00b      	b.n	8005fce <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	1c59      	adds	r1, r3, #1
 8005fbe:	61f9      	str	r1, [r7, #28]
 8005fc0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	09db      	lsrs	r3, r3, #7
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fd2:	d8f0      	bhi.n	8005fb6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	61fa      	str	r2, [r7, #28]
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005fe4:	2206      	movs	r2, #6
 8005fe6:	68f9      	ldr	r1, [r7, #12]
 8005fe8:	6938      	ldr	r0, [r7, #16]
 8005fea:	f7ff f8f1 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f383 8811 	msr	BASEPRI, r3
}
 8005ff4:	bf00      	nop
 8005ff6:	3720      	adds	r7, #32
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	200143b8 	.word	0x200143b8
 8006000:	20014388 	.word	0x20014388

08006004 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800600c:	4b04      	ldr	r3, [pc, #16]	@ (8006020 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	1ad3      	subs	r3, r2, r3
}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	20014388 	.word	0x20014388

08006024 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b08c      	sub	sp, #48	@ 0x30
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800602e:	4b3b      	ldr	r3, [pc, #236]	@ (800611c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d06d      	beq.n	8006112 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006036:	4b39      	ldr	r3, [pc, #228]	@ (800611c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800603c:	2300      	movs	r3, #0
 800603e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006040:	e008      	b.n	8006054 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800604e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006050:	3301      	adds	r3, #1
 8006052:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006058:	429a      	cmp	r2, r3
 800605a:	d3f2      	bcc.n	8006042 <SEGGER_SYSVIEW_SendModule+0x1e>
 800605c:	e000      	b.n	8006060 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800605e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d055      	beq.n	8006112 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006066:	f3ef 8311 	mrs	r3, BASEPRI
 800606a:	f04f 0120 	mov.w	r1, #32
 800606e:	f381 8811 	msr	BASEPRI, r1
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	482a      	ldr	r0, [pc, #168]	@ (8006120 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006076:	f7fe ffbc 	bl	8004ff2 <_PreparePacket>
 800607a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	623b      	str	r3, [r7, #32]
 8006088:	e00b      	b.n	80060a2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	1c59      	adds	r1, r3, #1
 8006092:	6279      	str	r1, [r7, #36]	@ 0x24
 8006094:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	09db      	lsrs	r3, r3, #7
 80060a0:	623b      	str	r3, [r7, #32]
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80060a6:	d8f0      	bhi.n	800608a <SEGGER_SYSVIEW_SendModule+0x66>
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80060ae:	6a3a      	ldr	r2, [r7, #32]
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	e00b      	b.n	80060dc <SEGGER_SYSVIEW_SendModule+0xb8>
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	1c59      	adds	r1, r3, #1
 80060cc:	61f9      	str	r1, [r7, #28]
 80060ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	09db      	lsrs	r3, r3, #7
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b7f      	cmp	r3, #127	@ 0x7f
 80060e0:	d8f0      	bhi.n	80060c4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	61fa      	str	r2, [r7, #28]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2280      	movs	r2, #128	@ 0x80
 80060f8:	4619      	mov	r1, r3
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f7fe ff2c 	bl	8004f58 <_EncodeStr>
 8006100:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006102:	2216      	movs	r2, #22
 8006104:	68f9      	ldr	r1, [r7, #12]
 8006106:	6938      	ldr	r0, [r7, #16]
 8006108:	f7ff f862 	bl	80051d0 <_SendPacket>
      RECORD_END();
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006112:	bf00      	nop
 8006114:	3730      	adds	r7, #48	@ 0x30
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	200143b0 	.word	0x200143b0
 8006120:	200143b8 	.word	0x200143b8

08006124 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800612a:	4b0c      	ldr	r3, [pc, #48]	@ (800615c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00f      	beq.n	8006152 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006132:	4b0a      	ldr	r3, [pc, #40]	@ (800615c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f2      	bne.n	8006138 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006152:	bf00      	nop
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	200143b0 	.word	0x200143b0

08006160 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006166:	f3ef 8311 	mrs	r3, BASEPRI
 800616a:	f04f 0120 	mov.w	r1, #32
 800616e:	f381 8811 	msr	BASEPRI, r1
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	4817      	ldr	r0, [pc, #92]	@ (80061d4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006176:	f7fe ff3c 	bl	8004ff2 <_PreparePacket>
 800617a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	4b14      	ldr	r3, [pc, #80]	@ (80061d8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	613b      	str	r3, [r7, #16]
 800618a:	e00b      	b.n	80061a4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	b2da      	uxtb	r2, r3
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	1c59      	adds	r1, r3, #1
 8006194:	6179      	str	r1, [r7, #20]
 8006196:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	09db      	lsrs	r3, r3, #7
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80061a8:	d8f0      	bhi.n	800618c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	617a      	str	r2, [r7, #20]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80061ba:	221b      	movs	r2, #27
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	68b8      	ldr	r0, [r7, #8]
 80061c0:	f7ff f806 	bl	80051d0 <_SendPacket>
  RECORD_END();
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f383 8811 	msr	BASEPRI, r3
}
 80061ca:	bf00      	nop
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	200143b8 	.word	0x200143b8
 80061d8:	200143b4 	.word	0x200143b4

080061dc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	@ 0x28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061e4:	f3ef 8311 	mrs	r3, BASEPRI
 80061e8:	f04f 0120 	mov.w	r1, #32
 80061ec:	f381 8811 	msr	BASEPRI, r1
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	4827      	ldr	r0, [pc, #156]	@ (8006290 <SEGGER_SYSVIEW_Warn+0xb4>)
 80061f4:	f7fe fefd 	bl	8004ff2 <_PreparePacket>
 80061f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061fa:	2280      	movs	r2, #128	@ 0x80
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	6938      	ldr	r0, [r7, #16]
 8006200:	f7fe feaa 	bl	8004f58 <_EncodeStr>
 8006204:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	627b      	str	r3, [r7, #36]	@ 0x24
 800620a:	2301      	movs	r3, #1
 800620c:	623b      	str	r3, [r7, #32]
 800620e:	e00b      	b.n	8006228 <SEGGER_SYSVIEW_Warn+0x4c>
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006216:	1c59      	adds	r1, r3, #1
 8006218:	6279      	str	r1, [r7, #36]	@ 0x24
 800621a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	09db      	lsrs	r3, r3, #7
 8006226:	623b      	str	r3, [r7, #32]
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	2b7f      	cmp	r3, #127	@ 0x7f
 800622c:	d8f0      	bhi.n	8006210 <SEGGER_SYSVIEW_Warn+0x34>
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	627a      	str	r2, [r7, #36]	@ 0x24
 8006234:	6a3a      	ldr	r2, [r7, #32]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	61fb      	str	r3, [r7, #28]
 8006242:	2300      	movs	r3, #0
 8006244:	61bb      	str	r3, [r7, #24]
 8006246:	e00b      	b.n	8006260 <SEGGER_SYSVIEW_Warn+0x84>
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	b2da      	uxtb	r2, r3
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	1c59      	adds	r1, r3, #1
 8006250:	61f9      	str	r1, [r7, #28]
 8006252:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	09db      	lsrs	r3, r3, #7
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b7f      	cmp	r3, #127	@ 0x7f
 8006264:	d8f0      	bhi.n	8006248 <SEGGER_SYSVIEW_Warn+0x6c>
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	61fa      	str	r2, [r7, #28]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006276:	221a      	movs	r2, #26
 8006278:	68f9      	ldr	r1, [r7, #12]
 800627a:	6938      	ldr	r0, [r7, #16]
 800627c:	f7fe ffa8 	bl	80051d0 <_SendPacket>
  RECORD_END();
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f383 8811 	msr	BASEPRI, r3
}
 8006286:	bf00      	nop
 8006288:	3728      	adds	r7, #40	@ 0x28
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	200143b8 	.word	0x200143b8

08006294 <memcmp>:
 8006294:	b510      	push	{r4, lr}
 8006296:	3901      	subs	r1, #1
 8006298:	4402      	add	r2, r0
 800629a:	4290      	cmp	r0, r2
 800629c:	d101      	bne.n	80062a2 <memcmp+0xe>
 800629e:	2000      	movs	r0, #0
 80062a0:	e005      	b.n	80062ae <memcmp+0x1a>
 80062a2:	7803      	ldrb	r3, [r0, #0]
 80062a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	d001      	beq.n	80062b0 <memcmp+0x1c>
 80062ac:	1b18      	subs	r0, r3, r4
 80062ae:	bd10      	pop	{r4, pc}
 80062b0:	3001      	adds	r0, #1
 80062b2:	e7f2      	b.n	800629a <memcmp+0x6>

080062b4 <memset>:
 80062b4:	4402      	add	r2, r0
 80062b6:	4603      	mov	r3, r0
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d100      	bne.n	80062be <memset+0xa>
 80062bc:	4770      	bx	lr
 80062be:	f803 1b01 	strb.w	r1, [r3], #1
 80062c2:	e7f9      	b.n	80062b8 <memset+0x4>

080062c4 <__libc_init_array>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	4d0d      	ldr	r5, [pc, #52]	@ (80062fc <__libc_init_array+0x38>)
 80062c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006300 <__libc_init_array+0x3c>)
 80062ca:	1b64      	subs	r4, r4, r5
 80062cc:	10a4      	asrs	r4, r4, #2
 80062ce:	2600      	movs	r6, #0
 80062d0:	42a6      	cmp	r6, r4
 80062d2:	d109      	bne.n	80062e8 <__libc_init_array+0x24>
 80062d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006304 <__libc_init_array+0x40>)
 80062d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006308 <__libc_init_array+0x44>)
 80062d8:	f000 f826 	bl	8006328 <_init>
 80062dc:	1b64      	subs	r4, r4, r5
 80062de:	10a4      	asrs	r4, r4, #2
 80062e0:	2600      	movs	r6, #0
 80062e2:	42a6      	cmp	r6, r4
 80062e4:	d105      	bne.n	80062f2 <__libc_init_array+0x2e>
 80062e6:	bd70      	pop	{r4, r5, r6, pc}
 80062e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ec:	4798      	blx	r3
 80062ee:	3601      	adds	r6, #1
 80062f0:	e7ee      	b.n	80062d0 <__libc_init_array+0xc>
 80062f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f6:	4798      	blx	r3
 80062f8:	3601      	adds	r6, #1
 80062fa:	e7f2      	b.n	80062e2 <__libc_init_array+0x1e>
 80062fc:	08006468 	.word	0x08006468
 8006300:	08006468 	.word	0x08006468
 8006304:	08006468 	.word	0x08006468
 8006308:	0800646c 	.word	0x0800646c

0800630c <memcpy>:
 800630c:	440a      	add	r2, r1
 800630e:	4291      	cmp	r1, r2
 8006310:	f100 33ff 	add.w	r3, r0, #4294967295
 8006314:	d100      	bne.n	8006318 <memcpy+0xc>
 8006316:	4770      	bx	lr
 8006318:	b510      	push	{r4, lr}
 800631a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800631e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006322:	4291      	cmp	r1, r2
 8006324:	d1f9      	bne.n	800631a <memcpy+0xe>
 8006326:	bd10      	pop	{r4, pc}

08006328 <_init>:
 8006328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632a:	bf00      	nop
 800632c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800632e:	bc08      	pop	{r3}
 8006330:	469e      	mov	lr, r3
 8006332:	4770      	bx	lr

08006334 <_fini>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	bf00      	nop
 8006338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633a:	bc08      	pop	{r3}
 800633c:	469e      	mov	lr, r3
 800633e:	4770      	bx	lr
