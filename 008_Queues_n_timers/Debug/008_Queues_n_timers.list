
008_Queues_n_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005748  08005748  00006748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b4  080057b4  00007018  2**0
                  CONTENTS
  4 .ARM          00000008  080057b4  080057b4  000067b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057bc  080057bc  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057bc  080057bc  000067bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057c0  080057c0  000067c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080057c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e8c  20000018  080057dc  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012ea4  080057dc  00007ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014805  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031cc  00000000  00000000  0001b84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0001ea20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec8  00000000  00000000  0001fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181ed  00000000  00000000  00020be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b61  00000000  00000000  00038dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c417  00000000  00000000  0004f936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebd4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f3c  00000000  00000000  000ebd90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f0ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005730 	.word	0x08005730

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	08005730 	.word	0x08005730

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	@ 0x28
 80004d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fbe5 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f8df 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f99b 	bl	8000818 <MX_GPIO_Init>
  MX_RTC_Init();
 80004e2:	f000 f949 	bl	8000778 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f96d 	bl	80007c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 80004ea:	4b5b      	ldr	r3, [pc, #364]	@ (8000658 <main+0x188>)
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2302      	movs	r3, #2
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2300      	movs	r3, #0
 80004f4:	22fa      	movs	r2, #250	@ 0xfa
 80004f6:	4959      	ldr	r1, [pc, #356]	@ (800065c <main+0x18c>)
 80004f8:	4859      	ldr	r0, [pc, #356]	@ (8000660 <main+0x190>)
 80004fa:	f003 faff 	bl	8003afc <xTaskCreate>
 80004fe:	61f8      	str	r0, [r7, #28]

  	configASSERT(status == pdPASS);
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d00b      	beq.n	800051e <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800050a:	f383 8811 	msr	BASEPRI, r3
 800050e:	f3bf 8f6f 	isb	sy
 8000512:	f3bf 8f4f 	dsb	sy
 8000516:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	e7fd      	b.n	800051a <main+0x4a>

  	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 800051e:	4b51      	ldr	r3, [pc, #324]	@ (8000664 <main+0x194>)
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2302      	movs	r3, #2
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	22fa      	movs	r2, #250	@ 0xfa
 800052a:	494f      	ldr	r1, [pc, #316]	@ (8000668 <main+0x198>)
 800052c:	484f      	ldr	r0, [pc, #316]	@ (800066c <main+0x19c>)
 800052e:	f003 fae5 	bl	8003afc <xTaskCreate>
 8000532:	61f8      	str	r0, [r7, #28]

  	configASSERT(status == pdPASS);
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d00b      	beq.n	8000552 <main+0x82>
        __asm volatile
 800053a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800053e:	f383 8811 	msr	BASEPRI, r3
 8000542:	f3bf 8f6f 	isb	sy
 8000546:	f3bf 8f4f 	dsb	sy
 800054a:	617b      	str	r3, [r7, #20]
    }
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	e7fd      	b.n	800054e <main+0x7e>

  	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8000552:	4b47      	ldr	r3, [pc, #284]	@ (8000670 <main+0x1a0>)
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2302      	movs	r3, #2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	22fa      	movs	r2, #250	@ 0xfa
 800055e:	4945      	ldr	r1, [pc, #276]	@ (8000674 <main+0x1a4>)
 8000560:	4845      	ldr	r0, [pc, #276]	@ (8000678 <main+0x1a8>)
 8000562:	f003 facb 	bl	8003afc <xTaskCreate>
 8000566:	61f8      	str	r0, [r7, #28]

  	configASSERT(status == pdPASS);
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d00b      	beq.n	8000586 <main+0xb6>
        __asm volatile
 800056e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000572:	f383 8811 	msr	BASEPRI, r3
 8000576:	f3bf 8f6f 	isb	sy
 800057a:	f3bf 8f4f 	dsb	sy
 800057e:	613b      	str	r3, [r7, #16]
    }
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	e7fd      	b.n	8000582 <main+0xb2>

  	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <main+0x1ac>)
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2302      	movs	r3, #2
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	22fa      	movs	r2, #250	@ 0xfa
 8000592:	493b      	ldr	r1, [pc, #236]	@ (8000680 <main+0x1b0>)
 8000594:	483b      	ldr	r0, [pc, #236]	@ (8000684 <main+0x1b4>)
 8000596:	f003 fab1 	bl	8003afc <xTaskCreate>
 800059a:	61f8      	str	r0, [r7, #28]

  	configASSERT(status == pdPASS);
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d00b      	beq.n	80005ba <main+0xea>
        __asm volatile
 80005a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	60fb      	str	r3, [r7, #12]
    }
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	e7fd      	b.n	80005b6 <main+0xe6>

  	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80005ba:	4b33      	ldr	r3, [pc, #204]	@ (8000688 <main+0x1b8>)
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	22fa      	movs	r2, #250	@ 0xfa
 80005c6:	4931      	ldr	r1, [pc, #196]	@ (800068c <main+0x1bc>)
 80005c8:	4831      	ldr	r0, [pc, #196]	@ (8000690 <main+0x1c0>)
 80005ca:	f003 fa97 	bl	8003afc <xTaskCreate>
 80005ce:	61f8      	str	r0, [r7, #28]

  	configASSERT(status == pdPASS);
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00b      	beq.n	80005ee <main+0x11e>
        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	60bb      	str	r3, [r7, #8]
    }
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x11a>

  	q_data = xQueueCreate (10, sizeof(char));
 80005ee:	2200      	movs	r2, #0
 80005f0:	2101      	movs	r1, #1
 80005f2:	200a      	movs	r0, #10
 80005f4:	f003 f81c 	bl	8003630 <xQueueGenericCreate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a26      	ldr	r2, [pc, #152]	@ (8000694 <main+0x1c4>)
 80005fc:	6013      	str	r3, [r2, #0]

  	configASSERT(q_data != NULL);
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <main+0x1c4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d10b      	bne.n	800061e <main+0x14e>
        __asm volatile
 8000606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800060a:	f383 8811 	msr	BASEPRI, r3
 800060e:	f3bf 8f6f 	isb	sy
 8000612:	f3bf 8f4f 	dsb	sy
 8000616:	607b      	str	r3, [r7, #4]
    }
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	e7fd      	b.n	800061a <main+0x14a>

  	q_print = xQueueCreate (10, sizeof(size_t));
 800061e:	2200      	movs	r2, #0
 8000620:	2104      	movs	r1, #4
 8000622:	200a      	movs	r0, #10
 8000624:	f003 f804 	bl	8003630 <xQueueGenericCreate>
 8000628:	4603      	mov	r3, r0
 800062a:	4a1b      	ldr	r2, [pc, #108]	@ (8000698 <main+0x1c8>)
 800062c:	6013      	str	r3, [r2, #0]

  	configASSERT(q_print != NULL);
 800062e:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <main+0x1c8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d10b      	bne.n	800064e <main+0x17e>
        __asm volatile
 8000636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800063a:	f383 8811 	msr	BASEPRI, r3
 800063e:	f3bf 8f6f 	isb	sy
 8000642:	f3bf 8f4f 	dsb	sy
 8000646:	603b      	str	r3, [r7, #0]
    }
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <main+0x17a>

  	vTaskStartScheduler();
 800064e:	f003 fbc1 	bl	8003dd4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000652:	bf00      	nop
 8000654:	e7fd      	b.n	8000652 <main+0x182>
 8000656:	bf00      	nop
 8000658:	200000a0 	.word	0x200000a0
 800065c:	08005748 	.word	0x08005748
 8000660:	08000c15 	.word	0x08000c15
 8000664:	2000009c 	.word	0x2000009c
 8000668:	08005754 	.word	0x08005754
 800066c:	08000c45 	.word	0x08000c45
 8000670:	200000a4 	.word	0x200000a4
 8000674:	08005760 	.word	0x08005760
 8000678:	08000c39 	.word	0x08000c39
 800067c:	200000a8 	.word	0x200000a8
 8000680:	0800576c 	.word	0x0800576c
 8000684:	08000c21 	.word	0x08000c21
 8000688:	200000ac 	.word	0x200000ac
 800068c:	08005778 	.word	0x08005778
 8000690:	08000c2d 	.word	0x08000c2d
 8000694:	200000b0 	.word	0x200000b0
 8000698:	200000b4 	.word	0x200000b4

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f005 f806 	bl	80056bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000770 <SystemClock_Config+0xd4>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a29      	ldr	r2, [pc, #164]	@ (8000770 <SystemClock_Config+0xd4>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b27      	ldr	r3, [pc, #156]	@ (8000770 <SystemClock_Config+0xd4>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <SystemClock_Config+0xd8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e8:	4a22      	ldr	r2, [pc, #136]	@ (8000774 <SystemClock_Config+0xd8>)
 80006ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemClock_Config+0xd8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006fc:	230a      	movs	r3, #10
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000714:	2310      	movs	r3, #16
 8000716:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000718:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800071c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071e:	2304      	movs	r3, #4
 8000720:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000722:	2307      	movs	r3, #7
 8000724:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fe0e 	bl	800134c <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000736:	f000 f905 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2302      	movs	r3, #2
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2102      	movs	r1, #2
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f870 	bl	800183c <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000762:	f000 f8ef 	bl	8000944 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	@ 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_RTC_Init+0x44>)
 800077e:	4a10      	ldr	r2, [pc, #64]	@ (80007c0 <MX_RTC_Init+0x48>)
 8000780:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_RTC_Init+0x44>)
 8000784:	2240      	movs	r2, #64	@ 0x40
 8000786:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_RTC_Init+0x44>)
 800078a:	227f      	movs	r2, #127	@ 0x7f
 800078c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_RTC_Init+0x44>)
 8000790:	22ff      	movs	r2, #255	@ 0xff
 8000792:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_RTC_Init+0x44>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_RTC_Init+0x44>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_RTC_Init+0x44>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_RTC_Init+0x44>)
 80007a8:	f001 fb88 	bl	8001ebc <HAL_RTC_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007b2:	f000 f8c7 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000034 	.word	0x20000034
 80007c0:	40002800 	.word	0x40002800

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_USART2_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007fc:	f001 fed8 	bl	80025b0 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f000 f89d 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000054 	.word	0x20000054
 8000814:	40004400 	.word	0x40004400

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b37      	ldr	r3, [pc, #220]	@ (8000910 <MX_GPIO_Init+0xf8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a36      	ldr	r2, [pc, #216]	@ (8000910 <MX_GPIO_Init+0xf8>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b34      	ldr	r3, [pc, #208]	@ (8000910 <MX_GPIO_Init+0xf8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b30      	ldr	r3, [pc, #192]	@ (8000910 <MX_GPIO_Init+0xf8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a2f      	ldr	r2, [pc, #188]	@ (8000910 <MX_GPIO_Init+0xf8>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b2d      	ldr	r3, [pc, #180]	@ (8000910 <MX_GPIO_Init+0xf8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <MX_GPIO_Init+0xf8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a28      	ldr	r2, [pc, #160]	@ (8000910 <MX_GPIO_Init+0xf8>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <MX_GPIO_Init+0xf8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b22      	ldr	r3, [pc, #136]	@ (8000910 <MX_GPIO_Init+0xf8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a21      	ldr	r2, [pc, #132]	@ (8000910 <MX_GPIO_Init+0xf8>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <MX_GPIO_Init+0xf8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	21e0      	movs	r1, #224	@ 0xe0
 80008a2:	481c      	ldr	r0, [pc, #112]	@ (8000914 <MX_GPIO_Init+0xfc>)
 80008a4:	f000 fd38 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2140      	movs	r1, #64	@ 0x40
 80008ac:	481a      	ldr	r0, [pc, #104]	@ (8000918 <MX_GPIO_Init+0x100>)
 80008ae:	f000 fd33 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4814      	ldr	r0, [pc, #80]	@ (800091c <MX_GPIO_Init+0x104>)
 80008ca:	f000 fba1 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 80008ce:	23e0      	movs	r3, #224	@ 0xe0
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480b      	ldr	r0, [pc, #44]	@ (8000914 <MX_GPIO_Init+0xfc>)
 80008e6:	f000 fb93 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD5_Pin */
  GPIO_InitStruct.Pin = LD5_Pin;
 80008ea:	2340      	movs	r3, #64	@ 0x40
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_GPIO_Init+0x100>)
 8000902:	f000 fb85 	bl	8001010 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	@ 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000
 8000918:	40020400 	.word	0x40020400
 800091c:	40020800 	.word	0x40020800

08000920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	@ (8000940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d101      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000932:	f000 f9d9 	bl	8000ce8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40000c00 	.word	0x40000c00

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <Error_Handler+0x8>

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	4a0f      	ldr	r2, [pc, #60]	@ (800099c <HAL_MspInit+0x4c>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000964:	6453      	str	r3, [r2, #68]	@ 0x44
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	4a08      	ldr	r2, [pc, #32]	@ (800099c <HAL_MspInit+0x4c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	@ 0x40
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0c      	ldr	r2, [pc, #48]	@ (80009f0 <HAL_RTC_MspInit+0x50>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d111      	bne.n	80009e6 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009c2:	2302      	movs	r3, #2
 80009c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 f985 	bl	8001ce0 <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80009dc:	f7ff ffb2 	bl	8000944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <HAL_RTC_MspInit+0x54>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80009e6:	bf00      	nop
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40002800 	.word	0x40002800
 80009f4:	42470e3c 	.word	0x42470e3c

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1d      	ldr	r2, [pc, #116]	@ (8000a8c <HAL_UART_MspInit+0x94>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d133      	bne.n	8000a82 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_UART_MspInit+0x98>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a1b      	ldr	r2, [pc, #108]	@ (8000a90 <HAL_UART_MspInit+0x98>)
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_UART_MspInit+0x98>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <HAL_UART_MspInit+0x98>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a14      	ldr	r2, [pc, #80]	@ (8000a90 <HAL_UART_MspInit+0x98>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <HAL_UART_MspInit+0x98>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a52:	230c      	movs	r3, #12
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a62:	2307      	movs	r3, #7
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4809      	ldr	r0, [pc, #36]	@ (8000a94 <HAL_UART_MspInit+0x9c>)
 8000a6e:	f000 facf 	bl	8001010 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2106      	movs	r1, #6
 8000a76:	2026      	movs	r0, #38	@ 0x26
 8000a78:	f000 fa0e 	bl	8000e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a7c:	2026      	movs	r0, #38	@ 0x26
 8000a7e:	f000 fa27 	bl	8000ed0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000

08000a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	@ 0x38
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b33      	ldr	r3, [pc, #204]	@ (8000b7c <HAL_InitTick+0xe4>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab0:	4a32      	ldr	r2, [pc, #200]	@ (8000b7c <HAL_InitTick+0xe4>)
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab8:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <HAL_InitTick+0xe4>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac4:	f107 0210 	add.w	r2, r7, #16
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f8d4 	bl	8001c7c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d103      	bne.n	8000ae6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ade:	f001 f8a5 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 8000ae2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ae4:	e004      	b.n	8000af0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ae6:	f001 f8a1 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 8000aea:	4603      	mov	r3, r0
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000af2:	4a23      	ldr	r2, [pc, #140]	@ (8000b80 <HAL_InitTick+0xe8>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	0c9b      	lsrs	r3, r3, #18
 8000afa:	3b01      	subs	r3, #1
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000afe:	4b21      	ldr	r3, [pc, #132]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b00:	4a21      	ldr	r2, [pc, #132]	@ (8000b88 <HAL_InitTick+0xf0>)
 8000b02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b0a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b10:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b24:	4817      	ldr	r0, [pc, #92]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b26:	f001 facf 	bl	80020c8 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d11b      	bne.n	8000b70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b38:	4812      	ldr	r0, [pc, #72]	@ (8000b84 <HAL_InitTick+0xec>)
 8000b3a:	f001 fb1f 	bl	800217c <HAL_TIM_Base_Start_IT>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d111      	bne.n	8000b70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b4c:	2032      	movs	r0, #50	@ 0x32
 8000b4e:	f000 f9bf 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d808      	bhi.n	8000b6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2032      	movs	r0, #50	@ 0x32
 8000b5e:	f000 f99b 	bl	8000e98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_InitTick+0xf4>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	e002      	b.n	8000b70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3738      	adds	r7, #56	@ 0x38
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	431bde83 	.word	0x431bde83
 8000b84:	200000b8 	.word	0x200000b8
 8000b88:	40000c00 	.word	0x40000c00
 8000b8c:	20000004 	.word	0x20000004

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <NMI_Handler+0x4>

08000b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bcc:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <USART2_IRQHandler+0x10>)
 8000bce:	f001 fd3f 	bl	8002650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000054 	.word	0x20000054

08000bdc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000be0:	4802      	ldr	r0, [pc, #8]	@ (8000bec <TIM5_IRQHandler+0x10>)
 8000be2:	f001 fb2d 	bl	8002240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000b8 	.word	0x200000b8

08000bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <SystemInit+0x20>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bfa:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <SystemInit+0x20>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <menu_task>:
 *      Author: marko
 */
#include "main.h"

void menu_task(void *param)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	while(1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <menu_task+0x8>

08000c20 <led_task>:

	}
}

void led_task(void *param)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	while(1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <led_task+0x8>

08000c2c <rtc_task>:

	}
}

void rtc_task(void *param)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	while(1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <rtc_task+0x8>

08000c38 <print_task>:

	}
}

void print_task(void *param)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	while(1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <print_task+0x8>

08000c44 <cmd_handler_task>:

	}
}

void cmd_handler_task(void *param)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	while(1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <cmd_handler_task+0x8>

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c54:	f7ff ffcc 	bl	8000bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	@ (8000c90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	@ (8000c9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f004 fd25 	bl	80056cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fc25 	bl	80004d0 <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000c94:	080057c4 	.word	0x080057c4
  ldr r2, =_sbss
 8000c98:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000c9c:	20012ea4 	.word	0x20012ea4

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f8d8 	bl	8000e82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f7ff fee0 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fe3a 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000100 	.word	0x20000100

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000100 	.word	0x20000100

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	@ (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	@ 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ff4c 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eaa:	f7ff ff61 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	6978      	ldr	r0, [r7, #20]
 8000eb6:	f7ff ffb1 	bl	8000e1c <NVIC_EncodePriority>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff80 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff54 	bl	8000d8c <__NVIC_EnableIRQ>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000efa:	f7ff ff09 	bl	8000d10 <HAL_GetTick>
 8000efe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d008      	beq.n	8000f1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2280      	movs	r2, #128	@ 0x80
 8000f10:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e052      	b.n	8000fc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0216 	bic.w	r2, r2, #22
 8000f2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d103      	bne.n	8000f4e <HAL_DMA_Abort+0x62>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0208 	bic.w	r2, r2, #8
 8000f5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0201 	bic.w	r2, r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f6e:	e013      	b.n	8000f98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f70:	f7ff fece 	bl	8000d10 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b05      	cmp	r3, #5
 8000f7c:	d90c      	bls.n	8000f98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2220      	movs	r2, #32
 8000f82:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2203      	movs	r2, #3
 8000f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e015      	b.n	8000fc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1e4      	bne.n	8000f70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000faa:	223f      	movs	r2, #63	@ 0x3f
 8000fac:	409a      	lsls	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d004      	beq.n	8000fea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2280      	movs	r2, #128	@ 0x80
 8000fe4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00c      	b.n	8001004 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2205      	movs	r2, #5
 8000fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0201 	bic.w	r2, r2, #1
 8001000:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	e159      	b.n	80012e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	429a      	cmp	r2, r3
 8001046:	f040 8148 	bne.w	80012da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d005      	beq.n	8001062 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105e:	2b02      	cmp	r3, #2
 8001060:	d130      	bne.n	80010c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	f003 0201 	and.w	r2, r3, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d017      	beq.n	8001100 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d123      	bne.n	8001154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	69b9      	ldr	r1, [r7, #24]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0203 	and.w	r2, r3, #3
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80a2 	beq.w	80012da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b57      	ldr	r3, [pc, #348]	@ (80012f8 <HAL_GPIO_Init+0x2e8>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a56      	ldr	r2, [pc, #344]	@ (80012f8 <HAL_GPIO_Init+0x2e8>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b54      	ldr	r3, [pc, #336]	@ (80012f8 <HAL_GPIO_Init+0x2e8>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b2:	4a52      	ldr	r2, [pc, #328]	@ (80012fc <HAL_GPIO_Init+0x2ec>)
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a49      	ldr	r2, [pc, #292]	@ (8001300 <HAL_GPIO_Init+0x2f0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d019      	beq.n	8001212 <HAL_GPIO_Init+0x202>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a48      	ldr	r2, [pc, #288]	@ (8001304 <HAL_GPIO_Init+0x2f4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_GPIO_Init+0x1fe>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a47      	ldr	r2, [pc, #284]	@ (8001308 <HAL_GPIO_Init+0x2f8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00d      	beq.n	800120a <HAL_GPIO_Init+0x1fa>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a46      	ldr	r2, [pc, #280]	@ (800130c <HAL_GPIO_Init+0x2fc>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d007      	beq.n	8001206 <HAL_GPIO_Init+0x1f6>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a45      	ldr	r2, [pc, #276]	@ (8001310 <HAL_GPIO_Init+0x300>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_GPIO_Init+0x1f2>
 80011fe:	2304      	movs	r3, #4
 8001200:	e008      	b.n	8001214 <HAL_GPIO_Init+0x204>
 8001202:	2307      	movs	r3, #7
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x204>
 8001206:	2303      	movs	r3, #3
 8001208:	e004      	b.n	8001214 <HAL_GPIO_Init+0x204>
 800120a:	2302      	movs	r3, #2
 800120c:	e002      	b.n	8001214 <HAL_GPIO_Init+0x204>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x204>
 8001212:	2300      	movs	r3, #0
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	f002 0203 	and.w	r2, r2, #3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4093      	lsls	r3, r2
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001224:	4935      	ldr	r1, [pc, #212]	@ (80012fc <HAL_GPIO_Init+0x2ec>)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001232:	4b38      	ldr	r3, [pc, #224]	@ (8001314 <HAL_GPIO_Init+0x304>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001256:	4a2f      	ldr	r2, [pc, #188]	@ (8001314 <HAL_GPIO_Init+0x304>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800125c:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <HAL_GPIO_Init+0x304>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001280:	4a24      	ldr	r2, [pc, #144]	@ (8001314 <HAL_GPIO_Init+0x304>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <HAL_GPIO_Init+0x304>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001314 <HAL_GPIO_Init+0x304>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b0:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <HAL_GPIO_Init+0x304>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <HAL_GPIO_Init+0x304>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3301      	adds	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	f67f aea2 	bls.w	800102c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3724      	adds	r7, #36	@ 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40013800 	.word	0x40013800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400
 8001308:	40020800 	.word	0x40020800
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40021000 	.word	0x40021000
 8001314:	40013c00 	.word	0x40013c00

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001334:	e003      	b.n	800133e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	041a      	lsls	r2, r3, #16
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	619a      	str	r2, [r3, #24]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e267      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d075      	beq.n	8001456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800136a:	4b88      	ldr	r3, [pc, #544]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b04      	cmp	r3, #4
 8001374:	d00c      	beq.n	8001390 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001376:	4b85      	ldr	r3, [pc, #532]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800137e:	2b08      	cmp	r3, #8
 8001380:	d112      	bne.n	80013a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001382:	4b82      	ldr	r3, [pc, #520]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800138a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800138e:	d10b      	bne.n	80013a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	4b7e      	ldr	r3, [pc, #504]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d05b      	beq.n	8001454 <HAL_RCC_OscConfig+0x108>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d157      	bne.n	8001454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e242      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013b0:	d106      	bne.n	80013c0 <HAL_RCC_OscConfig+0x74>
 80013b2:	4b76      	ldr	r3, [pc, #472]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a75      	ldr	r2, [pc, #468]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e01d      	b.n	80013fc <HAL_RCC_OscConfig+0xb0>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x98>
 80013ca:	4b70      	ldr	r3, [pc, #448]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a6f      	ldr	r2, [pc, #444]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80013d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b6d      	ldr	r3, [pc, #436]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6c      	ldr	r2, [pc, #432]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80013dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e00b      	b.n	80013fc <HAL_RCC_OscConfig+0xb0>
 80013e4:	4b69      	ldr	r3, [pc, #420]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a68      	ldr	r2, [pc, #416]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80013ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b66      	ldr	r3, [pc, #408]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a65      	ldr	r2, [pc, #404]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80013f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fc84 	bl	8000d10 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff fc80 	bl	8000d10 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	@ 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e207      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b5b      	ldr	r3, [pc, #364]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0xc0>
 800142a:	e014      	b.n	8001456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fc70 	bl	8000d10 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fc6c 	bl	8000d10 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	@ 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1f3      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001446:	4b51      	ldr	r3, [pc, #324]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0xe8>
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d063      	beq.n	800152a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001462:	4b4a      	ldr	r3, [pc, #296]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146e:	4b47      	ldr	r3, [pc, #284]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001476:	2b08      	cmp	r3, #8
 8001478:	d11c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147a:	4b44      	ldr	r3, [pc, #272]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d116      	bne.n	80014b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	4b41      	ldr	r3, [pc, #260]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <HAL_RCC_OscConfig+0x152>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d001      	beq.n	800149e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e1c7      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b3b      	ldr	r3, [pc, #236]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4937      	ldr	r1, [pc, #220]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	e03a      	b.n	800152a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014bc:	4b34      	ldr	r3, [pc, #208]	@ (8001590 <HAL_RCC_OscConfig+0x244>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c2:	f7ff fc25 	bl	8000d10 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff fc21 	bl	8000d10 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e1a8      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	4b2b      	ldr	r3, [pc, #172]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b28      	ldr	r3, [pc, #160]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4925      	ldr	r1, [pc, #148]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
 80014fc:	e015      	b.n	800152a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <HAL_RCC_OscConfig+0x244>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fc04 	bl	8000d10 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150c:	f7ff fc00 	bl	8000d10 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e187      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d036      	beq.n	80015a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d016      	beq.n	800156c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <HAL_RCC_OscConfig+0x248>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001544:	f7ff fbe4 	bl	8000d10 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154c:	f7ff fbe0 	bl	8000d10 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e167      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <HAL_RCC_OscConfig+0x240>)
 8001560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x200>
 800156a:	e01b      	b.n	80015a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156c:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <HAL_RCC_OscConfig+0x248>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff fbcd 	bl	8000d10 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	e00e      	b.n	8001598 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff fbc9 	bl	8000d10 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d907      	bls.n	8001598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e150      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
 800158c:	40023800 	.word	0x40023800
 8001590:	42470000 	.word	0x42470000
 8001594:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	4b88      	ldr	r3, [pc, #544]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 800159a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1ea      	bne.n	800157a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8097 	beq.w	80016e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b6:	4b81      	ldr	r3, [pc, #516]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10f      	bne.n	80015e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b7d      	ldr	r3, [pc, #500]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	4a7c      	ldr	r2, [pc, #496]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d2:	4b7a      	ldr	r3, [pc, #488]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e2:	4b77      	ldr	r3, [pc, #476]	@ (80017c0 <HAL_RCC_OscConfig+0x474>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d118      	bne.n	8001620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ee:	4b74      	ldr	r3, [pc, #464]	@ (80017c0 <HAL_RCC_OscConfig+0x474>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a73      	ldr	r2, [pc, #460]	@ (80017c0 <HAL_RCC_OscConfig+0x474>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fa:	f7ff fb89 	bl	8000d10 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001602:	f7ff fb85 	bl	8000d10 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e10c      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	4b6a      	ldr	r3, [pc, #424]	@ (80017c0 <HAL_RCC_OscConfig+0x474>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x2ea>
 8001628:	4b64      	ldr	r3, [pc, #400]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162c:	4a63      	ldr	r2, [pc, #396]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6713      	str	r3, [r2, #112]	@ 0x70
 8001634:	e01c      	b.n	8001670 <HAL_RCC_OscConfig+0x324>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x30c>
 800163e:	4b5f      	ldr	r3, [pc, #380]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001642:	4a5e      	ldr	r2, [pc, #376]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6713      	str	r3, [r2, #112]	@ 0x70
 800164a:	4b5c      	ldr	r3, [pc, #368]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164e:	4a5b      	ldr	r2, [pc, #364]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6713      	str	r3, [r2, #112]	@ 0x70
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0x324>
 8001658:	4b58      	ldr	r3, [pc, #352]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165c:	4a57      	ldr	r2, [pc, #348]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6713      	str	r3, [r2, #112]	@ 0x70
 8001664:	4b55      	ldr	r3, [pc, #340]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001668:	4a54      	ldr	r2, [pc, #336]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 800166a:	f023 0304 	bic.w	r3, r3, #4
 800166e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d015      	beq.n	80016a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fb4a 	bl	8000d10 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7ff fb46 	bl	8000d10 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e0cb      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001696:	4b49      	ldr	r3, [pc, #292]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0ee      	beq.n	8001680 <HAL_RCC_OscConfig+0x334>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a4:	f7ff fb34 	bl	8000d10 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff fb30 	bl	8000d10 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e0b5      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c2:	4b3e      	ldr	r3, [pc, #248]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ee      	bne.n	80016ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d4:	4b39      	ldr	r3, [pc, #228]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	4a38      	ldr	r2, [pc, #224]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 80016da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80a1 	beq.w	800182c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ea:	4b34      	ldr	r3, [pc, #208]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d05c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d141      	bne.n	8001782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b31      	ldr	r3, [pc, #196]	@ (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fb04 	bl	8000d10 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fb00 	bl	8000d10 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e087      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	4b27      	ldr	r3, [pc, #156]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	019b      	lsls	r3, r3, #6
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	3b01      	subs	r3, #1
 8001744:	041b      	lsls	r3, r3, #16
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174c:	061b      	lsls	r3, r3, #24
 800174e:	491b      	ldr	r1, [pc, #108]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001754:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fad9 	bl	8000d10 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff fad5 	bl	8000d10 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e05c      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x416>
 8001780:	e054      	b.n	800182c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fac2 	bl	8000d10 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fabe 	bl	8000d10 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e045      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_RCC_OscConfig+0x470>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x444>
 80017ae:	e03d      	b.n	800182c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e038      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40007000 	.word	0x40007000
 80017c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_RCC_OscConfig+0x4ec>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d028      	beq.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d121      	bne.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d11a      	bne.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001800:	4293      	cmp	r3, r2
 8001802:	d111      	bne.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	3b01      	subs	r3, #1
 8001812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d107      	bne.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0cc      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001850:	4b68      	ldr	r3, [pc, #416]	@ (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d90c      	bls.n	8001878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b65      	ldr	r3, [pc, #404]	@ (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b63      	ldr	r3, [pc, #396]	@ (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0b8      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d020      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001890:	4b59      	ldr	r3, [pc, #356]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a58      	ldr	r2, [pc, #352]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800189a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a8:	4b53      	ldr	r3, [pc, #332]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4a52      	ldr	r2, [pc, #328]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b4:	4b50      	ldr	r3, [pc, #320]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	494d      	ldr	r1, [pc, #308]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d044      	beq.n	800195c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	4b47      	ldr	r3, [pc, #284]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d119      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e07f      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fa:	4b3f      	ldr	r3, [pc, #252]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e06f      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190a:	4b3b      	ldr	r3, [pc, #236]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e067      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191a:	4b37      	ldr	r3, [pc, #220]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f023 0203 	bic.w	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4934      	ldr	r1, [pc, #208]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	4313      	orrs	r3, r2
 800192a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800192c:	f7ff f9f0 	bl	8000d10 <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	e00a      	b.n	800194a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001934:	f7ff f9ec 	bl	8000d10 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e04f      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	4b2b      	ldr	r3, [pc, #172]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 020c 	and.w	r2, r3, #12
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	429a      	cmp	r2, r3
 800195a:	d1eb      	bne.n	8001934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800195c:	4b25      	ldr	r3, [pc, #148]	@ (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d20c      	bcs.n	8001984 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e032      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001990:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4916      	ldr	r1, [pc, #88]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d009      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ae:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	490e      	ldr	r1, [pc, #56]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019c2:	f000 f821 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	490a      	ldr	r1, [pc, #40]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	5ccb      	ldrb	r3, [r1, r3]
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	4a09      	ldr	r2, [pc, #36]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff f858 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023c00 	.word	0x40023c00
 80019f8:	40023800 	.word	0x40023800
 80019fc:	0800579c 	.word	0x0800579c
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000004 	.word	0x20000004

08001a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a0c:	b094      	sub	sp, #80	@ 0x50
 8001a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a20:	4b79      	ldr	r3, [pc, #484]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d00d      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x40>
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	f200 80e1 	bhi.w	8001bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x34>
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d003      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a3a:	e0db      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a3c:	4b73      	ldr	r3, [pc, #460]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a40:	e0db      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a42:	4b73      	ldr	r3, [pc, #460]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a46:	e0d8      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a48:	4b6f      	ldr	r3, [pc, #444]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a50:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a52:	4b6d      	ldr	r3, [pc, #436]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d063      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	099b      	lsrs	r3, r3, #6
 8001a64:	2200      	movs	r2, #0
 8001a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	462b      	mov	r3, r5
 8001a7e:	f04f 0000 	mov.w	r0, #0
 8001a82:	f04f 0100 	mov.w	r1, #0
 8001a86:	0159      	lsls	r1, r3, #5
 8001a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8c:	0150      	lsls	r0, r2, #5
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4621      	mov	r1, r4
 8001a94:	1a51      	subs	r1, r2, r1
 8001a96:	6139      	str	r1, [r7, #16]
 8001a98:	4629      	mov	r1, r5
 8001a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001aac:	4659      	mov	r1, fp
 8001aae:	018b      	lsls	r3, r1, #6
 8001ab0:	4651      	mov	r1, sl
 8001ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ab6:	4651      	mov	r1, sl
 8001ab8:	018a      	lsls	r2, r1, #6
 8001aba:	4651      	mov	r1, sl
 8001abc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ac0:	4659      	mov	r1, fp
 8001ac2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ada:	4690      	mov	r8, r2
 8001adc:	4699      	mov	r9, r3
 8001ade:	4623      	mov	r3, r4
 8001ae0:	eb18 0303 	adds.w	r3, r8, r3
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	462b      	mov	r3, r5
 8001ae8:	eb49 0303 	adc.w	r3, r9, r3
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001afa:	4629      	mov	r1, r5
 8001afc:	024b      	lsls	r3, r1, #9
 8001afe:	4621      	mov	r1, r4
 8001b00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b04:	4621      	mov	r1, r4
 8001b06:	024a      	lsls	r2, r1, #9
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b0e:	2200      	movs	r2, #0
 8001b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b18:	f7fe fb62 	bl	80001e0 <__aeabi_uldivmod>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4613      	mov	r3, r2
 8001b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b24:	e058      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b26:	4b38      	ldr	r3, [pc, #224]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	4611      	mov	r1, r2
 8001b32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b36:	623b      	str	r3, [r7, #32]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b40:	4642      	mov	r2, r8
 8001b42:	464b      	mov	r3, r9
 8001b44:	f04f 0000 	mov.w	r0, #0
 8001b48:	f04f 0100 	mov.w	r1, #0
 8001b4c:	0159      	lsls	r1, r3, #5
 8001b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b52:	0150      	lsls	r0, r2, #5
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4641      	mov	r1, r8
 8001b5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b5e:	4649      	mov	r1, r9
 8001b60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b78:	ebb2 040a 	subs.w	r4, r2, sl
 8001b7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	00eb      	lsls	r3, r5, #3
 8001b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b8e:	00e2      	lsls	r2, r4, #3
 8001b90:	4614      	mov	r4, r2
 8001b92:	461d      	mov	r5, r3
 8001b94:	4643      	mov	r3, r8
 8001b96:	18e3      	adds	r3, r4, r3
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	eb45 0303 	adc.w	r3, r5, r3
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bae:	4629      	mov	r1, r5
 8001bb0:	028b      	lsls	r3, r1, #10
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bb8:	4621      	mov	r1, r4
 8001bba:	028a      	lsls	r2, r1, #10
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	61fa      	str	r2, [r7, #28]
 8001bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bcc:	f7fe fb08 	bl	80001e0 <__aeabi_uldivmod>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	0c1b      	lsrs	r3, r3, #16
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	3301      	adds	r3, #1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001be8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bf2:	e002      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3750      	adds	r7, #80	@ 0x50
 8001c00:	46bd      	mov	sp, r7
 8001c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	007a1200 	.word	0x007a1200

08001c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c18:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000

08001c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c30:	f7ff fff0 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	0a9b      	lsrs	r3, r3, #10
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	4903      	ldr	r1, [pc, #12]	@ (8001c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	080057ac 	.word	0x080057ac

08001c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c58:	f7ff ffdc 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0b5b      	lsrs	r3, r3, #13
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	@ (8001c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	080057ac 	.word	0x080057ac

08001c7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	220f      	movs	r2, #15
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0203 	and.w	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c98:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <HAL_RCC_GetClockConfig+0x60>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0207 	and.w	r2, r3, #7
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	601a      	str	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40023c00 	.word	0x40023c00

08001ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d035      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d08:	4b67      	ldr	r3, [pc, #412]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d0e:	f7fe ffff 	bl	8000d10 <HAL_GetTick>
 8001d12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d16:	f7fe fffb 	bl	8000d10 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0ba      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d28:	4b60      	ldr	r3, [pc, #384]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	019a      	lsls	r2, r3, #6
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	071b      	lsls	r3, r3, #28
 8001d40:	495a      	ldr	r1, [pc, #360]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d48:	4b57      	ldr	r3, [pc, #348]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d4e:	f7fe ffdf 	bl	8000d10 <HAL_GetTick>
 8001d52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d56:	f7fe ffdb 	bl	8000d10 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e09a      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d68:	4b50      	ldr	r3, [pc, #320]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 8083 	beq.w	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b49      	ldr	r3, [pc, #292]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	4a48      	ldr	r2, [pc, #288]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d92:	4b46      	ldr	r3, [pc, #280]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d9e:	4b44      	ldr	r3, [pc, #272]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a43      	ldr	r2, [pc, #268]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001da8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001daa:	f7fe ffb1 	bl	8000d10 <HAL_GetTick>
 8001dae:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db2:	f7fe ffad 	bl	8000d10 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e06c      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dd0:	4b36      	ldr	r3, [pc, #216]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dd8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d02f      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d028      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dee:	4b2f      	ldr	r3, [pc, #188]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001df6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001df8:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e04:	4a29      	ldr	r2, [pc, #164]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e0a:	4b28      	ldr	r3, [pc, #160]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d114      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e16:	f7fe ff7b 	bl	8000d10 <HAL_GetTick>
 8001e1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7fe ff77 	bl	8000d10 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e034      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ee      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e4c:	d10d      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001e4e:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e62:	4912      	ldr	r1, [pc, #72]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]
 8001e68:	e005      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e70:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e74:	6093      	str	r3, [r2, #8]
 8001e76:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	490a      	ldr	r1, [pc, #40]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7c1a      	ldrb	r2, [r3, #16]
 8001e98:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e9a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	42470068 	.word	0x42470068
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	42470e40 	.word	0x42470e40
 8001eb8:	424711e0 	.word	0x424711e0

08001ebc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e073      	b.n	8001fba <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7f5b      	ldrb	r3, [r3, #29]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fd5c 	bl	80009a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d055      	beq.n	8001fa8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	22ca      	movs	r2, #202	@ 0xca
 8001f02:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2253      	movs	r2, #83	@ 0x53
 8001f0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f87f 	bl	8002010 <RTC_EnterInitMode>
 8001f12:	4603      	mov	r3, r0
 8001f14:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d12c      	bne.n	8001f76 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001f2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f2e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6899      	ldr	r1, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68d2      	ldr	r2, [r2, #12]
 8001f56:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6919      	ldr	r1, [r3, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	041a      	lsls	r2, r3, #16
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f886 	bl	800207e <RTC_ExitInitMode>
 8001f72:	4603      	mov	r3, r0
 8001f74:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d110      	bne.n	8001f9e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f8a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	22ff      	movs	r2, #255	@ 0xff
 8001fa4:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fa6:	e001      	b.n	8001fac <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800200c <HAL_RTC_WaitForSynchro+0x48>)
 8001fd6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd8:	f7fe fe9a 	bl	8000d10 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001fde:	e009      	b.n	8001ff4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001fe0:	f7fe fe96 	bl	8000d10 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fee:	d901      	bls.n	8001ff4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e007      	b.n	8002004 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0ee      	beq.n	8001fe0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	00013f5f 	.word	0x00013f5f

08002010 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800202a:	2b00      	cmp	r3, #0
 800202c:	d122      	bne.n	8002074 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800203c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800203e:	f7fe fe67 	bl	8000d10 <HAL_GetTick>
 8002042:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002044:	e00c      	b.n	8002060 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002046:	f7fe fe63 	bl	8000d10 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002054:	d904      	bls.n	8002060 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2204      	movs	r2, #4
 800205a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <RTC_EnterInitMode+0x64>
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d1e8      	bne.n	8002046 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002098:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10a      	bne.n	80020be <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff8b 	bl	8001fc4 <HAL_RTC_WaitForSynchro>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2204      	movs	r2, #4
 80020b8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e041      	b.n	800215e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f839 	bl	8002166 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3304      	adds	r3, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4610      	mov	r0, r2
 8002108:	f000 f9b2 	bl	8002470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d001      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e044      	b.n	800221e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1e      	ldr	r2, [pc, #120]	@ (800222c <HAL_TIM_Base_Start_IT+0xb0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d018      	beq.n	80021e8 <HAL_TIM_Base_Start_IT+0x6c>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021be:	d013      	beq.n	80021e8 <HAL_TIM_Base_Start_IT+0x6c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002230 <HAL_TIM_Base_Start_IT+0xb4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00e      	beq.n	80021e8 <HAL_TIM_Base_Start_IT+0x6c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a19      	ldr	r2, [pc, #100]	@ (8002234 <HAL_TIM_Base_Start_IT+0xb8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d009      	beq.n	80021e8 <HAL_TIM_Base_Start_IT+0x6c>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a17      	ldr	r2, [pc, #92]	@ (8002238 <HAL_TIM_Base_Start_IT+0xbc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d004      	beq.n	80021e8 <HAL_TIM_Base_Start_IT+0x6c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a16      	ldr	r2, [pc, #88]	@ (800223c <HAL_TIM_Base_Start_IT+0xc0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d111      	bne.n	800220c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d010      	beq.n	800221c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220a:	e007      	b.n	800221c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40010000 	.word	0x40010000
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800
 8002238:	40000c00 	.word	0x40000c00
 800223c:	40014000 	.word	0x40014000

08002240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d020      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01b      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0202 	mvn.w	r2, #2
 8002274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8d2 	bl	8002434 <HAL_TIM_IC_CaptureCallback>
 8002290:	e005      	b.n	800229e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f8c4 	bl	8002420 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f8d5 	bl	8002448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d020      	beq.n	80022f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01b      	beq.n	80022f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0204 	mvn.w	r2, #4
 80022c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f8ac 	bl	8002434 <HAL_TIM_IC_CaptureCallback>
 80022dc:	e005      	b.n	80022ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f89e 	bl	8002420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f8af 	bl	8002448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d020      	beq.n	800233c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01b      	beq.n	800233c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0208 	mvn.w	r2, #8
 800230c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2204      	movs	r2, #4
 8002312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f886 	bl	8002434 <HAL_TIM_IC_CaptureCallback>
 8002328:	e005      	b.n	8002336 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f878 	bl	8002420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f889 	bl	8002448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b00      	cmp	r3, #0
 8002344:	d020      	beq.n	8002388 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01b      	beq.n	8002388 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0210 	mvn.w	r2, #16
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2208      	movs	r2, #8
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f860 	bl	8002434 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f852 	bl	8002420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f863 	bl	8002448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00c      	beq.n	80023ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0201 	mvn.w	r2, #1
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe faba 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00c      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8e6 	bl	800259c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f834 	bl	800245c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0220 	mvn.w	r2, #32
 8002410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8b8 	bl	8002588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3a      	ldr	r2, [pc, #232]	@ (800256c <TIM_Base_SetConfig+0xfc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00f      	beq.n	80024a8 <TIM_Base_SetConfig+0x38>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800248e:	d00b      	beq.n	80024a8 <TIM_Base_SetConfig+0x38>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a37      	ldr	r2, [pc, #220]	@ (8002570 <TIM_Base_SetConfig+0x100>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <TIM_Base_SetConfig+0x38>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a36      	ldr	r2, [pc, #216]	@ (8002574 <TIM_Base_SetConfig+0x104>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_Base_SetConfig+0x38>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a35      	ldr	r2, [pc, #212]	@ (8002578 <TIM_Base_SetConfig+0x108>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d108      	bne.n	80024ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a2b      	ldr	r2, [pc, #172]	@ (800256c <TIM_Base_SetConfig+0xfc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01b      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c8:	d017      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a28      	ldr	r2, [pc, #160]	@ (8002570 <TIM_Base_SetConfig+0x100>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a27      	ldr	r2, [pc, #156]	@ (8002574 <TIM_Base_SetConfig+0x104>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00f      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a26      	ldr	r2, [pc, #152]	@ (8002578 <TIM_Base_SetConfig+0x108>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00b      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a25      	ldr	r2, [pc, #148]	@ (800257c <TIM_Base_SetConfig+0x10c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a24      	ldr	r2, [pc, #144]	@ (8002580 <TIM_Base_SetConfig+0x110>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a23      	ldr	r2, [pc, #140]	@ (8002584 <TIM_Base_SetConfig+0x114>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d108      	bne.n	800250c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a0e      	ldr	r2, [pc, #56]	@ (800256c <TIM_Base_SetConfig+0xfc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d103      	bne.n	8002540 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d105      	bne.n	800255e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f023 0201 	bic.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	611a      	str	r2, [r3, #16]
  }
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40010000 	.word	0x40010000
 8002570:	40000400 	.word	0x40000400
 8002574:	40000800 	.word	0x40000800
 8002578:	40000c00 	.word	0x40000c00
 800257c:	40014000 	.word	0x40014000
 8002580:	40014400 	.word	0x40014400
 8002584:	40014800 	.word	0x40014800

08002588 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e042      	b.n	8002648 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe fa0e 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	@ 0x24
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fc85 	bl	8002f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b0ba      	sub	sp, #232	@ 0xe8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800268e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_UART_IRQHandler+0x66>
 80026a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fb69 	bl	8002d86 <UART_Receive_IT>
      return;
 80026b4:	e25b      	b.n	8002b6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80de 	beq.w	800287c <HAL_UART_IRQHandler+0x22c>
 80026c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d106      	bne.n	80026da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80d1 	beq.w	800287c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_UART_IRQHandler+0xae>
 80026e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_UART_IRQHandler+0xd2>
 800270a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271a:	f043 0202 	orr.w	r2, r3, #2
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_UART_IRQHandler+0xf6>
 800272e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	f043 0204 	orr.w	r2, r3, #4
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d011      	beq.n	8002776 <HAL_UART_IRQHandler+0x126>
 8002752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800275e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	f043 0208 	orr.w	r2, r3, #8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 81f2 	beq.w	8002b64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_UART_IRQHandler+0x14e>
 800278c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 faf4 	bl	8002d86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a8:	2b40      	cmp	r3, #64	@ 0x40
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <HAL_UART_IRQHandler+0x17a>
 80027c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d04f      	beq.n	800286a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f9fc 	bl	8002bc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027da:	2b40      	cmp	r3, #64	@ 0x40
 80027dc:	d141      	bne.n	8002862 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3314      	adds	r3, #20
 80027e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027ec:	e853 3f00 	ldrex	r3, [r3]
 80027f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80027f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3314      	adds	r3, #20
 8002806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800280a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800280e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800281a:	e841 2300 	strex	r3, r2, [r1]
 800281e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1d9      	bne.n	80027de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d013      	beq.n	800285a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002836:	4a7e      	ldr	r2, [pc, #504]	@ (8002a30 <HAL_UART_IRQHandler+0x3e0>)
 8002838:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fbc4 	bl	8000fcc <HAL_DMA_Abort_IT>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002854:	4610      	mov	r0, r2
 8002856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002858:	e00e      	b.n	8002878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f99e 	bl	8002b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002860:	e00a      	b.n	8002878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f99a 	bl	8002b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002868:	e006      	b.n	8002878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f996 	bl	8002b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002876:	e175      	b.n	8002b64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002878:	bf00      	nop
    return;
 800287a:	e173      	b.n	8002b64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	2b01      	cmp	r3, #1
 8002882:	f040 814f 	bne.w	8002b24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8148 	beq.w	8002b24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8141 	beq.w	8002b24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c2:	2b40      	cmp	r3, #64	@ 0x40
 80028c4:	f040 80b6 	bne.w	8002a34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8145 	beq.w	8002b68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028e6:	429a      	cmp	r2, r3
 80028e8:	f080 813e 	bcs.w	8002b68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028fe:	f000 8088 	beq.w	8002a12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	330c      	adds	r3, #12
 8002908:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002910:	e853 3f00 	ldrex	r3, [r3]
 8002914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002918:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800291c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	330c      	adds	r3, #12
 800292a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800292e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002932:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002936:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800293a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800293e:	e841 2300 	strex	r3, r2, [r1]
 8002942:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1d9      	bne.n	8002902 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3314      	adds	r3, #20
 8002954:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002958:	e853 3f00 	ldrex	r3, [r3]
 800295c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800295e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3314      	adds	r3, #20
 800296e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002972:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002976:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800297a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800297e:	e841 2300 	strex	r3, r2, [r1]
 8002982:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e1      	bne.n	800294e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3314      	adds	r3, #20
 8002990:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002994:	e853 3f00 	ldrex	r3, [r3]
 8002998:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800299a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800299c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3314      	adds	r3, #20
 80029aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80029ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80029b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029b6:	e841 2300 	strex	r3, r2, [r1]
 80029ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80029bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e3      	bne.n	800298a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029da:	e853 3f00 	ldrex	r3, [r3]
 80029de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80029e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029e2:	f023 0310 	bic.w	r3, r3, #16
 80029e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80029f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029fc:	e841 2300 	strex	r3, r2, [r1]
 8002a00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e3      	bne.n	80029d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fa6d 	bl	8000eec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2202      	movs	r2, #2
 8002a16:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4619      	mov	r1, r3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f8c1 	bl	8002bb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a2e:	e09b      	b.n	8002b68 <HAL_UART_IRQHandler+0x518>
 8002a30:	08002c8f 	.word	0x08002c8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 808e 	beq.w	8002b6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8089 	beq.w	8002b6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	330c      	adds	r3, #12
 8002a60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a64:	e853 3f00 	ldrex	r3, [r3]
 8002a68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002a7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a86:	e841 2300 	strex	r3, r2, [r1]
 8002a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e3      	bne.n	8002a5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	3314      	adds	r3, #20
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	623b      	str	r3, [r7, #32]
   return(result);
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3314      	adds	r3, #20
 8002ab2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ab6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002abe:	e841 2300 	strex	r3, r2, [r1]
 8002ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1e3      	bne.n	8002a92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	330c      	adds	r3, #12
 8002ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	e853 3f00 	ldrex	r3, [r3]
 8002ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0310 	bic.w	r3, r3, #16
 8002aee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	330c      	adds	r3, #12
 8002af8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002afc:	61fa      	str	r2, [r7, #28]
 8002afe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b00:	69b9      	ldr	r1, [r7, #24]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	e841 2300 	strex	r3, r2, [r1]
 8002b08:	617b      	str	r3, [r7, #20]
   return(result);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e3      	bne.n	8002ad8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f847 	bl	8002bb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b22:	e023      	b.n	8002b6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d009      	beq.n	8002b44 <HAL_UART_IRQHandler+0x4f4>
 8002b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f8ba 	bl	8002cb6 <UART_Transmit_IT>
    return;
 8002b42:	e014      	b.n	8002b6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <HAL_UART_IRQHandler+0x51e>
 8002b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f8fa 	bl	8002d56 <UART_EndTransmit_IT>
    return;
 8002b62:	e004      	b.n	8002b6e <HAL_UART_IRQHandler+0x51e>
    return;
 8002b64:	bf00      	nop
 8002b66:	e002      	b.n	8002b6e <HAL_UART_IRQHandler+0x51e>
      return;
 8002b68:	bf00      	nop
 8002b6a:	e000      	b.n	8002b6e <HAL_UART_IRQHandler+0x51e>
      return;
 8002b6c:	bf00      	nop
  }
}
 8002b6e:	37e8      	adds	r7, #232	@ 0xe8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b095      	sub	sp, #84	@ 0x54
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bda:	e853 3f00 	ldrex	r3, [r3]
 8002bde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bf0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bf8:	e841 2300 	strex	r3, r2, [r1]
 8002bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e5      	bne.n	8002bd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3314      	adds	r3, #20
 8002c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	e853 3f00 	ldrex	r3, [r3]
 8002c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c2c:	e841 2300 	strex	r3, r2, [r1]
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e5      	bne.n	8002c04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d119      	bne.n	8002c74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	e853 3f00 	ldrex	r3, [r3]
 8002c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 0310 	bic.w	r3, r3, #16
 8002c56:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c60:	61ba      	str	r2, [r7, #24]
 8002c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c64:	6979      	ldr	r1, [r7, #20]
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	e841 2300 	strex	r3, r2, [r1]
 8002c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e5      	bne.n	8002c40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c82:	bf00      	nop
 8002c84:	3754      	adds	r7, #84	@ 0x54
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff ff77 	bl	8002b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b085      	sub	sp, #20
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b21      	cmp	r3, #33	@ 0x21
 8002cc8:	d13e      	bne.n	8002d48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd2:	d114      	bne.n	8002cfe <UART_Transmit_IT+0x48>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d110      	bne.n	8002cfe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	1c9a      	adds	r2, r3, #2
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	621a      	str	r2, [r3, #32]
 8002cfc:	e008      	b.n	8002d10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	1c59      	adds	r1, r3, #1
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6211      	str	r1, [r2, #32]
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10f      	bne.n	8002d44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fefc 	bl	8002b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b08c      	sub	sp, #48	@ 0x30
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b22      	cmp	r3, #34	@ 0x22
 8002d98:	f040 80ae 	bne.w	8002ef8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002da4:	d117      	bne.n	8002dd6 <UART_Receive_IT+0x50>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d113      	bne.n	8002dd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	1c9a      	adds	r2, r3, #2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dd4:	e026      	b.n	8002e24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de8:	d007      	beq.n	8002dfa <UART_Receive_IT+0x74>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <UART_Receive_IT+0x82>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e04:	701a      	strb	r2, [r3, #0]
 8002e06:	e008      	b.n	8002e1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4619      	mov	r1, r3
 8002e32:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d15d      	bne.n	8002ef4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0220 	bic.w	r2, r2, #32
 8002e46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d135      	bne.n	8002eea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	613b      	str	r3, [r7, #16]
   return(result);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f023 0310 	bic.w	r3, r3, #16
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea4:	623a      	str	r2, [r7, #32]
 8002ea6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	69f9      	ldr	r1, [r7, #28]
 8002eaa:	6a3a      	ldr	r2, [r7, #32]
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e5      	bne.n	8002e84 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d10a      	bne.n	8002edc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff fe64 	bl	8002bb0 <HAL_UARTEx_RxEventCallback>
 8002ee8:	e002      	b.n	8002ef0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff fe4c 	bl	8002b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e002      	b.n	8002efa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3730      	adds	r7, #48	@ 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b0c0      	sub	sp, #256	@ 0x100
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f20:	68d9      	ldr	r1, [r3, #12]
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	ea40 0301 	orr.w	r3, r0, r1
 8002f2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f5c:	f021 010c 	bic.w	r1, r1, #12
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7e:	6999      	ldr	r1, [r3, #24]
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	ea40 0301 	orr.w	r3, r0, r1
 8002f8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4b8f      	ldr	r3, [pc, #572]	@ (80031d0 <UART_SetConfig+0x2cc>)
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d005      	beq.n	8002fa4 <UART_SetConfig+0xa0>
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b8d      	ldr	r3, [pc, #564]	@ (80031d4 <UART_SetConfig+0x2d0>)
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d104      	bne.n	8002fae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fa4:	f7fe fe56 	bl	8001c54 <HAL_RCC_GetPCLK2Freq>
 8002fa8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002fac:	e003      	b.n	8002fb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fae:	f7fe fe3d 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 8002fb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc0:	f040 810c 	bne.w	80031dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002fd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	462b      	mov	r3, r5
 8002fda:	1891      	adds	r1, r2, r2
 8002fdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002fde:	415b      	adcs	r3, r3
 8002fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fe2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	eb12 0801 	adds.w	r8, r2, r1
 8002fec:	4629      	mov	r1, r5
 8002fee:	eb43 0901 	adc.w	r9, r3, r1
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003006:	4690      	mov	r8, r2
 8003008:	4699      	mov	r9, r3
 800300a:	4623      	mov	r3, r4
 800300c:	eb18 0303 	adds.w	r3, r8, r3
 8003010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003014:	462b      	mov	r3, r5
 8003016:	eb49 0303 	adc.w	r3, r9, r3
 800301a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800302a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800302e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003032:	460b      	mov	r3, r1
 8003034:	18db      	adds	r3, r3, r3
 8003036:	653b      	str	r3, [r7, #80]	@ 0x50
 8003038:	4613      	mov	r3, r2
 800303a:	eb42 0303 	adc.w	r3, r2, r3
 800303e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003040:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003044:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003048:	f7fd f8ca 	bl	80001e0 <__aeabi_uldivmod>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4b61      	ldr	r3, [pc, #388]	@ (80031d8 <UART_SetConfig+0x2d4>)
 8003052:	fba3 2302 	umull	r2, r3, r3, r2
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	011c      	lsls	r4, r3, #4
 800305a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800305e:	2200      	movs	r2, #0
 8003060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003064:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003068:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800306c:	4642      	mov	r2, r8
 800306e:	464b      	mov	r3, r9
 8003070:	1891      	adds	r1, r2, r2
 8003072:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003074:	415b      	adcs	r3, r3
 8003076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003078:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800307c:	4641      	mov	r1, r8
 800307e:	eb12 0a01 	adds.w	sl, r2, r1
 8003082:	4649      	mov	r1, r9
 8003084:	eb43 0b01 	adc.w	fp, r3, r1
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003094:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800309c:	4692      	mov	sl, r2
 800309e:	469b      	mov	fp, r3
 80030a0:	4643      	mov	r3, r8
 80030a2:	eb1a 0303 	adds.w	r3, sl, r3
 80030a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030aa:	464b      	mov	r3, r9
 80030ac:	eb4b 0303 	adc.w	r3, fp, r3
 80030b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80030c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030c8:	460b      	mov	r3, r1
 80030ca:	18db      	adds	r3, r3, r3
 80030cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80030ce:	4613      	mov	r3, r2
 80030d0:	eb42 0303 	adc.w	r3, r2, r3
 80030d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80030d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80030de:	f7fd f87f 	bl	80001e0 <__aeabi_uldivmod>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4611      	mov	r1, r2
 80030e8:	4b3b      	ldr	r3, [pc, #236]	@ (80031d8 <UART_SetConfig+0x2d4>)
 80030ea:	fba3 2301 	umull	r2, r3, r3, r1
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2264      	movs	r2, #100	@ 0x64
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	1acb      	subs	r3, r1, r3
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80030fe:	4b36      	ldr	r3, [pc, #216]	@ (80031d8 <UART_SetConfig+0x2d4>)
 8003100:	fba3 2302 	umull	r2, r3, r3, r2
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800310c:	441c      	add	r4, r3
 800310e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003112:	2200      	movs	r2, #0
 8003114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003118:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800311c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003120:	4642      	mov	r2, r8
 8003122:	464b      	mov	r3, r9
 8003124:	1891      	adds	r1, r2, r2
 8003126:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003128:	415b      	adcs	r3, r3
 800312a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800312c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003130:	4641      	mov	r1, r8
 8003132:	1851      	adds	r1, r2, r1
 8003134:	6339      	str	r1, [r7, #48]	@ 0x30
 8003136:	4649      	mov	r1, r9
 8003138:	414b      	adcs	r3, r1
 800313a:	637b      	str	r3, [r7, #52]	@ 0x34
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003148:	4659      	mov	r1, fp
 800314a:	00cb      	lsls	r3, r1, #3
 800314c:	4651      	mov	r1, sl
 800314e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003152:	4651      	mov	r1, sl
 8003154:	00ca      	lsls	r2, r1, #3
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	4603      	mov	r3, r0
 800315c:	4642      	mov	r2, r8
 800315e:	189b      	adds	r3, r3, r2
 8003160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003164:	464b      	mov	r3, r9
 8003166:	460a      	mov	r2, r1
 8003168:	eb42 0303 	adc.w	r3, r2, r3
 800316c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800317c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003180:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003184:	460b      	mov	r3, r1
 8003186:	18db      	adds	r3, r3, r3
 8003188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800318a:	4613      	mov	r3, r2
 800318c:	eb42 0303 	adc.w	r3, r2, r3
 8003190:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003196:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800319a:	f7fd f821 	bl	80001e0 <__aeabi_uldivmod>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <UART_SetConfig+0x2d4>)
 80031a4:	fba3 1302 	umull	r1, r3, r3, r2
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	2164      	movs	r1, #100	@ 0x64
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	3332      	adds	r3, #50	@ 0x32
 80031b6:	4a08      	ldr	r2, [pc, #32]	@ (80031d8 <UART_SetConfig+0x2d4>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	f003 0207 	and.w	r2, r3, #7
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4422      	add	r2, r4
 80031ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031cc:	e106      	b.n	80033dc <UART_SetConfig+0x4d8>
 80031ce:	bf00      	nop
 80031d0:	40011000 	.word	0x40011000
 80031d4:	40011400 	.word	0x40011400
 80031d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80031ee:	4642      	mov	r2, r8
 80031f0:	464b      	mov	r3, r9
 80031f2:	1891      	adds	r1, r2, r2
 80031f4:	6239      	str	r1, [r7, #32]
 80031f6:	415b      	adcs	r3, r3
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031fe:	4641      	mov	r1, r8
 8003200:	1854      	adds	r4, r2, r1
 8003202:	4649      	mov	r1, r9
 8003204:	eb43 0501 	adc.w	r5, r3, r1
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	00eb      	lsls	r3, r5, #3
 8003212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003216:	00e2      	lsls	r2, r4, #3
 8003218:	4614      	mov	r4, r2
 800321a:	461d      	mov	r5, r3
 800321c:	4643      	mov	r3, r8
 800321e:	18e3      	adds	r3, r4, r3
 8003220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003224:	464b      	mov	r3, r9
 8003226:	eb45 0303 	adc.w	r3, r5, r3
 800322a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800323a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800324a:	4629      	mov	r1, r5
 800324c:	008b      	lsls	r3, r1, #2
 800324e:	4621      	mov	r1, r4
 8003250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003254:	4621      	mov	r1, r4
 8003256:	008a      	lsls	r2, r1, #2
 8003258:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800325c:	f7fc ffc0 	bl	80001e0 <__aeabi_uldivmod>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4b60      	ldr	r3, [pc, #384]	@ (80033e8 <UART_SetConfig+0x4e4>)
 8003266:	fba3 2302 	umull	r2, r3, r3, r2
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	011c      	lsls	r4, r3, #4
 800326e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003272:	2200      	movs	r2, #0
 8003274:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003278:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800327c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003280:	4642      	mov	r2, r8
 8003282:	464b      	mov	r3, r9
 8003284:	1891      	adds	r1, r2, r2
 8003286:	61b9      	str	r1, [r7, #24]
 8003288:	415b      	adcs	r3, r3
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003290:	4641      	mov	r1, r8
 8003292:	1851      	adds	r1, r2, r1
 8003294:	6139      	str	r1, [r7, #16]
 8003296:	4649      	mov	r1, r9
 8003298:	414b      	adcs	r3, r1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a8:	4659      	mov	r1, fp
 80032aa:	00cb      	lsls	r3, r1, #3
 80032ac:	4651      	mov	r1, sl
 80032ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032b2:	4651      	mov	r1, sl
 80032b4:	00ca      	lsls	r2, r1, #3
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	4642      	mov	r2, r8
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032c4:	464b      	mov	r3, r9
 80032c6:	460a      	mov	r2, r1
 80032c8:	eb42 0303 	adc.w	r3, r2, r3
 80032cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032e8:	4649      	mov	r1, r9
 80032ea:	008b      	lsls	r3, r1, #2
 80032ec:	4641      	mov	r1, r8
 80032ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f2:	4641      	mov	r1, r8
 80032f4:	008a      	lsls	r2, r1, #2
 80032f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80032fa:	f7fc ff71 	bl	80001e0 <__aeabi_uldivmod>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4611      	mov	r1, r2
 8003304:	4b38      	ldr	r3, [pc, #224]	@ (80033e8 <UART_SetConfig+0x4e4>)
 8003306:	fba3 2301 	umull	r2, r3, r3, r1
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2264      	movs	r2, #100	@ 0x64
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	1acb      	subs	r3, r1, r3
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	3332      	adds	r3, #50	@ 0x32
 8003318:	4a33      	ldr	r2, [pc, #204]	@ (80033e8 <UART_SetConfig+0x4e4>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003324:	441c      	add	r4, r3
 8003326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800332a:	2200      	movs	r2, #0
 800332c:	673b      	str	r3, [r7, #112]	@ 0x70
 800332e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003330:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003334:	4642      	mov	r2, r8
 8003336:	464b      	mov	r3, r9
 8003338:	1891      	adds	r1, r2, r2
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	415b      	adcs	r3, r3
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003344:	4641      	mov	r1, r8
 8003346:	1851      	adds	r1, r2, r1
 8003348:	6039      	str	r1, [r7, #0]
 800334a:	4649      	mov	r1, r9
 800334c:	414b      	adcs	r3, r1
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800335c:	4659      	mov	r1, fp
 800335e:	00cb      	lsls	r3, r1, #3
 8003360:	4651      	mov	r1, sl
 8003362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003366:	4651      	mov	r1, sl
 8003368:	00ca      	lsls	r2, r1, #3
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	4603      	mov	r3, r0
 8003370:	4642      	mov	r2, r8
 8003372:	189b      	adds	r3, r3, r2
 8003374:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003376:	464b      	mov	r3, r9
 8003378:	460a      	mov	r2, r1
 800337a:	eb42 0303 	adc.w	r3, r2, r3
 800337e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	663b      	str	r3, [r7, #96]	@ 0x60
 800338a:	667a      	str	r2, [r7, #100]	@ 0x64
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003398:	4649      	mov	r1, r9
 800339a:	008b      	lsls	r3, r1, #2
 800339c:	4641      	mov	r1, r8
 800339e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a2:	4641      	mov	r1, r8
 80033a4:	008a      	lsls	r2, r1, #2
 80033a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80033aa:	f7fc ff19 	bl	80001e0 <__aeabi_uldivmod>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4b0d      	ldr	r3, [pc, #52]	@ (80033e8 <UART_SetConfig+0x4e4>)
 80033b4:	fba3 1302 	umull	r1, r3, r3, r2
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	2164      	movs	r1, #100	@ 0x64
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	3332      	adds	r3, #50	@ 0x32
 80033c6:	4a08      	ldr	r2, [pc, #32]	@ (80033e8 <UART_SetConfig+0x4e4>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	f003 020f 	and.w	r2, r3, #15
 80033d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4422      	add	r2, r4
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	bf00      	nop
 80033de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033e2:	46bd      	mov	sp, r7
 80033e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e8:	51eb851f 	.word	0x51eb851f

080033ec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f103 0208 	add.w	r2, r3, #8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f04f 32ff 	mov.w	r2, #4294967295
 8003404:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f103 0208 	add.w	r2, r3, #8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f103 0208 	add.w	r2, r3, #8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d103      	bne.n	8003466 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e00c      	b.n	8003480 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3308      	adds	r3, #8
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	e002      	b.n	8003474 <vListInsert+0x2e>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	429a      	cmp	r2, r3
 800347e:	d2f6      	bcs.n	800346e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	601a      	str	r2, [r3, #0]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6892      	ldr	r2, [r2, #8]
 80034ce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6852      	ldr	r2, [r2, #4]
 80034d8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d103      	bne.n	80034ec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	1e5a      	subs	r2, r3, #1
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003516:	2301      	movs	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10b      	bne.n	800353c <xQueueGenericReset+0x30>
        __asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	60fb      	str	r3, [r7, #12]
    }
 8003536:	bf00      	nop
 8003538:	bf00      	nop
 800353a:	e7fd      	b.n	8003538 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d05d      	beq.n	80035fe <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003546:	2b00      	cmp	r3, #0
 8003548:	d059      	beq.n	80035fe <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003552:	2100      	movs	r1, #0
 8003554:	fba3 2302 	umull	r2, r3, r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d000      	beq.n	800355e <xQueueGenericReset+0x52>
 800355c:	2101      	movs	r1, #1
 800355e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003560:	2b00      	cmp	r3, #0
 8003562:	d14c      	bne.n	80035fe <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8003564:	f001 fdf2 	bl	800514c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003570:	6939      	ldr	r1, [r7, #16]
 8003572:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	441a      	add	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2200      	movs	r2, #0
 8003582:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003594:	3b01      	subs	r3, #1
 8003596:	6939      	ldr	r1, [r7, #16]
 8003598:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	441a      	add	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	22ff      	movs	r2, #255	@ 0xff
 80035a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	22ff      	movs	r2, #255	@ 0xff
 80035b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d114      	bne.n	80035e4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01a      	beq.n	80035f8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	3310      	adds	r3, #16
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 ff50 	bl	800446c <xTaskRemoveFromEventList>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d012      	beq.n	80035f8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80035d2:	4b16      	ldr	r3, [pc, #88]	@ (800362c <xQueueGenericReset+0x120>)
 80035d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	e009      	b.n	80035f8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	3310      	adds	r3, #16
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff feff 	bl	80033ec <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	3324      	adds	r3, #36	@ 0x24
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fefa 	bl	80033ec <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80035f8:	f001 fdda 	bl	80051b0 <vPortExitCritical>
 80035fc:	e001      	b.n	8003602 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <xQueueGenericReset+0x114>
        __asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	60bb      	str	r3, [r7, #8]
    }
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	e7fd      	b.n	800361c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003620:	697b      	ldr	r3, [r7, #20]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	e000ed04 	.word	0xe000ed04

08003630 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	@ 0x28
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	4613      	mov	r3, r2
 800363c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02e      	beq.n	80036a6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003648:	2100      	movs	r1, #0
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	fba3 2302 	umull	r2, r3, r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d000      	beq.n	8003658 <xQueueGenericCreate+0x28>
 8003656:	2101      	movs	r1, #1
 8003658:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800365a:	2b00      	cmp	r3, #0
 800365c:	d123      	bne.n	80036a6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003666:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800366a:	d81c      	bhi.n	80036a6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	3350      	adds	r3, #80	@ 0x50
 800367a:	4618      	mov	r0, r3
 800367c:	f001 fe4e 	bl	800531c <pvPortMalloc>
 8003680:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01d      	beq.n	80036c4 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	3350      	adds	r3, #80	@ 0x50
 8003690:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003692:	79fa      	ldrb	r2, [r7, #7]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f815 	bl	80036ce <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80036a4:	e00e      	b.n	80036c4 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <xQueueGenericCreate+0x94>
        __asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	613b      	str	r3, [r7, #16]
    }
 80036be:	bf00      	nop
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80036c4:	69fb      	ldr	r3, [r7, #28]
    }
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e002      	b.n	80036f0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036fc:	2101      	movs	r1, #1
 80036fe:	69b8      	ldr	r0, [r7, #24]
 8003700:	f7ff ff04 	bl	800350c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	@ 0x30
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003720:	2300      	movs	r3, #0
 8003722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10b      	bne.n	8003746 <xQueueReceive+0x32>
        __asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	623b      	str	r3, [r7, #32]
    }
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	e7fd      	b.n	8003742 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d103      	bne.n	8003754 <xQueueReceive+0x40>
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <xQueueReceive+0x44>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <xQueueReceive+0x46>
 8003758:	2300      	movs	r3, #0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <xQueueReceive+0x62>
        __asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	61fb      	str	r3, [r7, #28]
    }
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	e7fd      	b.n	8003772 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003776:	f001 f88d 	bl	8004894 <xTaskGetSchedulerState>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d102      	bne.n	8003786 <xQueueReceive+0x72>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <xQueueReceive+0x76>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <xQueueReceive+0x78>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <xQueueReceive+0x94>
        __asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	61bb      	str	r3, [r7, #24]
    }
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80037a8:	f001 fcd0 	bl	800514c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01f      	beq.n	80037f8 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037bc:	f000 f88c 	bl	80038d8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	1e5a      	subs	r2, r3, #1
 80037c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00f      	beq.n	80037f0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d2:	3310      	adds	r3, #16
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fe49 	bl	800446c <xTaskRemoveFromEventList>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80037e0:	4b3c      	ldr	r3, [pc, #240]	@ (80038d4 <xQueueReceive+0x1c0>)
 80037e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80037f0:	f001 fcde 	bl	80051b0 <vPortExitCritical>
                return pdPASS;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e069      	b.n	80038cc <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80037fe:	f001 fcd7 	bl	80051b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003802:	2300      	movs	r3, #0
 8003804:	e062      	b.n	80038cc <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800380c:	f107 0310 	add.w	r3, r7, #16
 8003810:	4618      	mov	r0, r3
 8003812:	f000 ff03 	bl	800461c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003816:	2301      	movs	r3, #1
 8003818:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800381a:	f001 fcc9 	bl	80051b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800381e:	f000 fb2b 	bl	8003e78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003822:	f001 fc93 	bl	800514c <vPortEnterCritical>
 8003826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003828:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800382c:	b25b      	sxtb	r3, r3
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003832:	d103      	bne.n	800383c <xQueueReceive+0x128>
 8003834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800383c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003842:	b25b      	sxtb	r3, r3
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d103      	bne.n	8003852 <xQueueReceive+0x13e>
 800384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003852:	f001 fcad 	bl	80051b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003856:	1d3a      	adds	r2, r7, #4
 8003858:	f107 0310 	add.w	r3, r7, #16
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fef2 	bl	8004648 <xTaskCheckForTimeOut>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d123      	bne.n	80038b2 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800386a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800386c:	f000 f8ac 	bl	80039c8 <prvIsQueueEmpty>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d017      	beq.n	80038a6 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003878:	3324      	adds	r3, #36	@ 0x24
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fd88 	bl	8004394 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003884:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003886:	f000 f84d 	bl	8003924 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800388a:	f000 fb03 	bl	8003e94 <xTaskResumeAll>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d189      	bne.n	80037a8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8003894:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <xQueueReceive+0x1c0>)
 8003896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	e780      	b.n	80037a8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80038a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038a8:	f000 f83c 	bl	8003924 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80038ac:	f000 faf2 	bl	8003e94 <xTaskResumeAll>
 80038b0:	e77a      	b.n	80037a8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80038b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038b4:	f000 f836 	bl	8003924 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80038b8:	f000 faec 	bl	8003e94 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038be:	f000 f883 	bl	80039c8 <prvIsQueueEmpty>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f43f af6f 	beq.w	80037a8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80038ca:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3730      	adds	r7, #48	@ 0x30
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d018      	beq.n	800391c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	441a      	add	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	429a      	cmp	r2, r3
 8003902:	d303      	bcc.n	800390c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68d9      	ldr	r1, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	461a      	mov	r2, r3
 8003916:	6838      	ldr	r0, [r7, #0]
 8003918:	f001 fefc 	bl	8005714 <memcpy>
    }
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800392c:	f001 fc0e 	bl	800514c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003936:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003938:	e011      	b.n	800395e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d012      	beq.n	8003968 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3324      	adds	r3, #36	@ 0x24
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fd90 	bl	800446c <xTaskRemoveFromEventList>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003952:	f000 fee1 	bl	8004718 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	3b01      	subs	r3, #1
 800395a:	b2db      	uxtb	r3, r3
 800395c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800395e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	dce9      	bgt.n	800393a <prvUnlockQueue+0x16>
 8003966:	e000      	b.n	800396a <prvUnlockQueue+0x46>
                    break;
 8003968:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	22ff      	movs	r2, #255	@ 0xff
 800396e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003972:	f001 fc1d 	bl	80051b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003976:	f001 fbe9 	bl	800514c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003980:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003982:	e011      	b.n	80039a8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d012      	beq.n	80039b2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3310      	adds	r3, #16
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fd6b 	bl	800446c <xTaskRemoveFromEventList>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800399c:	f000 febc 	bl	8004718 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80039a0:	7bbb      	ldrb	r3, [r7, #14]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80039a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	dce9      	bgt.n	8003984 <prvUnlockQueue+0x60>
 80039b0:	e000      	b.n	80039b4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80039b2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	22ff      	movs	r2, #255	@ 0xff
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80039bc:	f001 fbf8 	bl	80051b0 <vPortExitCritical>
}
 80039c0:	bf00      	nop
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80039d0:	f001 fbbc 	bl	800514c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80039dc:	2301      	movs	r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e001      	b.n	80039e6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80039e6:	f001 fbe3 	bl	80051b0 <vPortExitCritical>

    return xReturn;
 80039ea:	68fb      	ldr	r3, [r7, #12]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	60fb      	str	r3, [r7, #12]
    }
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	e7fd      	b.n	8003a1c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d024      	beq.n	8003a70 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e01e      	b.n	8003a6a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003a2c:	4a18      	ldr	r2, [pc, #96]	@ (8003a90 <vQueueAddToRegistry+0x9c>)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d105      	bne.n	8003a48 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <vQueueAddToRegistry+0x9c>)
 8003a42:	4413      	add	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
                    break;
 8003a46:	e013      	b.n	8003a70 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <vQueueAddToRegistry+0x70>
 8003a4e:	4a10      	ldr	r2, [pc, #64]	@ (8003a90 <vQueueAddToRegistry+0x9c>)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d104      	bne.n	8003a64 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a90 <vQueueAddToRegistry+0x9c>)
 8003a60:	4413      	add	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3301      	adds	r3, #1
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b07      	cmp	r3, #7
 8003a6e:	d9dd      	bls.n	8003a2c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000104 	.word	0x20000104

08003a94 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003aa4:	f001 fb52 	bl	800514c <vPortEnterCritical>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003aae:	b25b      	sxtb	r3, r3
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d103      	bne.n	8003abe <vQueueWaitForMessageRestricted+0x2a>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ac4:	b25b      	sxtb	r3, r3
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aca:	d103      	bne.n	8003ad4 <vQueueWaitForMessageRestricted+0x40>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ad4:	f001 fb6c 	bl	80051b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3324      	adds	r3, #36	@ 0x24
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fc79 	bl	80043e0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003aee:	6978      	ldr	r0, [r7, #20]
 8003af0:	f7ff ff18 	bl	8003924 <prvUnlockQueue>
    }
 8003af4:	bf00      	nop
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	@ 0x30
 8003b00:	af04      	add	r7, sp, #16
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fc03 	bl	800531c <pvPortMalloc>
 8003b16:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d013      	beq.n	8003b46 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b1e:	2058      	movs	r0, #88	@ 0x58
 8003b20:	f001 fbfc 	bl	800531c <pvPortMalloc>
 8003b24:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003b2c:	2258      	movs	r2, #88	@ 0x58
 8003b2e:	2100      	movs	r1, #0
 8003b30:	69f8      	ldr	r0, [r7, #28]
 8003b32:	f001 fdc3 	bl	80056bc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b3c:	e005      	b.n	8003b4a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003b3e:	6978      	ldr	r0, [r7, #20]
 8003b40:	f001 fca8 	bl	8005494 <vPortFree>
 8003b44:	e001      	b.n	8003b4a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	2300      	movs	r3, #0
 8003b54:	9303      	str	r3, [sp, #12]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	9302      	str	r3, [sp, #8]
 8003b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f80e 	bl	8003b88 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003b6c:	69f8      	ldr	r0, [r7, #28]
 8003b6e:	f000 f89b 	bl	8003ca8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003b72:	2301      	movs	r3, #1
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	e002      	b.n	8003b7e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003b7e:	69bb      	ldr	r3, [r7, #24]
    }
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	21a5      	movs	r1, #165	@ 0xa5
 8003ba2:	f001 fd8b 	bl	80056bc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f023 0307 	bic.w	r3, r3, #7
 8003bbe:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	617b      	str	r3, [r7, #20]
    }
 8003bdc:	bf00      	nop
 8003bde:	bf00      	nop
 8003be0:	e7fd      	b.n	8003bde <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01e      	beq.n	8003c26 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	e012      	b.n	8003c14 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	7819      	ldrb	r1, [r3, #0]
 8003bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3334      	adds	r3, #52	@ 0x34
 8003bfe:	460a      	mov	r2, r1
 8003c00:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3301      	adds	r3, #1
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b09      	cmp	r3, #9
 8003c18:	d9e9      	bls.n	8003bee <prvInitialiseNewTask+0x66>
 8003c1a:	e000      	b.n	8003c1e <prvInitialiseNewTask+0x96>
            {
                break;
 8003c1c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d90b      	bls.n	8003c44 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	613b      	str	r3, [r7, #16]
    }
 8003c3e:	bf00      	nop
 8003c40:	bf00      	nop
 8003c42:	e7fd      	b.n	8003c40 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d901      	bls.n	8003c4e <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c4a:	2304      	movs	r3, #4
 8003c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c52:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c58:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fbe4 	bl	800342c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c66:	3318      	adds	r3, #24
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fbdf 	bl	800342c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c72:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	f1c3 0205 	rsb	r2, r3, #5
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c82:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	68f9      	ldr	r1, [r7, #12]
 8003c88:	69b8      	ldr	r0, [r7, #24]
 8003c8a:	f001 f92d 	bl	8004ee8 <pxPortInitialiseStack>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c9e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ca0:	bf00      	nop
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003cb0:	f001 fa4c 	bl	800514c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003cb4:	4b40      	ldr	r3, [pc, #256]	@ (8003db8 <prvAddNewTaskToReadyList+0x110>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	4a3f      	ldr	r2, [pc, #252]	@ (8003db8 <prvAddNewTaskToReadyList+0x110>)
 8003cbc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8003dbc <prvAddNewTaskToReadyList+0x114>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003cc6:	4a3d      	ldr	r2, [pc, #244]	@ (8003dbc <prvAddNewTaskToReadyList+0x114>)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8003db8 <prvAddNewTaskToReadyList+0x110>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d110      	bne.n	8003cf6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003cd4:	f000 fd44 	bl	8004760 <prvInitialiseTaskLists>
 8003cd8:	e00d      	b.n	8003cf6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003cda:	4b39      	ldr	r3, [pc, #228]	@ (8003dc0 <prvAddNewTaskToReadyList+0x118>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ce2:	4b36      	ldr	r3, [pc, #216]	@ (8003dbc <prvAddNewTaskToReadyList+0x114>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d802      	bhi.n	8003cf6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003cf0:	4a32      	ldr	r2, [pc, #200]	@ (8003dbc <prvAddNewTaskToReadyList+0x114>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003cf6:	4b33      	ldr	r3, [pc, #204]	@ (8003dc4 <prvAddNewTaskToReadyList+0x11c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	4a31      	ldr	r2, [pc, #196]	@ (8003dc4 <prvAddNewTaskToReadyList+0x11c>)
 8003cfe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d00:	4b30      	ldr	r3, [pc, #192]	@ (8003dc4 <prvAddNewTaskToReadyList+0x11c>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc8 <prvAddNewTaskToReadyList+0x120>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc8 <prvAddNewTaskToReadyList+0x120>)
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1e:	492b      	ldr	r1, [pc, #172]	@ (8003dcc <prvAddNewTaskToReadyList+0x124>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	609a      	str	r2, [r3, #8]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	3204      	adds	r2, #4
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dcc <prvAddNewTaskToReadyList+0x124>)
 8003d5e:	441a      	add	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	615a      	str	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d68:	4918      	ldr	r1, [pc, #96]	@ (8003dcc <prvAddNewTaskToReadyList+0x124>)
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	1c59      	adds	r1, r3, #1
 8003d78:	4814      	ldr	r0, [pc, #80]	@ (8003dcc <prvAddNewTaskToReadyList+0x124>)
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4403      	add	r3, r0
 8003d84:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003d86:	f001 fa13 	bl	80051b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc0 <prvAddNewTaskToReadyList+0x118>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00e      	beq.n	8003db0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d92:	4b0a      	ldr	r3, [pc, #40]	@ (8003dbc <prvAddNewTaskToReadyList+0x114>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d207      	bcs.n	8003db0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003da0:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <prvAddNewTaskToReadyList+0x128>)
 8003da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003db0:	bf00      	nop
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	2000021c 	.word	0x2000021c
 8003dbc:	20000144 	.word	0x20000144
 8003dc0:	20000228 	.word	0x20000228
 8003dc4:	20000238 	.word	0x20000238
 8003dc8:	20000224 	.word	0x20000224
 8003dcc:	20000148 	.word	0x20000148
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003dda:	4b20      	ldr	r3, [pc, #128]	@ (8003e5c <vTaskStartScheduler+0x88>)
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	2282      	movs	r2, #130	@ 0x82
 8003de6:	491e      	ldr	r1, [pc, #120]	@ (8003e60 <vTaskStartScheduler+0x8c>)
 8003de8:	481e      	ldr	r0, [pc, #120]	@ (8003e64 <vTaskStartScheduler+0x90>)
 8003dea:	f7ff fe87 	bl	8003afc <xTaskCreate>
 8003dee:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d102      	bne.n	8003dfc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003df6:	f000 fdeb 	bl	80049d0 <xTimerCreateTimerTask>
 8003dfa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d116      	bne.n	8003e30 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	60bb      	str	r3, [r7, #8]
    }
 8003e14:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003e16:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <vTaskStartScheduler+0x94>)
 8003e18:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003e1e:	4b13      	ldr	r3, [pc, #76]	@ (8003e6c <vTaskStartScheduler+0x98>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e24:	4b12      	ldr	r3, [pc, #72]	@ (8003e70 <vTaskStartScheduler+0x9c>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003e2a:	f001 f8eb 	bl	8005004 <xPortStartScheduler>
 8003e2e:	e00f      	b.n	8003e50 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d10b      	bne.n	8003e50 <vTaskStartScheduler+0x7c>
        __asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	607b      	str	r3, [r7, #4]
    }
 8003e4a:	bf00      	nop
 8003e4c:	bf00      	nop
 8003e4e:	e7fd      	b.n	8003e4c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003e50:	4b08      	ldr	r3, [pc, #32]	@ (8003e74 <vTaskStartScheduler+0xa0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20000240 	.word	0x20000240
 8003e60:	08005784 	.word	0x08005784
 8003e64:	08004731 	.word	0x08004731
 8003e68:	2000023c 	.word	0x2000023c
 8003e6c:	20000228 	.word	0x20000228
 8003e70:	20000220 	.word	0x20000220
 8003e74:	2000000c 	.word	0x2000000c

08003e78 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003e7c:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <vTaskSuspendAll+0x18>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	4a03      	ldr	r2, [pc, #12]	@ (8003e90 <vTaskSuspendAll+0x18>)
 8003e84:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003e86:	bf00      	nop
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	20000244 	.word	0x20000244

08003e94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003ea2:	4b71      	ldr	r3, [pc, #452]	@ (8004068 <xTaskResumeAll+0x1d4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <xTaskResumeAll+0x2e>
        __asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	607b      	str	r3, [r7, #4]
    }
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	e7fd      	b.n	8003ebe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003ec2:	f001 f943 	bl	800514c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003ec6:	4b68      	ldr	r3, [pc, #416]	@ (8004068 <xTaskResumeAll+0x1d4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	4a66      	ldr	r2, [pc, #408]	@ (8004068 <xTaskResumeAll+0x1d4>)
 8003ece:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed0:	4b65      	ldr	r3, [pc, #404]	@ (8004068 <xTaskResumeAll+0x1d4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f040 80c0 	bne.w	800405a <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003eda:	4b64      	ldr	r3, [pc, #400]	@ (800406c <xTaskResumeAll+0x1d8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80bb 	beq.w	800405a <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ee4:	e08a      	b.n	8003ffc <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee6:	4b62      	ldr	r3, [pc, #392]	@ (8004070 <xTaskResumeAll+0x1dc>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	6a12      	ldr	r2, [r2, #32]
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	69d2      	ldr	r2, [r2, #28]
 8003f06:	605a      	str	r2, [r3, #4]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	3318      	adds	r3, #24
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d103      	bne.n	8003f1c <xTaskResumeAll+0x88>
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	6a1a      	ldr	r2, [r3, #32]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	605a      	str	r2, [r3, #4]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	1e5a      	subs	r2, r3, #1
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	68d2      	ldr	r2, [r2, #12]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	6892      	ldr	r2, [r2, #8]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d103      	bne.n	8003f5a <xTaskResumeAll+0xc6>
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	615a      	str	r2, [r3, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	1e5a      	subs	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	2201      	movs	r2, #1
 8003f70:	409a      	lsls	r2, r3
 8003f72:	4b40      	ldr	r3, [pc, #256]	@ (8004074 <xTaskResumeAll+0x1e0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	4a3e      	ldr	r2, [pc, #248]	@ (8004074 <xTaskResumeAll+0x1e0>)
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f80:	493d      	ldr	r1, [pc, #244]	@ (8004078 <xTaskResumeAll+0x1e4>)
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	60da      	str	r2, [r3, #12]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	3204      	adds	r2, #4
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	1d1a      	adds	r2, r3, #4
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	609a      	str	r2, [r3, #8]
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8004078 <xTaskResumeAll+0x1e4>)
 8003fc0:	441a      	add	r2, r3
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	615a      	str	r2, [r3, #20]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fca:	492b      	ldr	r1, [pc, #172]	@ (8004078 <xTaskResumeAll+0x1e4>)
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	1c59      	adds	r1, r3, #1
 8003fda:	4827      	ldr	r0, [pc, #156]	@ (8004078 <xTaskResumeAll+0x1e4>)
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4403      	add	r3, r0
 8003fe6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fec:	4b23      	ldr	r3, [pc, #140]	@ (800407c <xTaskResumeAll+0x1e8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d302      	bcc.n	8003ffc <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8003ff6:	4b22      	ldr	r3, [pc, #136]	@ (8004080 <xTaskResumeAll+0x1ec>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8004070 <xTaskResumeAll+0x1dc>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f47f af70 	bne.w	8003ee6 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800400c:	f000 fc26 	bl	800485c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004010:	4b1c      	ldr	r3, [pc, #112]	@ (8004084 <xTaskResumeAll+0x1f0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d010      	beq.n	800403e <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800401c:	f000 f846 	bl	80040ac <xTaskIncrementTick>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8004026:	4b16      	ldr	r3, [pc, #88]	@ (8004080 <xTaskResumeAll+0x1ec>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	3b01      	subs	r3, #1
 8004030:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f1      	bne.n	800401c <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8004038:	4b12      	ldr	r3, [pc, #72]	@ (8004084 <xTaskResumeAll+0x1f0>)
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800403e:	4b10      	ldr	r3, [pc, #64]	@ (8004080 <xTaskResumeAll+0x1ec>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004046:	2301      	movs	r3, #1
 8004048:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800404a:	4b0f      	ldr	r3, [pc, #60]	@ (8004088 <xTaskResumeAll+0x1f4>)
 800404c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800405a:	f001 f8a9 	bl	80051b0 <vPortExitCritical>

    return xAlreadyYielded;
 800405e:	69bb      	ldr	r3, [r7, #24]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3720      	adds	r7, #32
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20000244 	.word	0x20000244
 800406c:	2000021c 	.word	0x2000021c
 8004070:	200001dc 	.word	0x200001dc
 8004074:	20000224 	.word	0x20000224
 8004078:	20000148 	.word	0x20000148
 800407c:	20000144 	.word	0x20000144
 8004080:	20000230 	.word	0x20000230
 8004084:	2000022c 	.word	0x2000022c
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004092:	4b05      	ldr	r3, [pc, #20]	@ (80040a8 <xTaskGetTickCount+0x1c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004098:	687b      	ldr	r3, [r7, #4]
}
 800409a:	4618      	mov	r0, r3
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	20000220 	.word	0x20000220

080040ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	@ 0x28
 80040b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040b6:	4b7e      	ldr	r3, [pc, #504]	@ (80042b0 <xTaskIncrementTick+0x204>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f040 80ed 	bne.w	800429a <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040c0:	4b7c      	ldr	r3, [pc, #496]	@ (80042b4 <xTaskIncrementTick+0x208>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3301      	adds	r3, #1
 80040c6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80040c8:	4a7a      	ldr	r2, [pc, #488]	@ (80042b4 <xTaskIncrementTick+0x208>)
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d121      	bne.n	8004118 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80040d4:	4b78      	ldr	r3, [pc, #480]	@ (80042b8 <xTaskIncrementTick+0x20c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <xTaskIncrementTick+0x4a>
        __asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	607b      	str	r3, [r7, #4]
    }
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	e7fd      	b.n	80040f2 <xTaskIncrementTick+0x46>
 80040f6:	4b70      	ldr	r3, [pc, #448]	@ (80042b8 <xTaskIncrementTick+0x20c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	4b6f      	ldr	r3, [pc, #444]	@ (80042bc <xTaskIncrementTick+0x210>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a6d      	ldr	r2, [pc, #436]	@ (80042b8 <xTaskIncrementTick+0x20c>)
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	4a6d      	ldr	r2, [pc, #436]	@ (80042bc <xTaskIncrementTick+0x210>)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b6d      	ldr	r3, [pc, #436]	@ (80042c0 <xTaskIncrementTick+0x214>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3301      	adds	r3, #1
 8004110:	4a6b      	ldr	r2, [pc, #428]	@ (80042c0 <xTaskIncrementTick+0x214>)
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	f000 fba2 	bl	800485c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004118:	4b6a      	ldr	r3, [pc, #424]	@ (80042c4 <xTaskIncrementTick+0x218>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6a3a      	ldr	r2, [r7, #32]
 800411e:	429a      	cmp	r2, r3
 8004120:	f0c0 80a6 	bcc.w	8004270 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004124:	4b64      	ldr	r3, [pc, #400]	@ (80042b8 <xTaskIncrementTick+0x20c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d104      	bne.n	8004138 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800412e:	4b65      	ldr	r3, [pc, #404]	@ (80042c4 <xTaskIncrementTick+0x218>)
 8004130:	f04f 32ff 	mov.w	r2, #4294967295
 8004134:	601a      	str	r2, [r3, #0]
                    break;
 8004136:	e09b      	b.n	8004270 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004138:	4b5f      	ldr	r3, [pc, #380]	@ (80042b8 <xTaskIncrementTick+0x20c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004148:	6a3a      	ldr	r2, [r7, #32]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	429a      	cmp	r2, r3
 800414e:	d203      	bcs.n	8004158 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004150:	4a5c      	ldr	r2, [pc, #368]	@ (80042c4 <xTaskIncrementTick+0x218>)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004156:	e08b      	b.n	8004270 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	68d2      	ldr	r2, [r2, #12]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	6892      	ldr	r2, [r2, #8]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	3304      	adds	r3, #4
 800417a:	429a      	cmp	r2, r3
 800417c:	d103      	bne.n	8004186 <xTaskIncrementTick+0xda>
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2200      	movs	r2, #0
 800418a:	615a      	str	r2, [r3, #20]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	1e5a      	subs	r2, r3, #1
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419a:	2b00      	cmp	r3, #0
 800419c:	d01e      	beq.n	80041dc <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	6a12      	ldr	r2, [r2, #32]
 80041ac:	609a      	str	r2, [r3, #8]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	69d2      	ldr	r2, [r2, #28]
 80041b6:	605a      	str	r2, [r3, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	3318      	adds	r3, #24
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d103      	bne.n	80041cc <xTaskIncrementTick+0x120>
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	6a1a      	ldr	r2, [r3, #32]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2200      	movs	r2, #0
 80041d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	1e5a      	subs	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	2201      	movs	r2, #1
 80041e2:	409a      	lsls	r2, r3
 80041e4:	4b38      	ldr	r3, [pc, #224]	@ (80042c8 <xTaskIncrementTick+0x21c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	4a37      	ldr	r2, [pc, #220]	@ (80042c8 <xTaskIncrementTick+0x21c>)
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f2:	4936      	ldr	r1, [pc, #216]	@ (80042cc <xTaskIncrementTick+0x220>)
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	3304      	adds	r3, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	60da      	str	r2, [r3, #12]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	3204      	adds	r2, #4
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	1d1a      	adds	r2, r3, #4
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	609a      	str	r2, [r3, #8]
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4a26      	ldr	r2, [pc, #152]	@ (80042cc <xTaskIncrementTick+0x220>)
 8004232:	441a      	add	r2, r3
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	615a      	str	r2, [r3, #20]
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423c:	4923      	ldr	r1, [pc, #140]	@ (80042cc <xTaskIncrementTick+0x220>)
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	1c59      	adds	r1, r3, #1
 800424c:	481f      	ldr	r0, [pc, #124]	@ (80042cc <xTaskIncrementTick+0x220>)
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4403      	add	r3, r0
 8004258:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425e:	4b1c      	ldr	r3, [pc, #112]	@ (80042d0 <xTaskIncrementTick+0x224>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004264:	429a      	cmp	r2, r3
 8004266:	f67f af5d 	bls.w	8004124 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800426a:	2301      	movs	r3, #1
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800426e:	e759      	b.n	8004124 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004270:	4b17      	ldr	r3, [pc, #92]	@ (80042d0 <xTaskIncrementTick+0x224>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004276:	4915      	ldr	r1, [pc, #84]	@ (80042cc <xTaskIncrementTick+0x220>)
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d901      	bls.n	800428c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8004288:	2301      	movs	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800428c:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <xTaskIncrementTick+0x228>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8004294:	2301      	movs	r3, #1
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24
 8004298:	e004      	b.n	80042a4 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800429a:	4b0f      	ldr	r3, [pc, #60]	@ (80042d8 <xTaskIncrementTick+0x22c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3301      	adds	r3, #1
 80042a0:	4a0d      	ldr	r2, [pc, #52]	@ (80042d8 <xTaskIncrementTick+0x22c>)
 80042a2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3728      	adds	r7, #40	@ 0x28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000244 	.word	0x20000244
 80042b4:	20000220 	.word	0x20000220
 80042b8:	200001d4 	.word	0x200001d4
 80042bc:	200001d8 	.word	0x200001d8
 80042c0:	20000234 	.word	0x20000234
 80042c4:	2000023c 	.word	0x2000023c
 80042c8:	20000224 	.word	0x20000224
 80042cc:	20000148 	.word	0x20000148
 80042d0:	20000144 	.word	0x20000144
 80042d4:	20000230 	.word	0x20000230
 80042d8:	2000022c 	.word	0x2000022c

080042dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042e2:	4b27      	ldr	r3, [pc, #156]	@ (8004380 <vTaskSwitchContext+0xa4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80042ea:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <vTaskSwitchContext+0xa8>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80042f0:	e040      	b.n	8004374 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80042f2:	4b24      	ldr	r3, [pc, #144]	@ (8004384 <vTaskSwitchContext+0xa8>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042f8:	4b23      	ldr	r3, [pc, #140]	@ (8004388 <vTaskSwitchContext+0xac>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	fab3 f383 	clz	r3, r3
 8004304:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004306:	7afb      	ldrb	r3, [r7, #11]
 8004308:	f1c3 031f 	rsb	r3, r3, #31
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	491f      	ldr	r1, [pc, #124]	@ (800438c <vTaskSwitchContext+0xb0>)
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <vTaskSwitchContext+0x5e>
        __asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	607b      	str	r3, [r7, #4]
    }
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	e7fd      	b.n	8004336 <vTaskSwitchContext+0x5a>
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4a11      	ldr	r2, [pc, #68]	@ (800438c <vTaskSwitchContext+0xb0>)
 8004346:	4413      	add	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	3308      	adds	r3, #8
 800435c:	429a      	cmp	r2, r3
 800435e:	d104      	bne.n	800436a <vTaskSwitchContext+0x8e>
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a07      	ldr	r2, [pc, #28]	@ (8004390 <vTaskSwitchContext+0xb4>)
 8004372:	6013      	str	r3, [r2, #0]
}
 8004374:	bf00      	nop
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	20000244 	.word	0x20000244
 8004384:	20000230 	.word	0x20000230
 8004388:	20000224 	.word	0x20000224
 800438c:	20000148 	.word	0x20000148
 8004390:	20000144 	.word	0x20000144

08004394 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	60fb      	str	r3, [r7, #12]
    }
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043bc:	4b07      	ldr	r3, [pc, #28]	@ (80043dc <vTaskPlaceOnEventList+0x48>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3318      	adds	r3, #24
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff f83e 	bl	8003446 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043ca:	2101      	movs	r1, #1
 80043cc:	6838      	ldr	r0, [r7, #0]
 80043ce:	f000 fa7f 	bl	80048d0 <prvAddCurrentTaskToDelayedList>
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000144 	.word	0x20000144

080043e0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	613b      	str	r3, [r7, #16]
    }
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	e7fd      	b.n	8004406 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	4b15      	ldr	r3, [pc, #84]	@ (8004468 <vTaskPlaceOnEventListRestricted+0x88>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	61da      	str	r2, [r3, #28]
 8004418:	4b13      	ldr	r3, [pc, #76]	@ (8004468 <vTaskPlaceOnEventListRestricted+0x88>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	6892      	ldr	r2, [r2, #8]
 8004420:	621a      	str	r2, [r3, #32]
 8004422:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <vTaskPlaceOnEventListRestricted+0x88>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	3218      	adds	r2, #24
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	4b0e      	ldr	r3, [pc, #56]	@ (8004468 <vTaskPlaceOnEventListRestricted+0x88>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f103 0218 	add.w	r2, r3, #24
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	609a      	str	r2, [r3, #8]
 800443a:	4b0b      	ldr	r3, [pc, #44]	@ (8004468 <vTaskPlaceOnEventListRestricted+0x88>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	629a      	str	r2, [r3, #40]	@ 0x28
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	68b8      	ldr	r0, [r7, #8]
 800445c:	f000 fa38 	bl	80048d0 <prvAddCurrentTaskToDelayedList>
    }
 8004460:	bf00      	nop
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20000144 	.word	0x20000144

0800446c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800446c:	b480      	push	{r7}
 800446e:	b08b      	sub	sp, #44	@ 0x2c
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	60fb      	str	r3, [r7, #12]
    }
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	e7fd      	b.n	8004496 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	6a12      	ldr	r2, [r2, #32]
 80044a8:	609a      	str	r2, [r3, #8]
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	6a3a      	ldr	r2, [r7, #32]
 80044b0:	69d2      	ldr	r2, [r2, #28]
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	3318      	adds	r3, #24
 80044bc:	429a      	cmp	r2, r3
 80044be:	d103      	bne.n	80044c8 <xTaskRemoveFromEventList+0x5c>
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	605a      	str	r2, [r3, #4]
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	2200      	movs	r2, #0
 80044cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	1e5a      	subs	r2, r3, #1
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044d8:	4b4a      	ldr	r3, [pc, #296]	@ (8004604 <xTaskRemoveFromEventList+0x198>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d15e      	bne.n	800459e <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	6a3a      	ldr	r2, [r7, #32]
 80044ec:	68d2      	ldr	r2, [r2, #12]
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	6a3a      	ldr	r2, [r7, #32]
 80044f6:	6892      	ldr	r2, [r2, #8]
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	3304      	adds	r3, #4
 8004502:	429a      	cmp	r2, r3
 8004504:	d103      	bne.n	800450e <xTaskRemoveFromEventList+0xa2>
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	2200      	movs	r2, #0
 8004512:	615a      	str	r2, [r3, #20]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	1e5a      	subs	r2, r3, #1
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004522:	2201      	movs	r2, #1
 8004524:	409a      	lsls	r2, r3
 8004526:	4b38      	ldr	r3, [pc, #224]	@ (8004608 <xTaskRemoveFromEventList+0x19c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4313      	orrs	r3, r2
 800452c:	4a36      	ldr	r2, [pc, #216]	@ (8004608 <xTaskRemoveFromEventList+0x19c>)
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004534:	4935      	ldr	r1, [pc, #212]	@ (800460c <xTaskRemoveFromEventList+0x1a0>)
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	3304      	adds	r3, #4
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	60da      	str	r2, [r3, #12]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	3204      	adds	r2, #4
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	609a      	str	r2, [r3, #8]
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4a26      	ldr	r2, [pc, #152]	@ (800460c <xTaskRemoveFromEventList+0x1a0>)
 8004574:	441a      	add	r2, r3
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	615a      	str	r2, [r3, #20]
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800457e:	4923      	ldr	r1, [pc, #140]	@ (800460c <xTaskRemoveFromEventList+0x1a0>)
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	1c59      	adds	r1, r3, #1
 800458e:	481f      	ldr	r0, [pc, #124]	@ (800460c <xTaskRemoveFromEventList+0x1a0>)
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4403      	add	r3, r0
 800459a:	6019      	str	r1, [r3, #0]
 800459c:	e01b      	b.n	80045d6 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800459e:	4b1c      	ldr	r3, [pc, #112]	@ (8004610 <xTaskRemoveFromEventList+0x1a4>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	61da      	str	r2, [r3, #28]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	621a      	str	r2, [r3, #32]
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	6a3a      	ldr	r2, [r7, #32]
 80045b8:	3218      	adds	r2, #24
 80045ba:	605a      	str	r2, [r3, #4]
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	f103 0218 	add.w	r2, r3, #24
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	609a      	str	r2, [r3, #8]
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	4a11      	ldr	r2, [pc, #68]	@ (8004610 <xTaskRemoveFromEventList+0x1a4>)
 80045ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80045cc:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <xTaskRemoveFromEventList+0x1a4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	4a0f      	ldr	r2, [pc, #60]	@ (8004610 <xTaskRemoveFromEventList+0x1a4>)
 80045d4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045da:	4b0e      	ldr	r3, [pc, #56]	@ (8004614 <xTaskRemoveFromEventList+0x1a8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d905      	bls.n	80045f0 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80045e4:	2301      	movs	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80045e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <xTaskRemoveFromEventList+0x1ac>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	e001      	b.n	80045f4 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 80045f0:	2300      	movs	r3, #0
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	372c      	adds	r7, #44	@ 0x2c
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000244 	.word	0x20000244
 8004608:	20000224 	.word	0x20000224
 800460c:	20000148 	.word	0x20000148
 8004610:	200001dc 	.word	0x200001dc
 8004614:	20000144 	.word	0x20000144
 8004618:	20000230 	.word	0x20000230

0800461c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004624:	4b06      	ldr	r3, [pc, #24]	@ (8004640 <vTaskInternalSetTimeOutState+0x24>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800462c:	4b05      	ldr	r3, [pc, #20]	@ (8004644 <vTaskInternalSetTimeOutState+0x28>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	605a      	str	r2, [r3, #4]
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	20000234 	.word	0x20000234
 8004644:	20000220 	.word	0x20000220

08004648 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10b      	bne.n	8004670 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	613b      	str	r3, [r7, #16]
    }
 800466a:	bf00      	nop
 800466c:	bf00      	nop
 800466e:	e7fd      	b.n	800466c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	60fb      	str	r3, [r7, #12]
    }
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800468e:	f000 fd5d 	bl	800514c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004692:	4b1f      	ldr	r3, [pc, #124]	@ (8004710 <xTaskCheckForTimeOut+0xc8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d102      	bne.n	80046b2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	e026      	b.n	8004700 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4b17      	ldr	r3, [pc, #92]	@ (8004714 <xTaskCheckForTimeOut+0xcc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d00a      	beq.n	80046d4 <xTaskCheckForTimeOut+0x8c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d305      	bcc.n	80046d4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80046c8:	2301      	movs	r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e015      	b.n	8004700 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d20b      	bcs.n	80046f6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	1ad2      	subs	r2, r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff ff96 	bl	800461c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	e004      	b.n	8004700 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80046fc:	2301      	movs	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004700:	f000 fd56 	bl	80051b0 <vPortExitCritical>

    return xReturn;
 8004704:	69fb      	ldr	r3, [r7, #28]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000220 	.word	0x20000220
 8004714:	20000234 	.word	0x20000234

08004718 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800471c:	4b03      	ldr	r3, [pc, #12]	@ (800472c <vTaskMissedYield+0x14>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]
}
 8004722:	bf00      	nop
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	20000230 	.word	0x20000230

08004730 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004738:	f000 f852 	bl	80047e0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800473c:	4b06      	ldr	r3, [pc, #24]	@ (8004758 <prvIdleTask+0x28>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d9f9      	bls.n	8004738 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004744:	4b05      	ldr	r3, [pc, #20]	@ (800475c <prvIdleTask+0x2c>)
 8004746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004754:	e7f0      	b.n	8004738 <prvIdleTask+0x8>
 8004756:	bf00      	nop
 8004758:	20000148 	.word	0x20000148
 800475c:	e000ed04 	.word	0xe000ed04

08004760 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004766:	2300      	movs	r3, #0
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	e00c      	b.n	8004786 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4a12      	ldr	r2, [pc, #72]	@ (80047c0 <prvInitialiseTaskLists+0x60>)
 8004778:	4413      	add	r3, r2
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fe36 	bl	80033ec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3301      	adds	r3, #1
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b04      	cmp	r3, #4
 800478a:	d9ef      	bls.n	800476c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800478c:	480d      	ldr	r0, [pc, #52]	@ (80047c4 <prvInitialiseTaskLists+0x64>)
 800478e:	f7fe fe2d 	bl	80033ec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004792:	480d      	ldr	r0, [pc, #52]	@ (80047c8 <prvInitialiseTaskLists+0x68>)
 8004794:	f7fe fe2a 	bl	80033ec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004798:	480c      	ldr	r0, [pc, #48]	@ (80047cc <prvInitialiseTaskLists+0x6c>)
 800479a:	f7fe fe27 	bl	80033ec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800479e:	480c      	ldr	r0, [pc, #48]	@ (80047d0 <prvInitialiseTaskLists+0x70>)
 80047a0:	f7fe fe24 	bl	80033ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80047a4:	480b      	ldr	r0, [pc, #44]	@ (80047d4 <prvInitialiseTaskLists+0x74>)
 80047a6:	f7fe fe21 	bl	80033ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <prvInitialiseTaskLists+0x78>)
 80047ac:	4a05      	ldr	r2, [pc, #20]	@ (80047c4 <prvInitialiseTaskLists+0x64>)
 80047ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047b0:	4b0a      	ldr	r3, [pc, #40]	@ (80047dc <prvInitialiseTaskLists+0x7c>)
 80047b2:	4a05      	ldr	r2, [pc, #20]	@ (80047c8 <prvInitialiseTaskLists+0x68>)
 80047b4:	601a      	str	r2, [r3, #0]
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000148 	.word	0x20000148
 80047c4:	200001ac 	.word	0x200001ac
 80047c8:	200001c0 	.word	0x200001c0
 80047cc:	200001dc 	.word	0x200001dc
 80047d0:	200001f0 	.word	0x200001f0
 80047d4:	20000208 	.word	0x20000208
 80047d8:	200001d4 	.word	0x200001d4
 80047dc:	200001d8 	.word	0x200001d8

080047e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047e6:	e019      	b.n	800481c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80047e8:	f000 fcb0 	bl	800514c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ec:	4b10      	ldr	r3, [pc, #64]	@ (8004830 <prvCheckTasksWaitingTermination+0x50>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3304      	adds	r3, #4
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fe fe5d 	bl	80034b8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80047fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004834 <prvCheckTasksWaitingTermination+0x54>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3b01      	subs	r3, #1
 8004804:	4a0b      	ldr	r2, [pc, #44]	@ (8004834 <prvCheckTasksWaitingTermination+0x54>)
 8004806:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004808:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <prvCheckTasksWaitingTermination+0x58>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3b01      	subs	r3, #1
 800480e:	4a0a      	ldr	r2, [pc, #40]	@ (8004838 <prvCheckTasksWaitingTermination+0x58>)
 8004810:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004812:	f000 fccd 	bl	80051b0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f810 	bl	800483c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800481c:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <prvCheckTasksWaitingTermination+0x58>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e1      	bne.n	80047e8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	200001f0 	.word	0x200001f0
 8004834:	2000021c 	.word	0x2000021c
 8004838:	20000204 	.word	0x20000204

0800483c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fe23 	bl	8005494 <vPortFree>
            vPortFree( pxTCB );
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fe20 	bl	8005494 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004860:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <prvResetNextTaskUnblockTime+0x30>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800486a:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <prvResetNextTaskUnblockTime+0x34>)
 800486c:	f04f 32ff 	mov.w	r2, #4294967295
 8004870:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004872:	e005      	b.n	8004880 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004874:	4b05      	ldr	r3, [pc, #20]	@ (800488c <prvResetNextTaskUnblockTime+0x30>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a04      	ldr	r2, [pc, #16]	@ (8004890 <prvResetNextTaskUnblockTime+0x34>)
 800487e:	6013      	str	r3, [r2, #0]
}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	200001d4 	.word	0x200001d4
 8004890:	2000023c 	.word	0x2000023c

08004894 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800489a:	4b0b      	ldr	r3, [pc, #44]	@ (80048c8 <xTaskGetSchedulerState+0x34>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d102      	bne.n	80048a8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80048a2:	2301      	movs	r3, #1
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	e008      	b.n	80048ba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a8:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <xTaskGetSchedulerState+0x38>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80048b0:	2302      	movs	r3, #2
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	e001      	b.n	80048ba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80048b6:	2300      	movs	r3, #0
 80048b8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80048ba:	687b      	ldr	r3, [r7, #4]
    }
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	20000228 	.word	0x20000228
 80048cc:	20000244 	.word	0x20000244

080048d0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80048da:	4b36      	ldr	r3, [pc, #216]	@ (80049b4 <prvAddCurrentTaskToDelayedList+0xe4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048e0:	4b35      	ldr	r3, [pc, #212]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe fde6 	bl	80034b8 <uxListRemove>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80048f2:	4b31      	ldr	r3, [pc, #196]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f8:	2201      	movs	r2, #1
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43da      	mvns	r2, r3
 8004900:	4b2e      	ldr	r3, [pc, #184]	@ (80049bc <prvAddCurrentTaskToDelayedList+0xec>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4013      	ands	r3, r2
 8004906:	4a2d      	ldr	r2, [pc, #180]	@ (80049bc <prvAddCurrentTaskToDelayedList+0xec>)
 8004908:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d124      	bne.n	800495c <prvAddCurrentTaskToDelayedList+0x8c>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d021      	beq.n	800495c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004918:	4b29      	ldr	r3, [pc, #164]	@ (80049c0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	4b26      	ldr	r3, [pc, #152]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	609a      	str	r2, [r3, #8]
 8004926:	4b24      	ldr	r3, [pc, #144]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	6892      	ldr	r2, [r2, #8]
 800492e:	60da      	str	r2, [r3, #12]
 8004930:	4b21      	ldr	r3, [pc, #132]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	3204      	adds	r2, #4
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	4b1e      	ldr	r3, [pc, #120]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	1d1a      	adds	r2, r3, #4
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	609a      	str	r2, [r3, #8]
 8004946:	4b1c      	ldr	r3, [pc, #112]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1d      	ldr	r2, [pc, #116]	@ (80049c0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800494c:	615a      	str	r2, [r3, #20]
 800494e:	4b1c      	ldr	r3, [pc, #112]	@ (80049c0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	4a1a      	ldr	r2, [pc, #104]	@ (80049c0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800495a:	e026      	b.n	80049aa <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4413      	add	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004964:	4b14      	ldr	r3, [pc, #80]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	429a      	cmp	r2, r3
 8004972:	d209      	bcs.n	8004988 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004974:	4b13      	ldr	r3, [pc, #76]	@ (80049c4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	4b0f      	ldr	r3, [pc, #60]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3304      	adds	r3, #4
 800497e:	4619      	mov	r1, r3
 8004980:	4610      	mov	r0, r2
 8004982:	f7fe fd60 	bl	8003446 <vListInsert>
}
 8004986:	e010      	b.n	80049aa <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004988:	4b0f      	ldr	r3, [pc, #60]	@ (80049c8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b0a      	ldr	r3, [pc, #40]	@ (80049b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fe fd56 	bl	8003446 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800499a:	4b0c      	ldr	r3, [pc, #48]	@ (80049cc <prvAddCurrentTaskToDelayedList+0xfc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d202      	bcs.n	80049aa <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80049a4:	4a09      	ldr	r2, [pc, #36]	@ (80049cc <prvAddCurrentTaskToDelayedList+0xfc>)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6013      	str	r3, [r2, #0]
}
 80049aa:	bf00      	nop
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000220 	.word	0x20000220
 80049b8:	20000144 	.word	0x20000144
 80049bc:	20000224 	.word	0x20000224
 80049c0:	20000208 	.word	0x20000208
 80049c4:	200001d8 	.word	0x200001d8
 80049c8:	200001d4 	.word	0x200001d4
 80049cc:	2000023c 	.word	0x2000023c

080049d0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80049da:	f000 fa4f 	bl	8004e7c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80049de:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <xTimerCreateTimerTask+0x58>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00b      	beq.n	80049fe <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80049e6:	4b11      	ldr	r3, [pc, #68]	@ (8004a2c <xTimerCreateTimerTask+0x5c>)
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	2302      	movs	r3, #2
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2300      	movs	r3, #0
 80049f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80049f4:	490e      	ldr	r1, [pc, #56]	@ (8004a30 <xTimerCreateTimerTask+0x60>)
 80049f6:	480f      	ldr	r0, [pc, #60]	@ (8004a34 <xTimerCreateTimerTask+0x64>)
 80049f8:	f7ff f880 	bl	8003afc <xTaskCreate>
 80049fc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	603b      	str	r3, [r7, #0]
    }
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
 8004a1a:	e7fd      	b.n	8004a18 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004a1c:	687b      	ldr	r3, [r7, #4]
    }
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000278 	.word	0x20000278
 8004a2c:	2000027c 	.word	0x2000027c
 8004a30:	0800578c 	.word	0x0800578c
 8004a34:	08004add 	.word	0x08004add

08004a38 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004a44:	e008      	b.n	8004a58 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	699a      	ldr	r2, [r3, #24]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	18d1      	adds	r1, r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f8df 	bl	8004c28 <prvInsertTimerInActiveList>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1ea      	bne.n	8004a46 <prvReloadTimer+0xe>
        }
    }
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a86:	4b14      	ldr	r3, [pc, #80]	@ (8004ad8 <prvProcessExpiredTimer+0x5c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fe fd0f 	bl	80034b8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff ffc3 	bl	8004a38 <prvReloadTimer>
 8004ab2:	e008      	b.n	8004ac6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	4798      	blx	r3
    }
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000270 	.word	0x20000270

08004adc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ae4:	f107 0308 	add.w	r3, r7, #8
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 f859 	bl	8004ba0 <prvGetNextExpireTime>
 8004aee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4619      	mov	r1, r3
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f805 	bl	8004b04 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004afa:	f000 f8d7 	bl	8004cac <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004afe:	bf00      	nop
 8004b00:	e7f0      	b.n	8004ae4 <prvTimerTask+0x8>
	...

08004b04 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004b0e:	f7ff f9b3 	bl	8003e78 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b12:	f107 0308 	add.w	r3, r7, #8
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f866 	bl	8004be8 <prvSampleTimeNow>
 8004b1c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d130      	bne.n	8004b86 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <prvProcessTimerOrBlockTask+0x3c>
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d806      	bhi.n	8004b40 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004b32:	f7ff f9af 	bl	8003e94 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b36:	68f9      	ldr	r1, [r7, #12]
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff ff9f 	bl	8004a7c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004b3e:	e024      	b.n	8004b8a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b46:	4b13      	ldr	r3, [pc, #76]	@ (8004b94 <prvProcessTimerOrBlockTask+0x90>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <prvProcessTimerOrBlockTask+0x50>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <prvProcessTimerOrBlockTask+0x52>
 8004b54:	2300      	movs	r3, #0
 8004b56:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b58:	4b0f      	ldr	r3, [pc, #60]	@ (8004b98 <prvProcessTimerOrBlockTask+0x94>)
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	4619      	mov	r1, r3
 8004b66:	f7fe ff95 	bl	8003a94 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004b6a:	f7ff f993 	bl	8003e94 <xTaskResumeAll>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10a      	bne.n	8004b8a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004b74:	4b09      	ldr	r3, [pc, #36]	@ (8004b9c <prvProcessTimerOrBlockTask+0x98>)
 8004b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	f3bf 8f6f 	isb	sy
    }
 8004b84:	e001      	b.n	8004b8a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004b86:	f7ff f985 	bl	8003e94 <xTaskResumeAll>
    }
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000274 	.word	0x20000274
 8004b98:	20000278 	.word	0x20000278
 8004b9c:	e000ed04 	.word	0xe000ed04

08004ba0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8004be4 <prvGetNextExpireTime+0x44>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <prvGetNextExpireTime+0x16>
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	e000      	b.n	8004bb8 <prvGetNextExpireTime+0x18>
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d105      	bne.n	8004bd0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bc4:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <prvGetNextExpireTime+0x44>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	e001      	b.n	8004bd4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
    }
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000270 	.word	0x20000270

08004be8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004bf0:	f7ff fa4c 	bl	800408c <xTaskGetTickCount>
 8004bf4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <prvSampleTimeNow+0x3c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d205      	bcs.n	8004c0c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004c00:	f000 f916 	bl	8004e30 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	e002      	b.n	8004c12 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004c12:	4a04      	ldr	r2, [pc, #16]	@ (8004c24 <prvSampleTimeNow+0x3c>)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004c18:	68fb      	ldr	r3, [r7, #12]
    }
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000280 	.word	0x20000280

08004c28 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d812      	bhi.n	8004c74 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	1ad2      	subs	r2, r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d302      	bcc.n	8004c62 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e01b      	b.n	8004c9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c62:	4b10      	ldr	r3, [pc, #64]	@ (8004ca4 <prvInsertTimerInActiveList+0x7c>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f7fe fbea 	bl	8003446 <vListInsert>
 8004c72:	e012      	b.n	8004c9a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d206      	bcs.n	8004c8a <prvInsertTimerInActiveList+0x62>
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d302      	bcc.n	8004c8a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004c84:	2301      	movs	r3, #1
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	e007      	b.n	8004c9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ca8 <prvInsertTimerInActiveList+0x80>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4619      	mov	r1, r3
 8004c94:	4610      	mov	r0, r2
 8004c96:	f7fe fbd6 	bl	8003446 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004c9a:	697b      	ldr	r3, [r7, #20]
    }
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	20000274 	.word	0x20000274
 8004ca8:	20000270 	.word	0x20000270

08004cac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cb2:	e0a9      	b.n	8004e08 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f2c0 80a6 	blt.w	8004e08 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fe fbf3 	bl	80034b8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cd2:	1d3b      	adds	r3, r7, #4
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff ff87 	bl	8004be8 <prvSampleTimeNow>
 8004cda:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	f200 808e 	bhi.w	8004e02 <prvProcessReceivedCommands+0x156>
 8004ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cec <prvProcessReceivedCommands+0x40>)
 8004ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d11 	.word	0x08004d11
 8004cf4:	08004d79 	.word	0x08004d79
 8004cf8:	08004d8d 	.word	0x08004d8d
 8004cfc:	08004dd9 	.word	0x08004dd9
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d11 	.word	0x08004d11
 8004d08:	08004d79 	.word	0x08004d79
 8004d0c:	08004d8d 	.word	0x08004d8d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	18d1      	adds	r1, r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	69f8      	ldr	r0, [r7, #28]
 8004d30:	f7ff ff7a 	bl	8004c28 <prvInsertTimerInActiveList>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d065      	beq.n	8004e06 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d009      	beq.n	8004d5c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	4413      	add	r3, r2
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4619      	mov	r1, r3
 8004d54:	69f8      	ldr	r0, [r7, #28]
 8004d56:	f7ff fe6f 	bl	8004a38 <prvReloadTimer>
 8004d5a:	e008      	b.n	8004d6e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	69f8      	ldr	r0, [r7, #28]
 8004d74:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004d76:	e046      	b.n	8004e06 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004d8a:	e03d      	b.n	8004e08 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10b      	bne.n	8004dc4 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	617b      	str	r3, [r7, #20]
    }
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
 8004dc2:	e7fd      	b.n	8004dc0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	699a      	ldr	r2, [r3, #24]
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	18d1      	adds	r1, r2, r3
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	69f8      	ldr	r0, [r7, #28]
 8004dd2:	f7ff ff29 	bl	8004c28 <prvInsertTimerInActiveList>
                        break;
 8004dd6:	e017      	b.n	8004e08 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8004de6:	69f8      	ldr	r0, [r7, #28]
 8004de8:	f000 fb54 	bl	8005494 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004dec:	e00c      	b.n	8004e08 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004e00:	e002      	b.n	8004e08 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <prvProcessReceivedCommands+0x15c>
                        break;
 8004e06:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e08:	4b08      	ldr	r3, [pc, #32]	@ (8004e2c <prvProcessReceivedCommands+0x180>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f107 0108 	add.w	r1, r7, #8
 8004e10:	2200      	movs	r2, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fc7e 	bl	8003714 <xQueueReceive>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f47f af4a 	bne.w	8004cb4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000278 	.word	0x20000278

08004e30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e36:	e009      	b.n	8004e4c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e38:	4b0e      	ldr	r3, [pc, #56]	@ (8004e74 <prvSwitchTimerLists+0x44>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004e42:	f04f 31ff 	mov.w	r1, #4294967295
 8004e46:	6838      	ldr	r0, [r7, #0]
 8004e48:	f7ff fe18 	bl	8004a7c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e4c:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <prvSwitchTimerLists+0x44>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004e56:	4b07      	ldr	r3, [pc, #28]	@ (8004e74 <prvSwitchTimerLists+0x44>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <prvSwitchTimerLists+0x48>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a04      	ldr	r2, [pc, #16]	@ (8004e74 <prvSwitchTimerLists+0x44>)
 8004e62:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004e64:	4a04      	ldr	r2, [pc, #16]	@ (8004e78 <prvSwitchTimerLists+0x48>)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6013      	str	r3, [r2, #0]
    }
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000270 	.word	0x20000270
 8004e78:	20000274 	.word	0x20000274

08004e7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004e80:	f000 f964 	bl	800514c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004e84:	4b12      	ldr	r3, [pc, #72]	@ (8004ed0 <prvCheckForValidListAndQueue+0x54>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d11d      	bne.n	8004ec8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004e8c:	4811      	ldr	r0, [pc, #68]	@ (8004ed4 <prvCheckForValidListAndQueue+0x58>)
 8004e8e:	f7fe faad 	bl	80033ec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004e92:	4811      	ldr	r0, [pc, #68]	@ (8004ed8 <prvCheckForValidListAndQueue+0x5c>)
 8004e94:	f7fe faaa 	bl	80033ec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004e98:	4b10      	ldr	r3, [pc, #64]	@ (8004edc <prvCheckForValidListAndQueue+0x60>)
 8004e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ed4 <prvCheckForValidListAndQueue+0x58>)
 8004e9c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004e9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ee0 <prvCheckForValidListAndQueue+0x64>)
 8004ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed8 <prvCheckForValidListAndQueue+0x5c>)
 8004ea2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	210c      	movs	r1, #12
 8004ea8:	200a      	movs	r0, #10
 8004eaa:	f7fe fbc1 	bl	8003630 <xQueueGenericCreate>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4a07      	ldr	r2, [pc, #28]	@ (8004ed0 <prvCheckForValidListAndQueue+0x54>)
 8004eb2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004eb4:	4b06      	ldr	r3, [pc, #24]	@ (8004ed0 <prvCheckForValidListAndQueue+0x54>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ebc:	4b04      	ldr	r3, [pc, #16]	@ (8004ed0 <prvCheckForValidListAndQueue+0x54>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4908      	ldr	r1, [pc, #32]	@ (8004ee4 <prvCheckForValidListAndQueue+0x68>)
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fd96 	bl	80039f4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004ec8:	f000 f972 	bl	80051b0 <vPortExitCritical>
    }
 8004ecc:	bf00      	nop
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000278 	.word	0x20000278
 8004ed4:	20000248 	.word	0x20000248
 8004ed8:	2000025c 	.word	0x2000025c
 8004edc:	20000270 	.word	0x20000270
 8004ee0:	20000274 	.word	0x20000274
 8004ee4:	08005794 	.word	0x08005794

08004ee8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3b04      	subs	r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3b04      	subs	r3, #4
 8004f06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f023 0201 	bic.w	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3b04      	subs	r3, #4
 8004f16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004f18:	4a0c      	ldr	r2, [pc, #48]	@ (8004f4c <pxPortInitialiseStack+0x64>)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3b14      	subs	r3, #20
 8004f22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3b04      	subs	r3, #4
 8004f2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f06f 0202 	mvn.w	r2, #2
 8004f36:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3b20      	subs	r3, #32
 8004f3c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	08004f51 	.word	0x08004f51

08004f50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004f5a:	4b13      	ldr	r3, [pc, #76]	@ (8004fa8 <prvTaskExitError+0x58>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d00b      	beq.n	8004f7c <prvTaskExitError+0x2c>
        __asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	60fb      	str	r3, [r7, #12]
    }
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	e7fd      	b.n	8004f78 <prvTaskExitError+0x28>
        __asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	60bb      	str	r3, [r7, #8]
    }
 8004f8e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004f90:	bf00      	nop
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0fc      	beq.n	8004f92 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000010 	.word	0x20000010
 8004fac:	00000000 	.word	0x00000000

08004fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004fb0:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <pxCurrentTCBConst2>)
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	6808      	ldr	r0, [r1, #0]
 8004fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	f380 8809 	msr	PSP, r0
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f04f 0000 	mov.w	r0, #0
 8004fc6:	f380 8811 	msr	BASEPRI, r0
 8004fca:	4770      	bx	lr
 8004fcc:	f3af 8000 	nop.w

08004fd0 <pxCurrentTCBConst2>:
 8004fd0:	20000144 	.word	0x20000144
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004fd8:	4808      	ldr	r0, [pc, #32]	@ (8004ffc <prvPortStartFirstTask+0x24>)
 8004fda:	6800      	ldr	r0, [r0, #0]
 8004fdc:	6800      	ldr	r0, [r0, #0]
 8004fde:	f380 8808 	msr	MSP, r0
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f380 8814 	msr	CONTROL, r0
 8004fea:	b662      	cpsie	i
 8004fec:	b661      	cpsie	f
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	df00      	svc	0
 8004ff8:	bf00      	nop
 8004ffa:	0000      	.short	0x0000
 8004ffc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop

08005004 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800500a:	4b47      	ldr	r3, [pc, #284]	@ (8005128 <xPortStartScheduler+0x124>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a47      	ldr	r2, [pc, #284]	@ (800512c <xPortStartScheduler+0x128>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d10b      	bne.n	800502c <xPortStartScheduler+0x28>
        __asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	613b      	str	r3, [r7, #16]
    }
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800502c:	4b3e      	ldr	r3, [pc, #248]	@ (8005128 <xPortStartScheduler+0x124>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3f      	ldr	r2, [pc, #252]	@ (8005130 <xPortStartScheduler+0x12c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d10b      	bne.n	800504e <xPortStartScheduler+0x4a>
        __asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	60fb      	str	r3, [r7, #12]
    }
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800504e:	4b39      	ldr	r3, [pc, #228]	@ (8005134 <xPortStartScheduler+0x130>)
 8005050:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	22ff      	movs	r2, #255	@ 0xff
 800505e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005070:	b2da      	uxtb	r2, r3
 8005072:	4b31      	ldr	r3, [pc, #196]	@ (8005138 <xPortStartScheduler+0x134>)
 8005074:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005076:	4b31      	ldr	r3, [pc, #196]	@ (800513c <xPortStartScheduler+0x138>)
 8005078:	2207      	movs	r2, #7
 800507a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800507c:	e009      	b.n	8005092 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800507e:	4b2f      	ldr	r3, [pc, #188]	@ (800513c <xPortStartScheduler+0x138>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3b01      	subs	r3, #1
 8005084:	4a2d      	ldr	r2, [pc, #180]	@ (800513c <xPortStartScheduler+0x138>)
 8005086:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	b2db      	uxtb	r3, r3
 8005090:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509a:	2b80      	cmp	r3, #128	@ 0x80
 800509c:	d0ef      	beq.n	800507e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800509e:	4b27      	ldr	r3, [pc, #156]	@ (800513c <xPortStartScheduler+0x138>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f1c3 0307 	rsb	r3, r3, #7
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d00b      	beq.n	80050c2 <xPortStartScheduler+0xbe>
        __asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	60bb      	str	r3, [r7, #8]
    }
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050c2:	4b1e      	ldr	r3, [pc, #120]	@ (800513c <xPortStartScheduler+0x138>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	4a1c      	ldr	r2, [pc, #112]	@ (800513c <xPortStartScheduler+0x138>)
 80050ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050cc:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <xPortStartScheduler+0x138>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050d4:	4a19      	ldr	r2, [pc, #100]	@ (800513c <xPortStartScheduler+0x138>)
 80050d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80050e0:	4b17      	ldr	r3, [pc, #92]	@ (8005140 <xPortStartScheduler+0x13c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a16      	ldr	r2, [pc, #88]	@ (8005140 <xPortStartScheduler+0x13c>)
 80050e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80050ec:	4b14      	ldr	r3, [pc, #80]	@ (8005140 <xPortStartScheduler+0x13c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a13      	ldr	r2, [pc, #76]	@ (8005140 <xPortStartScheduler+0x13c>)
 80050f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80050f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80050f8:	f000 f8e0 	bl	80052bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80050fc:	4b11      	ldr	r3, [pc, #68]	@ (8005144 <xPortStartScheduler+0x140>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005102:	f000 f8ff 	bl	8005304 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005106:	4b10      	ldr	r3, [pc, #64]	@ (8005148 <xPortStartScheduler+0x144>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a0f      	ldr	r2, [pc, #60]	@ (8005148 <xPortStartScheduler+0x144>)
 800510c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005110:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005112:	f7ff ff61 	bl	8004fd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005116:	f7ff f8e1 	bl	80042dc <vTaskSwitchContext>
    prvTaskExitError();
 800511a:	f7ff ff19 	bl	8004f50 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	e000ed00 	.word	0xe000ed00
 800512c:	410fc271 	.word	0x410fc271
 8005130:	410fc270 	.word	0x410fc270
 8005134:	e000e400 	.word	0xe000e400
 8005138:	20000284 	.word	0x20000284
 800513c:	20000014 	.word	0x20000014
 8005140:	e000ed20 	.word	0xe000ed20
 8005144:	20000010 	.word	0x20000010
 8005148:	e000ef34 	.word	0xe000ef34

0800514c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
        __asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	607b      	str	r3, [r7, #4]
    }
 8005164:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005166:	4b10      	ldr	r3, [pc, #64]	@ (80051a8 <vPortEnterCritical+0x5c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	4a0e      	ldr	r2, [pc, #56]	@ (80051a8 <vPortEnterCritical+0x5c>)
 800516e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005170:	4b0d      	ldr	r3, [pc, #52]	@ (80051a8 <vPortEnterCritical+0x5c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d110      	bne.n	800519a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005178:	4b0c      	ldr	r3, [pc, #48]	@ (80051ac <vPortEnterCritical+0x60>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <vPortEnterCritical+0x4e>
        __asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	603b      	str	r3, [r7, #0]
    }
 8005194:	bf00      	nop
 8005196:	bf00      	nop
 8005198:	e7fd      	b.n	8005196 <vPortEnterCritical+0x4a>
    }
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000010 	.word	0x20000010
 80051ac:	e000ed04 	.word	0xe000ed04

080051b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80051b6:	4b12      	ldr	r3, [pc, #72]	@ (8005200 <vPortExitCritical+0x50>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <vPortExitCritical+0x26>
        __asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
    }
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	e7fd      	b.n	80051d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80051d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005200 <vPortExitCritical+0x50>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3b01      	subs	r3, #1
 80051dc:	4a08      	ldr	r2, [pc, #32]	@ (8005200 <vPortExitCritical+0x50>)
 80051de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80051e0:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <vPortExitCritical+0x50>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <vPortExitCritical+0x44>
 80051e8:	2300      	movs	r3, #0
 80051ea:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80051f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	20000010 	.word	0x20000010
	...

08005210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005210:	f3ef 8009 	mrs	r0, PSP
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	4b15      	ldr	r3, [pc, #84]	@ (8005270 <pxCurrentTCBConst>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	f01e 0f10 	tst.w	lr, #16
 8005220:	bf08      	it	eq
 8005222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522a:	6010      	str	r0, [r2, #0]
 800522c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005234:	f380 8811 	msr	BASEPRI, r0
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f7ff f84c 	bl	80042dc <vTaskSwitchContext>
 8005244:	f04f 0000 	mov.w	r0, #0
 8005248:	f380 8811 	msr	BASEPRI, r0
 800524c:	bc09      	pop	{r0, r3}
 800524e:	6819      	ldr	r1, [r3, #0]
 8005250:	6808      	ldr	r0, [r1, #0]
 8005252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005256:	f01e 0f10 	tst.w	lr, #16
 800525a:	bf08      	it	eq
 800525c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005260:	f380 8809 	msr	PSP, r0
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	f3af 8000 	nop.w

08005270 <pxCurrentTCBConst>:
 8005270:	20000144 	.word	0x20000144
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
        __asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	607b      	str	r3, [r7, #4]
    }
 8005290:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005292:	f7fe ff0b 	bl	80040ac <xTaskIncrementTick>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800529c:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <SysTick_Handler+0x40>)
 800529e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	2300      	movs	r3, #0
 80052a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f383 8811 	msr	BASEPRI, r3
    }
 80052ae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052c0:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <vPortSetupTimerInterrupt+0x34>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052c6:	4b0b      	ldr	r3, [pc, #44]	@ (80052f4 <vPortSetupTimerInterrupt+0x38>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052cc:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <vPortSetupTimerInterrupt+0x3c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a0a      	ldr	r2, [pc, #40]	@ (80052fc <vPortSetupTimerInterrupt+0x40>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	4a09      	ldr	r2, [pc, #36]	@ (8005300 <vPortSetupTimerInterrupt+0x44>)
 80052da:	3b01      	subs	r3, #1
 80052dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052de:	4b04      	ldr	r3, [pc, #16]	@ (80052f0 <vPortSetupTimerInterrupt+0x34>)
 80052e0:	2207      	movs	r2, #7
 80052e2:	601a      	str	r2, [r3, #0]
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	e000e010 	.word	0xe000e010
 80052f4:	e000e018 	.word	0xe000e018
 80052f8:	20000000 	.word	0x20000000
 80052fc:	10624dd3 	.word	0x10624dd3
 8005300:	e000e014 	.word	0xe000e014

08005304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005304:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005314 <vPortEnableVFP+0x10>
 8005308:	6801      	ldr	r1, [r0, #0]
 800530a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800530e:	6001      	str	r1, [r0, #0]
 8005310:	4770      	bx	lr
 8005312:	0000      	.short	0x0000
 8005314:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop

0800531c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	@ 0x28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005324:	2300      	movs	r3, #0
 8005326:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005328:	f7fe fda6 	bl	8003e78 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800532c:	4b54      	ldr	r3, [pc, #336]	@ (8005480 <pvPortMalloc+0x164>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005334:	f000 f90c 	bl	8005550 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d012      	beq.n	8005364 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800533e:	2208      	movs	r2, #8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	3308      	adds	r3, #8
 800534a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	43db      	mvns	r3, r3
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	429a      	cmp	r2, r3
 8005354:	d804      	bhi.n	8005360 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	4413      	add	r3, r2
 800535c:	607b      	str	r3, [r7, #4]
 800535e:	e001      	b.n	8005364 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	db71      	blt.n	800544e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d06e      	beq.n	800544e <pvPortMalloc+0x132>
 8005370:	4b44      	ldr	r3, [pc, #272]	@ (8005484 <pvPortMalloc+0x168>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	d869      	bhi.n	800544e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800537a:	4b43      	ldr	r3, [pc, #268]	@ (8005488 <pvPortMalloc+0x16c>)
 800537c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800537e:	4b42      	ldr	r3, [pc, #264]	@ (8005488 <pvPortMalloc+0x16c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005384:	e004      	b.n	8005390 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	429a      	cmp	r2, r3
 8005398:	d903      	bls.n	80053a2 <pvPortMalloc+0x86>
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f1      	bne.n	8005386 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80053a2:	4b37      	ldr	r3, [pc, #220]	@ (8005480 <pvPortMalloc+0x164>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d050      	beq.n	800544e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2208      	movs	r2, #8
 80053b2:	4413      	add	r3, r2
 80053b4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	1ad2      	subs	r2, r2, r3
 80053c6:	2308      	movs	r3, #8
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d920      	bls.n	8005410 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4413      	add	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <pvPortMalloc+0xdc>
        __asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	613b      	str	r3, [r7, #16]
    }
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	1ad2      	subs	r2, r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800540a:	6978      	ldr	r0, [r7, #20]
 800540c:	f000 f8fc 	bl	8005608 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005410:	4b1c      	ldr	r3, [pc, #112]	@ (8005484 <pvPortMalloc+0x168>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	4a1a      	ldr	r2, [pc, #104]	@ (8005484 <pvPortMalloc+0x168>)
 800541c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800541e:	4b19      	ldr	r3, [pc, #100]	@ (8005484 <pvPortMalloc+0x168>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b1a      	ldr	r3, [pc, #104]	@ (800548c <pvPortMalloc+0x170>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d203      	bcs.n	8005432 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800542a:	4b16      	ldr	r3, [pc, #88]	@ (8005484 <pvPortMalloc+0x168>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a17      	ldr	r2, [pc, #92]	@ (800548c <pvPortMalloc+0x170>)
 8005430:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005444:	4b12      	ldr	r3, [pc, #72]	@ (8005490 <pvPortMalloc+0x174>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3301      	adds	r3, #1
 800544a:	4a11      	ldr	r2, [pc, #68]	@ (8005490 <pvPortMalloc+0x174>)
 800544c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800544e:	f7fe fd21 	bl	8003e94 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <pvPortMalloc+0x158>
        __asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	60fb      	str	r3, [r7, #12]
    }
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	e7fd      	b.n	8005470 <pvPortMalloc+0x154>
    return pvReturn;
 8005474:	69fb      	ldr	r3, [r7, #28]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3728      	adds	r7, #40	@ 0x28
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20012e90 	.word	0x20012e90
 8005484:	20012e94 	.word	0x20012e94
 8005488:	20012e88 	.word	0x20012e88
 800548c:	20012e98 	.word	0x20012e98
 8005490:	20012e9c 	.word	0x20012e9c

08005494 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d04b      	beq.n	800553e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80054a6:	2308      	movs	r3, #8
 80054a8:	425b      	negs	r3, r3
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4413      	add	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	db0b      	blt.n	80054d4 <vPortFree+0x40>
        __asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	60fb      	str	r3, [r7, #12]
    }
 80054ce:	bf00      	nop
 80054d0:	bf00      	nop
 80054d2:	e7fd      	b.n	80054d0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00b      	beq.n	80054f4 <vPortFree+0x60>
        __asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	60bb      	str	r3, [r7, #8]
    }
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	e7fd      	b.n	80054f0 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	0fdb      	lsrs	r3, r3, #31
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01c      	beq.n	800553e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d118      	bne.n	800553e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005518:	f7fe fcae 	bl	8003e78 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	4b09      	ldr	r3, [pc, #36]	@ (8005548 <vPortFree+0xb4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4413      	add	r3, r2
 8005526:	4a08      	ldr	r2, [pc, #32]	@ (8005548 <vPortFree+0xb4>)
 8005528:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800552a:	6938      	ldr	r0, [r7, #16]
 800552c:	f000 f86c 	bl	8005608 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005530:	4b06      	ldr	r3, [pc, #24]	@ (800554c <vPortFree+0xb8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	4a05      	ldr	r2, [pc, #20]	@ (800554c <vPortFree+0xb8>)
 8005538:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800553a:	f7fe fcab 	bl	8003e94 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800553e:	bf00      	nop
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20012e94 	.word	0x20012e94
 800554c:	20012ea0 	.word	0x20012ea0

08005550 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005556:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800555a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800555c:	4b25      	ldr	r3, [pc, #148]	@ (80055f4 <prvHeapInit+0xa4>)
 800555e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00c      	beq.n	8005584 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3307      	adds	r3, #7
 800556e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0307 	bic.w	r3, r3, #7
 8005576:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	4a1d      	ldr	r2, [pc, #116]	@ (80055f4 <prvHeapInit+0xa4>)
 8005580:	4413      	add	r3, r2
 8005582:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005588:	4a1b      	ldr	r2, [pc, #108]	@ (80055f8 <prvHeapInit+0xa8>)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800558e:	4b1a      	ldr	r3, [pc, #104]	@ (80055f8 <prvHeapInit+0xa8>)
 8005590:	2200      	movs	r2, #0
 8005592:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	4413      	add	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800559c:	2208      	movs	r2, #8
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0307 	bic.w	r3, r3, #7
 80055aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a13      	ldr	r2, [pc, #76]	@ (80055fc <prvHeapInit+0xac>)
 80055b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80055b2:	4b12      	ldr	r3, [pc, #72]	@ (80055fc <prvHeapInit+0xac>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2200      	movs	r2, #0
 80055b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80055ba:	4b10      	ldr	r3, [pc, #64]	@ (80055fc <prvHeapInit+0xac>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	1ad2      	subs	r2, r2, r3
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055d0:	4b0a      	ldr	r3, [pc, #40]	@ (80055fc <prvHeapInit+0xac>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a08      	ldr	r2, [pc, #32]	@ (8005600 <prvHeapInit+0xb0>)
 80055de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4a07      	ldr	r2, [pc, #28]	@ (8005604 <prvHeapInit+0xb4>)
 80055e6:	6013      	str	r3, [r2, #0]
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	20000288 	.word	0x20000288
 80055f8:	20012e88 	.word	0x20012e88
 80055fc:	20012e90 	.word	0x20012e90
 8005600:	20012e98 	.word	0x20012e98
 8005604:	20012e94 	.word	0x20012e94

08005608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005610:	4b28      	ldr	r3, [pc, #160]	@ (80056b4 <prvInsertBlockIntoFreeList+0xac>)
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	e002      	b.n	800561c <prvInsertBlockIntoFreeList+0x14>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	429a      	cmp	r2, r3
 8005624:	d8f7      	bhi.n	8005616 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4413      	add	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d108      	bne.n	800564a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	441a      	add	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	441a      	add	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d118      	bne.n	8005690 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4b15      	ldr	r3, [pc, #84]	@ (80056b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d00d      	beq.n	8005686 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	441a      	add	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e008      	b.n	8005698 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005686:	4b0c      	ldr	r3, [pc, #48]	@ (80056b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e003      	b.n	8005698 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	d002      	beq.n	80056a6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	20012e88 	.word	0x20012e88
 80056b8:	20012e90 	.word	0x20012e90

080056bc <memset>:
 80056bc:	4402      	add	r2, r0
 80056be:	4603      	mov	r3, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memset+0xa>
 80056c4:	4770      	bx	lr
 80056c6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ca:	e7f9      	b.n	80056c0 <memset+0x4>

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005704 <__libc_init_array+0x38>)
 80056d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005708 <__libc_init_array+0x3c>)
 80056d2:	1b64      	subs	r4, r4, r5
 80056d4:	10a4      	asrs	r4, r4, #2
 80056d6:	2600      	movs	r6, #0
 80056d8:	42a6      	cmp	r6, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	4d0b      	ldr	r5, [pc, #44]	@ (800570c <__libc_init_array+0x40>)
 80056de:	4c0c      	ldr	r4, [pc, #48]	@ (8005710 <__libc_init_array+0x44>)
 80056e0:	f000 f826 	bl	8005730 <_init>
 80056e4:	1b64      	subs	r4, r4, r5
 80056e6:	10a4      	asrs	r4, r4, #2
 80056e8:	2600      	movs	r6, #0
 80056ea:	42a6      	cmp	r6, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f4:	4798      	blx	r3
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fe:	4798      	blx	r3
 8005700:	3601      	adds	r6, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	080057bc 	.word	0x080057bc
 8005708:	080057bc 	.word	0x080057bc
 800570c:	080057bc 	.word	0x080057bc
 8005710:	080057c0 	.word	0x080057c0

08005714 <memcpy>:
 8005714:	440a      	add	r2, r1
 8005716:	4291      	cmp	r1, r2
 8005718:	f100 33ff 	add.w	r3, r0, #4294967295
 800571c:	d100      	bne.n	8005720 <memcpy+0xc>
 800571e:	4770      	bx	lr
 8005720:	b510      	push	{r4, lr}
 8005722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800572a:	4291      	cmp	r1, r2
 800572c:	d1f9      	bne.n	8005722 <memcpy+0xe>
 800572e:	bd10      	pop	{r4, pc}

08005730 <_init>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	bf00      	nop
 8005734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005736:	bc08      	pop	{r3}
 8005738:	469e      	mov	lr, r3
 800573a:	4770      	bx	lr

0800573c <_fini>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	bf00      	nop
 8005740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	469e      	mov	lr, r3
 8005746:	4770      	bx	lr
